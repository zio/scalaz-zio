package fix

import zio.stream.ZStream

object ZStreamPieces {
  ZStream.environmentWithStream
  val stream: ZStream[Any, Nothing, Unit] = ???
  stream.collectWhileZIO(???)
  stream.runFold(???)(???)
  stream.runFoldManaged(???)(???)
  stream.runFoldManagedZIO(???)(???)
  stream.runFoldWhile(???)(???)(???)
  stream.runFoldWhileZIO(???)(???)(???)
  stream.runFoldWhileManaged(???)(???)(???)
  stream.runFoldWhileManagedZIO(???)(???)(???)
  stream.runForeachChunk(???)
  stream.runForeachChunkManaged(???)
  stream.runForeachManaged(???)
  stream.runForeachWhile(???)
  stream.runForeachWhileManaged(???)
  stream.filterZIO(???)
  stream.runIntoHub(???)
  stream.runIntoHubManaged(???)
  stream.runIntoQueueManaged(???)
  stream.onExecutor(???)
  stream.mapAccumZIO(???)(???)
  stream.mapChunksZIO(???)
  stream.mapConcatChunkZIO(???)
  stream.mapConcatZIO(???)
  stream.mapZIO(???)
  stream.mapZIOPartitioned(???, ???)(???)
  stream.scanZIO(???)(???)
  stream.scanReduceZIO(???)
  stream.takeUntilZIO(???)
  stream.throttleEnforceZIO(???, ???, ???)(???)
  stream.throttleShapeZIO(???, ???, ???)(???)
  stream.timeoutFail(???)(???)
  stream.timeoutFailCause(???)(???)
  stream.whenZIO(???)
  ZStream.environment[String]
  ZStream.environmentWithZIO[String]
  ZStream.acquireReleaseWith(???)(???)
  ZStream.acquireReleaseExitWith(???)(???)
  ZStream.fromZIO(???)
//  ZStream.fromInputStreamEffect(???, ???) TODO Figure out why this isn't converting
  ZStream.fromIterableZIO(???)
  ZStream.fromIteratorZIO(???)
  ZStream.fromIteratorSucceed(???)
  ZStream.fromJavaIteratorZIO(???)
  ZStream.fromJavaIteratorSucceed(???)
  ZStream.failCause(???)
  ZStream.paginateChunkZIO(???)(???)
  ZStream.paginateZIO(???)(???)
  ZStream.repeatZIOChunkOption(???)
  ZStream.repeatWithSchedule(???, ???)
  ZStream.unfoldChunkZIO(???)(???)
  ZStream.unfoldZIO(???)(???)
  ZStream.whenCaseZIO(???)
}
