--- Execution profile ---
Total samples       : 1108

--- 800000000 ns (7.22%), 80 samples
  [ 0] __psynch_cvwait
  [ 1] PlatformEvent::park
  [ 2] ObjectMonitor::EnterI
  [ 3] ObjectMonitor::enter
  [ 4] ObjectSynchronizer::enter
  [ 5] SharedRuntime::monitor_enter_helper
  [ 6] JVMCIRuntime::monitorenter
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 680000000 ns (6.14%), 68 samples
  [ 0] java.util.Collections$SynchronizedCollection.add
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 540000000 ns (4.87%), 54 samples
  [ 0] __psynch_cvwait
  [ 1] PlatformEvent::park
  [ 2] ObjectMonitor::EnterI
  [ 3] ObjectMonitor::enter
  [ 4] ObjectSynchronizer::enter
  [ 5] SharedRuntime::monitor_enter_helper
  [ 6] JVMCIRuntime::monitorenter
  [ 7] java.util.WeakHashMap.put
  [ 8] java.util.Collections$SetFromMap.add
  [ 9] java.util.Collections$SynchronizedCollection.add
  [10] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [12] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [13] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [15] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [17] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.runWith
  [27] java.lang.Thread.run

--- 400000000 ns (3.61%), 40 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.WeakHashMap.put
  [ 6] java.util.Collections$SetFromMap.add
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 390000000 ns (3.52%), 39 samples
  [ 0] __psynch_cvsignal
  [ 1] ObjectMonitor::exit
  [ 2] SharedRuntime::monitor_exit_helper
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 370000000 ns (3.34%), 37 samples
  [ 0] G1ParScanThreadState::do_copy_to_survivor_space
  [ 1] G1ParScanThreadState::trim_queue_to_threshold
  [ 2] G1ScanHRForRegionClosure::scan_memregion
  [ 3] G1ScanHRForRegionClosure::scan_heap_roots
  [ 4] G1ScanHRForRegionClosure::do_heap_region
  [ 5] G1RemSet::scan_heap_roots
  [ 6] G1EvacuateRegionsTask::scan_roots
  [ 7] G1EvacuateRegionsBaseTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 300000000 ns (2.71%), 30 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 230000000 ns (2.08%), 23 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 210000000 ns (1.90%), 21 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 210000000 ns (1.90%), 21 samples
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 2] HeapWordImpl** HeapRegion::do_oops_on_memregion_in_humongous<G1ScanCardClosure, true>
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 200000000 ns (1.81%), 20 samples
  [ 0] G1CMTask::make_reference_grey
  [ 1] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::drain_local_queue
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 160000000 ns (1.44%), 16 samples
  [ 0] java.util.Collections$SynchronizedCollection.add
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 160000000 ns (1.44%), 16 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 150000000 ns (1.35%), 15 samples
  [ 0] void G1ScanEvacuatedObjClosure::do_oop_work<narrowOop>
  [ 1] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 2] G1ParScanThreadState::do_copy_to_survivor_space
  [ 3] G1ParScanThreadState::trim_queue_to_threshold
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 140000000 ns (1.26%), 14 samples
  [ 0] void G1ScanEvacuatedObjClosure::do_oop_work<narrowOop>
  [ 1] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 2] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 3] G1ParScanThreadState::do_copy_to_survivor_space
  [ 4] G1ParScanThreadState::trim_queue_to_threshold
  [ 5] G1ScanHRForRegionClosure::scan_memregion
  [ 6] G1ScanHRForRegionClosure::scan_heap_roots
  [ 7] G1ScanHRForRegionClosure::do_heap_region
  [ 8] G1RemSet::scan_heap_roots
  [ 9] G1EvacuateRegionsTask::scan_roots
  [10] G1EvacuateRegionsBaseTask::work
  [11] WorkerThread::run
  [12] Thread::call_run
  [13] thread_native_entry
  [14] _pthread_start
  [15] thread_start

--- 140000000 ns (1.26%), 14 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 130000000 ns (1.17%), 13 samples
  [ 0] java.lang.ref.Reference.<init>
  [ 1] java.lang.ref.WeakReference.<init>
  [ 2] java.util.WeakHashMap$Entry.<init>
  [ 3] java.util.WeakHashMap.put
  [ 4] java.util.Collections$SetFromMap.add
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 130000000 ns (1.17%), 13 samples
  [ 0] _platform_memset
  [ 1] G1CMConcurrentMarkingTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 120000000 ns (1.08%), 12 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 120000000 ns (1.08%), 12 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 1] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 110000000 ns (0.99%), 11 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 110000000 ns (0.99%), 11 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 100000000 ns (0.90%), 10 samples
  [ 0] pthread_jit_write_protect_np
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 100000000 ns (0.90%), 10 samples
  [ 0] __psynch_cvsignal
  [ 1] ObjectMonitor::exit
  [ 2] SharedRuntime::monitor_exit_helper
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 100000000 ns (0.90%), 10 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.WeakHashMap.put
  [ 7] java.util.Collections$SetFromMap.add
  [ 8] java.util.Collections$SynchronizedCollection.add
  [ 9] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [12] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.runWith
  [26] java.lang.Thread.run

--- 90000000 ns (0.81%), 9 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 1] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 2] G1ParScanThreadState::do_copy_to_survivor_space
  [ 3] G1ParScanThreadState::trim_queue_to_threshold
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 90000000 ns (0.81%), 9 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 80000000 ns (0.72%), 8 samples
  [ 0] AccessBarrierSupport::resolve_unknown_oop_ref_strength
  [ 1] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397414ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 397414ull>::oop_access_barrier
  [ 2] ReferenceProcessor::process_discovered_list_work
  [ 3] RefProcSoftWeakFinalPhaseTask::rp_work
  [ 4] G1STWRefProcProxyTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 80000000 ns (0.72%), 8 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 80000000 ns (0.72%), 8 samples
  [ 0] void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] G1ConcurrentMark::scan_root_region
  [ 2] G1CMRootRegionScanTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

--- 80000000 ns (0.72%), 8 samples
  [ 0] pthread_jit_write_protect_np
  [ 1] java.util.Collections$SynchronizedCollection.add
  [ 2] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 5] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.runWith
  [19] java.lang.Thread.run

--- 80000000 ns (0.72%), 8 samples
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::steal_best_of_2
  [ 1] G1ParScanThreadState::steal_and_trim_queue
  [ 2] G1ParEvacuateFollowersClosure::do_void
  [ 3] RefProcSoftWeakFinalPhaseTask::rp_work
  [ 4] G1STWRefProcProxyTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 70000000 ns (0.63%), 7 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold
  [ 1] G1ParScanThreadState::steal_and_trim_queue
  [ 2] G1ParEvacuateFollowersClosure::do_void
  [ 3] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 4] G1EvacuateRegionsBaseTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 70000000 ns (0.63%), 7 samples
  [ 0] void G1ScanEvacuatedObjClosure::do_oop_work<narrowOop>
  [ 1] G1ParScanThreadState::do_copy_to_survivor_space
  [ 2] G1ParScanThreadState::trim_queue_to_threshold
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 70000000 ns (0.63%), 7 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 60000000 ns (0.54%), 6 samples
  [ 0] java_lang_ref_Reference::is_referent_field
  [ 1] AccessBarrierSupport::resolve_unknown_oop_ref_strength
  [ 2] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397414ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 397414ull>::oop_access_barrier
  [ 3] ReferenceProcessor::process_discovered_list_work
  [ 4] RefProcSoftWeakFinalPhaseTask::rp_work
  [ 5] G1STWRefProcProxyTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 60000000 ns (0.54%), 6 samples
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] HeapWordImpl** HeapRegion::do_oops_on_memregion_in_humongous<G1ScanCardClosure, true>
  [ 2] G1ScanHRForRegionClosure::scan_memregion
  [ 3] G1ScanHRForRegionClosure::scan_heap_roots
  [ 4] G1ScanHRForRegionClosure::do_heap_region
  [ 5] G1RemSet::scan_heap_roots
  [ 6] G1EvacuateRegionsTask::scan_roots
  [ 7] G1EvacuateRegionsBaseTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 60000000 ns (0.54%), 6 samples
  [ 0] pthread_jit_write_protect_np
  [ 1] JVMCIRuntime::monitorenter
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 60000000 ns (0.54%), 6 samples
  [ 0] __psynch_cvwait
  [ 1] PlatformMonitor::wait
  [ 2] Monitor::wait_without_safepoint_check
  [ 3] TaskTerminator::offer_termination
  [ 4] G1ParEvacuateFollowersClosure::do_void
  [ 5] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 50000000 ns (0.45%), 5 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] ReferenceProcessor::process_discovered_list_work
  [ 1] RefProcSoftWeakFinalPhaseTask::rp_work
  [ 2] G1STWRefProcProxyTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

--- 50000000 ns (0.45%), 5 samples
  [ 0] java.lang.ref.Reference.<init>
  [ 1] java.lang.ref.WeakReference.<init>
  [ 2] java.util.WeakHashMap$Entry.<init>
  [ 3] java.util.WeakHashMap.put
  [ 4] java.util.Collections$SetFromMap.add
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] pthread_jit_write_protect_np
  [ 1] JVMCIRuntime::monitorenter
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] ObjectMonitor::exit
  [ 1] SharedRuntime::monitor_exit_helper
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] __psynch_cvwait
  [ 1] PlatformEvent::park
  [ 2] ObjectMonitor::EnterI
  [ 3] ObjectMonitor::enter
  [ 4] ObjectSynchronizer::enter
  [ 5] SharedRuntime::monitor_enter_helper
  [ 6] JVMCIRuntime::monitorenter
  [ 7] java.util.WeakHashMap.put
  [ 8] java.util.Collections$SetFromMap.add
  [ 9] java.util.Collections$SynchronizedCollection.add
  [10] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [12] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [13] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [15] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [17] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.runWith
  [27] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 50000000 ns (0.45%), 5 samples
  [ 0] ObjectMonitor::enter
  [ 1] ObjectSynchronizer::enter
  [ 2] SharedRuntime::monitor_enter_helper
  [ 3] JVMCIRuntime::monitorenter
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold
  [ 1] G1ScanHRForRegionClosure::scan_memregion
  [ 2] G1ScanHRForRegionClosure::scan_heap_roots
  [ 3] G1ScanHRForRegionClosure::do_heap_region
  [ 4] G1RemSet::scan_heap_roots
  [ 5] G1EvacuateRegionsTask::scan_roots
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 50000000 ns (0.45%), 5 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.WeakHashMap.put
  [ 7] java.util.Collections$SetFromMap.add
  [ 8] java.util.Collections$SynchronizedCollection.add
  [ 9] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [12] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.runWith
  [26] java.lang.Thread.run

--- 50000000 ns (0.45%), 5 samples
  [ 0] G1ParScanThreadState::do_copy_to_survivor_space
  [ 1] G1ParScanThreadState::trim_queue_to_threshold
  [ 2] G1ParScanThreadState::steal_and_trim_queue
  [ 3] G1ParEvacuateFollowersClosure::do_void
  [ 4] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 5] G1EvacuateRegionsBaseTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] ObjectMonitor::enter
  [ 1] ObjectSynchronizer::enter
  [ 2] SharedRuntime::monitor_enter_helper
  [ 3] JVMCIRuntime::monitorenter
  [ 4] java.util.WeakHashMap.put
  [ 5] java.util.Collections$SetFromMap.add
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
  [ 3] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 4] HeapRegionManager::par_iterate
  [ 5] G1RebuildRSAndScrubTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold
  [ 1] G1ParEvacuateFollowersClosure::do_void
  [ 2] RefProcSoftWeakFinalPhaseTask::rp_work
  [ 3] G1STWRefProcProxyTask::work
  [ 4] WorkerThread::run
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] java.util.Collections$SynchronizedCollection.add
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMTask::drain_local_queue
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] SpinPause
  [ 1] TaskTerminator::offer_termination
  [ 2] G1ParEvacuateFollowersClosure::do_void
  [ 3] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 4] G1EvacuateRegionsBaseTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 1] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] GenericTaskQueueSet<GenericTaskQueue<G1TaskQueueEntry, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::steal_best_of_2
  [ 1] G1CMTask::do_marking_step
  [ 2] G1CMConcurrentMarkingTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 1] G1ScanHRForRegionClosure::scan_memregion
  [ 2] G1ScanHRForRegionClosure::scan_heap_roots
  [ 3] G1ScanHRForRegionClosure::do_heap_region
  [ 4] G1RemSet::scan_heap_roots
  [ 5] G1EvacuateRegionsTask::scan_roots
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] __psynch_mutexwait
  [ 1] _pthread_mutex_firstfit_lock_slow
  [ 2] Mutex::lock_without_safepoint_check
  [ 3] G1CMMarkStack::par_pop_chunk
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] G1PostEvacuateCollectionSetCleanupTask2::RedirtyLoggedCardsTask::do_work
  [ 1] G1BatchedTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 40000000 ns (0.36%), 4 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 40000000 ns (0.36%), 4 samples
  [ 0] void G1CMTask::process_grey_task_entry<true>
  [ 1] G1CMBitMapClosure::do_addr
  [ 2] G1CMBitMap::iterate
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.WeakHashMap.put
  [ 7] java.util.Collections$SetFromMap.add
  [ 8] java.util.Collections$SynchronizedCollection.add
  [ 9] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [12] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.runWith
  [26] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMBitMapClosure::do_addr
  [ 3] G1CMBitMap::iterate
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanCardClosure, AlwaysContains>
  [ 2] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.WeakHashMap.put
  [ 6] java.util.Collections$SetFromMap.add
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 1] G1ParScanThreadState::do_copy_to_survivor_space
  [ 2] G1ParScanThreadState::trim_queue_to_threshold
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] _SafeFetch32_fault
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.WeakHashMap.put
  [ 7] java.util.Collections$SetFromMap.add
  [ 8] java.util.Collections$SynchronizedCollection.add
  [ 9] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [12] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.runWith
  [26] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.WeakHashMap.put
  [ 6] java.util.Collections$SetFromMap.add
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanCardClosure, AlwaysContains>
  [ 1] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1RootRegionScanClosure, AlwaysContains>
  [ 2] void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] G1ConcurrentMark::scan_root_region
  [ 4] G1CMRootRegionScanTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] java.util.WeakHashMap$Entry.<init>
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] jdk.internal.misc.Unsafe.compareAndSetReference
  [ 1] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 2] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 4] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 5] zio.internal.AddContext.createCachedKey
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] __psynch_cvwait
  [ 1] PlatformEvent::park
  [ 2] ObjectMonitor::EnterI
  [ 3] ObjectMonitor::enter
  [ 4] ObjectSynchronizer::enter
  [ 5] SharedRuntime::monitor_enter_helper
  [ 6] JVMCIRuntime::monitorenter
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMTask::drain_local_queue
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] ObjectMonitor::TrySpin
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 2] G1ScanHRForRegionClosure::scan_memregion
  [ 3] G1ScanHRForRegionClosure::scan_heap_roots
  [ 4] G1ScanHRForRegionClosure::do_heap_region
  [ 5] G1RemSet::scan_heap_roots
  [ 6] G1EvacuateRegionsTask::scan_roots
  [ 7] G1EvacuateRegionsBaseTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] java.util.WeakHashMap.indexFor
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 30000000 ns (0.27%), 3 samples
  [ 0] RedirtyLoggedCardTableEntryClosure::do_card_ptr
  [ 1] G1PostEvacuateCollectionSetCleanupTask2::RedirtyLoggedCardsTask::do_work
  [ 2] G1BatchedTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

--- 30000000 ns (0.27%), 3 samples
  [ 0] SafeFetchN_impl
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.WeakHashMap.put
  [ 7] java.util.Collections$SetFromMap.add
  [ 8] java.util.Collections$SynchronizedCollection.add
  [ 9] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [12] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.runWith
  [26] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 2] G1ScanHRForRegionClosure::scan_memregion
  [ 3] G1ScanHRForRegionClosure::scan_heap_roots
  [ 4] G1ScanHRForRegionClosure::do_heap_region
  [ 5] G1RemSet::scan_heap_roots
  [ 6] G1EvacuateRegionsTask::scan_roots
  [ 7] G1EvacuateRegionsBaseTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] ObjectSynchronizer::quick_enter
  [ 1] SharedRuntime::monitor_enter_helper
  [ 2] JVMCIRuntime::monitorenter
  [ 3] java.util.WeakHashMap.put
  [ 4] java.util.Collections$SetFromMap.add
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap$Entry.<init>
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] ObjectSynchronizer::quick_enter
  [ 1] JVMCIRuntime::monitorenter
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
  [ 1] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::drain_local_queue
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] __psynch_mutexwait
  [ 1] _pthread_mutex_firstfit_lock_slow
  [ 2] Mutex::lock_without_safepoint_check
  [ 3] TaskTerminator::offer_termination
  [ 4] G1ParEvacuateFollowersClosure::do_void
  [ 5] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 2] HeapRegionManager::par_iterate
  [ 3] G1RebuildRSAndScrubTask::work
  [ 4] WorkerThread::run
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::drain_local_queue
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanCardClosure, AlwaysContains>
  [ 1] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] HeapWordImpl** HeapRegion::oops_on_memregion_iterate_in_unparsable<G1ScanCardClosure>
  [ 3] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::scan_root_region
  [ 1] G1CMRootRegionScanTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 1] G1ParScanThreadState::do_copy_to_survivor_space
  [ 2] G1ParScanThreadState::trim_queue_to_threshold
  [ 3] G1ScanHRForRegionClosure::scan_memregion
  [ 4] G1ScanHRForRegionClosure::scan_heap_roots
  [ 5] G1ScanHRForRegionClosure::do_heap_region
  [ 6] G1RemSet::scan_heap_roots
  [ 7] G1EvacuateRegionsTask::scan_roots
  [ 8] G1EvacuateRegionsBaseTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] SpinPause
  [ 1] ObjectMonitor::TrySpin
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 1] G1CMRootRegionScanTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] G1ScanHRForRegionClosure::scan_memregion
  [ 2] G1ScanHRForRegionClosure::scan_heap_roots
  [ 3] G1ScanHRForRegionClosure::do_heap_region
  [ 4] G1RemSet::scan_heap_roots
  [ 5] G1EvacuateRegionsTask::scan_roots
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.lang.ref.ReferenceQueue.headIsNull
  [ 1] java.lang.ref.ReferenceQueue.poll
  [ 2] java.util.WeakHashMap.expungeStaleEntries
  [ 3] java.util.WeakHashMap.getTable
  [ 4] java.util.WeakHashMap.put
  [ 5] java.util.Collections$SetFromMap.add
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void G1CMTask::process_grey_task_entry<true>
  [ 1] G1CMTask::drain_local_queue
  [ 2] G1CMTask::do_marking_step
  [ 3] G1CMConcurrentMarkingTask::work
  [ 4] WorkerThread::run
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.lang.ref.Reference.<init>
  [ 1] java.lang.ref.WeakReference.<init>
  [ 2] java.util.WeakHashMap$Entry.<init>
  [ 3] java.util.WeakHashMap.put
  [ 4] java.util.Collections$SetFromMap.add
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] zio.internal.BaseContext.javaSet
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1SATBMarkQueueSet::filter
  [ 1] SATBMarkQueueSet::enqueue_known_active
  [ 2] java.util.WeakHashMap.transfer
  [ 3] java.util.WeakHashMap.resize
  [ 4] java.util.WeakHashMap.put
  [ 5] java.util.Collections$SetFromMap.add
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 1] G1CMObjArrayProcessor::process_slice
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] SafeFetchN_impl
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.WeakHashMap.put
  [ 6] java.util.Collections$SetFromMap.add
  [ 7] java.util.Collections$SynchronizedCollection.add
  [ 8] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [10] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [11] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [13] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [15] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.runWith
  [25] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] jdk.internal.misc.Unsafe.weakCompareAndSetReference
  [ 1] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.weakCompareAndSet
  [ 2] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 4] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 5] zio.internal.AddContext.createCachedKey
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] ReferenceProcessor::discover_reference
  [ 1] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMTask::drain_local_queue
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
  [ 2] G1RemSet::refine_card_concurrently
  [ 3] G1DirtyCardQueueSet::refine_buffer
  [ 4] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 5] G1PrimaryConcurrentRefineThread::do_refinement_step
  [ 6] G1ConcurrentRefineThread::run_service
  [ 7] ConcurrentGCThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMBitMapClosure::do_addr
  [ 5] G1CMBitMap::iterate
  [ 6] G1CMTask::do_marking_step
  [ 7] G1CMConcurrentMarkingTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1CMTask::drain_local_queue
  [ 1] G1CMTask::do_marking_step
  [ 2] G1CMConcurrentMarkingTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] SafeFetchN_impl
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 1] G1CMObjArrayProcessor::process_slice
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::drain_local_queue
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] ObjectSynchronizer::quick_enter
  [ 1] SharedRuntime::monitor_enter_helper
  [ 2] JVMCIRuntime::monitorenter
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMTask::drain_local_queue
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] __psynch_mutexdrop
  [ 1] _pthread_mutex_firstfit_unlock_slow
  [ 2] G1CMMarkStack::par_pop_chunk
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 1] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMTask::drain_local_queue
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 3] G1CMObjArrayProcessor::process_slice
  [ 4] void G1CMTask::process_grey_task_entry<true>
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 3] G1CMObjArrayProcessor::process_slice
  [ 4] void G1CMTask::process_grey_task_entry<true>
  [ 5] G1CMTask::drain_local_queue
  [ 6] G1CMTask::do_marking_step
  [ 7] G1CMConcurrentMarkingTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] ReferenceProcessor::discover_reference
  [ 1] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 2] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 3] G1ParScanThreadState::do_copy_to_survivor_space
  [ 4] G1ParScanThreadState::trim_queue_to_threshold
  [ 5] G1ScanHRForRegionClosure::scan_memregion
  [ 6] G1ScanHRForRegionClosure::scan_heap_roots
  [ 7] G1ScanHRForRegionClosure::do_heap_region
  [ 8] G1RemSet::scan_heap_roots
  [ 9] G1EvacuateRegionsTask::scan_roots
  [10] G1EvacuateRegionsBaseTask::work
  [11] WorkerThread::run
  [12] Thread::call_run
  [13] thread_native_entry
  [14] _pthread_start
  [15] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] jdk.internal.misc.Unsafe.getAndAddInt
  [ 1] java.util.concurrent.atomic.AtomicInteger.incrementAndGet
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1ParScanThreadState::do_copy_to_survivor_space
  [ 1] G1ScanHRForRegionClosure::scan_memregion
  [ 2] G1ScanHRForRegionClosure::scan_heap_roots
  [ 3] G1ScanHRForRegionClosure::do_heap_region
  [ 4] G1RemSet::scan_heap_roots
  [ 5] G1EvacuateRegionsTask::scan_roots
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 20000000 ns (0.18%), 2 samples
  [ 0] G1CMBitMapClosure::do_addr
  [ 1] G1CMBitMap::iterate
  [ 2] G1CMTask::do_marking_step
  [ 3] G1CMConcurrentMarkingTask::work
  [ 4] WorkerThread::run
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 20000000 ns (0.18%), 2 samples
  [ 0] void G1ScanEvacuatedObjClosure::do_oop_work<narrowOop>
  [ 1] G1ParScanThreadState::do_copy_to_survivor_space
  [ 2] G1ParScanThreadState::trim_queue_to_threshold
  [ 3] G1ParScanThreadState::steal_and_trim_queue
  [ 4] G1ParEvacuateFollowersClosure::do_void
  [ 5] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 6] G1EvacuateRegionsBaseTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.hash
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.Collections$SynchronizedCollection.add
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] SymbolTable::lookup_shared
  [ 1] SymbolTable::new_symbol
  [ 2] ciEnv::get_klass_by_name_impl
  [ 3] ciEnv::get_klass_by_index_impl
  [ 4] ciField::ciField
  [ 5] ciEnv::get_field_by_index_impl
  [ 6] ciEnv::get_field_by_index
  [ 7] ciBytecodeStream::get_field
  [ 8] GraphBuilder::access_field
  [ 9] GraphBuilder::iterate_bytecodes_for_block
  [10] GraphBuilder::iterate_all_blocks
  [11] GraphBuilder::try_inline_full
  [12] GraphBuilder::try_inline
  [13] GraphBuilder::invoke
  [14] GraphBuilder::iterate_bytecodes_for_block
  [15] GraphBuilder::iterate_all_blocks
  [16] GraphBuilder::try_inline_full
  [17] GraphBuilder::try_inline
  [18] GraphBuilder::try_method_handle_inline
  [19] GraphBuilder::try_inline
  [20] GraphBuilder::invoke
  [21] GraphBuilder::iterate_bytecodes_for_block
  [22] GraphBuilder::iterate_all_blocks
  [23] GraphBuilder::try_inline_full
  [24] GraphBuilder::try_inline
  [25] GraphBuilder::invoke
  [26] GraphBuilder::iterate_bytecodes_for_block
  [27] GraphBuilder::iterate_all_blocks
  [28] GraphBuilder::try_inline_full
  [29] GraphBuilder::try_inline
  [30] GraphBuilder::invoke
  [31] GraphBuilder::iterate_bytecodes_for_block
  [32] GraphBuilder::iterate_all_blocks
  [33] GraphBuilder::GraphBuilder
  [34] IRScope::IRScope
  [35] IR::IR
  [36] Compilation::build_hir
  [37] Compilation::compile_java_method
  [38] Compilation::compile_method
  [39] Compilation::Compilation
  [40] Compiler::compile_method
  [41] CompileBroker::invoke_compiler_on_method
  [42] CompileBroker::compiler_thread_loop
  [43] JavaThread::thread_main_inner
  [44] Thread::call_run
  [45] thread_native_entry
  [46] _pthread_start
  [47] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 1] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 2] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 3] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 4] G1DirtyCardQueueSet::refine_buffer
  [ 5] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 6] G1PrimaryConcurrentRefineThread::do_refinement_step
  [ 7] G1ConcurrentRefineThread::run_service
  [ 8] ConcurrentGCThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] PlatformMonitor::wait
  [ 2] Monitor::wait_without_safepoint_check
  [ 3] MonitorDeflationThread::monitor_deflation_thread_entry
  [ 4] JavaThread::thread_main_inner
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] ReferenceProcessor::discover_reference
  [ 1] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 2] G1ParScanThreadState::do_copy_to_survivor_space
  [ 3] G1ParScanThreadState::trim_queue_to_threshold
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMTask::drain_local_queue
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] RedirtyLoggedCardTableEntryClosure::do_card_ptr
  [ 1] G1BatchedTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] SafeFetchN_impl
  [ 1] ObjectMonitor::enter
  [ 2] ObjectSynchronizer::enter
  [ 3] SharedRuntime::monitor_enter_helper
  [ 4] JVMCIRuntime::monitorenter
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.lang.ref.Reference.<init>
  [ 1] java.lang.ref.WeakReference.<init>
  [ 2] java.util.WeakHashMap$Entry.<init>
  [ 3] java.util.WeakHashMap.put
  [ 4] java.util.Collections$SetFromMap.add
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] SafeFetchN_impl
  [ 1] ObjectMonitor::EnterI
  [ 2] ObjectMonitor::enter
  [ 3] ObjectSynchronizer::enter
  [ 4] SharedRuntime::monitor_enter_helper
  [ 5] JVMCIRuntime::monitorenter
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] HeapRegion::block_size
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
  [ 2] G1RemSet::refine_card_concurrently
  [ 3] G1DirtyCardQueueSet::refine_buffer
  [ 4] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 5] G1PrimaryConcurrentRefineThread::do_refinement_step
  [ 6] G1ConcurrentRefineThread::run_service
  [ 7] ConcurrentGCThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 3] HeapRegionManager::par_iterate
  [ 4] G1RebuildRSAndScrubTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 1] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.expungeStaleEntries
  [ 1] java.util.WeakHashMap.getTable
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] G1CMTask::make_reference_grey
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMBitMapClosure::do_addr
  [ 5] G1CMBitMap::iterate
  [ 6] G1CMTask::do_marking_step
  [ 7] G1CMConcurrentMarkingTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMTask::drain_local_queue
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CardSetHashTable::get_or_add
  [ 1] G1CardSet::add_card
  [ 2] G1CardSet::transfer_cards_in_howl
  [ 3] G1CardSet::add_to_howl
  [ 4] G1CardSet::add_card
  [ 5] void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 6] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 7] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
  [ 8] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 9] HeapRegionManager::par_iterate
  [10] G1RebuildRSAndScrubTask::work
  [11] WorkerThread::run
  [12] Thread::call_run
  [13] thread_native_entry
  [14] _pthread_start
  [15] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] AccessBarrierSupport::resolve_unknown_oop_ref_strength
  [ 1] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397414ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 397414ull>::oop_access_barrier
  [ 2] ReferenceProcessor::discover_reference
  [ 3] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 4] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 5] G1ParScanThreadState::do_copy_to_survivor_space
  [ 6] G1ParScanThreadState::trim_queue_to_threshold
  [ 7] G1ScanHRForRegionClosure::scan_memregion
  [ 8] G1ScanHRForRegionClosure::scan_heap_roots
  [ 9] G1ScanHRForRegionClosure::do_heap_region
  [10] G1RemSet::scan_heap_roots
  [11] G1EvacuateRegionsTask::scan_roots
  [12] G1EvacuateRegionsBaseTask::work
  [13] WorkerThread::run
  [14] Thread::call_run
  [15] thread_native_entry
  [16] _pthread_start
  [17] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 2] HeapRegionManager::par_iterate
  [ 3] G1RebuildRSAndScrubTask::work
  [ 4] WorkerThread::run
  [ 5] Thread::call_run
  [ 6] thread_native_entry
  [ 7] _pthread_start
  [ 8] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] JVMCIRuntime::monitorenter
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286822ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 286822ull>::oop_access_barrier
  [ 1] ReferenceProcessor::discover_reference
  [ 2] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
  [ 3] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 4] void G1CMTask::process_grey_task_entry<true>
  [ 5] G1CMBitMapClosure::do_addr
  [ 6] G1CMBitMap::iterate
  [ 7] G1CMTask::do_marking_step
  [ 8] G1CMConcurrentMarkingTask::work
  [ 9] WorkerThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 1] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 2] zio.internal.AddContext.createCachedKey
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 1] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 2] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 3] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 4] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 5] void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
  [ 6] G1DirtyCardQueueSet::refine_buffer
  [ 7] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 8] G1ConcurrentRefineThread::run_service
  [ 9] ConcurrentGCThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CMTask::make_reference_grey
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMBitMapClosure::do_addr
  [ 3] G1CMBitMap::iterate
  [ 4] G1CMTask::do_marking_step
  [ 5] G1CMConcurrentMarkingTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 1] G1CMBitMapClosure::do_addr
  [ 2] G1CMBitMap::iterate
  [ 3] G1CMTask::do_marking_step
  [ 4] G1CMConcurrentMarkingTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park
  [ 2] Unsafe_Park
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.park
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
  [ 6] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly
  [ 7] java.util.concurrent.CountDownLatch.await
  [ 8] org.openjdk.jmh.runner.InfraControlL2.awaitWarmupReady
  [ 9] org.openjdk.jmh.runner.InfraControl.awaitWarmupReady
  [10] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [11] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.doSingle
  [14] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [15] org.openjdk.jmh.runner.ForkedRunner.run
  [16] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.09%), 1 sample
  [ 0] pthread_jit_write_protect_np
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 2] G1CMObjArrayProcessor::process_slice
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMTask::drain_local_queue
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.transfer
  [ 1] java.util.WeakHashMap.resize
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] ObjectMonitor::enter
  [ 1] ObjectSynchronizer::enter
  [ 2] SharedRuntime::monitor_enter_helper
  [ 3] JVMCIRuntime::monitorenter
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] G1CMRootRegionScanTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 3] HeapRegionManager::par_iterate
  [ 4] G1RebuildRSAndScrubTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.compareAndSetReference
  [ 1] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 2] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.offer
  [ 4] java.util.concurrent.ConcurrentLinkedQueue.add
  [ 5] zio.internal.AddContext.createCachedKey
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] __psynch_cvsignal
  [ 1] TaskTerminator::offer_termination
  [ 2] G1ParEvacuateFollowersClosure::do_void
  [ 3] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 4] G1EvacuateRegionsBaseTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
  [ 3] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 4] HeapRegionManager::par_iterate
  [ 5] G1RebuildRSAndScrubTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] ZThread::~ZThread
  [ 1] java.util.Collections$SynchronizedCollection.add
  [ 2] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 5] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.runWith
  [19] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] zio.internal.AddContext.createCachedKey
  [ 1] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 3] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 4] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 8] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.runWith
  [18] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
  [ 2] G1RemSet::refine_card_concurrently
  [ 3] G1DirtyCardQueueSet::refine_buffer
  [ 4] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 5] G1ConcurrentRefineThread::run_service
  [ 6] ConcurrentGCThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] SpinPause
  [ 1] ObjectMonitor::TrySpin
  [ 2] ObjectMonitor::EnterI
  [ 3] ObjectMonitor::enter
  [ 4] ObjectSynchronizer::enter
  [ 5] SharedRuntime::monitor_enter_helper
  [ 6] JVMCIRuntime::monitorenter
  [ 7] java.util.WeakHashMap.put
  [ 8] java.util.Collections$SetFromMap.add
  [ 9] java.util.Collections$SynchronizedCollection.add
  [10] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [11] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [12] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [13] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [14] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [15] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [16] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [17] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.runWith
  [27] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] ReferenceProcessor::discover_reference
  [ 1] void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
  [ 2] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] void G1CMTask::process_grey_task_entry<true>
  [ 4] G1CMBitMapClosure::do_addr
  [ 5] G1CMBitMap::iterate
  [ 6] G1CMTask::do_marking_step
  [ 7] G1CMConcurrentMarkingTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.hash
  [ 1] java.util.WeakHashMap.put
  [ 2] java.util.Collections$SetFromMap.add
  [ 3] java.util.Collections$SynchronizedCollection.add
  [ 4] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 7] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.WeakHashMap.put
  [ 1] java.util.Collections$SetFromMap.add
  [ 2] java.util.Collections$SynchronizedCollection.add
  [ 3] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 4] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 5] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 6] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 7] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 8] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 9] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [10] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.runWith
  [20] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CardSet::add_card
  [ 1] void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 3] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 4] HeapRegionManager::par_iterate
  [ 5] G1RebuildRSAndScrubTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] HeapWordImpl** HeapRegion::oops_on_memregion_iterate_in_unparsable<G1ScanCardClosure>
  [ 1] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 2] G1ScanHRForRegionClosure::scan_memregion
  [ 3] G1ScanHRForRegionClosure::scan_heap_roots
  [ 4] G1ScanHRForRegionClosure::do_heap_region
  [ 5] G1RemSet::scan_heap_roots
  [ 6] G1EvacuateRegionsTask::scan_roots
  [ 7] G1EvacuateRegionsBaseTask::work
  [ 8] WorkerThread::run
  [ 9] Thread::call_run
  [10] thread_native_entry
  [11] _pthread_start
  [12] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void InstanceRefKlass::oop_oop_iterate_fields<narrowOop, G1RebuildRemSetClosure, AlwaysContains>
  [ 1] void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 3] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 4] HeapRegionManager::par_iterate
  [ 5] G1RebuildRSAndScrubTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] java.util.concurrent.ConcurrentHashMap.put
  [ 1] org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData
  [ 2] org.openjdk.jmh.runner.BenchmarkHandler.access$300
  [ 3] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 4] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 5] java.util.concurrent.FutureTask.run
  [ 6] java.util.concurrent.Executors$RunnableAdapter.call
  [ 7] java.util.concurrent.FutureTask.run
  [ 8] java.util.concurrent.ThreadPoolExecutor.runWorker
  [ 9] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [10] java.lang.Thread.runWith
  [11] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<299110ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 299110ull>::oop_access_barrier
  [ 1] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 2] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 3] G1ParScanThreadState::do_copy_to_survivor_space
  [ 4] G1ParScanThreadState::trim_queue_to_threshold
  [ 5] G1ScanHRForRegionClosure::scan_memregion
  [ 6] G1ScanHRForRegionClosure::scan_heap_roots
  [ 7] G1ScanHRForRegionClosure::do_heap_region
  [ 8] G1RemSet::scan_heap_roots
  [ 9] G1EvacuateRegionsTask::scan_roots
  [10] G1EvacuateRegionsBaseTask::work
  [11] WorkerThread::run
  [12] Thread::call_run
  [13] thread_native_entry
  [14] _pthread_start
  [15] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 1] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 2] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 3] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 4] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [ 5] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [ 6] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [ 7] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.runWith
  [17] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] __psynch_mutexwait
  [ 1] _pthread_mutex_firstfit_lock_slow
  [ 2] PlatformEvent::unpark
  [ 3] ObjectMonitor::exit
  [ 4] SharedRuntime::monitor_exit_helper
  [ 5] java.util.Collections$SynchronizedCollection.add
  [ 6] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 9] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.runWith
  [23] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] scala.runtime.Statics.avalanche
  [ 1] scala.runtime.Statics.finalizeHash
  [ 2] zio.internal.TestKey.hashCode
  [ 3] java.util.WeakHashMap.hash
  [ 4] java.util.WeakHashMap.put
  [ 5] java.util.Collections$SetFromMap.add
  [ 6] java.util.Collections$SynchronizedCollection.add
  [ 7] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 8] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 9] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [10] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [11] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [12] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [13] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [14] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.runWith
  [24] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::tasks
  [ 1] TaskTerminator::offer_termination
  [ 2] G1ParEvacuateFollowersClosure::do_void
  [ 3] G1EvacuateRegionsBaseTask::evacuate_live_objects
  [ 4] G1EvacuateRegionsBaseTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1RebuildRemSetClosure, AlwaysContains>
  [ 1] void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
  [ 3] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_region
  [ 4] HeapRegionManager::par_iterate
  [ 5] G1RebuildRSAndScrubTask::work
  [ 6] WorkerThread::run
  [ 7] Thread::call_run
  [ 8] thread_native_entry
  [ 9] _pthread_start
  [10] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void G1ScanCardClosure::do_oop_work<narrowOop>
  [ 1] void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 2] HeapWordImpl** HeapRegion::oops_on_memregion_iterate_in_unparsable<G1ScanCardClosure>
  [ 3] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
  [ 4] G1ScanHRForRegionClosure::scan_memregion
  [ 5] G1ScanHRForRegionClosure::scan_heap_roots
  [ 6] G1ScanHRForRegionClosure::do_heap_region
  [ 7] G1RemSet::scan_heap_roots
  [ 8] G1EvacuateRegionsTask::scan_roots
  [ 9] G1EvacuateRegionsBaseTask::work
  [10] WorkerThread::run
  [11] Thread::call_run
  [12] thread_native_entry
  [13] _pthread_start
  [14] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
  [ 1] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_large_object
  [ 2] G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_humongous_region
  [ 3] HeapRegionManager::par_iterate
  [ 4] G1RebuildRSAndScrubTask::work
  [ 5] WorkerThread::run
  [ 6] Thread::call_run
  [ 7] thread_native_entry
  [ 8] _pthread_start
  [ 9] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CardSet::add_to_container
  [ 1] G1CardSet::add_card
  [ 2] void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
  [ 4] G1RemSet::refine_card_concurrently
  [ 5] G1DirtyCardQueueSet::refine_buffer
  [ 6] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 7] G1PrimaryConcurrentRefineThread::do_refinement_step
  [ 8] G1ConcurrentRefineThread::run_service
  [ 9] ConcurrentGCThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1ScanEvacuatedObjClosure::reference_iteration_mode
  [ 1] void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
  [ 2] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
  [ 3] G1ParScanThreadState::do_copy_to_survivor_space
  [ 4] G1ParScanThreadState::trim_queue_to_threshold
  [ 5] G1ScanHRForRegionClosure::scan_memregion
  [ 6] G1ScanHRForRegionClosure::scan_heap_roots
  [ 7] G1ScanHRForRegionClosure::do_heap_region
  [ 8] G1RemSet::scan_heap_roots
  [ 9] G1EvacuateRegionsTask::scan_roots
  [10] G1EvacuateRegionsBaseTask::work
  [11] WorkerThread::run
  [12] Thread::call_run
  [13] thread_native_entry
  [14] _pthread_start
  [15] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1PrecleanYieldClosure::should_return_fine_grain
  [ 1] ReferenceProcessor::preclean_discovered_references
  [ 2] G1ConcurrentMark::preclean
  [ 3] G1ConcurrentMarkThread::subphase_preclean
  [ 4] G1ConcurrentMarkThread::phase_mark_loop
  [ 5] G1ConcurrentMarkThread::concurrent_mark_cycle_do
  [ 6] G1ConcurrentMarkThread::run_service
  [ 7] ConcurrentGCThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1ConcurrentMark::mark_in_bitmap
  [ 1] void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
  [ 2] void G1CMTask::process_grey_task_entry<true>
  [ 3] G1CMBitMapClosure::do_addr
  [ 4] G1CMBitMap::iterate
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CardSet::add_to_howl
  [ 1] G1CardSet::add_card
  [ 2] void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
  [ 3] HeapWordImpl** HeapRegion::oops_on_memregion_iterate_in_unparsable<G1ConcurrentRefineOopClosure>
  [ 4] HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
  [ 5] G1RemSet::refine_card_concurrently
  [ 6] G1DirtyCardQueueSet::refine_buffer
  [ 7] G1DirtyCardQueueSet::refine_completed_buffer_concurrently
  [ 8] G1ConcurrentRefineThread::run_service
  [ 9] ConcurrentGCThread::run
  [10] Thread::call_run
  [11] thread_native_entry
  [12] _pthread_start
  [13] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] ClassLoaderData::oops_do
  [ 1] void G1CMTask::process_grey_task_entry<true>
  [ 2] G1CMTask::drain_local_queue
  [ 3] G1CMBitMapClosure::do_addr
  [ 4] G1CMBitMap::iterate
  [ 5] G1CMTask::do_marking_step
  [ 6] G1CMConcurrentMarkingTask::work
  [ 7] WorkerThread::run
  [ 8] Thread::call_run
  [ 9] thread_native_entry
  [10] _pthread_start
  [11] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] G1CMTask::do_marking_step
  [ 1] G1CMConcurrentMarkingTask::work
  [ 2] WorkerThread::run
  [ 3] Thread::call_run
  [ 4] thread_native_entry
  [ 5] _pthread_start
  [ 6] thread_start

--- 10000000 ns (0.09%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park
  [ 2] Unsafe_Park
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.park
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block
  [ 6] java.util.concurrent.ForkJoinPool.unmanagedBlock
  [ 7] java.util.concurrent.ForkJoinPool.managedBlock
  [ 8] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await
  [ 9] java.util.concurrent.CyclicBarrier.dowait
  [10] java.util.concurrent.CyclicBarrier.await
  [11] org.openjdk.jmh.runner.BenchmarkHandler.getWorkerData
  [12] org.openjdk.jmh.runner.BenchmarkHandler.access$300
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.runWith
  [21] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] pthread_jit_write_protect_np
  [ 1] JVMCIRuntime::monitorenter
  [ 2] java.util.WeakHashMap.put
  [ 3] java.util.Collections$SetFromMap.add
  [ 4] java.util.Collections$SynchronizedCollection.add
  [ 5] zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
  [ 6] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
  [ 7] zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_Throughput
  [ 8] java.lang.invoke.DirectMethodHandle$Holder.invokeSpecial
  [ 9] java.lang.invoke.LambdaForm$MH.0x0000007001080800.invoke
  [10] java.lang.invoke.LambdaForm$MH.0x0000007001080400.invokeExact_MT
  [11] jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl
  [12] jdk.internal.reflect.DirectMethodHandleAccessor.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.runWith
  [22] java.lang.Thread.run

--- 10000000 ns (0.09%), 1 sample
  [ 0] void G1CMTask::process_grey_task_entry<true>
  [ 1] G1CMTask::do_marking_step
  [ 2] G1CMConcurrentMarkingTask::work
  [ 3] WorkerThread::run
  [ 4] Thread::call_run
  [ 5] thread_native_entry
  [ 6] _pthread_start
  [ 7] thread_start

          ns  percent  samples  top
  ----------  -------  -------  ---
  1510000000   13.63%      151  __psynch_cvwait
  1120000000   10.11%      112  ObjectMonitor::TrySpin
   940000000    8.48%       94  java.util.WeakHashMap.put
   890000000    8.03%       89  java.util.Collections$SynchronizedCollection.add
   500000000    4.51%       50  __psynch_cvsignal
   440000000    3.97%       44  G1ParScanThreadState::do_copy_to_survivor_space
   440000000    3.97%       44  java.util.WeakHashMap.transfer
   390000000    3.52%       39  void G1ScanEvacuatedObjClosure::do_oop_work<narrowOop>
   390000000    3.52%       39  void G1ScanCardClosure::do_oop_work<narrowOop>
   330000000    2.98%       33  _SafeFetch32_fault
   310000000    2.80%       31  pthread_jit_write_protect_np
   240000000    2.17%       24  G1ConcurrentMark::mark_in_bitmap
   230000000    2.08%       23  G1CMTask::make_reference_grey
   210000000    1.90%       21  java.util.concurrent.ConcurrentLinkedQueue.offer
   210000000    1.90%       21  java.lang.ref.Reference.<init>
   160000000    1.44%       16  G1ParScanThreadState::trim_queue_to_threshold
   130000000    1.17%       13  _platform_memset
   120000000    1.08%       12  void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanEvacuatedObjClosure, AlwaysContains>
   100000000    0.90%       10  AccessBarrierSupport::resolve_unknown_oop_ref_strength
   100000000    0.90%       10  ObjectMonitor::enter
    90000000    0.81%        9  SafeFetchN_impl
    90000000    0.81%        9  GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::steal_best_of_2
    90000000    0.81%        9  void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
    70000000    0.63%        7  void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
    70000000    0.63%        7  SpinPause
    70000000    0.63%        7  void G1CMTask::process_grey_task_entry<true>
    70000000    0.63%        7  java_lang_ref_Reference::is_referent_field
    70000000    0.63%        7  __psynch_mutexwait
    70000000    0.63%        7  java.util.WeakHashMap$Entry.<init>
    60000000    0.54%        6  ReferenceProcessor::discover_reference
    60000000    0.54%        6  ObjectSynchronizer::quick_enter
    50000000    0.45%        5  void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1ScanCardClosure, AlwaysContains>
    50000000    0.45%        5  ReferenceProcessor::process_discovered_list_work
    50000000    0.45%        5  ObjectMonitor::exit
    50000000    0.45%        5  java.util.WeakHashMap.indexFor
    50000000    0.45%        5  void InstanceRefKlass::oop_oop_iterate<narrowOop, G1RebuildRemSetClosure>
    40000000    0.36%        4  void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
    40000000    0.36%        4  GenericTaskQueueSet<GenericTaskQueue<G1TaskQueueEntry, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::steal_best_of_2
    40000000    0.36%        4  G1PostEvacuateCollectionSetCleanupTask2::RedirtyLoggedCardsTask::do_work
    40000000    0.36%        4  void OopOopIterateBoundedDispatch<G1CMOopClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
    40000000    0.36%        4  RedirtyLoggedCardTableEntryClosure::do_card_ptr
    40000000    0.36%        4  HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ScanCardClosure, true>
    40000000    0.36%        4  jdk.internal.misc.Unsafe.compareAndSetReference
    30000000    0.27%        3  G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_object
    30000000    0.27%        3  void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>
    30000000    0.27%        3  void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>
    30000000    0.27%        3  G1CMTask::drain_local_queue
    30000000    0.27%        3  void OopOopIterateDispatch<G1RootRegionScanClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
    20000000    0.18%        2  void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
    20000000    0.18%        2  G1ConcurrentMark::scan_root_region
    20000000    0.18%        2  jdk.internal.misc.Unsafe.weakCompareAndSetReference
    20000000    0.18%        2  jdk.internal.misc.Unsafe.getAndAddInt
    20000000    0.18%        2  G1SATBMarkQueueSet::filter
    20000000    0.18%        2  G1CardSetHashTable::get_or_add
    20000000    0.18%        2  void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
    20000000    0.18%        2  G1CardSet::add_to_container
    20000000    0.18%        2  G1CardSet::add_card
    20000000    0.18%        2  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>
    20000000    0.18%        2  __psynch_mutexdrop
    20000000    0.18%        2  HeapWordImpl** HeapRegion::oops_on_memregion_iterate<G1ConcurrentRefineOopClosure, false>
    20000000    0.18%        2  G1CMBitMapClosure::do_addr
    20000000    0.18%        2  void QuickSort::inner_sort<false, unsigned char*, int (*)(unsigned char const*, unsigned char const*)>
    20000000    0.18%        2  java.lang.ref.ReferenceQueue.headIsNull
    20000000    0.18%        2  ClassLoaderData::oops_do
    20000000    0.18%        2  zio.internal.AddContext.createCachedKey
    20000000    0.18%        2  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<299110ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 299110ull>::oop_access_barrier
    20000000    0.18%        2  zio.internal.BaseContext.javaSet
    20000000    0.18%        2  java.util.WeakHashMap.hash
    20000000    0.18%        2  void InstanceRefKlass::oop_oop_iterate_fields<narrowOop, G1RebuildRemSetClosure, AlwaysContains>
    10000000    0.09%        1  java.util.WeakHashMap.expungeStaleEntries
    10000000    0.09%        1  java.util.Collections$SetFromMap.add
    10000000    0.09%        1  java.util.concurrent.ConcurrentHashMap.put
    10000000    0.09%        1  __commpage_gettimeofday_internal
    10000000    0.09%        1  java.util.concurrent.ThreadPoolExecutor.getTask
    10000000    0.09%        1  _Copy_conjoint_jlongs_atomic
    10000000    0.09%        1  ZThread::~ZThread
    10000000    0.09%        1  UTF8::is_legal_utf8
    10000000    0.09%        1  SymbolTable::lookup_shared
    10000000    0.09%        1  mach_absolute_time
    10000000    0.09%        1  PlatformEvent::unpark
    10000000    0.09%        1  pthread_mutex_lock
    10000000    0.09%        1  pthread_mutex_unlock
    10000000    0.09%        1  scala.runtime.Statics.avalanche
    10000000    0.09%        1  ObjectSynchronizer::inflate
    10000000    0.09%        1  MarkBitMap::check_mark
    10000000    0.09%        1  JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState
    10000000    0.09%        1  JVMCIRuntime::monitorenter
    10000000    0.09%        1  JNIFunctions_NewStringUTF_b441abb130f9a9263d4ca1ead1e1568e4c50be39
    10000000    0.09%        1  void InstanceRefKlass::oop_oop_iterate_fields<narrowOop, G1ConcurrentRefineOopClosure, AlwaysContains>
    10000000    0.09%        1  HeapWordImpl** HeapRegion::oops_on_memregion_iterate_in_unparsable<G1ScanCardClosure>
    10000000    0.09%        1  void InstanceRefKlass::oop_oop_iterate_ref_processing<narrowOop, G1RebuildRemSetClosure, AlwaysContains>
    10000000    0.09%        1  HeapRegion::block_size
    10000000    0.09%        1  GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>::tasks
    10000000    0.09%        1  G1ScanHRForRegionClosure::scan_heap_roots
    10000000    0.09%        1  G1ScanEvacuatedObjClosure::reference_iteration_mode
    10000000    0.09%        1  void OopOopIterateBoundedDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
    10000000    0.09%        1  void OopOopIterateBoundedDispatch<G1ScanCardClosure>::Table::oop_oop_iterate_bounded<ObjArrayKlass, narrowOop>
    10000000    0.09%        1  G1STWSubjectToDiscoveryClosure::do_object_b
    10000000    0.09%        1  G1RedirtyCardsLocalQueueSet::enqueue
    10000000    0.09%        1  void OopOopIterateDispatch<G1ConcurrentRefineOopClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>
    10000000    0.09%        1  G1RebuildRSAndScrubTask::G1RebuildRSAndScrubRegionClosure::scan_and_scrub_to_pb
    10000000    0.09%        1  G1PrecleanYieldClosure::should_return_fine_grain
    10000000    0.09%        1  G1CardSet::add_to_howl
    10000000    0.09%        1  G1CMTask::do_marking_step
    10000000    0.09%        1  G1CMIsAliveClosure::do_object_b
    10000000    0.09%        1  G1CMBitMap::iterate
    10000000    0.09%        1  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<397414ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 397414ull>::oop_access_barrier
    10000000    0.09%        1  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286822ull, G1BarrierSet>, (AccessInternal::BarrierType)3, 286822ull>::oop_access_barrier
    10000000    0.09%        1  zio.internal.ConcurrentWeakHashSetAddBenchmark.javaAddConcurrent
    10000000    0.09%        1  zio.internal.jmh_generated.ConcurrentWeakHashSetAddBenchmark_javaAddConcurrent_jmhTest.javaAddConcurrent_thrpt_jmhStub
