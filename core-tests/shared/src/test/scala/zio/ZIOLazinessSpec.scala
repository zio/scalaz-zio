package zio

import zio.test._

object ZIOLazinessSpec extends ZIOBaseSpec {

  def assertLazy(f: (=> Nothing) => Any): UIO[TestResult] =
    UIO.succeed {
      val _ = f(throw new RuntimeException("not lazy"))
      assertCompletes
    }

  def spec: ZSpec[Environment, Failure] = suite("ZIOLazinessSpec")(
    suite("IO")(
      test("die")(assertLazy(IO.die)),
      test("dieMessage")(assertLazy(IO.dieMessage)),
      test("done")(assertLazy(IO.done)),
      test("fail")(assertLazy(IO.fail)),
      test("failCause")(assertLazy(IO.failCause)),
      test("fromEither")(assertLazy(IO.fromEither)),
      test("fromFiber")(assertLazy(IO.fromFiber)),
      test("fromOption")(assertLazy(IO.fromOption)),
      test("fromTry")(assertLazy(IO.fromTry)),
      test("getOrFailUnit")(assertLazy(IO.getOrFailUnit)),
      test("interruptAs")(assertLazy(IO.interruptAs)),
      test("left")(assertLazy(IO.left)),
      test("lock")(assertLazy(IO.lock)),
      test("require")(assertLazy(ZIO.require)),
      test("right")(assertLazy(IO.right)),
      test("some")(assertLazy(IO.some)),
      test("succeed")(assertLazy(IO.succeed))
    ),
    suite("Managed")(
      test("die")(assertLazy(Managed.die)),
      test("dieMessage")(assertLazy(Managed.dieMessage)),
      test("done")(assertLazy(Managed.done)),
      test("fail")(assertLazy(Managed.fail)),
      test("failCause")(assertLazy(Managed.failCause)),
      test("fromEither")(assertLazy(Managed.fromEither)),
      test("require")(assertLazy(Managed.require)),
      test("succeed")(assertLazy(Managed.succeed))
    ),
    suite("RIO")(
      test("die")(assertLazy(RIO.die)),
      test("dieMessage")(assertLazy(RIO.dieMessage)),
      test("done")(assertLazy(RIO.done)),
      test("fail")(assertLazy(RIO.fail)),
      test("failCause")(assertLazy(RIO.failCause)),
      test("fromEither")(assertLazy(RIO.fromEither)),
      test("fromFiber")(assertLazy(RIO.fromFiber)),
      test("fromTry")(assertLazy(RIO.fromTry)),
      test("getOrFail")(assertLazy(RIO.getOrFail)),
      test("interruptAs")(assertLazy(RIO.interruptAs)),
      test("left")(assertLazy(RIO.left)),
      test("lock")(assertLazy(RIO.lock)),
      test("provide")(assertLazy(RIO.provide)),
      test("require")(assertLazy(RIO.require)),
      test("right")(assertLazy(RIO.right)),
      test("sleep")(assertLazy(RIO.sleep)),
      test("some")(assertLazy(RIO.some)),
      test("succeed")(assertLazy(RIO.succeed))
    ),
    suite("Task")(
      test("die")(assertLazy(Task.die)),
      test("dieMessage")(assertLazy(Task.dieMessage)),
      test("done")(assertLazy(Task.done)),
      test("fail")(assertLazy(Task.fail)),
      test("failCause")(assertLazy(Task.failCause)),
      test("fromEither")(assertLazy(Task.fromEither)),
      test("fromFiber")(assertLazy(Task.fromFiber)),
      test("fromTry")(assertLazy(Task.fromTry)),
      test("interruptAs")(assertLazy(Task.interruptAs)),
      test("left")(assertLazy(Task.left)),
      test("lock")(assertLazy(Task.lock)),
      test("require")(assertLazy(Task.require)),
      test("right")(assertLazy(Task.right)),
      test("some")(assertLazy(Task.some)),
      test("succeed")(assertLazy(Task.succeed))
    ),
    suite("UIO")(
      test("die")(assertLazy(UIO.die)),
      test("dieMessage")(assertLazy(UIO.dieMessage)),
      test("done")(assertLazy(UIO.done)),
      test("failCause")(assertLazy(UIO.failCause)),
      test("fromEither")(assertLazy(UIO.fromEither)),
      test("fromFiber")(assertLazy(UIO.fromFiber)),
      test("interruptAs")(assertLazy(UIO.interruptAs)),
      test("left")(assertLazy(UIO.left)),
      test("lock")(assertLazy(UIO.lock)),
      test("right")(assertLazy(UIO.right)),
      test("some")(assertLazy(UIO.some)),
      test("succeed")(assertLazy(UIO.succeed))
    ),
    suite("URIO")(
      test("die")(assertLazy(URIO.die)),
      test("dieMessage")(assertLazy(URIO.dieMessage)),
      test("done")(assertLazy(URIO.done)),
      test("failCause")(assertLazy(URIO.failCause)),
      test("fromEither")(assertLazy(URIO.fromEither)),
      test("fromFiber")(assertLazy(URIO.fromFiber)),
      test("interruptAs")(assertLazy(URIO.interruptAs)),
      test("left")(assertLazy(URIO.left)),
      test("lock")(assertLazy(URIO.lock)),
      test("provide")(assertLazy(URIO.provide)),
      test("right")(assertLazy(URIO.right)),
      test("sleep")(assertLazy(URIO.sleep)),
      test("some")(assertLazy(URIO.some)),
      test("succeed")(assertLazy(URIO.succeed))
    ),
    suite("ZManaged")(
      test("die")(assertLazy(ZManaged.die)),
      test("dieMessage")(assertLazy(ZManaged.dieMessage)),
      test("done")(assertLazy(ZManaged.done)),
      test("fail")(assertLazy(ZManaged.fail)),
      test("failCause")(assertLazy(ZManaged.failCause)),
      test("fromEither")(assertLazy(ZManaged.fromEither)),
      test("interruptAs")(assertLazy(ZManaged.interruptAs)),
      test("require")(assertLazy(ZManaged.require)),
      test("succeed")(assertLazy(ZManaged.succeed))
    ),
    suite("ZIO")(
      test("die")(assertLazy(ZIO.die)),
      test("dieMessage")(assertLazy(ZIO.dieMessage)),
      test("done")(assertLazy(ZIO.done)),
      test("fail")(assertLazy(ZIO.fail)),
      test("failCause")(assertLazy(ZIO.failCause)),
      test("fromEither")(assertLazy(ZIO.fromEither)),
      test("fromFiber")(assertLazy(ZIO.fromFiber)),
      test("fromOption")(assertLazy(ZIO.fromOption)),
      test("fromTry")(assertLazy(ZIO.fromTry)),
      test("getOrFailUnit")(assertLazy(ZIO.getOrFailUnit)),
      test("interruptAs")(assertLazy(ZIO.interruptAs)),
      test("left")(assertLazy(ZIO.left)),
      test("lock")(assertLazy(ZIO.lock)),
      test("provide")(assertLazy(ZIO.provide)),
      test("require")(assertLazy(ZIO.require)),
      test("right")(assertLazy(ZIO.right)),
      test("sleep")(assertLazy(ZIO.sleep)),
      test("some")(assertLazy(ZIO.some)),
      test("succeed")(assertLazy(ZIO.succeed))
    )
  )
}
