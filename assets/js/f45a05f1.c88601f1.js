"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[22977],{91050:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"zio-prelude/newtypes/index","title":"New Types","description":"ZIO Prelude provides functionality for creating zero overhead new types to allow you to increase the type safety of your application without compromising performance or ergonomics.","source":"@site/docs/zio-prelude/newtypes/index.md","sourceDirName":"zio-prelude/newtypes","slug":"/zio-prelude/newtypes/","permalink":"/zio-prelude/newtypes/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-prelude/newtypes/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"New Types"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZValidation","permalink":"/zio-prelude/functional-data-types/zvalidation"},"next":{"title":"ZPure","permalink":"/zio-prelude/zpure/"}}');var r=t(74848),s=t(28453);const o={id:"index",title:"New Types"},a=void 0,i={},u=[{value:"New Types",id:"new-types",level:2},{value:"Constructing New Types",id:"constructing-new-types",level:2},{value:"Deconstructing New Types",id:"deconstructing-new-types",level:2},{value:"Defining Operators On New Types",id:"defining-operators-on-new-types",level:2},{value:"Defining Instances Of Functional Abstractions For New Types",id:"defining-instances-of-functional-abstractions-for-new-types",level:2},{value:"Subtypes",id:"subtypes",level:2},{value:"Smart Newtypes",id:"smart-newtypes",level:2}];function l(e){const n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"ZIO Prelude provides functionality for creating zero overhead new types to allow you to increase the type safety of your application without compromising performance or ergonomics."}),"\n",(0,r.jsx)(n.p,{children:"A common situation in domain modeling is that we have multiple types in our business domain with the same underlying representation in Scala. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"type AccountNumber  = Int\ntype SequenceNumber = Int\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is not a great situation. We can easily mix up values that represent different types in our business domain, for example providing an ",(0,r.jsx)(n.code,{children:"AccountNumber"})," where we are supposed to use a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," or vice versa."]}),"\n",(0,r.jsxs)(n.p,{children:["The Scala compiler will not help us avoid bugs in these situations because from the perspective of the compiler ",(0,r.jsx)(n.code,{children:"AccountNumber"})," and ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," are the same type, namely ",(0,r.jsx)(n.code,{children:"Int"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To avoid this, we might be tempted to create a separate case class for each of these types like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"final case class AccountNumber(value: Int)\nfinal case class SequenceNumber(value: Int)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is an improvement in type safety because ",(0,r.jsx)(n.code,{children:"AccountNumber"})," and ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," are now separate types so providing an ",(0,r.jsx)(n.code,{children:"AccountNumber"})," when we are supposed to use a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," will result in a compilation error."]}),"\n",(0,r.jsx)(n.p,{children:"However, it comes with costs of its own. Every one of these account numbers and sequence numbers will now allocate an additional object, which can add up over the course of a large application with a complex domain model."}),"\n",(0,r.jsxs)(n.p,{children:["We can try to minimize these allocations using techniques such as extending ",(0,r.jsx)(n.code,{children:"AnyVal"}),", but these approaches can be extremely fragile and can actually result in worse performance than the original code if we are not careful."]}),"\n",(0,r.jsx)(n.p,{children:"Let's see how ZIO Prelude helps us get the best of both worlds here."}),"\n",(0,r.jsx)(n.h2,{id:"new-types",children:"New Types"}),"\n",(0,r.jsx)(n.p,{children:"A new type in ZIO Prelude is a type that has the same underlying representation as another type at runtime but is a separate type at compile time."}),"\n",(0,r.jsxs)(n.p,{children:["We create new types by creating an object that extends ",(0,r.jsx)(n.code,{children:"Newtype"})," and specifying the type that our new type wraps. We then export that type by defining a new type alias that refers to the ",(0,r.jsx)(n.code,{children:"Type"})," within our new object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.Newtype\n\nobject AccountNumber extends Newtype[Int]\ntype AccountNumber = AccountNumber.Type\n\nobject SequenceNumber extends Newtype[Int]\ntype SequenceNumber = SequenceNumber.Type\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"AccountNumber"})," and ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," types are now completely distinct from the ",(0,r.jsx)(n.code,{children:"Int"})," type at compile time, even though at runtime they are all ",(0,r.jsx)(n.code,{children:"Int"})," values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val accountNumber: AccountNumber =\n  AccountNumber(1)\n// accountNumber: AccountNumber = 1\n\nval sequenceNumber: SequenceNumber =\n  SequenceNumber(2)\n// sequenceNumber: SequenceNumber = 2\n\ndef lookup(accountNumber: AccountNumber, sequenceNumber: SequenceNumber) =\n  ???\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can see this if we try to supply an ",(0,r.jsx)(n.code,{children:"AccountNumber"})," somewhere that a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," is expected:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"lookup(sequenceNumber, accountNumber)\n// error: type mismatch;\n//  found   : SequenceNumber\n//     (which expands to)  SequenceNumber.Type\n//  required: AccountNumber\n//     (which expands to)  AccountNumber.Type\n// error: type mismatch;\n//  found   : AccountNumber\n//     (which expands to)  AccountNumber.Type\n//  required: SequenceNumber\n//     (which expands to)  SequenceNumber.Type\n// lookup(sequenceNumber, accountNumber)\n//                        ^^^^^^^^^^^^^\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is great but how do we construct ",(0,r.jsx)(n.code,{children:"AccountNumber"})," and ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," values and how do we access the underlying ",(0,r.jsx)(n.code,{children:"Int"})," values to work with them?"]}),"\n",(0,r.jsx)(n.h2,{id:"constructing-new-types",children:"Constructing New Types"}),"\n",(0,r.jsxs)(n.p,{children:["The easiest way to construct an instance of the new type is to use the ",(0,r.jsx)(n.code,{children:"apply"})," method on the new type object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val accountNumber: AccountNumber =\n  AccountNumber(1)\n// accountNumber: AccountNumber = 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:['You can think of the new type object as being the "companion object" of the new type and it comes included with an ',(0,r.jsx)(n.code,{children:"apply"})," method to make it easy for us to construct instances of the new type."]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to construct a collection of values of the new type from values of the underlying type you can use the ",(0,r.jsx)(n.code,{children:"wrapAll"})," operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.Chunk\n\nval accountNumbers: Chunk[AccountNumber] =\n  AccountNumber.wrapAll(Chunk(3, 4, 5))\n// accountNumbers: Chunk[AccountNumber] = IndexedSeq(3, 4, 5)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"wrapAll"})," operator is extremely efficient because it does not have to traverse the collection at all. Internally we know that ",(0,r.jsx)(n.code,{children:"AccountNumber"})," and ",(0,r.jsx)(n.code,{children:"Int"})," are the same type so we can freely convert a ",(0,r.jsx)(n.code,{children:"Chunk[Int]"})," to a ",(0,r.jsx)(n.code,{children:"Chunk[AccountNumber]"})," without having to traverse the collection."]}),"\n",(0,r.jsxs)(n.p,{children:["We can also define our own more specialized constructors for our new type in terms of ",(0,r.jsx)(n.code,{children:"apply"}),", ",(0,r.jsx)(n.code,{children:"wrap"}),", and ",(0,r.jsx)(n.code,{children:"wrapAll"}),". The new type object provides a convenient place for us to do this."]}),"\n",(0,r.jsx)(n.p,{children:"For example, we could define a simple constructor for an initial sequence number like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.Newtype\n\nobject SequenceNumber extends Newtype[Int] {\n  val initial: SequenceNumber =\n    SequenceNumber(0)\n}\ntype SequenceNumber = SequenceNumber.Type\n\nval initial: SequenceNumber =\n  SequenceNumber.initial\n// initial: SequenceNumber = 0\n"})}),"\n",(0,r.jsx)(n.p,{children:"This lets us construct instances of the new type in a very ergonomic way, where constructors for the new type are on the new type companion object just like constructors for any other type would be."}),"\n",(0,r.jsx)(n.h2,{id:"deconstructing-new-types",children:"Deconstructing New Types"}),"\n",(0,r.jsx)(n.p,{children:"In addition to constructing instances of the new type we want to be able to access the value underlying the new type to perform operations on it."}),"\n",(0,r.jsxs)(n.p,{children:["We can do this using the ",(0,r.jsx)(n.code,{children:"unwrap"})," operator on the new type companion object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val zero: Int =\n  SequenceNumber.unwrap(initial)\n// zero: Int = 0\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can also use the ",(0,r.jsx)(n.code,{children:"unwrapAll"})," operator to convert a collection of values of the new type into the underlying type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.Chunk\n\nval sequenceNumbers: Chunk[SequenceNumber] =\n  SequenceNumber.wrapAll(Chunk(1, 2, 3))\n// sequenceNumbers: Chunk[SequenceNumber] = IndexedSeq(1, 2, 3)\n\nval ints: Chunk[Int] =\n  SequenceNumber.unwrapAll(sequenceNumbers)\n// ints: Chunk[Int] = IndexedSeq(1, 2, 3)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Again this is extremely efficient because we don't have to traverse the collection at all. Internally we know that a ",(0,r.jsx)(n.code,{children:"Chunk[SequenceNumber]"})," is a ",(0,r.jsx)(n.code,{children:"Chunk[Int]"})," so we can just immediately return the original collection unchanged."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-operators-on-new-types",children:"Defining Operators On New Types"}),"\n",(0,r.jsx)(n.p,{children:"By wrapping and unwrapping values of the new type we can define our own operators on new types."}),"\n",(0,r.jsx)(n.p,{children:"The easiest way to do this is by defining our operators as extension methods inside the new type companion object. These extension methods will automatically be available when we are working with instances of the new type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.Newtype\n\nobject SequenceNumber extends Newtype[Int] {\n\n  implicit class SequenceNumberSyntax(private val self: SequenceNumber) extends AnyVal {\n    def next: SequenceNumber =\n      SequenceNumber.wrap(SequenceNumber.unwrap(self) + 1)\n  }\n}\ntype SequenceNumber = SequenceNumber.Type\n\nval sequenceNumber: SequenceNumber =\n  SequenceNumber(1)\n// sequenceNumber: SequenceNumber = 1\n\nval nextSequenceNumber: SequenceNumber =\n  sequenceNumber.next\n// nextSequenceNumber: SequenceNumber = 2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Notice that the ",(0,r.jsx)(n.code,{children:"next"})," operator was available on ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," without having to do any imports because we defined it as an extension method within the ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," object."]}),"\n",(0,r.jsxs)(n.p,{children:["The new type companion object is also a convenient place for other operators that we would normally define on the companion object of a type. For example, we could define a ",(0,r.jsx)(n.code,{children:"continuous"})," operator that returns whether a collection of ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," values are continuous."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.Chunk\n\nobject SequenceNumber extends Newtype[Int] {\n  def continuous(sequenceNumbers: Iterable[SequenceNumber]): Boolean =\n    SequenceNumber.unwrapAll(sequenceNumbers).foldLeft[(Option[Int], Boolean)]((None, true)) {\n      case ((None, continuous), current) => (Some(current), continuous)\n      case ((Some(previous), continuous), current) => (Some(current), continuous && current == previous + 1)\n    }._2\n}\ntype SequenceNumber = SequenceNumber.Type\n\nval sequenceNumbers: Chunk[SequenceNumber] =\n  Chunk(SequenceNumber(1), SequenceNumber(2), SequenceNumber(3))\n// sequenceNumbers: Chunk[SequenceNumber] = IndexedSeq(1, 2, 3)\n\nval continuous: Boolean =\n  SequenceNumber.continuous(sequenceNumbers)\n// continuous: Boolean = true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here ",(0,r.jsx)(n.code,{children:"continuous"})," is an operator on a collection of sequence numbers so it didn't make sense to define it as an extension method on an individual sequence number. Defining it in the new type companion object makes it feel like an operator on the companion object of any ordinary data type."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-instances-of-functional-abstractions-for-new-types",children:"Defining Instances Of Functional Abstractions For New Types"}),"\n",(0,r.jsxs)(n.p,{children:["We can also define instances of functional abstractions for new types such as ",(0,r.jsx)(n.code,{children:"Equal"}),", ",(0,r.jsx)(n.code,{children:"Ord"}),", and ",(0,r.jsx)(n.code,{children:"Associative"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The new type companion object again provides a convenient place to define these instances and ensures that they will automatically be available so that we don't have to import them."}),"\n",(0,r.jsxs)(n.p,{children:["Let's see how we can do this to define an ",(0,r.jsx)(n.code,{children:"Equal"})," instance for ",(0,r.jsx)(n.code,{children:"AccountNumber"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude._\n\nobject AccountNumber extends Newtype[Int] {\n  implicit val AccountNumberEqual: Equal[AccountNumber] =\n    Equal.default\n}\ntype AccountNumber = AccountNumber.Type\n\nAccountNumber(1) === AccountNumber(1)\n// res4: Boolean = true\nAccountNumber(1) === AccountNumber(2)\n// res5: Boolean = false\n"})}),"\n",(0,r.jsx)(n.p,{children:"Attempting to compare two unrelated types results in a compilation error."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"AccountNumber(1) === 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This can be particularly useful because since the representations of the new type and the underlying types are the same at runtime, operators that are not strongly typed like ",(0,r.jsx)(n.code,{children:"println"})," and ",(0,r.jsx)(n.code,{children:"=="})," will not respect the difference between the new type and the underlying type. Using the functional abstractions in ZIO Prelude we can avoid this problem."]}),"\n",(0,r.jsx)(n.h2,{id:"subtypes",children:"Subtypes"}),"\n",(0,r.jsxs)(n.p,{children:["When we use ",(0,r.jsx)(n.code,{children:"Newtype"}),' the new type we are creating is completely distinct from the underlying type. This can be useful when we want to "hide" the underlying representation of the new type except when we explicitly unwrap it.']}),"\n",(0,r.jsx)(n.p,{children:"However, it can lead to boilerplate in some cases where we need to explicitly unwrap the new type or reimplement functionality that already exists on the underlying type."}),"\n",(0,r.jsxs)(n.p,{children:["For example, say we want to test whether one ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," is after another. Right now this will not work:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.Subtype\n\nobject SequenceNumber extends Newtype[Int]\ntype SequenceNumber = SequenceNumber.Type\n\nSequenceNumber(2) > SequenceNumber(1)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:">"})," operator is defined on ",(0,r.jsx)(n.code,{children:"Int"})," and as far as the Scala compiler is concerned ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," and ",(0,r.jsx)(n.code,{children:"Int"})," are completely unrelated types. Of course we could unwrap each of our sequence numbers or define a new ",(0,r.jsx)(n.code,{children:">"})," operator on sequence numbers but here we are not taking advantage of the fact that we know that every ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," is an ",(0,r.jsx)(n.code,{children:"Int"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["We can fix this by extending ",(0,r.jsx)(n.code,{children:"Subtype"})," instead of ",(0,r.jsx)(n.code,{children:"Newtype"})," when creating our new type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.Subtype\n\nobject SequenceNumber extends Subtype[Int]\ntype SequenceNumber = SequenceNumber.Type\n\nSequenceNumber(2) > SequenceNumber(1)\n// res7: Boolean = true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," is a type that is different from ",(0,r.jsx)(n.code,{children:"Int"})," but is still a subtype of ",(0,r.jsx)(n.code,{children:"Int"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This means that we can use a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," any time we need an ",(0,r.jsx)(n.code,{children:"Int"})," and can use operators defined on ",(0,r.jsx)(n.code,{children:"Int"})," on ",(0,r.jsx)(n.code,{children:"SequenceNumber"}),". However, we still get the type safety of not being able to use an ",(0,r.jsx)(n.code,{children:"Int"})," or ",(0,r.jsx)(n.code,{children:"AccountNumber"})," when a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," is expected."]}),"\n",(0,r.jsx)(n.h2,{id:"smart-newtypes",children:"Smart Newtypes"}),"\n",(0,r.jsxs)(n.p,{children:["So far, all the new types we have created have been distinct from the underlying types but have not imposed any additional constraints on the values that the underlying type can take. For example, the ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," above could in principle be any ",(0,r.jsx)(n.code,{children:"Int"})," value, whether that is ",(0,r.jsx)(n.code,{children:"42"})," or ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In many cases that makes sense. We often want to use a new type to denote that this particular ",(0,r.jsx)(n.code,{children:"Int"})," value represents a sequence number and shouldn't be confused with another ",(0,r.jsx)(n.code,{children:"Int"})," value that represents an account number without imposing other constraints."]}),"\n",(0,r.jsxs)(n.p,{children:["However, in other cases we may want to restrict the values that the underlying type can take. For instance, perhaps a ",(0,r.jsx)(n.code,{children:"SequenceNumber"})," should never be negative."]}),"\n",(0,r.jsxs)(n.p,{children:["We can model this in ZIO Prelude by extending ",(0,r.jsx)(n.code,{children:"Newtype"})," and ",(0,r.jsx)(n.code,{children:"Subtype"}),", just as before, and then defining an additional ",(0,r.jsx)(n.code,{children:"def assertion"})," method that describes the constraints on the underlying value. (The syntax differs slightly between Scala 2 and 3 due to changes in the macro API)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.{Subtype, Validation}\nimport zio.prelude.Assertion._\n\nobject SequenceNumber extends Subtype[Int] {\n\n  // Scala 2\n  override def assertion = assert { \n    greaterThanOrEqualTo(0)\n  }\n  \n  // Scala 3\n  // override inline def assertion = \n  //  greaterThanOrEqualTo(0)\n}\ntype SequenceNumber = SequenceNumber.Type\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we created a simple assertion that requires the value be equal to or greater than zero, but we can use much more complex assertions. For example, we could validate an ",(0,r.jsx)(n.code,{children:"Email"})," with the ",(0,r.jsx)(n.code,{children:"matches"})," assertion, which accept a ",(0,r.jsx)(n.code,{children:"Regex"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Now, when we construct new values using ",(0,r.jsx)(n.code,{children:"apply"}),", they will be validated ",(0,r.jsx)(n.em,{children:"at compile time"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val valid1: SequenceNumber = SequenceNumber(0)\nval valid2: SequenceNumber = SequenceNumber(42)\n\nval oops = SequenceNumber(-10)\n// Newtype Assertion Failed \n// \u2022 -10 did not satisfy greaterThanOrEqualTo(0)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Smart Newtypes can only be validated at compile-time when called with literals, such as ",(0,r.jsx)(n.code,{children:"9000"})," or ",(0,r.jsx)(n.code,{children:'"Fancy Pants"'}),". Attempting to wrap a variable or run-time value with ",(0,r.jsx)(n.code,{children:"apply"})," will result in a compilation error warning you about this."]}),"\n",(0,r.jsxs)(n.p,{children:["When wrapping variables or run-time values, you can use the ",(0,r.jsx)(n.code,{children:"make"})," or ",(0,r.jsx)(n.code,{children:"makeAll"})," constructors, which will perform the validation at run-time instead."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.Chunk\n\nval a = 10\n// a: Int = 10\nval b = 11\n// b: Int = 11\nval c = 12\n// c: Int = 12\n\nval validatedSequenceNumber: Validation[String, SequenceNumber] =\n  SequenceNumber.make(a)\n// validatedSequenceNumber: Validation[String, SequenceNumber] = Success(\n//   log = IndexedSeq(),\n//   value = 10\n// )\n\nval validateSequenceNumbers: Validation[String, Chunk[SequenceNumber]] =\n  SequenceNumber.makeAll(Chunk(a, b, c))\n// validateSequenceNumbers: Validation[String, Chunk[SequenceNumber]] = Success(\n//   log = IndexedSeq(),\n//   value = IndexedSeq(10, 11, 12)\n// )\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can see that ",(0,r.jsx)(n.code,{children:"make"})," and ",(0,r.jsx)(n.code,{children:"makeAll"})," return a ",(0,r.jsx)(n.code,{children:"Validation"})," that will either be a success with a valid instance of the newtype or a failure with a helpful error message indicating why a valid instance of the newtype could not be constructed."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that the ",(0,r.jsx)(n.code,{children:"wrap"})," operator, which bypasses the compile-time check, is ",(0,r.jsx)(n.code,{children:"protected"})," and will only be accessible within the scope of the newtype object unless we choose to expose them. This allows us to skip the compile-time check when we need to, such as in implementing a ",(0,r.jsx)(n.code,{children:".next"})," method, which we know will be safe, even if the compiler does not."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.{Subtype, Validation}\nimport zio.prelude.Assertion._\n\nobject SequenceNumber extends Subtype[Int] {\n  override def assertion = assert { \n    greaterThanOrEqualTo(0)\n  }\n  \n  val initial: SequenceNumber =\n    SequenceNumber(0)\n    \n  implicit final class SequenceNumberOps(val self: SequenceNumber) extends AnyVal {\n    def next: SequenceNumber = \n      wrap(self + 1)\n  }\n}\ntype SequenceNumber = SequenceNumber.Type\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As another example, we might want to expose an ",(0,r.jsx)(n.code,{children:"unsafeMake"})," operator for our users to allow them to construct instances of the newtype directly without going through ",(0,r.jsx)(n.code,{children:"Validation"}),". As its name implies this places responsibility on the user to ensure that the underlying data is valid but could be necessary for performance or ergonomics in some situations."]}),"\n",(0,r.jsx)(n.p,{children:"We can do that quite easily like this:."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio.prelude.{Subtype, Validation}\nimport zio.prelude.Assertion._\n\nobject SequenceNumber extends Subtype[Int] {\n  override def assertion = assert { \n    greaterThanOrEqualTo(0)\n  }\n\n  def unsafeMake(n: Int): SequenceNumber =\n    SequenceNumber.wrap(n)\n}\ntype SequenceNumber = SequenceNumber.Type\n\nval aTrustedInt = 1\n// aTrustedInt: Int = 1\nval sequenceNumber: SequenceNumber =\n  SequenceNumber.unsafeMake(aTrustedInt)\n// sequenceNumber: SequenceNumber = 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Thus, Smart Newtypes give us full ability to implement our own operators and to expose whatever interface we want for our type, from validating input at compile-time, to using ",(0,r.jsx)(n.code,{children:"Validation"})," at run-time, to allowing users to create instances of the refined newtype directly."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var c=t(96540);const r={},s=c.createContext(r);function o(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);