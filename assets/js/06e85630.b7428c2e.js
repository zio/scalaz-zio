"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23850],{97964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"zio-mock/mock","title":"Mock","description":"A Mock[R] represents a mockable environment R. It\'s a base abstract class for every service we want to mock.","source":"@site/docs/zio-mock/mock.md","sourceDirName":"zio-mock","slug":"/zio-mock/mock","permalink":"/zio-mock/mock","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-mock/mock.md","tags":[],"version":"current","frontMatter":{"id":"mock","title":"Mock"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Mock","permalink":"/zio-mock/"},"next":{"title":"Expectation","permalink":"/zio-mock/expectation"}}');var o=t(74848),r=t(28453);const c={id:"mock",title:"Mock"},s=void 0,a={},l=[{value:"Creating a Mock Service",id:"creating-a-mock-service",level:2},{value:"Encoding Service Capabilities",id:"encoding-service-capabilities",level:2},{value:"Encoding Zero Argument Capability",id:"encoding-zero-argument-capability",level:3},{value:"Encoding Multiple Arguments Capability",id:"encoding-multiple-arguments-capability",level:3},{value:"Encoding Overloaded Capabilities",id:"encoding-overloaded-capabilities",level:3},{value:"Encoding Polymorphic Capabilities",id:"encoding-polymorphic-capabilities",level:3},{value:"Defining a Layer for the Mocked Service",id:"defining-a-layer-for-the-mocked-service",level:2},{value:"The Complete Example",id:"the-complete-example",level:2},{value:"More examples",id:"more-examples",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"Mock[R]"})," represents a mockable environment ",(0,o.jsx)(n.code,{children:"R"}),". It's a base abstract class for every service we want to mock."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-mock-service",children:"Creating a Mock Service"}),"\n",(0,o.jsxs)(n.p,{children:["In order to create a mock object, we should define an object which implements the ",(0,o.jsx)(n.code,{children:"Mock"})," abstract class in the test sources. To implement the ",(0,o.jsx)(n.code,{children:"Mock"})," need to define ",(0,o.jsx)(n.em,{children:"capability tags"})," and the ",(0,o.jsx)(n.em,{children:"compose layer"}),":"]}),"\n",(0,o.jsx)(n.h2,{id:"encoding-service-capabilities",children:"Encoding Service Capabilities"}),"\n",(0,o.jsxs)(n.p,{children:["Capabilities are service functionalities that are accessible from the client-side. For example, in the following service the ",(0,o.jsx)(n.code,{children:"send"})," method is a service capability:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait UserService {\n  def register(username: String, age: Int, email: String): Task[Unit]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"capability tag"})," encodes all information needed to mock the target capability. It is just a value that extends the ",(0,o.jsx)(n.code,{children:"zio.mock.Capability[R, I, E, A]"})," type constructor, where:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"R"})," is the type of ",(0,o.jsx)(n.em,{children:"environment"})," the method belongs to"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"I"})," is the type of ",(0,o.jsx)(n.em,{children:"methods input arguments"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"E"})," is the type of ",(0,o.jsx)(n.em,{children:"error"})," it can fail with"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"A"})," is the type of ",(0,o.jsx)(n.em,{children:"return value"})," it can produce"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Capability"})," type is not publicly available, instead we have to extend ",(0,o.jsx)(n.code,{children:"Mock"})," dependent types ",(0,o.jsx)(n.code,{children:"Effect"}),", ",(0,o.jsx)(n.code,{children:"Method"}),", ",(0,o.jsx)(n.code,{children:"Sink"})," or ",(0,o.jsx)(n.code,{children:"Stream"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"We can have 4 types of capabilities inside a service:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Effect"})})," \u2014 describes an effectful ZIO operation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Method"})})," \u2014 describes an ordinary scala function"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Sink"})})," \u2014 describes an effectful ZIO Sink"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Stream"})})," \u2014 describes an effectful ZIO Stream"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Let's say we have the following service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.mock._\nimport zio.stream._\n\ntrait ExampleService {\n  def exampleEffect(i: Int): Task[String]\n  def exampleMethod(i: Int): String\n  def exampleSink(a: Int): Sink[Throwable, Int, Nothing, List[Int]]\n  def exampleStream(a: Int): Stream[Throwable, String]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Therefore, the mock service should have the following ",(0,o.jsx)(n.em,{children:"capability tags"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.mock._\n\nobject MockExampleService extends Mock[ExampleService] {\n  object ExampleEffect extends Effect[Int, Throwable, String]\n  object ExampleMethod extends Method[Int, Throwable, String]\n  object ExampleSink   extends Sink[Any, Throwable, Int, Nothing, List[Int]]\n  object ExampleStream extends Stream[Int, Throwable, String]\n  \n  override val compose: URLayer[Proxy, ExampleService] = ???\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, all ",(0,o.jsx)(n.code,{children:"ExampleEffect"}),", ",(0,o.jsx)(n.code,{children:"ExampleMethod"}),", ",(0,o.jsx)(n.code,{children:"ExampleSink"}),", and ",(0,o.jsx)(n.code,{children:"ExampleStream"})," are capability tags. Each of these capability tags encodes all information needed to mock the target capability."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, the ",(0,o.jsx)(n.code,{children:"ExampleEffect"})," capability tag encodes the type of ",(0,o.jsx)(n.em,{children:"environments"}),", ",(0,o.jsx)(n.em,{children:"arguments"})," (inputs), the ",(0,o.jsx)(n.em,{children:"error channel"}),", and also the ",(0,o.jsx)(n.em,{children:"success channel"})," of the ",(0,o.jsx)(n.code,{children:"exampleEffect(i: Int)"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala"})}),"\n",(0,o.jsx)(n.p,{children:"We encode service capabilities according to the following scheme:"}),"\n",(0,o.jsx)(n.h3,{id:"encoding-zero-argument-capability",children:"Encoding Zero Argument Capability"}),"\n",(0,o.jsxs)(n.p,{children:["For zero arguments the type is ",(0,o.jsx)(n.code,{children:"Unit"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait ZeroParamService {\n  def zeroParams: Task[Int]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["So the capability tag of ",(0,o.jsx)(n.code,{children:"zeroParams"})," should be:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.mock._\n\nobject MockZeroParamService extends Mock[ZeroParamService] {\n  object ZeroParams extends Effect[Unit, Throwable, Int]\n  \n  override val compose = ???\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala"})}),"\n",(0,o.jsx)(n.h3,{id:"encoding-multiple-arguments-capability",children:"Encoding Multiple Arguments Capability"}),"\n",(0,o.jsxs)(n.p,{children:["For one or more arguments, regardless of how many parameter lists, the type is a ",(0,o.jsx)(n.code,{children:"TupleN"})," where ",(0,o.jsx)(n.code,{children:"N"})," is the size of arguments list"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Note:"})}),"\n",(0,o.jsx)(n.p,{children:"We're using tuples to represent multiple argument methods, which follows with a limit to max 22 arguments, as is Scala itself limited."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If the capability has more than one argument, we should encode the argument types in the ",(0,o.jsx)(n.code,{children:"Tuple"})," data type. For example, if we have the following service:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait ManyParamsService {\n  def manyParams(a: Int, b: String, c: Long): Task[Int]\n  def manyParamLists(a: Int, b: String)(c: Long): Task[Int]\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"We should encode that with the following capability tag:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.mock._\n\ntrait MockExampleService extends Mock[ManyParamsService] {\n  object ManyParams     extends Method[(Int, String, Long), Throwable, String]\n  object ManyParamLists extends Method[(Int, String, Long), Throwable, String]\n  \n  override val compose = ???\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"encoding-overloaded-capabilities",children:"Encoding Overloaded Capabilities"}),"\n",(0,o.jsx)(n.p,{children:"For overloaded methods, we nest a list of numbered objects, each representing subsequent overloads:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// Main sources\n\nimport zio._\nimport zio.stream.{ ZSink, ZStream }\n\ntrait OverloadedService {\n  def overloaded(arg1: Int)                  : UIO[String]\n  def overloaded(arg1: Long)                 : UIO[String]\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"We encode both overloaded capabilities by using numbered objects inside a nested object:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// Test sources\n\nimport zio.mock._\n\nobject MockOervloadedService extends Mock[OverloadedService] {\n  object Overloaded {\n    object _0 extends Effect[Int, Nothing, String]\n    object _1 extends Effect[Long, Nothing, String]\n  }\n\n  val compose: URLayer[Proxy, OverloadedService] = ???\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala"})}),"\n",(0,o.jsx)(n.h3,{id:"encoding-polymorphic-capabilities",children:"Encoding Polymorphic Capabilities"}),"\n",(0,o.jsxs)(n.p,{children:["Mocking polymorphic methods is also supported, but the interface must require ",(0,o.jsx)(n.code,{children:"zio.Tag"})," implicit evidence for each type parameter:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// main sources\nimport zio._\n\ntrait PolyService {\n  def polyInput[I: Tag](input: I): Task[String]\n  def polyError[E: Tag](input: Int): IO[E, String]\n  def polyOutput[A: Tag](input: Int): Task[A]\n  def polyAll[I: Tag, E: Tag, A: Tag](input: I): IO[E, A]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the test sources we construct partially applied ",(0,o.jsx)(n.em,{children:"capability tags"})," by extending ",(0,o.jsx)(n.code,{children:"Method.Poly"})," family. The unknown types must be provided at call site. To produce a final monomorphic ",(0,o.jsx)(n.code,{children:"Method"})," tag we must use the ",(0,o.jsx)(n.code,{children:"of"})," combinator and pass the missing types:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// test sources\nimport zio.mock._\n\nobject MockPolyService extends Mock[PolyService] {\n\n  object PolyInput  extends Poly.Effect.Input[Throwable, String]\n  object PolyError  extends Poly.Effect.Error[Int, String]\n  object PolyOutput extends Poly.Effect.Output[Int, Throwable]\n  object PolyAll    extends Poly.Effect.InputErrorOutput\n\n  // We will learn about the compose layer in the next section\n  val compose: URLayer[Proxy, PolyService] =\n    ZLayer {\n      for {\n        proxy <- ZIO.service[Proxy]\n      } yield new PolyService {\n            def polyInput[I: Tag](input: I)               = proxy(PolyInput.of[I], input)\n            def polyError[E: Tag](input: Int)             = proxy(PolyError.of[E], input)\n            def polyOutput[A: Tag](input: Int)            = proxy(PolyOutput.of[A], input)\n            def polyAll[I: Tag, E: Tag, A: Tag](input: I) = proxy(PolyAll.of[I, E, A], input)\n        }\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Similarly, we use the same ",(0,o.jsx)(n.code,{children:"of"})," combinator to refer to concrete monomorphic call in our test suite when building expectations:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport MockPolyService._\n\nval exp06 = PolyInput.of[String](\n  Assertion.equalTo("foo"),\n  Expectation.value("bar")\n)\n\nval exp07 = PolyInput.of[Int](\n  Assertion.equalTo(42),\n  Expectation.failure(new Exception)\n)\n\nval exp08 = PolyInput.of[Long](\n  Assertion.equalTo(42L),\n  Expectation.value("baz")\n)\n\nval exp09 = PolyAll.of[Int, Throwable, String](\n  Assertion.equalTo(42),\n  Expectation.value("foo")\n)\n\nval exp10 = PolyAll.of[Int, Throwable, String](\n  Assertion.equalTo(42),\n  Expectation.failure(new Exception)\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"defining-a-layer-for-the-mocked-service",children:"Defining a Layer for the Mocked Service"}),"\n",(0,o.jsxs)(n.p,{children:["Finally, we need to define a ",(0,o.jsx)(n.em,{children:"compose layer"})," that can create our environment from a ",(0,o.jsx)(n.code,{children:"Proxy"}),". A ",(0,o.jsx)(n.code,{children:"Proxy"})," holds the mock state and serves predefined responses to calls."]}),"\n",(0,o.jsx)(n.p,{children:"So again, assume we have the following service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.mock._\n\ntrait ExampleService {\n  def exampleEffect(i: Int): Task[String]\n  def exampleMethod(i: Int): String\n  def exampleSink(a: Int): stream.Sink[Throwable, Int, Nothing, List[Int]]\n  def exampleStream(a: Int): stream.Stream[Throwable, String]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this step, we need to provide a layer in which used to construct the mocked object. To do that, we should obtain the ",(0,o.jsx)(n.code,{children:"Proxy"})," data type from the environment and then implement the service interface by wrapping all capability tags with proxy:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"object MockExampleService extends Mock[ExampleService] {\n  object ExampleEffect extends Effect[Int, Throwable, String]\n  object ExampleMethod extends Method[Int, Throwable, String]\n  object ExampleSink extends Sink[Any, Throwable, Int, Nothing, List[Int]]\n  object ExampleStream extends Stream[Int, Throwable, String]\n\n  override val compose: URLayer[Proxy, ExampleService] =\n    ZLayer {\n      ZIO.serviceWithZIO[Proxy] { proxy =>\n        withRuntime[Proxy, ExampleService] { runtime =>\n          ZIO.succeed {\n            new ExampleService {\n              override def exampleEffect(i: Int): Task[String] =\n                proxy(ExampleEffect, i)\n\n              override def exampleMethod(i: Int): String =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleMethod, i)).getOrThrow()\n                }\n\n              override def exampleSink(a: Int): stream.Sink[Throwable, Int, Nothing, List[Int]] =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleSink, a)).getOrThrow()\n                }\n\n              override def exampleStream(a: Int): stream.Stream[Throwable, String] =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleStream, a)).getOrThrow()\n                }\n            }\n          }\n        }\n      }\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," The ",(0,o.jsx)(n.code,{children:"withRuntime"})," helper is defined in ",(0,o.jsx)(n.code,{children:"Mock"}),". It accesses the Runtime via ",(0,o.jsx)(n.code,{children:"ZIO.runtime"})," and if you're on JS platform, it will replace the executor to an unyielding one."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A reference to this layer is passed to ",(0,o.jsx)(n.em,{children:"capability tags"}),", so it can be used to automatically build environment for composed expectations on multiple services."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala"})}),"\n",(0,o.jsx)(n.h2,{id:"the-complete-example",children:"The Complete Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"trait AccountEvent\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'// main sources\n\nimport zio._\nimport zio.mock._\n\ntrait AccountObserver {\n  def processEvent(event: AccountEvent): UIO[Unit]\n  def runCommand(): UIO[Unit]\n}\n\nobject AccountObserver {\n  def processEvent(event: AccountEvent) =\n    ZIO.serviceWithZIO[AccountObserver](_.processEvent(event))\n\n  def runCommand() =\n    ZIO.serviceWithZIO[AccountObserver](_.runCommand())\n}\n\ncase class AccountObserverLive(console: Console) extends AccountObserver {\n  def processEvent(event: AccountEvent): UIO[Unit] =\n    for {\n      _    <- console.printLine(s"Got $event").orDie\n      line <- console.readLine.orDie\n      _    <- console.printLine(s"You entered: $line").orDie\n    } yield ()\n\n  def runCommand(): UIO[Unit] =\n    console.printLine("Done!").orDie\n}\n\nobject AccountObserverLive {\n  val layer =\n    ZLayer {\n      for {\n        console <- ZIO.service[Console]\n      } yield AccountObserverLive(console)\n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// test sources\n\nobject AccountObserverMock extends Mock[AccountObserver] {\n\n  object ProcessEvent extends Effect[AccountEvent, Nothing, Unit]\n  object RunCommand   extends Effect[Unit, Nothing, Unit]\n\n  val compose: URLayer[Proxy, AccountObserver] =\n    ZLayer {\n      for {\n        proxy <- ZIO.service[Proxy]\n      } yield new AccountObserver {\n        def processEvent(event: AccountEvent) = proxy(ProcessEvent, event)\n        def runCommand(): UIO[Unit]           = proxy(RunCommand)\n      }\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"more-examples",children:"More examples"}),"\n",(0,o.jsxs)(n.p,{children:["We can find more examples in the ",(0,o.jsx)(n.code,{children:"examples"})," and ",(0,o.jsx)(n.code,{children:"test-tests"})," subproject:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/zio/zio/blob/master/examples/shared/src/test/scala/zio/examples/test/MockExampleSpec.scala",children:"MockExampleSpec"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/EmptyMockSpec.scala",children:"EmptyMockSpec"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedMockSpec.scala",children:"ComposedMockSpec"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedEmptyMockSpec.scala",children:"ComposedEmptyMockSpec"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/PolyMockSpec.scala",children:"PolyMockSpec"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["An ",(0,o.jsx)(n.code,{children:"Expectation[R]"})," is an immutable tree structure that represents expectations on environment ",(0,o.jsx)(n.code,{children:"R"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);