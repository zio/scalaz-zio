"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[52146],{91290:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-json/manual-instances","title":"Manual Instances","description":"Sometimes it is easier to reuse an existing JsonDecoder rather than generate a new one. This can be accomplished using convenience methods on the JsonDecoder typeclass to derive new decoders:","source":"@site/docs/zio-json/manual-instances.md","sourceDirName":"zio-json","slug":"/zio-json/manual-instances","permalink":"/zio-json/manual-instances","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-json/manual-instances.md","tags":[],"version":"current","frontMatter":{"id":"manual-instances","title":"Manual Instances"},"sidebar":"ecosystem-sidebar","previous":{"title":"Configuration","permalink":"/zio-json/configuration"},"next":{"title":"Performance","permalink":"/zio-json/performance"}}');var c=s(74848),i=s(28453);const r={id:"manual-instances",title:"Manual Instances"},a=void 0,t={},d=[{value:"<code>.map</code>",id:"map",level:3},{value:"<code>.mapOrFail</code>",id:"maporfail",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["Sometimes it is easier to reuse an existing ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," rather than generate a new one. This can be accomplished using convenience methods on the ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," typeclass to ",(0,c.jsx)(n.em,{children:"derive"})," new decoders:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"trait JsonDecoder[A] {\n  def map[B](f: A => B): JsonDecoder[B]\n  def mapOrFail[B](f: A => Either[String, B]): JsonDecoder[B]\n  ...\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Similarly, we can reuse an existing ",(0,c.jsx)(n.code,{children:"JsonEncoder"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"trait JsonEncoder[A] {\n  def contramap[B](f: B => A): JsonEncoder[B]\n  ...\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"map",children:(0,c.jsx)(n.code,{children:".map"})}),"\n",(0,c.jsxs)(n.p,{children:["We can ",(0,c.jsx)(n.code,{children:".map"})," from another ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," in cases where the conversion will always succeed. This is very useful if we have a ",(0,c.jsx)(n.code,{children:"case class"})," that simply wraps another thing and shares the same expected JSON."]}),"\n",(0,c.jsxs)(n.p,{children:["For example, say we want to model the count of fruit with a ",(0,c.jsx)(n.code,{children:"case class"})," to provide us with additional type safety in our business logic (this pattern is known as a ",(0,c.jsx)(n.em,{children:"newtype"}),")."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"case class FruitCount(value: Int)\n"})}),"\n",(0,c.jsx)(n.p,{children:"but this would cause us to expect JSON of the form"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{"value":1}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["wheres we really expect the raw number. We can derive a decoder from ",(0,c.jsx)(n.code,{children:"JsonDecoder[Int]"})," and ",(0,c.jsx)(n.code,{children:".map"})," the result into a ",(0,c.jsx)(n.code,{children:"FruitCount"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"object FruitCount {\n  implicit val decoder: JsonDecoder[FruitCount] = JsonDecoder[Int].map(FruitCount(_))\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["and now the ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," for ",(0,c.jsx)(n.code,{children:"FruitCount"})," just expects a raw ",(0,c.jsx)(n.code,{children:"Int"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Every time we use a ",(0,c.jsx)(n.code,{children:".map"})," to create a ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," we can usually create a ",(0,c.jsx)(n.code,{children:"JsonEncoder"})," with ",(0,c.jsx)(n.code,{children:".contramap"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"object FruitCount {\n  ...\n  implicit val encoder: JsonEncoder[FruitCount] = JsonEncoder[Int].contramap(_.value)\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Another use case is if we want to encode a ",(0,c.jsx)(n.code,{children:"case class"})," as an array of values, rather than an object with named fields. Such an encoding is very efficient because the messages are smaller and require less processing, but are very strict schemas that cannot be upgraded."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"case class Things(s: String, i: Int, b: Boolean)\nobject Things {\n  implicit val decoder: JsonDecoder[Things] =\n    JsonDecoder[(String, Int, Boolean)].map { case (p1, p2, p3) => Things(p1, p2, p3) }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"which parses the following JSON"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'["hello",1,true]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"maporfail",children:(0,c.jsx)(n.code,{children:".mapOrFail"})}),"\n",(0,c.jsxs)(n.p,{children:["We can use ",(0,c.jsx)(n.code,{children:".mapOrFail"})," to take the result of another ",(0,c.jsx)(n.code,{children:"JsonDecoder"})," and try to convert it into our custom data type, failing with a message if there is an error."]}),"\n",(0,c.jsxs)(n.p,{children:["Say we are using the ",(0,c.jsx)(n.a,{href:"https://github.com/fthomas/refined",children:(0,c.jsx)(n.code,{children:"refined"})})," library to ensure that a ",(0,c.jsx)(n.code,{children:"Person"})," data type only holds a non-empty string in its ",(0,c.jsx)(n.code,{children:"name"})," field"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"import zio.json._\nimport zio.json.interop.refined._\n\nimport eu.timepit.refined.api.Refined\nimport eu.timepit.refined.collection.NonEmpty\n\ncase class Person(name: String Refined NonEmpty)\n\nobject Person {\n  implicit val decoder: JsonDecoder[Person] = DeriveJsonDecoder.gen\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["we will get a compiletime error because there is no ",(0,c.jsx)(n.code,{children:"JsonDecoder[String Refined NonEmpty]"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["However, we can derive one by requesting the ",(0,c.jsx)(n.code,{children:"JsonDecoder[String]"})," and calling ",(0,c.jsx)(n.code,{children:".mapOrFail"}),", supplying the constructor for our special ",(0,c.jsx)(n.code,{children:"String Refined NonEmpty"})," type"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:"implicit val decodeName: JsonDecoder[String Refined NonEmpty] =\n  JsonDecoder[String].mapOrFail(refined.refineV[NonEmpty](_))\n"})}),"\n",(0,c.jsx)(n.p,{children:"Now the code compiles."}),"\n",(0,c.jsxs)(n.p,{children:["In fact, we do not need to provide ",(0,c.jsx)(n.code,{children:"decodeName"})," for each ",(0,c.jsx)(n.code,{children:"Refined"})," data type; ",(0,c.jsx)(n.code,{children:"zio-json"})," comes with support out of the box, see the Integrations section below."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(96540);const c={},i=o.createContext(c);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);