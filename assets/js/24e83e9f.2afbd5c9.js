"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[35347],{23843:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/index","title":"High Level API","description":"High Level API constructors for CRUD operations are found on the DynamoDBQuery companion object. They rely on a","source":"@site/docs/zio-dynamodb/reference/hi-level-api/index.md","sourceDirName":"zio-dynamodb/reference/hi-level-api","slug":"/zio-dynamodb/reference/hi-level-api/","permalink":"/zio-dynamodb/reference/hi-level-api/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"High Level API","sidebar_label":"High Level API"},"sidebar":"ecosystem-sidebar","previous":{"title":"Cats Effect Interop","permalink":"/zio-dynamodb/guides/ce-interop"},"next":{"title":"Creating Models","permalink":"/zio-dynamodb/reference/hi-level-api/creating-models/"}}');var o=r(74848),a=r(28453);const i={id:"index",title:"High Level API",sidebar_label:"High Level API"},c=void 0,s={},d=[];function m(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["High Level API constructors for CRUD operations are found on the ",(0,o.jsx)(n.code,{children:"DynamoDBQuery"})," companion object. They rely on a\nZIO Schema for a particular type being in implicit scope. This is achieved using the ",(0,o.jsx)(n.code,{children:"DeriveSchema.gen"})," macro.\nInternally codecs are automatically generated for the case classes based on the meta-data provided by the ",(0,o.jsx)(n.code,{children:"Schema"}),"'s."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"object DynamoDBQuery {\n\n  // CRUD operation constructors  \n\n  def put[A: Schema](tableName: String, a: A): DynamoDBQuery[A, Option[A]] = ???\n\n  def get[From: Schema](tableName: String)(\n    primaryKeyExpr: KeyConditionExpr.PrimaryKeyExpr[From]\n  ): DynamoDBQuery[From, Either[ItemError, From]] = ???\n\n  def update[From: Schema](tableName: String)(primaryKeyExpr: KeyConditionExpr.PrimaryKeyExpr[From])(\n      action: Action[From]\n    ): DynamoDBQuery[From, Option[From]]  = ???\n\n  def deleteFrom[From: Schema](\n    tableName: String\n  )(\n    primaryKeyExpr: KeyConditionExpr.PrimaryKeyExpr[From]\n  ): DynamoDBQuery[Any, Option[From]] = ???\n\n  // Scan/Query operations\n\n  def scanAll[A: Schema](\n    tableName: String\n  ): DynamoDBQuery[A, Stream[Throwable, A]] = ???\n\n  def scanSome[A: Schema](\n    tableName: String,\n    limit: Int\n  ): DynamoDBQuery[A, (Chunk[A], LastEvaluatedKey)] = ???  \n\n  def queryAll[A: Schema](\n    tableName: String\n  ): DynamoDBQuery[A, Stream[Throwable, A]] = ???\n\n  def querySome[A: Schema](\n    tableName: String,\n    limit: Int\n  ): DynamoDBQuery[A, (Chunk[A], LastEvaluatedKey)] = ???  \n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Once we have constructed  a type safe query we can execute it."}),"\n",(0,o.jsxs)(n.p,{children:["Methods that need a primary key expression take a ",(0,o.jsx)(n.code,{children:"KeyConditionExpr.PrimaryKeyExpr[From]"})," as an argument, however\nrather than create one directly we can create one using a ",(0,o.jsx)(n.code,{children:"ProjectionExpression"})," as a springboard"]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(96540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);