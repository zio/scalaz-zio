"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80793],{67626:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-schema/index","title":"Introduction to ZIO Schema","description":"ZIO Schema is a ZIO-based library for modeling the schema of data structures as first-class values.","source":"@site/docs/zio-schema/index.md","sourceDirName":"zio-schema","slug":"/zio-schema/","permalink":"/zio-schema/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to ZIO Schema","sidebar_label":"Introduction"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO SQS","permalink":"/zio-sqs/"},"next":{"title":"Motivation","permalink":"/zio-schema/motivation"}}');var t=s(74848),n=s(28453);const a={id:"index",title:"Introduction to ZIO Schema",sidebar_label:"Introduction"},r=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"What Problems Does ZIO Schema Solve?",id:"what-problems-does-zio-schema-solve",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://github.com/zio/zio-schema",children:"ZIO Schema"})," is a ",(0,t.jsx)(i.a,{href:"https://zio.dev",children:"ZIO"}),"-based library for modeling the schema of data structures as first-class values."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"})})," ",(0,t.jsx)(i.img,{src:"https://github.com/zio/zio-schema/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,t.jsx)(i.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-schema_2.13/",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,t.jsx)(i.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-schema_2.13/",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,t.jsx)(i.a,{href:"https://javadoc.io/doc/dev.zio/zio-schema-docs_2.13",children:(0,t.jsx)(i.img,{src:"https://javadoc.io/badge2/dev.zio/zio-schema-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,t.jsx)(i.a,{href:"https://github.com/zio/zio-schema",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/github/stars/zio/zio-schema?style=social",alt:"ZIO Schema"})})]}),"\n",(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(i.p,{children:"ZIO Schema helps us to solve some of the most common problems in distributed computing, such as serialization, deserialization, and data migration."}),"\n",(0,t.jsx)(i.p,{children:"It turns a compiled-time construct (the type of a data structure) into a runtime construct (a value that can be read, manipulated, and composed at runtime). A schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them first-class values."}),"\n",(0,t.jsx)(i.p,{children:"Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth."}),"\n",(0,t.jsx)(i.h2,{id:"what-problems-does-zio-schema-solve",children:"What Problems Does ZIO Schema Solve?"}),"\n",(0,t.jsxs)(i.p,{children:["With schema descriptions that can be automatically derived for case classes and sealed traits, ",(0,t.jsx)(i.em,{children:"ZIO Schema"})," will be going to provide powerful features for free:"]}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Metaprogramming without macros, reflection, or complicated implicit derivations.","\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Creating serialization and deserialization codecs for any supported protocol (JSON, Protobuf, etc.)"}),"\n",(0,t.jsxs)(i.li,{children:["Deriving standard type classes (",(0,t.jsx)(i.code,{children:"Eq"}),", ",(0,t.jsx)(i.code,{children:"Show"}),", ",(0,t.jsx)(i.code,{children:"Ordering"}),", etc.) from the structure of the data"]}),"\n",(0,t.jsx)(i.li,{children:"Default values for data types"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Automate ETL (Extract, Transform, Load) pipelines","\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Diffing: diffing between two values of the same type"}),"\n",(0,t.jsx)(i.li,{children:"Patching: applying a diff to a value to update it"}),"\n",(0,t.jsx)(i.li,{children:"Migration: migrating values from one type to another"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Computations as data: Not only we can turn types into values, but we can also turn computations into values. This opens up a whole new world of possibilities concerning distributed computing."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then ",(0,t.jsx)(i.em,{children:"ZIO Schema"})," lets us focus on data modeling and automatically tackle all the low-level, messy details for us."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.em,{children:"ZIO Schema"})," is used by a growing number of ZIO libraries, including ",(0,t.jsx)(i.a,{href:"https://zio.dev/zio-flow",children:"ZIO Flow"}),", ",(0,t.jsx)(i.a,{href:"https://zio-redis",children:"ZIO Redis"}),", ",(0,t.jsx)(i.a,{href:"https://zio.dev/zio-sql",children:"ZIO SQL"})," and ",(0,t.jsx)(i.a,{href:"https://zio.dev/zio-dynamodb",children:"ZIO DynamoDB"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(i.p,{children:["In order to use this library, we need to add the following lines in our ",(0,t.jsx)(i.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema"          % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-avro"     % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-bson"     % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-json"     % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-msg-pack" % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-protobuf" % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-thrift"   % "1.5.0"\nlibraryDependencies += "dev.zio" %% "zio-schema-zio-test" % "1.5.0"\n\n// Required for the automatic generic derivation of schemas\nlibraryDependencies += "dev.zio" %% "zio-schema-derivation" % "1.5.0"\nlibraryDependencies += "org.scala-lang" % "scala-reflect"  % scalaVersion.value % "provided"\n'})}),"\n",(0,t.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(i.p,{children:["In this simple example first, we create a schema for ",(0,t.jsx)(i.code,{children:"Person"})," and then run the ",(0,t.jsx)(i.em,{children:"diff"})," operation on two instances of the ",(0,t.jsx)(i.code,{children:"Person"})," data type, and finally, we encode a Person instance using ",(0,t.jsx)(i.em,{children:"Protobuf"})," protocol:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\nimport zio.schema.codec.{BinaryCodec, ProtobufCodec}\nimport zio.schema.{DeriveSchema, Schema}\n\nimport java.io.IOException\n\nfinal case class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person]    = DeriveSchema.gen\n  val protobufCodec: BinaryCodec[Person] = ProtobufCodec.protobufCodec\n}\n\nobject Main extends ZIOAppDefault {\n  def run: ZIO[Any, IOException, Unit] =\n    ZStream\n      .succeed(Person("John", 43))\n      .via(Person.protobufCodec.streamEncoder)\n      .runCollect\n      .flatMap(x =>\n        Console.printLine(s"Encoded data with protobuf codec: ${toHex(x)}")\n      )\n\n  def toHex(chunk: Chunk[Byte]): String =\n    chunk.map("%02X".format(_)).mkString\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"Here is the output of running the above program:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:"Encoded data with protobuf codec: 0A044A6F686E102B\n"})}),"\n",(0,t.jsx)(i.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"https://www.youtube.com/watch?v=GfNiDaL5aIM",children:"Zymposium - ZIO Schema"})," by John A. De Goes, Adam Fraser, and Kit Langton (May 2021)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"https://www.youtube.com/watch?v=lJziseYKvHo&t=481s",children:"ZIO SCHEMA: A Toolkit For Functional Distributed Computing"})," by Dan Harris (Functional Scala 2021)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"https://www.youtube.com/watch?v=ClePN4P9_pg",children:"Creating Declarative Query Plans With ZIO Schema"})," by Dan Harris (ZIO World 2022)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"https://www.youtube.com/watch?v=oRLkb6mqvVM",children:"Describing Data...with free applicative functors (and more)"})," by Kris Nuttycombe (Scala World) on the idea behind the ",(0,t.jsx)(i.a,{href:"https://github.com/nuttycom/xenomorph",children:"xenomorph"})," library"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>a,x:()=>r});var o=s(96540);const t={},n=o.createContext(t);function a(e){const i=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(n.Provider,{value:i},e.children)}}}]);