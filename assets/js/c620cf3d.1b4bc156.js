"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[66580],{6633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ecosystem/community/zio-slick-interop","title":"ZIO Slick Interop","description":"ZIO Slick Interop is a small library, that provides interop between Slick and ZIO.","source":"@site/docs/ecosystem/community/zio-slick-interop.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-slick-interop","permalink":"/ecosystem/community/zio-slick-interop","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-slick-interop.md","tags":[],"version":"current","frontMatter":{"id":"zio-slick-interop","title":"ZIO Slick Interop"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Saga","permalink":"/ecosystem/community/zio-saga"},"next":{"title":"ZIO Temporal","permalink":"/ecosystem/community/zio-temporal"}}');var o=i(74848),r=i(28453);const a={id:"zio-slick-interop",title:"ZIO Slick Interop"},s=void 0,l={},c=[{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function m(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/ScalaConsultants/zio-slick-interop",children:"ZIO Slick Interop"})," is a small library, that provides interop between Slick and ZIO."]}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,o.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.scalac" %% "zio-slick-interop" % "0.4.0"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["To run this example we should also add the ",(0,o.jsx)(n.em,{children:"HikariCP integration for Slick"})," in our ",(0,o.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "com.typesafe.slick" %% "slick-hikaricp" % "3.3.3"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Here is a full working example of creating database-agnostic Slick repository:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import com.typesafe.config.ConfigFactory\nimport slick.interop.zio.DatabaseProvider\nimport slick.interop.zio.syntax._\nimport slick.jdbc.H2Profile.api._\nimport slick.jdbc.JdbcProfile\nimport zio.console.Console\nimport zio.interop.console.cats.putStrLn\nimport zio.{ExitCode, IO, URIO, ZEnvironment, ZIO, ZLayer}\n\nimport scala.jdk.CollectionConverters._\n\ncase class Item(id: Long, name: String)\n\ntrait ItemRepository {\n  def add(name: String): IO[Throwable, Long]\n\n  def getById(id: Long): IO[Throwable, Option[Item]]\n\n  def upsert(name: String): IO[Throwable, Long]\n}\n\nobject ItemsTable {\n  class Items(tag: Tag) extends Table[Item](\n    _tableTag = tag,\n    _tableName = "ITEMS"\n  ) {\n    def id = column[Long]("ID", O.PrimaryKey, O.AutoInc)\n\n    def name = column[String]("NAME")\n\n    def * = (id, name) <> ((Item.apply _).tupled, Item.unapply _)\n  }\n\n  val table = TableQuery[ItemsTable.Items]\n}\n\nobject SlickItemRepository {\n  val live: ZLayer[DatabaseProvider, Throwable, ItemRepository] =\n    ZLayer.fromServiceM { db =>\n      db.profile.flatMap { profile =>\n        import profile.api._\n\n        val initialize = ZIO.fromDBIO(ItemsTable.table.schema.createIfNotExists)\n\n        val repository = new ItemRepository {\n          private val items = ItemsTable.table\n\n          def add(name: String): IO[Throwable, Long] =\n            ZIO\n              .fromDBIO((items returning items.map(_.id)) += Item(0L, name))\n              .provideEnvironment(ZEnvironment(db))\n\n          def getById(id: Long): IO[Throwable, Option[Item]] = {\n            val query = items.filter(_.id === id).result\n\n            ZIO.fromDBIO(query).map(_.headOption).provideEnvironment(ZEnvironment(db))\n          }\n\n          def upsert(name: String): IO[Throwable, Long] =\n            ZIO\n              .fromDBIO { implicit ec =>\n                (for {\n                  itemOpt <- items.filter(_.name === name).result.headOption\n                  id <- itemOpt.fold[DBIOAction[Long, NoStream, Effect.Write]](\n                    (items returning items.map(_.id)) += Item(0L, name)\n                  )(item => (items.map(_.name) update name).map(_ => item.id))\n                } yield id).transactionally\n              }\n              .provideEnvironment(Environment(db))\n        }\n\n        initialize.as(repository).provideEnvironment(Environment(db))\n      }\n    }\n}\n\n\nobject Main extends zio.App {\n\n  private val config = ConfigFactory.parseMap(\n    Map(\n      "url" -> "jdbc:h2:mem:test1;DB_CLOSE_DELAY=-1",\n      "driver" -> "org.h2.Driver",\n      "connectionPool" -> "disabled"\n    ).asJava\n  )\n\n  private val env: ZLayer[Any, Throwable, ItemRepository] =\n    (ZLayer.succeed(config) ++ ZLayer.succeed[JdbcProfile](\n      slick.jdbc.H2Profile\n    )) >>> DatabaseProvider.live >>> SlickItemRepository.live\n\n  val myApp: ZIO[Console with Has[ItemRepository], Throwable, Unit] =\n    for {\n      repo <- ZIO.service[ItemRepository]\n      aId1 <- repo.add("A")\n      _ <- repo.add("B")\n      a <- repo.getById(1L)\n      b <- repo.getById(2L)\n      aId2 <- repo.upsert("A")\n      _ <- putStrLn(s"$aId1 == $aId2")\n      _ <- putStrLn(s"A item: $a")\n      _ <- putStrLn(s"B item: $b")\n    } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.provideCustom(env).exitCode\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(96540);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);