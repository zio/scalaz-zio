"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[52119],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(96540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},57424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"reference/test/writing-our-first-test","title":"Writing Our First Test","description":"Any object that implements the ZIOSpecDefault trait is a runnable test. So to start writing tests we need to extend ZIOSpecDefault, which requires a Spec:","source":"@site/docs/reference/test/writing-our-first-test.md","sourceDirName":"reference/test","slug":"/reference/test/writing-our-first-test","permalink":"/reference/test/writing-our-first-test","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/writing-our-first-test.md","tags":[],"version":"current","frontMatter":{"id":"writing-our-first-test","title":"Writing Our First Test"},"sidebar":"reference-sidebar","previous":{"title":"Installation","permalink":"/reference/test/installation"},"next":{"title":"Running Tests","permalink":"/reference/test/running-tests"}}');var s=n(74848),o=n(28453);const i={id:"writing-our-first-test",title:"Writing Our First Test"},l=void 0,c={},a=[];function d(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Any object that implements the ",(0,s.jsx)(t.code,{children:"ZIOSpecDefault"})," trait is a runnable test. So to start writing tests we need to extend ",(0,s.jsx)(t.code,{children:"ZIOSpecDefault"}),", which requires a ",(0,s.jsx)(t.code,{children:"Spec"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.test._\n\nobject HelloWorldSpec extends ZIOSpecDefault {\n  def spec = \n    suite("HelloWorldSpec")(\n      ??? // all tests go here\n    )\n}\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["In order to have runnable tests, the ",(0,s.jsx)(t.code,{children:"ZIOSpecDefault"})," trait must be extended by an ",(0,s.jsx)(t.strong,{children:"object"})," that implements the ",(0,s.jsx)(t.code,{children:"spec"})," method. If we extend this trait in a class, the test runner will not be able to find the tests."]})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ZIOSpecDefault"})," is very similar in its logic of operations to ",(0,s.jsx)(t.code,{children:"ZIOAppDefault"}),". Instead of providing one ",(0,s.jsx)(t.code,{children:"ZIO"})," application at the end of the world, we provide a suite that can be a tree of other suites and tests."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test._\nimport zio.test.Assertion._\n\nimport java.io.IOException\n\nimport HelloWorld._\n\nobject HelloWorld {\n  def sayHello: ZIO[Any, IOException, Unit] =\n    Console.printLine("Hello, World!")\n}\n\nobject HelloWorldSpec extends ZIOSpecDefault {\n  def spec = suite("HelloWorldSpec")(\n    test("sayHello correctly displays output") {\n      for {\n        _      <- sayHello\n        output <- TestConsole.output\n      } yield assertTrue(output == Vector("Hello, World!\\n"))\n    }\n  )\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In the example above, our test involved the effect of printing to the console, but we didn't have to do anything differently in our test. Also note that the ",(0,s.jsx)(t.code,{children:"helloWorld"})," method in the above program does not actually print a string to the console instead writes it to a buffer for testing."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);