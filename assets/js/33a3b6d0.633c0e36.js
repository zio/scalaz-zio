"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[42429],{60396:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"zio-nio/charsets","title":"Character Sets","description":"The zio.nio.charset package offers an API for ZIO programs to work with character sets, using the Java NIO support for character sets. Any character set supported by your JVM can be used.","source":"@site/docs/zio-nio/charsets.md","sourceDirName":"zio-nio","slug":"/zio-nio/charsets","permalink":"/zio-nio/charsets","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-nio/charsets.md","tags":[],"version":"current","frontMatter":{"id":"charsets","title":"Character Sets"},"sidebar":"ecosystem-sidebar","previous":{"title":"Resource Management","permalink":"/zio-nio/resources"},"next":{"title":"Use Cases","permalink":"/zio-nio/use-cases"}}');var t=s(74848),i=s(28453);const o={id:"charsets",title:"Character Sets"},a=void 0,c={},d=[{value:"<code>Charset</code>",id:"charset",level:2},{value:"Standard Charsets",id:"standard-charsets",level:3},{value:"Example",id:"example",level:3},{value:"Stream Encoding and Decoding",id:"stream-encoding-and-decoding",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"zio.nio.charset"})," package offers an API for ZIO programs to work with character sets, using the Java NIO support for character sets. Any character set supported by your JVM can be used."]}),"\n",(0,t.jsx)(n.h2,{id:"charset",children:(0,t.jsx)(n.code,{children:"Charset"})}),"\n",(0,t.jsxs)(n.p,{children:["This class wraps the ",(0,t.jsx)(n.code,{children:"java.nio.charset.Charset"})," class with a ZIO-friendly API. There are convenience methods for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"encoding/decoding buffers"}),"\n",(0,t.jsx)(n.li,{children:"encoding/decoding single chunks"}),"\n",(0,t.jsx)(n.li,{children:"encoding/decoding strings"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more sophisticated encoding/decoding needs, a ",(0,t.jsx)(n.code,{children:"CharsetEncoder"})," or ",(0,t.jsx)(n.code,{children:"CharsetDecoder"})," can be obtained from a ",(0,t.jsx)(n.code,{children:"Charset"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"standard-charsets",children:"Standard Charsets"}),"\n",(0,t.jsxs)(n.p,{children:["The standard set of charsets provided by Java are available in ",(0,t.jsx)(n.code,{children:"Charset.Standard"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"utf8"}),"\n",(0,t.jsx)(n.li,{children:"utf16"}),"\n",(0,t.jsx)(n.li,{children:"utf16Be"}),"\n",(0,t.jsx)(n.li,{children:"utf16Le"}),"\n",(0,t.jsx)(n.li,{children:"usAscii"}),"\n",(0,t.jsx)(n.li,{children:"iso8859_1"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["JVMs typically support many more charsets than these; use ",(0,t.jsx)(n.code,{children:"Charset.availableCharsets"})," to retrieve the complete list."]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.nio.charset._\nimport zio.nio.file.Files\nimport zio.nio.file.Path\n\nval s = "Hello, world!"\nfor {\n  utf16Bytes <- Charset.Standard.utf16.encodeString(s)\n  _          <- Files.writeBytes(Path("utf16.txt"), utf16Bytes)\n} yield ()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"stream-encoding-and-decoding",children:"Stream Encoding and Decoding"}),"\n",(0,t.jsx)(n.p,{children:"Using streams instead of buffers or chunks is great for bigger jobs. ZIO Streams comes with a UTF-8 decoder built in, but if you need other character sets, or you need encoding, then ZIO-NIO can help\u2014as long as you're running on the JVM."}),"\n",(0,t.jsxs)(n.p,{children:["Stream-based encoding and decoding are provided by the ",(0,t.jsx)(n.code,{children:"transducer"})," method of the ",(0,t.jsx)(n.code,{children:"CharsetEncoder"})," and ",(0,t.jsx)(n.code,{children:"CharsetDecoder"})," classes respectively."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.nio.charset._\nimport zio.nio.channels.FileChannel\nimport zio.nio.channels._\nimport zio.nio.file.Path\nimport zio.stream.ZStream\nimport zio.blocking.Blocking\nimport zio.console\nimport zio.ZIO\n\n// dump a file encoded in ISO8859 to the console\n\nFileChannel.open(Path("iso8859.txt")).useNioBlockingOps { fileOps =>\n  val inStream: ZStream[Blocking, Exception, Byte] = ZStream.repeatEffectChunkOption {\n    fileOps.readChunk(1000).asSomeError.flatMap { chunk =>\n      if (chunk.isEmpty) ZIO.fail(None) else ZIO.succeed(chunk)\n    }\n  }\n\n  // apply decoding transducer\n  val charStream: ZStream[Blocking, Exception, Char] =\n    inStream.transduce(Charset.Standard.iso8859_1.newDecoder.transducer())\n\n  console.putStrLn("ISO8859 file contents:") *>\n    charStream.foreachChunk(chars => console.putStr(chars.mkString))\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);