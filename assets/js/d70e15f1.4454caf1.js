"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[98284],{12416:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"zio-direct/other-supported-monads","title":"Other Supported Monads","description":"As of RC5, zio-direct now supports ZStream and ZPure as well as scala.concurrent.Future and scala.List. The latter two are largely fully functional but largely for demonstration purposes.","source":"@site/docs/zio-direct/other-supported-monads.md","sourceDirName":"zio-direct","slug":"/zio-direct/other-supported-monads","permalink":"/zio-direct/other-supported-monads","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-direct/other-supported-monads.md","tags":[],"version":"current","frontMatter":{"id":"other-supported-monads","title":"Other Supported Monads","sidebar_label":"Other Supported Monads"},"sidebar":"ecosystem-sidebar","previous":{"title":"IntelliJ Support","permalink":"/zio-direct/intellij-support"},"next":{"title":"Introduction to ZIO DynamoDB","permalink":"/zio-dynamodb/"}}');var o=t(74848),a=t(28453);const i={id:"other-supported-monads",title:"Other Supported Monads",sidebar_label:"Other Supported Monads"},s=void 0,c={},l=[{value:"ZStream",id:"zstream",level:2},{value:"ZPure",id:"zpure",level:2},{value:"List and Future",id:"list-and-future",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["As of RC5, zio-direct now supports ZStream and ZPure as well as ",(0,o.jsx)(n.code,{children:"scala.concurrent.Future"})," and ",(0,o.jsx)(n.code,{children:"scala.List"}),". The latter two are largely fully functional but largely for demonstration purposes."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Note that all of these are currently only supported in Scala 3."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"zstream",children:"ZStream"}),"\n",(0,o.jsxs)(n.p,{children:["To use zio-direct with ZStream, add the following to your ",(0,o.jsx)(n.code,{children:"build.sbt"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-direct-streams" % "1.0.0-RC7"\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can then use zio-direct with ZStream:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.direct.stream._\n\nval out =\n  defer {\n    val a = ZStream(1, 2, 3).each\n    val b = ZStream("foo", "bar").each\n    (a, b)\n  }\n\nout.runCollect\n// ZIO.succeed(Chunk((1,"foo"),(1,"bar"),(2,"foo"),(2,"bar"),(3,"foo"),(3,"bar")))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note that if you are also using zio-direct with ZIO, you should rename the ",(0,o.jsx)(n.code,{children:"defer"})," function to avoid conflicts:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.direct.stream.{ defer => deferStream, _ }\nimport zio.direct._\n\n// The `run` function of ZStream is called `each`\nval outStream: ZStream[Any, Nothing, (Int, String)] =\n  deferStream {\n    val a = ZStream(1, 2, 3).each\n    val b = ZStream("foo", "bar").each\n    (a, b)\n  }\n\nval outZio: ZIO[Any, Nothing, Chunk[(Int, String)]] =\n  defer {\n    val a: Chunk[(Int, String)] = outStream.runCollect.run\n    val b = ZIO.succeed((123, "baz")).run\n    a :+ b\n  }\n\n// Yields:\n// ZIO.succeed(Chunk((1,"foo"),(1,"bar"),(2,"foo"),(2,"bar"),(3,"foo"),(3,"bar"),(123, "baz")))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"zpure",children:"ZPure"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:'Note that Metals auto-complete/type-info popups may be sluggish when using ZPure, especially when try/catch constructs are being used.\nIn some cases, you may need to wait for a "Loading..." popup message for 20-30 seconds although the actual (bloop) compile time\nwill just be a few seconds.'}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To use zio-direct with ZPure, add the following to your ",(0,o.jsx)(n.code,{children:"build.sbt"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-direct-pure" % "1.0.0-RC7"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In order to use zio-direct with ZPure, you first need to define a ",(0,o.jsx)(n.code,{children:"deferWith[W, S]"})," context which will define the Logging (",(0,o.jsx)(n.code,{children:"W"}),") and State (",(0,o.jsx)(n.code,{children:"S"}),") types for your ZPure computation."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Due to limitations of Scala 3, you may need to create the state object type in a separate file (or you may get cyclical-dependency compile-time errors)."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val dc = deferWith[String, MyState]\nimport dc._\n\n// The `run` function of ZStream is called `eval`\nval out =\n  defer {\n    val s1 = ZPure.get[MyState].eval.value\n    ZPure.set(MyState("bar")).eval\n    val s2 = ZPure.get[MyState].eval.value\n    (s1, s2)\n  }\n\nout.provideState(MyState("foo")).run\n// ("foo", "bar")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In order to avoid having to specify the state-type over and over again, several helpers are provided (they are imported from ",(0,o.jsx)(n.code,{children:"dc._"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val dc = deferWith[String, MyState]\nimport dc._\n\n// The `run` function of ZStream is called `eval`\nval out =\n  defer {\n    val s1 = getState().value\n    setState(MyState("bar"))\n    val s2 = getState().value\n    (s1, s2)\n  }\n\nout.provideState(MyState("foo")).run\n// ("foo", "bar")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"list-and-future",children:"List and Future"}),"\n",(0,o.jsxs)(n.p,{children:["Support for Scala's ",(0,o.jsx)(n.code,{children:"List"})," and ",(0,o.jsx)(n.code,{children:"Future"})," objects is provided from zio-direct."]}),"\n",(0,o.jsxs)(n.p,{children:["To use zio-direct with ",(0,o.jsx)(n.code,{children:"List"})," do the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.direct.list._\n\nval out =\n  defer {\n    val a = List(1, 2, 3)\n    val b = List("foo", "bar")\n    (a, b)\n  }\n\n// Yields:\n// List((1,"foo"),(1,"bar"),(2,"foo"),(2,"bar"),(3,"foo"),(3,"bar"))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To use zio-direct with ",(0,o.jsx)(n.code,{children:"Future"})," do the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.direct.future._\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nval out =\n  defer {\n    Future("a").run match {\n      case "a" => Future(1).run\n      case "b" => Future(2).run\n    }\n  }\n\n// Yields: Future(1)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note that it is not necessary to implement ExecutionContext.Implicits.global. You can\nimplicitly pass in any ExecutionContext you want. It just needs to be in-scope when you\ncall the ",(0,o.jsx)(n.code,{children:"defer"})," function (i.e. ",(0,o.jsx)(n.code,{children:"zio.direct.future.defer"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.direct.future._\n\ndef out(implicit ctx: ExecutionContext) =\n  defer {\n    Future("a").run match {\n      case "a" => Future(1).run\n      case "b" => Future(2).run\n    }\n  }\n\nout(scala.concurrent.ExecutionContext.global)\n// Yields: Future(1)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(96540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);