"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[86905],{92323:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/contextual/zlayer","title":"ZLayer","description":"A ZLayer[-RIn, +E, +ROut] describes a layer of an application: every layer in an application requires some services as input RIn and produces some services as the output ROut.","source":"@site/docs/reference/contextual/zlayer.md","sourceDirName":"reference/contextual","slug":"/reference/contextual/zlayer","permalink":"/reference/contextual/zlayer","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/contextual/zlayer.md","tags":[],"version":"current","frontMatter":{"id":"zlayer","title":"ZLayer"},"sidebar":"reference-sidebar","previous":{"title":"ZIO Environment Use-cases","permalink":"/reference/contextual/zio-environment-use-cases"},"next":{"title":"Automatic ZLayer Derivation","permalink":"/reference/contextual/automatic-zlayer-derivation"}}');var i=a(74848),s=a(28453);const c={id:"zlayer",title:"ZLayer"},t=void 0,o={},l=[{value:"Creation",id:"creation",level:2},{value:"From a Simple Value or an Existing Service",id:"from-a-simple-value-or-an-existing-service",level:3},{value:"From Non-resourceful Effects",id:"from-non-resourceful-effects",level:3},{value:"From Functions",id:"from-functions",level:3},{value:"Automatic Derivation",id:"automatic-derivation",level:3},{value:"Converting a Layer to a Scoped Value",id:"converting-a-layer-to-a-scoped-value",level:2},{value:"Falling Back to an Alternate Layer",id:"falling-back-to-an-alternate-layer",level:2},{value:"Converting a Layer to a ZIO Application",id:"converting-a-layer-to-a-zio-application",level:2},{value:"Retrying",id:"retrying",level:2},{value:"Layer Projection",id:"layer-projection",level:2},{value:"Tapping",id:"tapping",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ZLayer[-RIn, +E, +ROut]"})," describes a layer of an application: every layer in an application requires some services as input ",(0,i.jsx)(n.code,{children:"RIn"})," and produces some services as the output ",(0,i.jsx)(n.code,{children:"ROut"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We can think of a layer as mental model of an asynchronous function from ",(0,i.jsx)(n.code,{children:"RIn"})," to the ",(0,i.jsx)(n.code,{children:"Either[E, ROut]"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"type ZLayer[-RIn, +E, +ROut] = RIn => async Either[E, ROut]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For example, a ",(0,i.jsx)(n.code,{children:"ZLayer[Socket & Persistence, Throwable, Database]"})," can be thought of as a function that map ",(0,i.jsx)(n.code,{children:"Socket"})," and ",(0,i.jsx)(n.code,{children:"Persistence"})," services into ",(0,i.jsx)(n.code,{children:"Database"})," service:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"(Socket, Persistence) => Database\n"})}),"\n",(0,i.jsxs)(n.p,{children:["So we can say that the ",(0,i.jsx)(n.code,{children:"Database"})," service has two dependencies: ",(0,i.jsx)(n.code,{children:"Socket"})," and ",(0,i.jsx)(n.code,{children:"Persistence"})," services."]}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, a ",(0,i.jsx)(n.code,{children:"ZLayer"})," may not have any dependencies or requirements from the environment. In this case, we can specify ",(0,i.jsx)(n.code,{children:"Any"})," for the ",(0,i.jsx)(n.code,{children:"RIn"})," type parameter. The ",(0,i.jsx)(n.a,{href:"/reference/contextual/layer",children:(0,i.jsx)(n.code,{children:"Layer"})})," type alias provided by ZIO is a convenient way to define a layer without requirements."]}),"\n",(0,i.jsx)(n.p,{children:"ZLayers are:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recipes for Creating Services"})," \u2014 They describe how to create services from given dependencies. For example, the ",(0,i.jsx)(n.code,{children:"ZLayer[Socket & Database, Throwable, UserRepo]"})," is a recipe for building a service that requires ",(0,i.jsx)(n.code,{children:"Socket"})," and ",(0,i.jsx)(n.code,{children:"Database"})," service, and it produces a ",(0,i.jsx)(n.code,{children:"UserRepo"})," service."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"An Alternative to Constructors"})," \u2014 We can think of ",(0,i.jsx)(n.code,{children:"ZLayer"})," as a more powerful version of a constructor, it is an alternative way to represent a constructor. Like a constructor, it allows us to build the ",(0,i.jsx)(n.code,{children:"ROut"})," service in terms of its dependencies (",(0,i.jsx)(n.code,{children:"RIn"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Composable"})," \u2014 Because of their excellent ",(0,i.jsx)(n.strong,{children:"composition properties"}),", layers are the idiomatic way in ZIO to create services that depend on other services. We can define layers that are relying on each other."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Effectful and Resourceful"})," \u2014 The construction of ZIO layers can be effectful and resourceful. They can be acquired effectfully and safely released when the services are done being utilized or even in case of failure, interruption, or defects in the application."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to create a recipe for a ",(0,i.jsx)(n.code,{children:"Database"})," service, we should describe how the ",(0,i.jsx)(n.code,{children:"Database"})," will be initialized using an acquisition action. In addition, it may contain information about how the ",(0,i.jsx)(n.code,{children:"Database"})," releases its connection pools."]}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asynchronous"})," \u2014 Unlike class constructors which are blocking, ",(0,i.jsx)(n.code,{children:"ZLayer"})," is fully asynchronous and non-blocking. Note that in non-blocking applications we typically want to avoid creating something that is blocking inside its constructor."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, when we are constructing some sort of Kafka streaming service, we might want to connect to the Kafka cluster in the constructor of our service, which takes some time. So it wouldn't be a good idea to block inside the constructor. There are some workarounds for fixing this issue, but they are not as perfect as the ZIO solution which allows for asynchronous, non-blocking constructors."}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallelism"})," \u2014 ZIO layers can be acquired in parallel, unlike class constructors, which do not support parallelism. When we compose multiple layers and then acquire them, the construction of each layer will occur in parallel. This will reduce the initialization time of ZIO applications with a large number of dependencies."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["With ZIO ZLayer, our constructor could be asynchronous, but it could also block. We can acquire resources asynchronously or in a blocking fashion, and spend some time doing that, and we don't need to worry about it. That is not an anti-pattern. This is the best practice with ZIO. And that is because ",(0,i.jsx)(n.code,{children:"ZLayer"})," has the full power of the ",(0,i.jsx)(n.code,{children:"ZIO"})," data type, and as a result, we have strictly more power on our constructors with ",(0,i.jsx)(n.code,{children:"ZLayer"}),"."]}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resilient"})," \u2014 Layer construction can be resilient. So if the acquiring phase fails, we can have a schedule to retry the acquiring stage. This helps us write apps that are error-proof and respond appropriately to failures."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's see how we can create a layer:"}),"\n",(0,i.jsx)(n.h2,{id:"creation",children:"Creation"}),"\n",(0,i.jsx)(n.p,{children:"There are four main ways to create a ZLayer:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ZLayer.succeed"})," for creating layers from simple values."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ZLayer.scoped"})," for creating layers with ",(0,i.jsx)(n.em,{children:"for comprehension"})," style from resourceful effects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ZLayer.apply"}),"/",(0,i.jsx)(n.code,{children:"ZLayer.fromZIO"})," for creating layers with ",(0,i.jsx)(n.em,{children:"for comprehension"})," style from effectual but not resourceful effects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ZLayer.fromFunction"})," for creating layers that are neither effectual nor resourceful."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now let's look at each of these methods."}),"\n",(0,i.jsx)(n.h3,{id:"from-a-simple-value-or-an-existing-service",children:"From a Simple Value or an Existing Service"}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"ZLayer.succeed"})," we can construct a ",(0,i.jsx)(n.code,{children:"ZLayer"})," from a value. It returns a ",(0,i.jsx)(n.code,{children:"ULayer[A]"})," value, which represents a layer of an application that has a service of type ",(0,i.jsx)(n.code,{children:"A"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def succeed[A: Tag](a: A): ULayer[A]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"ZLayer.succeed"})," we can create a layer containing ",(0,i.jsx)(n.em,{children:"simple value"})," or a ",(0,i.jsx)(n.em,{children:"service"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["To create a layer from a ",(0,i.jsx)(n.em,{children:"simple value"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nval configLayer: ULayer[AppConfig] = ZLayer.succeed(AppConfig("localhost", 8080))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, we created a ",(0,i.jsx)(n.code,{children:"configLayer"})," that provides us an instance of ",(0,i.jsx)(n.code,{children:"AppConfig"}),"."]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["To create a layer from an ",(0,i.jsx)(n.em,{children:"existing service"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait EmailService {\n  def send(email: String, content: String): UIO[Unit]\n}\n\nobject EmailService {\n  val layer: ZLayer[Any, Nothing, EmailService] = \n    ZLayer.succeed( \n      new EmailService {\n        override def send(email: String, content: String): UIO[Unit] = ???\n      }\n    )\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-non-resourceful-effects",children:"From Non-resourceful Effects"}),"\n",(0,i.jsxs)(n.p,{children:["This is the for-comprehension way of creating a ZIO service using ",(0,i.jsx)(n.code,{children:"ZLayer.apply"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait A\ntrait B\ntrait C\ncase class CLive(a: A, b: B) extends C\n\nobject CLive {\n  val layer: ZLayer[A & B, Nothing, C] =\n    ZLayer {\n      for {\n        a <- ZIO.service[A]\n        b <- ZIO.service[B]\n      } yield CLive(a, b)\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-functions",children:"From Functions"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ZLayer[R, E, A]"})," can be thought of as a function from ",(0,i.jsx)(n.code,{children:"R"})," to ",(0,i.jsx)(n.code,{children:"A"}),". So we can convert functions to the ",(0,i.jsx)(n.code,{children:"ZLayer"})," using the ",(0,i.jsx)(n.code,{children:"ZLayer.fromFunction"})," constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, the ",(0,i.jsx)(n.code,{children:"CLive"})," implementation requires two ",(0,i.jsx)(n.code,{children:"A"})," and ",(0,i.jsx)(n.code,{children:"B"})," services, and we can easily convert that case class to a ",(0,i.jsx)(n.code,{children:"ZLayer"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait A\ntrait B\ntrait C\ncase class CLive(a: A, b: B) extends C\n\nobject CLive {\n  val layer: ZLayer[A & B, Nothing, C] = \n    ZLayer.fromFunction(CLive.apply _)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Below is a complete working example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class DatabaseConfig()\n\nobject DatabaseConfig {\n  val live = ZLayer.succeed(DatabaseConfig())\n}\n\ncase class Database(databaseConfig: DatabaseConfig)\n\nobject Database {\n  val live: ZLayer[DatabaseConfig, Nothing, Database] =\n    ZLayer.fromFunction(Database.apply _)\n}\n\ncase class Analytics()\n\nobject Analytics {\n  val live: ULayer[Analytics] = ZLayer.succeed(Analytics())\n}\n\ncase class Users(database: Database, analytics: Analytics)\n\nobject Users {\n  val live = ZLayer.fromFunction(Users.apply _)\n}\n\ncase class App(users: Users, analytics: Analytics) {\n  def execute: UIO[Unit] =\n    ZIO.debug(s"This app is made from ${users} and ${analytics}")\n}\n\nobject App {\n  val live = ZLayer.fromFunction(App.apply _)\n}\n\nobject MainApp extends ZIOAppDefault {\n\n  def run =\n    ZIO\n      .serviceWithZIO[App](_.execute)\n      // Cannot use `provide` due to this dotty bug: https://github.com/lampepfl/dotty/issues/12498\n      .provideLayer(\n        (((DatabaseConfig.live >>> Database.live) ++ Analytics.live >>> Users.live) ++ Analytics.live) >>> App.live\n      )\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"automatic-derivation",children:"Automatic Derivation"}),"\n",(0,i.jsxs)(n.p,{children:["Simple layers can be derived using ",(0,i.jsx)(n.code,{children:"ZLayer.derive"}),". See ",(0,i.jsx)(n.a,{href:"/reference/contextual/automatic-zlayer-derivation",children:"Automatic ZLayer Derivation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"converting-a-layer-to-a-scoped-value",children:"Converting a Layer to a Scoped Value"}),"\n",(0,i.jsxs)(n.p,{children:["Every ",(0,i.jsx)(n.code,{children:"ZLayer"})," can be converted to a scoped ",(0,i.jsx)(n.code,{children:"ZIO"})," by using ",(0,i.jsx)(n.code,{children:"ZLayer.build"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ntrait Database {\n  def close: UIO[Unit]\n}\n\nobject Database {\n  def connect: ZIO[Any, Throwable, Database] = ???\n}\n\nval database: ZLayer[Any, Throwable, Database] =\n  ZLayer.scoped {\n    ZIO.acquireRelease {\n      Database.connect.debug("connecting to the database")\n    } { database =>\n      database.close\n    }\n  }\n\nval scopedDatabase: ZIO[Scope, Throwable, ZEnvironment[Database]] =\n  database.build\n'})}),"\n",(0,i.jsx)(n.h2,{id:"falling-back-to-an-alternate-layer",children:"Falling Back to an Alternate Layer"}),"\n",(0,i.jsxs)(n.p,{children:["If a layer fails, we can provide an alternative layer by using ",(0,i.jsx)(n.code,{children:"ZLayer#orElse"})," so it will fall back to the second layer:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait Database\n\nval postgresDatabaseLayer: ZLayer[Any, Throwable, Database] = ???\nval inmemoryDatabaseLayer: ZLayer[Any, Throwable, Database] = ???\n\nval databaseLayer: ZLayer[Any, Throwable, Database] =\n  postgresDatabaseLayer.orElse(inmemoryDatabaseLayer)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"converting-a-layer-to-a-zio-application",children:"Converting a Layer to a ZIO Application"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes our entire application is a ZIO Layer, e.g. an HTTP Server, so by calling the ",(0,i.jsx)(n.code,{children:"ZLayer#launch"})," we can convert that to a ZIO application. This will build the layer and use it until it is interrupted."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object MainApp extends ZIOAppDefault {\n\n  val httpServer: ZLayer[Any, Nothing, HttpServer] =\n    ZLayer.make[HttpServer](\n      JsonParserLive.layer,\n      TemplateEngineLive.layer \n    )\n\n  def run = httpServer.launch\n\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"retrying",children:"Retrying"}),"\n",(0,i.jsx)(n.p,{children:"We can retry constructing a layer in case of failure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nval databaseLayer: ZLayer[Any, Throwable, DatabaseConnection]   = ???\n\nval retriedLayer : ZLayer[Clock, Throwable, DatabaseConnection] = databaseLayer.retry(Schedule.fibonacci(1.second))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"layer-projection",children:"Layer Projection"}),"\n",(0,i.jsxs)(n.p,{children:["We can project out a part of ",(0,i.jsx)(n.code,{children:"ZLayer"})," by providing a projection function to the ",(0,i.jsx)(n.code,{children:"ZLayer#project"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ncase class Connection(host: String, port: Int) \ncase class Login(user: String, password: String)\n\ncase class DBConfig(\n  connection: Connection, \n  login: Login\n)\n\nval connection: ZLayer[DBConfig, Nothing, Connection] = \n  ZLayer.service[DBConfig].project(_.connection)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tapping",children:"Tapping"}),"\n",(0,i.jsxs)(n.p,{children:["We can perform a specified effect based on the success or failure result of the layer using ",(0,i.jsx)(n.code,{children:"ZLayer#tap"}),"/",(0,i.jsx)(n.code,{children:"ZLayer#tapError"}),". This would not change the layer's signature:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nval config: ZLayer[Any, Throwable, AppConfig] =\n  ZLayer.fromZIO(\n    ZIO.attempt(???) // reading config from a file\n  )\n\nval res: ZLayer[Any, Throwable, AppConfig] =\n  config\n    .tap(cnf => ZIO.debug(s"layer acquisition succeeded with $cnf"))\n    .tapError(err => ZIO.debug(s"error occurred during reading the config $err"))\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>t});var r=a(96540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);