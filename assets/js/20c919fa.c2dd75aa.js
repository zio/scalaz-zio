"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[33124],{89857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-mock/expectation","title":"Expectation","description":"An Expectation[R] is an immutable tree structure that represents expectations on environment R.","source":"@site/docs/zio-mock/expectation.md","sourceDirName":"zio-mock","slug":"/zio-mock/expectation","permalink":"/zio-mock/expectation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-mock/expectation.md","tags":[],"version":"current","frontMatter":{"id":"expectation","title":"Expectation"},"sidebar":"ecosystem-sidebar","previous":{"title":"Mock","permalink":"/zio-mock/mock"},"next":{"title":"ZIO NIO","permalink":"/zio-nio/"}}');var i=t(74848),s=t(28453);const r={id:"expectation",title:"Expectation"},c=void 0,a={},l=[{value:"Defining Expectations",id:"defining-expectations",level:2},{value:"Providing Mocked Environment",id:"providing-mocked-environment",level:3},{value:"Mocking Unused Collaborators",id:"mocking-unused-collaborators",level:3},{value:"Mocking Multiple Collaborators",id:"mocking-multiple-collaborators",level:3},{value:"Expectations",id:"expectations",level:2},{value:"<code>value</code>",id:"value",level:3},{value:"<code>valueF</code>",id:"valuef",level:3},{value:"<code>valueZIO</code>",id:"valuezio",level:3},{value:"<code>unit</code>",id:"unit",level:3},{value:"<code>failure</code>",id:"failure",level:3},{value:"<code>never</code>",id:"never",level:3},{value:"Composing Expectations",id:"composing-expectations",level:2},{value:"<code>and</code>",id:"and",level:3},{value:"<code>or</code>",id:"or",level:3},{value:"<code>andThen</code>",id:"andthen",level:3},{value:"Exact Repetition",id:"exact-repetition",level:3},{value:"Range of Repetitions",id:"range-of-repetitions",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"Expectation[R]"})," is an immutable tree structure that represents expectations on environment ",(0,i.jsx)(n.code,{children:"R"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"defining-expectations",children:"Defining Expectations"}),"\n",(0,i.jsxs)(n.p,{children:["ZIO Test has a variety of expectations, such as ",(0,i.jsx)(n.code,{children:"value"}),", ",(0,i.jsx)(n.code,{children:"unit"}),", ",(0,i.jsx)(n.code,{children:"failure"}),", and ",(0,i.jsx)(n.code,{children:"never"}),". In this section we are going to learn each of these expectations and their variant, by mocking the ",(0,i.jsx)(n.code,{children:"UserService"})," service. So let's assume we have the following service:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.mock._\nimport zio.test._\n\ncase class User(id: String, name: String)\n\ntrait UserService {\n  def insert(user: User): IO[String, Unit]\n  def remove(id: String): IO[String, Unit]\n  def totalUsers: IO[String, Int]\n  def recentUsers(n: Int): IO[String, List[User]]\n  def removeAll: IO[String, Unit]\n}\n\nobject UserService {\n  def totalUsers: ZIO[UserService, String, Int] =\n    ZIO.serviceWithZIO(_.totalUsers)\n\n  def insert(user: User): ZIO[UserService, String, Unit] =\n    ZIO.serviceWithZIO(_.insert(user))\n\n  def recentUsers(n: Int): ZIO[UserService, String, List[User]] =\n    ZIO.serviceWithZIO(_.recentUsers(n))\n\n  def remove(id: String): ZIO[UserService, String, Unit] =\n    ZIO.serviceWithZIO(_.remove(id))\n   \n  def removeAll: ZIO[UserService, String, Unit] = \n    ZIO.serviceWithZIO(_.removeAll) \n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can write the mock version of this class as below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"\nobject MockUserService extends Mock[UserService] {\n\n  object Insert      extends Effect[User, String, Unit]\n  object Remove      extends Effect[String, String, Unit]\n  object RecentUsers extends Effect[Int, String, List[User]]\n  object TotalUsers  extends Effect[Unit, String, Int]\n  object RemoveAll   extends Effect[Unit, String, Unit]\n\n  val compose: URLayer[mock.Proxy, UserService] =\n    ZLayer {\n      for {\n        proxy <- ZIO.service[mock.Proxy]\n      } yield new UserService {\n        override def insert(user: User):  IO[String, Unit]       = proxy(Insert, user)\n        override def remove(id: String):  IO[String, Unit]       = proxy(Remove, id)\n        override def recentUsers(n: Int): IO[String, List[User]] = proxy(RecentUsers, n)\n        override def totalUsers:          IO[String, Int]        = proxy(TotalUsers)\n        override def removeAll:           IO[String, Unit]       = proxy(RemoveAll)\n      }\n\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create expectations we use the previously defined ",(0,i.jsx)(n.em,{children:"capability tags"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"For methods that take input, the first argument will be an assertion on input, and the second the predefined result."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.mock._\nimport zio.test._\n\nval exp01 = MockUserService.RecentUsers( // capability to build an expectation for\n  Assertion.equalTo(5), // assertion of the expected input argument\n  Expectation.value(List(User("1", "Jane Doe"), User("2", "John Doe"))) // result, that will be returned\n)\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"For methods that take no input, we only define the expected output:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val exp02 = MockUserService.TotalUsers(Expectation.value(42))\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["For methods that may return ",(0,i.jsx)(n.code,{children:"Unit"}),", we may skip the predefined result (it will default to successful value) or use ",(0,i.jsx)(n.code,{children:"unit"})," helper:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val exp03 = MockUserService.Remove(\n  Assertion.equalTo("1"),\n  Expectation.unit\n)\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["For methods that may return ",(0,i.jsx)(n.code,{children:"Unit"})," and take no input we can skip both:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val exp04 = MockUserService.RemoveAll()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"providing-mocked-environment",children:"Providing Mocked Environment"}),"\n",(0,i.jsxs)(n.p,{children:["Each expectation can be taught of a mocked environment. They can be converted to a ",(0,i.jsx)(n.code,{children:"ZLayer"})," implicitly. Therefore, we can compose them together and provide them to the environment of the SUT (System Under Test)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\n\nimport zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("expecting simple value on call to nextInt") {\n  val sut     = Random.nextInt\n  val mockEnv = MockRandom.NextInt(Expectation.value(5))\n  for {\n    total <- sut.provideLayer(mockEnv)\n  } yield assertTrue(total == 5)\n} \n'})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-unused-collaborators",children:"Mocking Unused Collaborators"}),"\n",(0,i.jsxs)(n.p,{children:["Often the dependency on a collaborator is only in some branches of the code. To test the correct behaviour of branches without dependencies, we still have to provide it to the environment, but we would like to assert it was never called. With the ",(0,i.jsx)(n.code,{children:"Mock.empty"})," method we can obtain a ",(0,i.jsx)(n.code,{children:"ZLayer"})," with an empty service (no calls expected):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.mock._\nimport zio.test._\n\nobject MaybeConsoleSpec extends MockSpecDefault {\n  def spec = suite("processEvent")(\n    test("expect no call") {\n      def maybeConsole(invokeConsole: Boolean) =\n        ZIO.when(invokeConsole)(Console.printLine("foo"))\n\n      val sut1     = maybeConsole(false).unit\n      val mockEnv1 = MockConsole.empty\n\n      val sut2     = maybeConsole(true).unit\n      val mockEnv2 = MockConsole.PrintLine(\n        Assertion.equalTo("foo"),\n        Expectation.unit\n      )\n\n      for {\n        _ <- sut1.provideLayer(mockEnv1)\n        _ <- sut2.provideLayer(mockEnv2)\n      } yield assertTrue(true)\n    }\n  )\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-multiple-collaborators",children:"Mocking Multiple Collaborators"}),"\n",(0,i.jsxs)(n.p,{children:["In some cases we have more than one collaborating service being called. We can create mocks for rich environments and as you enrich the environment by using ",(0,i.jsx)(n.em,{children:"capability tags"})," from another service, the underlying mocked layer will be updated."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("mocking multiple collaborators") {\n  val sut =\n    for {\n      _ <- Console.printLine("What is your name?")\n      name <- Console.readLine.orDie\n      num <- Random.nextInt\n      _ <- Console.printLine(s"$name, your lucky number today is $num!")\n    } yield ()\n\n  val mockEnv: ULayer[Console with Random] = MockConsole.PrintLine(\n    Assertion.equalTo("What is your name?"),\n    Expectation.unit\n  ) ++ MockConsole.ReadLine(Expectation.value("Mike")) ++\n    MockRandom.NextInt(Expectation.value(42)) ++\n    MockConsole.PrintLine(\n      Assertion.equalTo("Mike, your lucky number today is 42!"),\n      Expectation.unit\n    )\n    \n  for {\n    _ <- sut.provideLayer(mockEnv)\n  } yield assertTrue(true)\n} \n'})}),"\n",(0,i.jsx)(n.h2,{id:"expectations",children:"Expectations"}),"\n",(0,i.jsxs)(n.p,{children:["In the most robust example, the result can be either a successful value or a failure. In this section we are going to introduce all these cases, by using the proper expectation from ",(0,i.jsx)(n.code,{children:"zio.mock.Expectation"})," companion object:"]}),"\n",(0,i.jsx)(n.h3,{id:"value",children:(0,i.jsx)(n.code,{children:"value"})}),"\n",(0,i.jsx)(n.p,{children:"Expecting a simple value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("expecting simple value") {\n  val sut     = UserService.totalUsers\n  val mockEnv = MockUserService.TotalUsers(Expectation.value(14))\n  for {\n    total <- sut.provideLayer(mockEnv)\n  } yield assertTrue(total == 14)\n} \n'})}),"\n",(0,i.jsx)(n.h3,{id:"valuef",children:(0,i.jsx)(n.code,{children:"valueF"})}),"\n",(0,i.jsx)(n.p,{children:"Expecting a value based on input arguments:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("an expectation based on input arguments") {\n  val sut     = UserService.recentUsers(3)\n  val mockEnv = MockUserService.RecentUsers(\n    Assertion.isPositive,\n    Expectation.valueF(n =>\n      (1 to n).map(id => User(id.toString, "name")).toList\n    )\n  )\n\n  for {\n    users <- sut.provideLayer(mockEnv)\n  } yield assertTrue(users.map(_.id) == List("1", "2", "3"))\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"valuezio",children:(0,i.jsx)(n.code,{children:"valueZIO"})}),"\n",(0,i.jsx)(n.p,{children:"Expecting a value based on the input arguments and also the result of an effectful operation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("effectful expectation") {\n  val sut     = UserService.recentUsers(3)\n  val mockEnv = MockUserService.RecentUsers(\n    Assertion.isPositive,\n    Expectation.valueZIO(n =>\n      ZIO.foreach(1 to n) { n =>\n        Random\n          .nextUUID\n          .map(id => User(id.toString, s"name-$n"))\n      }.map(_.toList)\n    )\n  )\n\n  for {\n    users <- sut.provideLayer(mockEnv)\n  } yield assertTrue(List("name-1", "name-2", "name-3") == users.map(_.name))\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unit",children:(0,i.jsx)(n.code,{children:"unit"})}),"\n",(0,i.jsx)(n.p,{children:"Expecting simple unit value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("expecting unit") {\n  val sut     = UserService.remove("1")\n  val mockEnv = MockUserService.Remove(\n    Assertion.isNonEmptyString,\n    Expectation.unit\n  )\n  \n  for {\n    res <- sut.provideLayer(mockEnv).exit\n  } yield assertTrue(\n    res match {\n      case Exit.Success(()) => true\n      case _ => false\n    }\n  )\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"failure",children:(0,i.jsx)(n.code,{children:"failure"})}),"\n",(0,i.jsx)(n.p,{children:"Expecting a failure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("failure expectation") {\n  val sut = UserService.totalUsers\n  val mockEnv = MockUserService.TotalUsers(Expectation.failure("connection failed"))\n  \n  for {\n    total <- sut.provideLayer(mockEnv).exit\n  } yield assertTrue(\n    total match {\n      case Exit.Success(_) =>\n        false\n      case Exit.Failure(cause) =>\n        cause.contains(Cause.fail("connection failed"))\n    }\n  )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["There are also ",(0,i.jsx)(n.code,{children:"failureF"})," and ",(0,i.jsx)(n.code,{children:"failureZIO"})," variants like what we described for ",(0,i.jsx)(n.code,{children:"value"})," expectation."]}),"\n",(0,i.jsx)(n.h3,{id:"never",children:(0,i.jsx)(n.code,{children:"never"})}),"\n",(0,i.jsx)(n.p,{children:"This expectation simulates a never-ending loop:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("never ending expectation") {\n  val sut     = UserService.totalUsers\n  val mockEnv = MockUserService.TotalUsers(\n    Expectation.never\n  )\n\n  for {\n    r <- Live.live(\n      sut.provideLayer(mockEnv).timeout(500.millis)\n    )\n  } yield assertTrue(r.isEmpty)\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"composing-expectations",children:"Composing Expectations"}),"\n",(0,i.jsxs)(n.p,{children:["We can combine our expectation to build complex scenarios using combinators defined in ",(0,i.jsx)(n.code,{children:"zio.mock.Expectation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"and",children:(0,i.jsx)(n.code,{children:"and"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"and"})," (alias ",(0,i.jsx)(n.code,{children:"&&"}),") operator composes two expectations, producing a new expectation to ",(0,i.jsx)(n.strong,{children:"satisfy both in any order"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("satisfy both expectations with a logical `and` operator") {\n  val sut     = UserService.recentUsers(5) *> UserService.totalUsers\n  val mockEnv = MockUserService.TotalUsers(Expectation.value(1)).and(\n    MockUserService.RecentUsers(\n      Assertion.isPositive,\n      Expectation.value(List(User("1", "user"))))\n  )\n\n  for {\n    total <- sut.provideLayer(mockEnv)\n  } yield assertTrue(total == 1)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"or",children:(0,i.jsx)(n.code,{children:"or"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"or"})," (alias ",(0,i.jsx)(n.code,{children:"||"}),") operator composes two expectations, producing a new expectation to ",(0,i.jsx)(n.strong,{children:"satisfy only one of them"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("satisfy one of expectations with a logical `or` operator") {\n  val sut     = UserService.totalUsers\n  val mockEnv = MockUserService.TotalUsers(Expectation.value(1)).or(\n    MockUserService.RecentUsers(\n      Assertion.isPositive,\n      Expectation.value(List(User("1", "user"))))\n  )\n\n  for {\n    total <- sut.provideLayer(mockEnv)\n  } yield assertTrue(total == 1)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"andthen",children:(0,i.jsx)(n.code,{children:"andThen"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"andThen"})," (alias ",(0,i.jsx)(n.code,{children:"++"}),") operator composes two expectations, producing a new expectation to ",(0,i.jsx)(n.strong,{children:"satisfy both sequentially"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("satisfy sequence of two expectations with `andThen` operator") {\n  val sut     = UserService.recentUsers(5) *> UserService.totalUsers\n  val mockEnv = MockUserService.RecentUsers(\n    Assertion.isPositive,\n    Expectation.value(List(User("1", "user")))\n  ) andThen MockUserService.TotalUsers(Expectation.value(1))\n\n  for {\n    total <- sut.provideLayer(mockEnv)\n  } yield assertTrue(total == 1)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, changing the SUT to ",(0,i.jsx)(n.code,{children:"UserService.totalUsers *> UserService.remove(1)"})," will fail the test."]}),"\n",(0,i.jsx)(n.h3,{id:"exact-repetition",children:"Exact Repetition"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"exactly"})})," \u2014 Produces a new expectation to satisfy itself exactly the given number of times:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("satisfying exact repetition of a method call") {\n  val sut     = ZIO.foreach(List("1", "2", "3", "4"))(id => UserService.remove(id))\n  val mockEnv = MockUserService.Remove(\n    Assertion.isNonEmptyString\n  ).exactly(4)\n\n  for {\n    _ <- sut.provideLayer(mockEnv)\n  } yield assertTrue(true)\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"twice"})})," and ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"thrice"})})," \u2014 Aliases for ",(0,i.jsx)(n.code,{children:"exactly(2)"})," and ",(0,i.jsx)(n.code,{children:"exactly(3)"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"range-of-repetitions",children:"Range of Repetitions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Expectation#repeats(range: Range)"})})," \u2014 Repeats this expectation within given bounds, producing a new expectation to ",(0,i.jsx)(n.strong,{children:"satisfy itself sequentially given number of times"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("expect repeated calls") {\n  val sut     = Random.nextInt *> Random.nextInt\n  val mockEnv = MockRandom.NextInt(Expectation.value(42)).repeats(2 to 4)\n\n  for {\n    _ <- sut.provideLayer(mockEnv)\n  } yield assertTrue(true)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, if we repeat ",(0,i.jsx)(n.code,{children:"nextInt"})," less than 2 or over 4 times, the test will fail."]}),"\n",(0,i.jsxs)(n.p,{children:["Another note on repetitions is that, if we compose expectations with ",(0,i.jsx)(n.code,{children:"andThen"}),"/",(0,i.jsx)(n.code,{children:"++"}),", once another repetition starts executing, it must be completed in order to satisfy the composite expectation. For example ",(0,i.jsx)(n.code,{children:"(A ++ B).repeats(1, 2)"})," will be satisfied by either ",(0,i.jsx)(n.code,{children:"A->B"})," (one repetition) or ",(0,i.jsx)(n.code,{children:"A->B->A->B"})," (two repetitions), but will fail on ",(0,i.jsx)(n.code,{children:"A->B->A"})," (incomplete second repetition):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.mock.Expectation._\nimport zio.test.{test, _}\n\ntest("if another repetition starts executing, it must be completed") {\n  val sut     = Random.nextInt *> Random.nextBoolean *> Random.nextInt\n  val mockEnv = (MockRandom.NextInt(value(42)) ++ MockRandom.NextBoolean(value(true)))\n    .repeats(1 to 2)\n  for {\n    _ <- sut.provideLayer(mockEnv)\n  } yield assertTrue(true)\n} @@ TestAspect.failing\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"atLeast(min: Int)"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"atMost(max: Int)"})}),", and ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"optional"})})," expectations are other variants for ",(0,i.jsx)(n.code,{children:"repeats"})," expectation."]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"atLeast"})," operator is a lower-bounded variant of ",(0,i.jsx)(n.code,{children:"repeated"}),", produces a new expectation to satisfy ",(0,i.jsx)(n.strong,{children:"itself sequentially at least given number of times"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"atMost"})," operator is an upper-bounded variant of ",(0,i.jsx)(n.code,{children:"repeated"}),", produces a new expectation to satisfy ",(0,i.jsx)(n.strong,{children:"itself sequentially at most given number of times"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"optional"})," operator is an alias for ",(0,i.jsx)(n.code,{children:"atMost(1)"}),", produces a new expectation to satisfy ",(0,i.jsx)(n.strong,{children:"itself at most once"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MockClock"})," is a built-in mock version of the [",(0,i.jsx)(n.code,{children:"Clock"}),"] service."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of mocking ",(0,i.jsx)(n.code,{children:"Clock.nanoTime"})," capability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.mock.Expectation._\nimport zio.test.{test, _}\n\ntest("calling mocked nanoTime should return expected time") {\n  val app = Clock.nanoTime\n  val env = MockClock.NanoTime(value(1000L))\n  val out = app.provideLayer(env)\n  out.map(r => assertTrue(r == 1000L))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MockConsole"})," is a built-in mock version of the [",(0,i.jsx)(n.code,{children:"Console"}),"] service."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of mocking ",(0,i.jsx)(n.code,{children:"Console.readLine"})," capability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("calling mocked readline should return expected value") {\n  for {\n    line <- Console.readLine.provideLayer(\n      MockConsole.ReadLine(Expectation.value("foo"))\n    )\n  } yield assertTrue(line == "foo")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MockRandom"})," is a built-in mock version of the [",(0,i.jsx)(n.code,{children:"Random"}),"] service. It mocks all the random service capabilities."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's how we can mock the ",(0,i.jsx)(n.code,{children:"MockRandom.nextIntBounded"})," capability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("expect call with input satisfying assertion and transforming it into output") {\n  for {\n    out <- Random.nextIntBounded(1).provideLayer(\n      MockRandom.NextIntBounded(\n        Assertion.equalTo(1),\n        Expectation.valueF(_ + 41)\n      )\n    )\n  } yield assertTrue(out == 42)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MockSystem"})," is a built-in mock version of the [",(0,i.jsx)(n.code,{children:"System"}),"] service. It mocks all the system service capabilities."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's how we can mock the ",(0,i.jsx)(n.code,{children:"MockSystem.property"})," capability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.mock._\nimport zio.test.{test, _}\n\ntest("calling mocked property should return expected property") {\n  for {\n    property <- System.property("java.vm.name").provideLayer(\n      MockSystem.Property(\n        Assertion.equalTo("java.vm.name"),\n        Expectation.value(Some("OpenJDK 64-Bit Server VM"))\n      )\n    )\n  } yield assertTrue(property.get.contains("OpenJDK"))\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);