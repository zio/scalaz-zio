"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[78879],{64300:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"zio-schema/operations/diffing-and-patching","title":"Diffing and Patching","description":"ZIO Schema provides two methods called diff and patch:","source":"@site/docs/zio-schema/operations/diffing-and-patching.md","sourceDirName":"zio-schema/operations","slug":"/zio-schema/operations/diffing-and-patching","permalink":"/zio-schema/operations/diffing-and-patching","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/diffing-and-patching.md","tags":[],"version":"current","frontMatter":{"id":"diffing-and-patching","title":"Diffing and Patching"},"sidebar":"ecosystem-sidebar","previous":{"title":"Validation","permalink":"/zio-schema/operations/validation"},"next":{"title":"Schema Migration","permalink":"/zio-schema/operations/schema-migration"}}');var i=t(74848),s=t(28453);const o={id:"diffing-and-patching",title:"Diffing and Patching"},c=void 0,d={},r=[];function h(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["ZIO Schema provides two methods called ",(0,i.jsx)(n.code,{children:"diff"})," and ",(0,i.jsx)(n.code,{children:"patch"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"sealed trait Schema[A] {\n  def diff(thisValue: A, thatValue: A): Patch[A]\n\n  def patch(oldValue: A, diff: Patch[A]): scala.util.Either[String, A]\n} \n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"diff"})," method takes two values of the same type ",(0,i.jsx)(n.code,{children:"A"})," and returns a ",(0,i.jsx)(n.code,{children:"Patch[A]"})," value that describes the differences between the two values. conversely, the ",(0,i.jsx)(n.code,{children:"patch"})," method takes a value of type ",(0,i.jsx)(n.code,{children:"A"})," and a ",(0,i.jsx)(n.code,{children:"Patch[A]"})," value and returns a new value of type ",(0,i.jsx)(n.code,{children:"A"})," that is the result of applying the patch to the original value."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is a simple example that demonstrate the how to use ",(0,i.jsx)(n.code,{children:"diff"})," and ",(0,i.jsx)(n.code,{children:"patch"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.schema._\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n}\n\nval oldValue = Person("John", 42)\nval newValue = Person("John", 43)\n\nval patch: Patch[Person] =\n  Person.schema.diff(oldValue, newValue)\n\nassert(\n  Person.schema.patch(oldValue, patch) == Right(newValue)\n)\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);