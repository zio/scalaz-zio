"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[74264],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(96540);const c={},o=t.createContext(c);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},41160:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/concurrency/zrefm","title":"ZRefM","description":"A ZRefM[RA, RB, EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference.","source":"@site/versioned_docs/version-1.0.18/reference/concurrency/zrefm.md","sourceDirName":"reference/concurrency","slug":"/reference/concurrency/zrefm","permalink":"/1.0.18/reference/concurrency/zrefm","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/concurrency/zrefm.md","tags":[],"version":"1.0.18","frontMatter":{"id":"zrefm","title":"ZRefM"},"sidebar":"overview_sidebar","previous":{"title":"Ref","permalink":"/1.0.18/reference/concurrency/ref"},"next":{"title":"RefM","permalink":"/1.0.18/reference/concurrency/refm"}}');var c=r(74848),o=r(28453);const i={id:"zrefm",title:"ZRefM"},s=void 0,l={},d=[];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["A ",(0,c.jsx)(n.code,{children:"ZRefM[RA, RB, EA, EB, A, B]"})," is a polymorphic, purely functional description of a mutable reference."]}),"\n",(0,c.jsxs)(n.p,{children:["The fundamental operations of a ",(0,c.jsx)(n.code,{children:"ZRefM"}),"are ",(0,c.jsx)(n.code,{children:"set"})," and ",(0,c.jsx)(n.code,{children:"get"}),"."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"set"})})," takes a value of type ",(0,c.jsx)(n.code,{children:"A"})," and sets the reference to a new value, requiring an environment of type ",(0,c.jsx)(n.code,{children:"RA"})," and potentially failing with an error of type ",(0,c.jsx)(n.code,{children:"EA"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"get"})})," gets the current value of the reference and returns a value of type ",(0,c.jsx)(n.code,{children:"B"}),", requiring an environment of type\n",(0,c.jsx)(n.code,{children:"RB"})," and potentially failing with an error of type ",(0,c.jsx)(n.code,{children:"EB"}),"."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["When the error and value types of the ",(0,c.jsx)(n.code,{children:"ZRefM"})," are unified, that is, it is a ",(0,c.jsx)(n.code,{children:"ZRefM[E, E, A, A]"}),", the ",(0,c.jsx)(n.code,{children:"ZRefM"})," also supports atomic ",(0,c.jsx)(n.code,{children:"modify"})," and ",(0,c.jsx)(n.code,{children:"update"})," operations."]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:"Note:"})})}),"\n",(0,c.jsxs)(n.p,{children:["Unlike ",(0,c.jsx)(n.code,{children:"ZRef"}),", ",(0,c.jsx)(n.code,{children:"ZRefM"})," allows performing effects within update operations, at some cost to performance. Writes will semantically block other writers, while multiple readers can read simultaneously."]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}}}]);