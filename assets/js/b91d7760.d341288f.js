"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[25459],{35446:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"izumi-reflect/index","title":"Introduction to izumi-reflect","description":"@quote: Looks a bit similar to TypeTag","source":"@site/docs/izumi-reflect/index.md","sourceDirName":"izumi-reflect","slug":"/izumi-reflect/","permalink":"/izumi-reflect/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/izumi-reflect/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to izumi-reflect","sidebar_label":"izumi-reflect"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Ecosystem Official Libraries","permalink":"/ecosystem/officials/"},"next":{"title":"ZIO 2.x Interop Cats 2.x","permalink":"/zio2-interop-cats2/"}}');var s=t(74848),l=t(28453);const n={id:"index",title:"Introduction to izumi-reflect",sidebar_label:"izumi-reflect"},c="izumi-reflect",o={},a=[{value:"Why <code>izumi-reflect</code>",id:"why-izumi-reflect",level:2},{value:"Credits",id:"credits",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Debugging",id:"debugging",level:2},{value:"<code>gzoller/scala-reflection</code>",id:"gzollerscala-reflection",level:2},{value:"<code>airframe-surface</code>",id:"airframe-surface",level:2},{value:"And even more",id:"and-even-more",level:2}];function d(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"izumi-reflect",children:"izumi-reflect"})}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"@quote: Looks a bit similar to TypeTag"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," is a fast, lightweight, portable and efficient alternative for ",(0,s.jsx)(i.code,{children:"TypeTag"})," from ",(0,s.jsx)(i.code,{children:"scala-reflect"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," is a lightweight model of Scala type system and provides a simulator of the important parts of the Scala typechecker."]}),"\n",(0,s.jsxs)(i.h2,{id:"why-izumi-reflect",children:["Why ",(0,s.jsx)(i.code,{children:"izumi-reflect"})]}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," compiles faster, runs a lot faster than ",(0,s.jsx)(i.code,{children:"scala-reflect"})," and is fully immutable and ",(0,s.jsx)(i.a,{href:"https://github.com/scala/bug/issues/10766",children:"thread-safe"}),","]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," supports Scala 2.11, 2.12, 2.13 and ",(0,s.jsx)(i.strong,{children:"Scala 3"}),","]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," supports Scala.js and Scala Native,"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," works well with ",(0,s.jsx)(i.a,{href:"https://www.graalvm.org/reference-manual/native-image/",children:"GraalVM Native Image"}),","]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," allows you to obtain tags for unapplied type constructors (",(0,s.jsx)(i.code,{children:"F[_]"}),") and combine them at runtime."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"credits",children:"Credits"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," has been created by ",(0,s.jsx)(i.a,{href:"https://7mind.io",children:"Septimal Mind"})," to power ",(0,s.jsx)(i.a,{href:"https://github.com/7mind/izumi",children:"Izumi Project"}),",\nas a replacement for ",(0,s.jsx)(i.code,{children:"TypeTag"})," in reaction to a lack of confirmed information about the future of ",(0,s.jsx)(i.code,{children:"scala-reflect"}),"/",(0,s.jsx)(i.code,{children:"TypeTag"})," in Scala 3 (",(0,s.jsx)(i.a,{href:"https://blog.7mind.io/lightweight-reflection.html",children:"Motivation"}),"), and donated to ZIO."]}),"\n",(0,s.jsx)("p",{align:"center",children:(0,s.jsx)("a",{href:"https://izumi.7mind.io/",children:(0,s.jsx)("img",{width:"40%",src:"https://github.com/7mind/izumi/blob/develop/doc/microsite/src/main/tut/media/izumi-logo-full-purple.png?raw=true",alt:"Izumi"})})}),"\n",(0,s.jsx)(i.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"}),' model of the Scala type system is not 100% precise, but "good enough" for the vast majority of the usecases.']}),"\n",(0,s.jsx)(i.p,{children:"Known limitations are:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Recursive type bounds (F-bounded types) are not preserved and may produce false positives,"}),"\n",(0,s.jsxs)(i.li,{children:["Existential types, both written with wildcards and ",(0,s.jsx)(i.code,{children:"forSome"})," may produce unexpected results, the support is limited,"]}),"\n",(0,s.jsx)(i.li,{children:"Path-Dependent Types are based on variable names and may cause unexpected results when variables with different names have the same type or vice-versa (vs. Scala compiler)"}),"\n",(0,s.jsxs)(i.li,{children:["This-Types such as ",(0,s.jsx)(i.code,{children:"X.this.type"})," are ignored and identical to ",(0,s.jsx)(i.code,{children:"X"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"izumi-reflect"})," is less powerful than ",(0,s.jsx)(i.code,{children:"scala-reflect"}),": it does not preserve fields and methods when it's not necessary for equality and subtype checks, it does not preserve code trees, internal compiler data structures, etc."]}),"\n",(0,s.jsxs)(i.li,{children:["There are some optimizations in place which reduce correctness, namely: subtype check for ",(0,s.jsx)(i.code,{children:"scala.Matchable"})," will always return true, no distinction is made between ",(0,s.jsx)(i.code,{children:"scala.Any"})," and ",(0,s.jsx)(i.code,{children:"scala.AnyRef"}),"."]}),"\n",(0,s.jsx)(i.li,{children:"Lower bounds are not preserved in abstract higher-kinded type members which may produce false comparisons."}),"\n",(0,s.jsxs)(i.li,{children:["Type and value members are not preserved in concrete types which may produce false comparisons with refined/structural types. (",(0,s.jsx)(i.a,{href:"https://github.com/zio/izumi-reflect/issues/481",children:"https://github.com/zio/izumi-reflect/issues/481"}),")"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsxs)(i.p,{children:["Set ",(0,s.jsx)(i.a,{href:"https://javadoc.io/doc/dev.zio/izumi-reflect_2.13/latest/izumi/reflect/DebugProperties$.html#izumi.reflect.debug.macro.rtti:String(%22izumi.reflect.debug.macro.rtti%22)",children:(0,s.jsx)(i.code,{children:"-Dizumi.reflect.debug.macro.rtti=true"})})," to enable debug output during compilation when tags are constructed and at runtime when they are compared."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-shell",children:"sbt -Dizumi.reflect.debug.macro.rtti=true\n"})}),"\n",(0,s.jsxs)(i.p,{children:["To see debug output when compiling in Intellij, add the above flag to ",(0,s.jsx)(i.code,{children:"VM options"})," in ",(0,s.jsx)(i.a,{href:"jetbrains://idea/settings?name=Build%2C+Execution%2C+Deployment--Compiler--Scala+Compiler--Scala+Compile+Server",children:"Preferences -> Build, Execution, Deployment -> Compiler -> Scala Compiler -> Scala Compile Server"})]}),"\n",(0,s.jsxs)(i.p,{children:["You may also set it in ",(0,s.jsx)(i.code,{children:".jvmopts"})," file during development. (",(0,s.jsx)(i.code,{children:".jvmopts"})," properties will not apply to Intellij compile server, only to sbt)"]}),"\n",(0,s.jsxs)(i.p,{children:["Set ",(0,s.jsx)(i.code,{children:"-Dizumi.reflect.debug.macro.rtti.assertions=true"})," to enable additional assertions."]}),"\n",(0,s.jsx)(i.p,{children:"Other useful system properties are:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://javadoc.io/doc/dev.zio/izumi-reflect_2.13/latest/izumi/reflect/DebugProperties$.html#izumi.reflect.rtti.optimized.equals:String(%22izumi.reflect.rtti.optimized.equals%22)",children:(0,s.jsx)(i.code,{children:"izumi.reflect.rtti.optimized.equals"})})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://javadoc.io/doc/dev.zio/izumi-reflect_2.13/latest/izumi/reflect/DebugProperties$.html#izumi.reflect.rtti.cache.compile:String(%22izumi.reflect.rtti.cache.compile%22)",children:(0,s.jsx)(i.code,{children:"izumi.reflect.rtti.cache.compile"})})}),"\n"]}),"\n",(0,s.jsx)(i.h1,{id:"talks",children:"Talks"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.youtube.com/watch?v=wsLhjqCKZuU",children:"Kit Langton \u2014 Scala 3 Macro Fun (Open Source Hackery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"https://www.youtube.com/watch?v=ShRfzVz58OY",children:"Pavel Shirshov \u2014 Izumi Reflect: Scala Type System Model"})}),"\n"]}),"\n",(0,s.jsx)(i.h1,{id:"see-also",children:"See also"}),"\n",(0,s.jsx)(i.h2,{id:"gzollerscala-reflection",children:(0,s.jsx)(i.a,{href:"https://github.com/gzoller/scala-reflection",children:(0,s.jsx)(i.code,{children:"gzoller/scala-reflection"})})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Scala 3 only"}),"\n",(0,s.jsx)(i.li,{children:"No support for subtype checks"}),"\n",(0,s.jsx)(i.li,{children:"Type lambdas are not supported"}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.em,{children:"Preserves field information"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"airframe-surface",children:(0,s.jsx)(i.a,{href:"https://wvlet.org/airframe/docs/airframe-surface",children:(0,s.jsx)(i.code,{children:"airframe-surface"})})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Scala 2 and Scala 3"}),"\n",(0,s.jsx)(i.li,{children:"No support for subtype checks"}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.em,{children:"Preserves field information"})}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"and-even-more",children:"And even more"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://github.com/gaeljw/typetrees",children:"https://github.com/gaeljw/typetrees"})," - a very basic type tag substitute for Scala 3"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://stackoverflow.com/questions/75752812/is-there-a-simple-scala-3-example-of-how-to-use-quoted-type-as-replacement-for",children:"https://stackoverflow.com/questions/75752812/is-there-a-simple-scala-3-example-of-how-to-use-quoted-type-as-replacement-for"})," - discussion on StackOverflow"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://contributors.scala-lang.org/t/scala-3-and-reflection/3627",children:"https://contributors.scala-lang.org/t/scala-3-and-reflection/3627"})," - original discussion on Scala Contributors forum"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>n,x:()=>c});var r=t(96540);const s={},l=r.createContext(s);function n(e){const i=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),r.createElement(l.Provider,{value:i},e.children)}}}]);