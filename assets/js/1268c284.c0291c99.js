"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[67435],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},75376:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/quickstarts/restful-webservice","title":"ZIO Quickstart: Building RESTful Web Service","description":"This quickstart shows how to build a RESTful web service using ZIO. It uses","source":"@site/docs/guides/quickstarts/restful-webservice.md","sourceDirName":"guides/quickstarts","slug":"/guides/quickstarts/restful-webservice","permalink":"/guides/quickstarts/restful-webservice","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/quickstarts/restful-webservice.md","tags":[],"version":"current","frontMatter":{"id":"restful-webservice","title":"ZIO Quickstart: Building RESTful Web Service","sidebar_label":"RESTful Web Service"},"sidebar":"guides-sidebar","previous":{"title":"Hello World","permalink":"/guides/quickstarts/hello-world"},"next":{"title":"GraphQL Web Service","permalink":"/guides/quickstarts/graphql-webservice"}}');var r=s(74848),i=s(28453);const o={id:"restful-webservice",title:"ZIO Quickstart: Building RESTful Web Service",sidebar_label:"RESTful Web Service"},a=void 0,l={},c=[{value:"Running The Example",id:"running-the-example",level:2},{value:"Testing The Quickstart",id:"testing-the-quickstart",level:2},{value:"1. Greeting App",id:"1-greeting-app",level:3},{value:"2. Download App",id:"2-download-app",level:3},{value:"3. Counter App",id:"3-counter-app",level:3},{value:"4. User App",id:"4-user-app",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This quickstart shows how to build a RESTful web service using ZIO. It uses"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://zio.dev/zio-http/",children:"ZIO HTTP"})," for the HTTP server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://zio.dev/zio-schema/",children:"ZIO JSON"})," for schema generation and JSON serialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://zio.dev/zio-quill/",children:"ZIO Quill"})," for type-safe queries on the JDBC database"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"running-the-example",children:"Running The Example"}),"\n",(0,r.jsxs)(n.p,{children:["First, open the console and clone the ",(0,r.jsx)(n.a,{href:"https://github.com/zio/zio-quickstarts",children:"zio-quickstarts"})," project using ",(0,r.jsx)(n.code,{children:"git"})," (or you can simply download the project) and then change the directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-restful-webservice\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once you are inside the project directory, run the application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sbt run\n"})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, to enable hot-reloading and prevent port binding issues, you can use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sbt reStart\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:['If you encounter a "port already in use" error, you can use ',(0,r.jsx)(n.code,{children:"sbt-revolver"})," to manage server restarts more effectively. The ",(0,r.jsx)(n.code,{children:"reStart"})," command will start your server and ",(0,r.jsx)(n.code,{children:"reStop"})," will properly stop it, releasing the port."]}),(0,r.jsxs)(n.p,{children:["To enable this feature, we have included ",(0,r.jsx)(n.code,{children:"sbt-revolver"})," in the project. For more details on this, refer to the ",(0,r.jsx)(n.a,{href:"https://zio.dev/zio-http/installation#hot-reload-changes-watch-mode",children:"ZIO HTTP documentation on hot-reloading"}),"."]})]}),"\n",(0,r.jsx)(n.h2,{id:"testing-the-quickstart",children:"Testing The Quickstart"}),"\n",(0,r.jsx)(n.p,{children:"In this quickstart, we will build a RESTful web service that has the following Http apps:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Greeting App"}),"\u2014 shows how to write a basic Http App."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Download App"}),"\u2014 shows how to work with files, headers, and status codes and also streaming data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Counter App"}),"\u2014 shows how to have a stateful web service and how to use the ZIO environment for Http Apps."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User App"}),"\u2014 shows how to have a stateful web service to register and manage users."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The most important part of this quickstart is learning how to build an ",(0,r.jsx)(n.code,{children:"Route"})," data type that is used to build the HTTP apps."]}),"\n",(0,r.jsxs)(n.p,{children:["It is a data type that models a route in an HTTP application, just like the ",(0,r.jsx)(n.code,{children:"ZIO"})," data type that models ZIO workflows."]}),"\n",(0,r.jsxs)(n.p,{children:["We can say that ",(0,r.jsx)(n.code,{children:"Route[Env, Err]"})," is a function that takes a ",(0,r.jsx)(n.code,{children:"Request"})," and returns a ",(0,r.jsx)(n.code,{children:"ZIO[Env, Err, Response]"})," if it matches to the providing route pattern. To put it another way, ",(0,r.jsx)(n.code,{children:"HTTP[R, E, A, B]"})," is an HTTP application that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Accepts an ",(0,r.jsx)(n.code,{children:"Request"})," and returns ",(0,r.jsx)(n.code,{children:"Response"})]}),"\n",(0,r.jsxs)(n.li,{children:["Uses the ",(0,r.jsx)(n.code,{children:"Env"})," from the environment"]}),"\n",(0,r.jsxs)(n.li,{children:["Will fail with ",(0,r.jsx)(n.code,{children:"Err"})," if there is an error"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We can write many routes and then serve them using the ",(0,r.jsx)(n.code,{children:"Server.serve"})," method."]}),"\n",(0,r.jsx)(n.h3,{id:"1-greeting-app",children:"1. Greeting App"}),"\n",(0,r.jsx)(n.p,{children:"The Greeting App is a simple Http App that returns a greeting message. First, let's see how this app is defined:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object GreetingRoutes {\n  def apply(): Routes[Any, Nothing] = ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Routes in the ",(0,r.jsx)(n.code,{children:"GreetingRoutes"})," don't require any services from the environment (",(0,r.jsx)(n.code,{children:"Any"}),") and won't fail (",(0,r.jsx)(n.code,{children:"Nothing"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"It has three routes, and we are going to test them one by one:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"When we build and run this quickstart, there is a greeting app that we can access using the following endpoint:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/greet\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's try to access this endpoint using curl and see what we get:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"user@host ~> curl -i localhost:8080/greet\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 12\n\nHello World!\u23ce\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["We have another endpoint that pattern matches the ",(0,r.jsx)(n.code,{children:"/greet/:name"})," request:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/greet/:name\n"})}),"\n",(0,r.jsx)(n.p,{children:"Using this endpoint, we can greet a user by its name:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"user@host ~> curl -i http://localhost:8080/greet/John\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 10\n\nHello John!\u23ce\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Finally, we have a third endpoint that extracts the names from the query parameters:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/greet?name=:name\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's try to request this endpoint and see what we get:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'user@host ~> curl -i "http://localhost:8080/greet?name=John"\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 11\n\nHello John!\u23ce\n'})}),"\n",(0,r.jsx)(n.p,{children:"It also works for more than one query params:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'user@host ~> curl -i "http://localhost:8080/greet?name=Jane&name=John"\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 21\n\nHello Jane and John!\u23ce\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-download-app",children:"2. Download App"}),"\n",(0,r.jsxs)(n.p,{children:["The next example shows how to download a file from the server. First, let's look at the type of the ",(0,r.jsx)(n.code,{children:"DownloadRoutes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object DownloadRoutes {\n  def apply(): Routes[Any, Nothing] = ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It is a ",(0,r.jsx)(n.code,{children:"Routes"})," that doesn't require any environment, and won't fail. Let's try to access this endpoint using curl and see what we get:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Our first endpoint is ",(0,r.jsx)(n.code,{children:"/download"})," which downloads a file from the server:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/download\n"})}),"\n",(0,r.jsx)(n.p,{children:"If we try to request this endpoint using curl, we will see the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"user@host ~> curl -i http://localhost:8080/download\nHTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=file.txt\ntransfer-encoding: chunked\n\nline number 1\n1, 2, 3, 4, 5\nline number 3\nend of file\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also, if we try to access this URL from the browser, the browser will prompt us to download the file with ",(0,r.jsx)(n.code,{children:"file.txt"})," as the name."]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"The second endpoint is an example of downloading a big file when we want to stream the chunks of the file to the client:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/download/stream\n"})}),"\n",(0,r.jsx)(n.p,{children:"When we try to access this endpoint using curl, we will see the following output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -i http://localhost:8080/download/stream\nHTTP/1.1 200 OK\ntransfer-encoding: chunked\n\n1\n2\n3\n...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We have scheduled some delays between each line to simulate downloading a big file. So when we run the above ",(0,r.jsx)(n.code,{children:"curl"})," command, we can see that the content of the file will be downloaded gradually."]}),"\n",(0,r.jsx)(n.h3,{id:"3-counter-app",children:"3. Counter App"}),"\n",(0,r.jsxs)(n.p,{children:["The next example shows how we can have a stateful web service. Let's look at the type of the ",(0,r.jsx)(n.code,{children:"counterApp"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object CounterRoutes {\n  def apply(): Routes[Ref[Int], Nothing] = ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is a ",(0,r.jsx)(n.code,{children:"Routes"})," that requires a ",(0,r.jsx)(n.code,{children:"Ref[Int]"})," as an environment, it cannot fail. This counter increments every time we access the ",(0,r.jsx)(n.code,{children:"/up"})," endpoint and decrements every time we access the ",(0,r.jsx)(n.code,{children:"/down"})," endpoint:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GET http://localhost:8080/up\nGet http://localhost:8080/down\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Let's try to access the ",(0,r.jsx)(n.code,{children:"up"})," endpoint 100 times and then access the ",(0,r.jsx)(n.code,{children:"down"})," endpoint 25 times:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"user@host ~> for i in {1..100}; do curl http://localhost:8080/up; echo -n ' '; done;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\nuser@host ~> for i in {1..25}; do curl http://localhost:8080/down; echo -n ' '; done;\n99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can see that the state of the counter is maintained between requests. In this example, we used the ZIO environment to store the access and store the state of the counter."}),"\n",(0,r.jsx)(n.h3,{id:"4-user-app",children:"4. User App"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"UserRoutes"})," is a ",(0,r.jsx)(n.code,{children:"Routes"})," with the following definition:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object UserRoutes {\n  def apply(): Routes[UserRepo, Response] = ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It requires a ",(0,r.jsx)(n.code,{children:"UserRepo"})," service from the ZIO environment, it can fail with ",(0,r.jsx)(n.code,{children:"Response"}),". In this example, we use the in-memory version of the ",(0,r.jsx)(n.code,{children:"UserRepo"})," service called ",(0,r.jsx)(n.code,{children:"InmemoryUserRepo"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Please note that the ",(0,r.jsx)(n.code,{children:"Routes"})," errors of type ",(0,r.jsx)(n.code,{children:"Response"})," are handled with a proper response that displays an error message to the end user."]})}),"\n",(0,r.jsx)(n.p,{children:"This app has three endpoints:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'POST http://localhost:8080/users -d \'{"name": "John", "age": 30}\'\nGET  http://localhost:8080/users\nGET  http://localhost:8080/users/:id\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let's try to register a new user:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'user@host ~> curl -i http://localhost:8080/users -d \'{"name": "John", "age": 35}\'\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 36\n\nf0f319ea-404d-4a55-abd0-41bee4ce887e\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now, we can get any registered user by its id:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'user@host ~> curl -i http://localhost:8080/users/f0f319ea-404d-4a55-abd0-41bee4ce887e\nHTTP/1.1 200 OK\ncontent-type: application/json\ncontent-length: 24\n\n{"name":"John","age":35}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["While this app is stateful, it is not persistent. We just provided the in-memory version of the ",(0,r.jsx)(n.code,{children:"UserRepo"})," service called ",(0,r.jsx)(n.code,{children:"InmemoryUserRepo"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"Server.serve(\n  GreetingRoutes() ++ DownloadRoutes() ++ CounterRoutes() ++ UserRoutes()\n).provide(\n  Server.defaultWithPort(8080),\n  ZLayer.fromZIO(Ref.make(0)),\n  InmemoryUserRepo.layer\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To make it persistent, we can provide the ",(0,r.jsx)(n.code,{children:"PersistentUserRepo"})," service instead:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"Server.serve(\n  GreetingRoutes() ++ DownloadRoutes() ++ CounterRoutes() ++ UserRoutes()\n).provide(\n  Server.defaultWithPort(8080),\n  ZLayer.fromZIO(Ref.make(0)),\n  PersistentUserRepo.layer\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now, if we register a new user, the user will be persisted and if the application is restarted, the user will be available."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);