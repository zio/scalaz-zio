"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[81688],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},53288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reference/core/zio/uio","title":"UIO","description":"UIO[A] is a type alias for ZIO[Any, Nothing, A], which represents an Unexceptional effect that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","source":"@site/docs/reference/core/zio/uio.md","sourceDirName":"reference/core/zio","slug":"/reference/core/zio/uio","permalink":"/reference/core/zio/uio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/core/zio/uio.md","tags":[],"version":"current","frontMatter":{"id":"uio","title":"UIO"},"sidebar":"reference-sidebar","previous":{"title":"ZIO","permalink":"/reference/core/zio/"},"next":{"title":"URIO","permalink":"/reference/core/zio/urio"}}');var o=t(74848),r=t(28453);const s={id:"uio",title:"UIO"},c=void 0,a={},d=[];function l(e){const n={admonition:"admonition",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"UIO[A]"})," is a type alias for ",(0,o.jsx)(n.code,{children:"ZIO[Any, Nothing, A]"}),", which represents an ",(0,o.jsx)(n.strong,{children:"Unexceptional"})," effect that doesn't require any specific environment, and cannot fail, but can succeed with an ",(0,o.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["In Scala, the ",(0,o.jsx)(n.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]})}),"\n",(0,o.jsxs)(n.p,{children:["Let's see how the ",(0,o.jsx)(n.code,{children:"UIO"})," type alias is defined:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"type UIO[+A] = ZIO[Any, Nothing, A]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["So ",(0,o.jsx)(n.code,{children:"UIO"})," is equal to a ",(0,o.jsx)(n.code,{children:"ZIO"})," that doesn't need any requirement (because it accepts ",(0,o.jsx)(n.code,{children:"Any"})," environment) and that cannot fail (because in Scala the ",(0,o.jsx)(n.code,{children:"Nothing"})," type is ",(0,o.jsx)(n.em,{children:"uninhabitable"}),", i.e. there can be no actual value of type ",(0,o.jsx)(n.code,{children:"Nothing"}),"). It succeeds with ",(0,o.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ZIO"})," values of type ",(0,o.jsx)(n.code,{children:"UIO[A]"})," are considered ",(0,o.jsx)(n.em,{children:"infallible"}),". Values of this type may produce an ",(0,o.jsx)(n.code,{children:"A"}),", but will never fail."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's write a Fibonacci function. In the following example, the ",(0,o.jsx)(n.code,{children:"fib"})," function is an unexceptional effect, since it has no requirements, we don't expect any failure, and it succeeds with a value of type ",(0,o.jsx)(n.code,{children:"Int"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.{UIO, ZIO}\n\ndef fib(n: Int): UIO[Int] =\n  if (n <= 1) {\n    ZIO.succeed(1)\n  } else {\n    for {\n      fiber1 <- fib(n - 2).fork\n      fiber2 <- fib(n - 1).fork\n      v2     <- fiber2.join\n      v1     <- fiber1.join\n    } yield v1 + v2\n  }\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Principle of Least Power",type:"note",children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On the other hand, the type aliases are a way of specializing the ",(0,o.jsx)(n.code,{children:"ZIO"})," type for less powerful workflows."]}),(0,o.jsx)(n.p,{children:"Often, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the appropriate specialized type alias."}),(0,o.jsxs)(n.p,{children:["So there is no need to convert type aliases to the ",(0,o.jsx)(n.code,{children:"ZIO"})," data type, and whenever the ",(0,o.jsx)(n.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);