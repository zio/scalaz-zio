"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49693],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},61304:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"zio-logging/formatting-log-records","title":"Formatting Log Records","description":"A LogFormat represents a DSL to describe the format of text log messages.","source":"@site/docs/zio-logging/formatting-log-records.md","sourceDirName":"zio-logging","slug":"/zio-logging/formatting-log-records","permalink":"/zio-logging/formatting-log-records","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/formatting-log-records.md","tags":[],"version":"current","frontMatter":{"id":"formatting-log-records","title":"Formatting Log Records"},"sidebar":"ecosystem-sidebar","previous":{"title":"Introduction","permalink":"/zio-logging/"},"next":{"title":"Logger Context and Annotations","permalink":"/zio-logging/logger-context-and-annotations"}}');var i=s(74848),t=s(28453);const o={id:"formatting-log-records",title:"Formatting Log Records"},l=void 0,a={},d=[{value:"Log Format Configuration",id:"log-format-configuration",level:2},{value:"LogFormat and LogAppender",id:"logformat-and-logappender",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"LogFormat"})," represents a DSL to describe the format of text log messages."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.logging.console\nimport zio.logging.LogFormat._\n\nval myLogFormat = timestamp.fixed(32) |-| level |-| label("message", quoted(line))\nval myConsoleLogger = console(myLogFormat)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LogFormat.filter"})," returns a new log format that produces the same result, if ",(0,i.jsx)(n.code,{children:"LogFilter"})," is satisfied."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.logging.LogFormat\nimport zio.logging.LogFilter\n\nLogFormat.label("cause", LogFormat.cause).filter(LogFilter.causeNonEmpty)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"log-format-configuration",children:"Log Format Configuration"}),"\n",(0,i.jsx)(n.p,{children:"String representation of LogFormat:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"format"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:["%timestamp{date-format}",(0,i.jsx)("br",{}),"%timestamp"]}),(0,i.jsxs)(n.td,{children:["Timestamp, where date format is ",(0,i.jsx)(n.code,{children:"java.time.format.DateTimeFormatter"}),",",(0,i.jsx)("br",{}),"example: ",(0,i.jsx)(n.code,{children:"%timestamp{yyyy-MM-dd'T'HH:mm:ssZ}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%fiberId"}),(0,i.jsx)(n.td,{children:"Fiber Id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%fixed{size}{format}"}),(0,i.jsxs)(n.td,{children:["Fixed size for format,",(0,i.jsx)("br",{}),"example: ",(0,i.jsx)(n.code,{children:"%fixed{7}{%level}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%label{name}{format}"}),(0,i.jsxs)(n.td,{children:["Labeled format,",(0,i.jsx)("br",{}),"example: ",(0,i.jsx)(n.code,{children:"%label{abcSpan}{%span{abc}}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%color{LogColor}{format}"}),(0,i.jsxs)(n.td,{children:["Colored format, log color values: ",(0,i.jsx)(n.code,{children:"RED"}),", ",(0,i.jsx)(n.code,{children:"BLUE"}),", ",(0,i.jsx)(n.code,{children:"YELLOW"}),", ",(0,i.jsx)(n.code,{children:"CYAN"}),", ",(0,i.jsx)(n.code,{children:"GREEN"}),", ",(0,i.jsx)(n.code,{children:"MAGENTA"}),", ",(0,i.jsx)(n.code,{children:"WHITE"}),", ",(0,i.jsx)("br",{}),"example: ",(0,i.jsx)(n.code,{children:"%color{CYAN}{%timestamp}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%level"}),(0,i.jsx)(n.td,{children:"Log level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%name"}),(0,i.jsx)(n.td,{children:"Logger name (from logger name annotation or Trace)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%line"}),(0,i.jsx)(n.td,{children:"Log/trace line (from Trace)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%message"}),(0,i.jsx)(n.td,{children:"Log message"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%cause"}),(0,i.jsx)(n.td,{children:"Cause"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%kvs"}),(0,i.jsx)(n.td,{children:"Key-values - all annotations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%kv{key}"}),(0,i.jsx)(n.td,{children:"Key-value - annotation with given key"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%spans"}),(0,i.jsx)(n.td,{children:"All log spans"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%span{span}"}),(0,i.jsx)(n.td,{children:"Log spans with key"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%highlight{format}"}),(0,i.jsx)(n.td,{children:"Highlight given format with colors based on log Level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%%"}),(0,i.jsx)(n.td,{children:"% character"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%{"}),(0,i.jsx)(n.td,{children:"{ character"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"%}"}),(0,i.jsx)(n.td,{children:"} character"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"%timestamp %level [%fiberId] %name:%line %message %cause\n\n%highlight{%timestamp{yyyy-MM-dd'T'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %cause}\n\n%label{timestamp}{%fixed{32}{%timestamp}} %label{level}{%level} %label{thread}{%fiberId} %label{message}{%message} %label{cause}{%cause}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"logformat-and-logappender",children:"LogFormat and LogAppender"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"LogFormat"})," represents a DSL to describe the format of text log messages."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"LogAppender"})," is a low-level interface designed to be the bridge between, ZIO Logging and logging backends, such as\nLogback.\nThis interface is slightly higher-level than a string builder, because it allows for structured logging,\nand preserves all ZIO-specific information about runtime failures."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LogFormat"})," may be created by following function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object LogFormat {\n  def make(format: (LogAppender, Trace, FiberId, LogLevel, () => String, Cause[Any], FiberRefs, List[LogSpan], Map[String, String]) => Any): LogFormat\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"format function arguments can be split to two sections:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"LogAppender"}),"\n",(0,i.jsxs)(n.li,{children:["all others - all log inputs provided by ZIO core logging:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Trace - current trace (",(0,i.jsx)(n.code,{children:"zio.Trace"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["FiberId - fiber id (",(0,i.jsx)(n.code,{children:"zio.FiberId"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["LogLevel - log level (",(0,i.jsx)(n.code,{children:"zio.LogLevel"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"() => String - log message"}),"\n",(0,i.jsxs)(n.li,{children:["Cause[Any] - cause (",(0,i.jsx)(n.code,{children:"zio.Cause"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["FiberRefs - fiber refs (",(0,i.jsx)(n.code,{children:"zio.FiberRefs"}),"), collection of ",(0,i.jsx)(n.code,{children:"zio.FiberRef"})," - ZIO's equivalent of Java's ThreadLocal"]}),"\n",(0,i.jsxs)(n.li,{children:["List[LogSpan] - log spans  (",(0,i.jsx)(n.code,{children:"zio.LogSpan"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Map[String, String] - ZIO core log annotations values, where key is annotation key/name, and value is annotation\nvalue"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["essential ",(0,i.jsx)(n.code,{children:"LogAppender"})," functions, which are used in predefined log formats:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"def appendCause(cause: Cause[Any])"})," - appends a ",(0,i.jsx)(n.code,{children:"zio.Cause"})," to the log, some logging backends may have special\nsupport for logging failures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"def appendNumeric[A](numeric: A)"})," - appends a numeric value to the log"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"def appendText(text: String)"})," - appends unstructured text to the log"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"def appendKeyValue(key: String, value: String)"})," - appends a key/value string pair to the log"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"then it depends on the specific logging backend how these functions are implemented with respect to the backend output,\nfor example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/zio-logging/slf4j1",children:"slf4j v1"})," logging backend - key/value is appended to\nslf4j ",(0,i.jsx)(n.a,{href:"https://logback.qos.ch/manual/mdc.html",children:"MDC context"}),", Cause is transformed to Throwable and placed to slf4j\nthrowable section, all other text and numeric parts are added to slf4j log message"]}),"\n",(0,i.jsxs)(n.li,{children:["console logging backend - in general all values are added to log line, ",(0,i.jsx)(n.code,{children:"Cause.prettyPrint"})," is used to log cause\ndetails"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"example of some predefined log formats implementations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def annotation(name: String): LogFormat =\n  LogFormat.make { (builder, _, _, _, _, _, _, _, annotations) =>\n    annotations.get(name).foreach { value =>\n      builder.appendKeyValue(name, value)\n    }\n  }\n\nval cause: LogFormat =\n  LogFormat.make { (builder, _, _, _, _, cause, _, _, _) =>\n    if (!cause.isEmpty) {\n      builder.appendCause(cause)\n    }\n  }\n\ndef text(value: => String): LogFormat =\n  LogFormat.make { (builder, _, _, _, _, _, _, _, _) =>\n    builder.appendText(value)\n  }\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);