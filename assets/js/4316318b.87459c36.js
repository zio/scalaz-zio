"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[95679],{92377:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"zio-config/dive-into-zio-config","title":"Dive Into ZIO Config","description":"Note that this documentation is for 1.x series. For newer versions, please refer to docs section in GitHub.","source":"@site/docs/zio-config/dive-into-zio-config.md","sourceDirName":"zio-config","slug":"/zio-config/dive-into-zio-config","permalink":"/zio-config/dive-into-zio-config","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/dive-into-zio-config.md","tags":[],"version":"current","frontMatter":{"id":"dive-into-zio-config","title":"Dive Into ZIO Config"},"sidebar":"ecosystem-sidebar","previous":{"title":"Getting Started","permalink":"/zio-config/"},"next":{"title":"Integrations","permalink":"/zio-config/integrations"}}');var a=i(74848),s=i(28453);const t={id:"dive-into-zio-config",title:"Dive Into ZIO Config"},r=void 0,l={},c=[{value:"Describe the config by hand",id:"describe-the-config-by-hand",level:2},{value:"Fully automated Config Description",id:"fully-automated-config-description",level:2},{value:"Read config from various sources",id:"read-config-from-various-sources",level:2},{value:"Documentations using Config",id:"documentations-using-config",level:3},{value:"Accumulating all errors",id:"accumulating-all-errors",level:3},{value:"Example of mapping keys",id:"example-of-mapping-keys",level:3},{value:"Inbuilt support for pure-config",id:"inbuilt-support-for-pure-config",level:2},{value:"The <code>to</code> method for easy manual configurations",id:"the-to-method-for-easy-manual-configurations",level:2},{value:"A few handy methods",id:"a-few-handy-methods",level:2},{value:"CollectAll",id:"collectall",level:3},{value:"orElseEither &amp;&amp; Constant",id:"orelseeither--constant",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Note that this documentation is for 1.x series. For newer versions, please refer to ",(0,a.jsx)(e.a,{href:"https://github.com/zio/zio-config/tree/master/docs",children:"docs"})," section in GitHub."]})}),"\n",(0,a.jsx)(e.h2,{id:"describe-the-config-by-hand",children:"Describe the config by hand"}),"\n",(0,a.jsxs)(e.p,{children:["We must fetch the configuration from the environment to a case class (product) in scala. Let it be ",(0,a.jsx)(e.code,{children:"MyConfig"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"import zio.IO\n\nimport zio.config._\nimport zio.ConfigProvider\nimport zio.Config, Config._\n\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"case class MyConfig(ldap: String, port: Int, dburl: String)\n"})}),"\n",(0,a.jsx)(e.p,{children:"To perform any action using zio-config, we need a configuration description.\nLet's define a simple one."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val myConfig: Config[MyConfig] =\n  (string("LDAP") zip int("PORT") zip string("DB_URL")).to[MyConfig]\n\n // Config[MyConfig]\n'})}),"\n",(0,a.jsx)(e.p,{children:"To get a tuple,"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val myConfigTupled: Config[(String, Int, String)] =\n  (string("LDAP") zip int("PORT") zip string("DB_URL"))\n'})}),"\n",(0,a.jsx)(e.h2,{id:"fully-automated-config-description",children:"Fully automated Config Description"}),"\n",(0,a.jsxs)(e.p,{children:["If you don't like describing your configuration manually, and rely on the names of the parameter in the case class (or sealed trait),\nthere is a separate module called ",(0,a.jsx)(e.code,{children:"zio-config-magnolia"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Note:  ",(0,a.jsx)(e.code,{children:"zio-config-shapeless"})," is an alternative to ",(0,a.jsx)(e.code,{children:"zio-config-magnolia"})," to support scala 2.11 projects.\nIt will be deprecated once we find users have moved on from scala 2.11."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"import zio.config._\nimport zio.config.magnolia._\n\nval myConfigAutomatic = deriveConfig[MyConfig]\n"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"myConfig"})," and ",(0,a.jsx)(e.code,{children:"myConfigAutomatic"})," are same description, and is of the same type."]}),"\n",(0,a.jsxs)(e.p,{children:["Refer to API docs for more explanations on ",(0,a.jsx)(e.a,{href:"https://javadoc.io/static/dev.zio/zio-config-magnolia_2.13/1.0.0-RC31-1/zio/config/magnolia/index.html#descriptor%5BA%5D(implicitconfig:zio.config.magnolia.package.Descriptor%5BA%5D):zio.Config%5BA%5D",children:"descriptor"}),"\nMore examples on automatic derivation is in examples module of ",(0,a.jsx)(e.a,{href:"https://github.com/zio/zio-config",children:"zio-config"})]}),"\n",(0,a.jsx)(e.h2,{id:"read-config-from-various-sources",children:"Read config from various sources"}),"\n",(0,a.jsxs)(e.p,{children:["There are more information on various sources in ",(0,a.jsx)(e.a,{href:"/zio-config/read-from-various-sources",children:"here"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"Below given is a simple example."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val map =\n  Map(\n    "LDAP" -> "xyz",\n    "PORT" -> "8888",\n    "DB_URL" -> "postgres"\n  )\n\nval source = ConfigProvider.fromMap(map)\n\nsource.load(myConfig)\n\n'})}),"\n",(0,a.jsx)(e.h3,{id:"documentations-using-config",children:"Documentations using Config"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'generateDocs(myConfig)\n//Creates documentation (automatic)\n\nval betterConfig =\n  (string("LDAP") ?? "Related to auth" zip int("PORT") ?? "Database port" zip\n    string("DB_URL") ?? "url of database"\n   ).to[MyConfig]\n\ngenerateDocs(betterConfig).toTable.toGithubFlavouredMarkdown\n// Custom documentation along with auto generated docs\n'})}),"\n",(0,a.jsx)(e.h3,{id:"accumulating-all-errors",children:"Accumulating all errors"}),"\n",(0,a.jsxs)(e.p,{children:["For any misconfiguration, the ReadError collects all of them with proper semantics: ",(0,a.jsx)(e.code,{children:"AndErrors"})," and ",(0,a.jsx)(e.code,{children:"OrErrors"}),".\nInstead of directly printing misconfigurations, the ",(0,a.jsx)(e.code,{children:"ReadError.prettyPrint"})," shows the path, detail of collected misconfigurations."]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["All misconfigurations of ",(0,a.jsx)(e.code,{children:"AndErrors"})," are put in parallel lines."]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"\u2565\n\u2560\u2550\u2550\u2557 \n\u2551  \u2551 FormatError\n\u2551 MissingValue\n"})}),"\n",(0,a.jsxs)(e.ol,{start:"2",children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"OrErrors"})," are in the same line which indicates a sequential misconfiguration"]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"\u2565\n\u2560MissingValue\n\u2551\n\u2560FormatError\n"})}),"\n",(0,a.jsx)(e.p,{children:"Here is a complete example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-text",children:"   ReadError:\n   \u2565\n   \u2560\u2550\u2550\u2566\u2550\u2550\u2557\n   \u2551  \u2551  \u2551\n   \u2551  \u2551  \u2560\u2500MissingValue\n   \u2551  \u2551  \u2551 path: var2\n   \u2551  \u2551  \u2551 Details: value of type string\n   \u2551  \u2551  \u2551 \n   \u2551  \u2551  \u2560\u2500MissingValue path: envvar3\n   \u2551  \u2551  \u2551 path: var3\n   \u2551  \u2551  \u2551 Details: value of type string\n   \u2551  \u2551  \u2551 \n   \u2551  \u2551  \u25bc\n   \u2551  \u2551\n   \u2551  \u2560\u2500FormatError\n   \u2551  \u2551 cause: Provided value is wrong, expecting the type int\n   \u2551  \u2551 path: var1\n   \u2551  \u25bc\n   \u25bc\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-of-mapping-keys",children:"Example of mapping keys"}),"\n",(0,a.jsx)(e.p,{children:"Now on, the only way to change keys is as follows:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"  // mapKey is just a function in `Config` that pre-existed\n\n  val config = deriveConfig[Config].mapKey(_.toUpperCase)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"inbuilt-support-for-pure-config",children:"Inbuilt support for pure-config"}),"\n",(0,a.jsxs)(e.p,{children:["Many users make use of the label ",(0,a.jsx)(e.code,{children:"type"})," in HOCON files to annotate the type of the coproduct.\nNow on, zio-config has inbuilt support for reading such a file/string using ",(0,a.jsx)(e.code,{children:"descriptorForPureConfig"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import zio.config._, typesafe._, magnolia._\n\n@nameWithLabel("type")\nsealed trait X\ncase class A(name: String) extends X\ncase class B(age: Int) extends X\n\ncase class AppConfig(x: X)\n\nval str =\n  s"""\n   x : {\n     type = A\n     name = jon\n   }\n  """\n\nConfigProvider.fromHoconString(str).load(deriveConfig[AppConfig])\n\n'})}),"\n",(0,a.jsxs)(e.h2,{id:"the-to-method-for-easy-manual-configurations",children:["The ",(0,a.jsx)(e.code,{children:"to"})," method for easy manual configurations"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import zio.config._\nimport zio.Config\n\nfinal case class AppConfig(port: Int, url: String)\n\nval config = Config.int("PORT").zip(Config.string("URL")).to[AppConfig]\n\n'})}),"\n",(0,a.jsx)(e.h2,{id:"a-few-handy-methods",children:"A few handy methods"}),"\n",(0,a.jsx)(e.h3,{id:"collectall",children:"CollectAll"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import zio.config._\n\n  final case class Variables(variable1: Int, variable2: Option[Int])\n\n  val listOfConfig: List[Config[Variables]] =\n    List("GROUP1", "GROUP2", "GROUP3", "GROUP4")\n      .map(group => (Config.int(s"${group}_VARIABLE1") zip Config.int(s"${group}_VARIABLE2").optional).to[Variables])\n\n  val configOfList: Config[List[Variables]] =\n    Config.collectAll(listOfConfig.head, listOfConfig.tail: _*)\n\n'})}),"\n",(0,a.jsx)(e.h3,{id:"orelseeither--constant",children:"orElseEither && Constant"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import zio.config._ \n\nsealed trait Greeting\n\ncase object Hello extends Greeting\ncase object Bye extends Greeting\n\nval configSource = \n  ConfigProvider.fromMap(Map("greeting" -> "Hello"))\n\nval config: Config[Greeting] = \n  Config.constant("Hello").orElseEither(Config.constant("Bye")).map(_.merge)\n\n\n'})})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>r});var o=i(96540);const a={},s=o.createContext(a);function t(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:t(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);