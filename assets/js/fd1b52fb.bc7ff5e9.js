"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[73961],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},63645:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"ecosystem/community/logstage","title":"LogStage","description":"LogStage is a zero-cost structural logging framework for Scala & Scala.js.","source":"@site/docs/ecosystem/community/logstage.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/logstage","permalink":"/ecosystem/community/logstage","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/logstage.md","tags":[],"version":"current","frontMatter":{"id":"logstage","title":"LogStage"},"sidebar":"ecosystem-sidebar","previous":{"title":"Fhir-indexer","permalink":"/ecosystem/community/fhir-indexer"},"next":{"title":"MUnit ZIO","permalink":"/ecosystem/community/munit-zio"}}');var i=t(74848),s=t(28453);const a={id:"logstage",title:"LogStage"},r=void 0,l={},g=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://izumi.7mind.io/logstage/",children:"LogStage"})," is a zero-cost structural logging framework for Scala & Scala.js."]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["Some key features of ",(0,i.jsx)(n.em,{children:"LogStage"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"LogStage extracts structure from ordinary string interpolations in your log messages with zero changes to code."}),"\n",(0,i.jsx)(n.li,{children:"LogStage uses macros to extract log structure, it is faster at runtime than a typical reflective structural logging frameworks"}),"\n",(0,i.jsx)(n.li,{children:"Log contexts"}),"\n",(0,i.jsx)(n.li,{children:"Console, File, and SLF4J sinks included, File sink supports log rotation,"}),"\n",(0,i.jsx)(n.li,{children:"Human-readable output and JSON output included,"}),"\n",(0,i.jsx)(n.li,{children:"Method-level logging granularity. Can configure methods com.example.Service.start and com.example.Service.doSomething independently,"}),"\n",(0,i.jsx)(n.li,{children:"Slf4J adapters: route legacy Slf4J logs into LogStage router"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'// LogStage core library\nlibraryDependencies += "io.7mind.izumi" %% "logstage-core" % "1.0.8"\n'})}),"\n",(0,i.jsx)(n.p,{children:"There are also some optional modules:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  // Json output\n  "io.7mind.izumi" %% "logstage-rendering-circe" % "1.0.8",\n  // Router from Slf4j to LogStage\n  "io.7mind.izumi" %% "logstage-adapter-slf4j" % "1.0.8",\n  // LogStage integration with DIStage\n  "io.7mind.izumi" %% "distage-extension-logstage" % "1.0.8",\n  // Router from LogStage to Slf4J\n  "io.7mind.izumi" %% "logstage-sink-slf4j " % "1.0.8",\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Let's try a simple example of using ",(0,i.jsx)(n.em,{children:"LogStage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import izumi.fundamentals.platform.uuid.UUIDGen\nimport logstage.LogZIO.log\nimport logstage.{IzLogger, LogIO2, LogZIO}\nimport zio.{Has, URIO, _}\n\nobject LogStageExample extends zio.App {\n  val myApp = for {\n    _ <- log.info("I\'m logging with logstage!")\n    userId = UUIDGen.getTimeUUID()\n    _ <- log.info(s"Current $userId")\n    _ <- log.info("I\'m logging within the same fiber!")\n    f <- log.info("I\'m logging within a new fiber!").fork\n    _ <- f.join\n  } yield ()\n\n  val loggerLayer: ULayer[Has[LogIO2[IO]]] =\n    ZLayer.succeed(LogZIO.withFiberId(IzLogger()))\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.provide(loggerLayer).exitCode\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The output of this program would be something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"I 2021-07-26T21:27:35.164 (LogStageExample.scala:8)  \u2026mpty>.LogStageExample.myApp [14:zio-default-async-1] fiberId=Id(1627318654646,1) I'm logging with logstage!\nI 2021-07-26T21:27:35.252 (LogStageExample.scala:10)  <.LogStageExample.myApp.8 [14:zio-default-async-1] fiberId=Id(1627318654646,1) Current userId=93546810-ee32-11eb-a393-11bc5b145beb\nI 2021-07-26T21:27:35.266 (LogStageExample.scala:11)  <.L.myApp.8.10 [14:zio-default-async-1] fiberId=Id(1627318654646,1) I'm logging within the same fiber!\nI 2021-07-26T21:27:35.270 (LogStageExample.scala:12)  <.L.m.8.10.11 [16:zio-default-async-2] fiberId=Id(1627318655269,2) I'm logging within a new fiber!\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);