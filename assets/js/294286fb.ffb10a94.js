"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80212],{77369:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/tutorials/create-custom-logger-for-a-zio-application","title":"Tutorial: How to Create a Custom Logger for a ZIO Application?","description":"Introduction","source":"@site/docs/guides/tutorials/create-custom-logger-for-a-zio-application.md","sourceDirName":"guides/tutorials","slug":"/guides/tutorials/create-custom-logger-for-a-zio-application","permalink":"/guides/tutorials/create-custom-logger-for-a-zio-application","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/tutorials/create-custom-logger-for-a-zio-application.md","tags":[],"version":"current","frontMatter":{"id":"create-custom-logger-for-a-zio-application","title":"Tutorial: How to Create a Custom Logger for a ZIO Application?","sidebar_label":"Create Custom Logger for a ZIO Application"},"sidebar":"guides-sidebar","previous":{"title":"Enable Logging in a ZIO Application","permalink":"/guides/tutorials/enable-logging-in-a-zio-application"},"next":{"title":"Running Our First ZIO Project With VSCode","permalink":"/guides/tutorials/run-our-first-zio-project-with-vscode"}}');var t=o(74848),r=o(28453);const a={id:"create-custom-logger-for-a-zio-application",title:"Tutorial: How to Create a Custom Logger for a ZIO Application?",sidebar_label:"Create Custom Logger for a ZIO Application"},l=void 0,s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Running the Examples",id:"running-the-examples",level:2},{value:"Creating a Custom Logger",id:"creating-a-custom-logger",level:2},{value:"Using SLF4J Logger in a ZIO Application",id:"using-slf4j-logger-in-a-zio-application",level:2},{value:"Adding a Simple SLF4J Binding to the Classpath",id:"adding-a-simple-slf4j-binding-to-the-classpath",level:2},{value:"Switching to the Reload4j Logging Framework",id:"switching-to-the-reload4j-logging-framework",level:2},{value:"Switching to the Logback Logging Framework",id:"switching-to-the-logback-logging-framework",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["As we have seen in the ",(0,t.jsx)(n.a,{href:"/guides/tutorials/enable-logging-in-a-zio-application",children:"previous tutorial"}),", ZIO has a variety of built-in logging facilities. Also, it has a default logger that can be used to print log messages to the console. When we go to production, we may want to use a different logger with a customized configuration. For example, we may want to log to a file or a database instead of the console."]}),"\n",(0,t.jsx)(n.p,{children:"In this tutorial, we are going to see how we can create a custom logger for a ZIO application."}),"\n",(0,t.jsx)(n.h2,{id:"running-the-examples",children:"Running the Examples"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.a,{href:"/guides/tutorials/enable-logging-in-a-zio-application",children:"this article"}),", we enabled logging for ",(0,t.jsx)(n.code,{children:"UserApp"})," http application. In this tutorial, we are going to create a custom logger for the ",(0,t.jsx)(n.code,{children:"UserApp"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To run the code, clone the repository and checkout the ",(0,t.jsx)(n.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstarts"})," project:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-restful-webservice-custom-logger\n"})}),"\n",(0,t.jsx)(n.p,{children:"And finally, run the application using sbt:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ sbt run\n"})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, to enable hot-reloading and prevent port binding issues, you can use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sbt reStart\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:['If you encounter a "port already in use" error, you can use ',(0,t.jsx)(n.code,{children:"sbt-revolver"})," to manage server restarts more effectively. The ",(0,t.jsx)(n.code,{children:"reStart"})," command will start your server and ",(0,t.jsx)(n.code,{children:"reStop"})," will properly stop it, releasing the port."]}),(0,t.jsxs)(n.p,{children:["To enable this feature, we have included ",(0,t.jsx)(n.code,{children:"sbt-revolver"})," in the project. For more details on this, refer to the ",(0,t.jsx)(n.a,{href:"https://zio.dev/zio-http/installation#hot-reload-changes-watch-mode",children:"ZIO HTTP documentation on hot-reloading"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-custom-logger",children:"Creating a Custom Logger"}),"\n",(0,t.jsxs)(n.p,{children:["To create a new logger for the ZIO application, we need to create a new ",(0,t.jsx)(n.code,{children:"ZLogger"})," object. The ",(0,t.jsx)(n.code,{children:"ZLogger"})," is a trait that defines the interface for a ZIO logger. The default logger has implemented this trait through the ",(0,t.jsx)(n.code,{children:"ZLogger.default"})," object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval logger: ZLogger[String, Unit] =\n  new ZLogger[String, Unit] {\n    override def apply(\n      trace: Trace,\n      fiberId: FiberId,\n      logLevel: LogLevel,\n      message: () => String,\n      cause: Cause[Any],\n      context: FiberRefs,\n      spans: List[LogSpan],\n      annotations: Map[String, String]\n    ): Unit =\n      println(s"${java.time.Instant.now()} - ${logLevel.label} - ${message()}")\n  }\n'})}),"\n",(0,t.jsx)(n.p,{children:"So then, we can remove all the default loggers and replace them with our custom logger:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n\n  val logger: ZLogger[String, Unit] =\n    new ZLogger[String, Unit] {\n      override def apply(\n        trace: Trace,\n        fiberId: FiberId,\n        logLevel: LogLevel,\n        message: () => String,\n        cause: Cause[Any],\n        context: FiberRefs,\n        spans: List[LogSpan],\n        annotations: Map[String, String]\n      ): Unit =\n        println(s"${java.time.Instant.now()} - ${logLevel.label} - ${message()}")\n    }\n\n  override val bootstrap = Runtime.removeDefaultLoggers ++ Runtime.addLogger(logger)\n\n  def run =\n    for {\n      _ <- ZIO.log("Application started!")\n      _ <- ZIO.log("Another log message.")\n      _ <- ZIO.log("Application stopped!")\n    } yield ()\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"By running this application, the log messages will be printed like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"2022-06-04T13:49:19.554648Z - INFO - Application started!\n2022-06-04T13:49:19.567854Z - INFO - Another log message.\n2022-06-04T13:49:19.568831Z - INFO - Application stopped!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-slf4j-logger-in-a-zio-application",children:"Using SLF4J Logger in a ZIO Application"}),"\n",(0,t.jsxs)(n.p,{children:["So far, we learned how to write a custom logger for a ZIO application. Now, in this section, we want to add SLF4J Logging support to the ",(0,t.jsx)(n.code,{children:"UserApp"})," we have developed in the ",(0,t.jsx)(n.a,{href:"/guides/quickstarts/restful-webservice",children:"Restful Web Service"})," quickstart."]}),"\n",(0,t.jsxs)(n.p,{children:["SLF4J is a logging facade that decouples our application code from any underlying logging implementation. To enable SLF4J logging for a ZIO application, we need to implement the ",(0,t.jsx)(n.code,{children:"ZLogger"})," trait using SLF4J. Fortunately, the ZIO Logging project has done this for us."]}),"\n",(0,t.jsxs)(n.p,{children:["So we can simply add this library to our project by adding the following dependencies to our ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-logging"       % "2.0.0"\nlibraryDependencies += "dev.zio" %% "zio-logging-slf4j" % "2.0.0"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now we can use the ",(0,t.jsx)(n.code,{children:"SLF4J.sl4j"})," layer to enable SLF4J logging:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.logging.LogFormat\nimport zio.logging.backend.SLF4J\n\nobject MainApp extends ZIOAppDefault {\n  override val bootstrap = SLF4J.slf4j(LogFormat.colored)\n\n  def run = ZIO.log("Application started!")\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Let's run the application and see the output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n'})}),"\n",(0,t.jsx)(n.p,{children:"Oops! The SLF4J failed to find any binding in the classpath. To fix this, we need to add an SLF4J binding to our classpath."}),"\n",(0,t.jsx)(n.h2,{id:"adding-a-simple-slf4j-binding-to-the-classpath",children:"Adding a Simple SLF4J Binding to the Classpath"}),"\n",(0,t.jsxs)(n.p,{children:["The SLF4J has a simple binding that can be used by adding the ",(0,t.jsx)(n.code,{children:"slf4j-simple"})," dependency to our ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "org.slf4j" % "slf4j-simple" % "1.7.36"\n'})}),"\n",(0,t.jsx)(n.p,{children:"And then we can run the application again:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'[ZScheduler-Worker-7] INFO zio-slf4j-logger - timestamp=2022-06-04T19:36:43.768256+04:30 level=INFO thread=zio-fiber-6 message="Application started!"\n'})}),"\n",(0,t.jsx)(n.p,{children:"It works! Now, our ZIO application uses SLF4J for its logging backend."}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, we can bind our application to any other logging framework by adding the appropriate dependency to our ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"slf4j-log4j12"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"slf4j-reload4j"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"slf4j-jdk14"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"slf4j-nop"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"slf4j-jcl"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"logback-classic"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To switch to another logging framework, we need to provide one of the above dependencies instead of ",(0,t.jsx)(n.code,{children:"slf4j-simple"}),". In the next section, we will learn how to switch to the ",(0,t.jsx)(n.code,{children:"reload4j"})," logging framework."]}),"\n",(0,t.jsx)(n.h2,{id:"switching-to-the-reload4j-logging-framework",children:"Switching to the Reload4j Logging Framework"}),"\n",(0,t.jsxs)(n.p,{children:["To use the ",(0,t.jsx)(n.code,{children:"reload4j"})," logging framework, we need to add the following dependencies to our ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'- libraryDependencies += "org.slf4j" % "slf4j-simple" % "1.7.36"\n+ libraryDependencies += "org.slf4j" % "slf4j-reload4j" % "1.7.36"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now we can configure our logger by adding the ",(0,t.jsx)(n.code,{children:"log4j.properties"})," to the resources directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"log4j.rootLogger = Info, consoleAppender\nlog4j.appender.consoleAppender=org.apache.log4j.ConsoleAppender\nlog4j.appender.consoleAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.consoleAppender.layout.ConversionPattern=[%p] %d %c %M - %m%n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By customizing the ",(0,t.jsx)(n.code,{children:"ConversionPattern"})," we can control the format of the log messages."]}),"\n",(0,t.jsx)(n.h2,{id:"switching-to-the-logback-logging-framework",children:"Switching to the Logback Logging Framework"}),"\n",(0,t.jsxs)(n.p,{children:["In the same way, we can switch to the ",(0,t.jsx)(n.code,{children:"logback-classic"})," logging framework by adding the following dependencies to our ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'- libraryDependencies += "org.slf4j"      % "slf4j-reload4j"  % "1.7.36"\n+ libraryDependencies += "ch.qos.logback" % "logback-classic" % "1.2.11"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Then we can configure our logger by adding the ",(0,t.jsx)(n.code,{children:"logback.xml"})," to the resources directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n\n<configuration>\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level="info">\n        <appender-ref ref="STDOUT"/>\n    </root>\n</configuration>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In this article, we have learned how to create a custom logger for a ZIO application. We also covered how to add SLF4J logging support instead of default ZIO logging."}),"\n",(0,t.jsxs)(n.p,{children:["All the source code associated with this article is available on the ",(0,t.jsx)(n.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstart"})," project."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>l});var i=o(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);