"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[90139],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},77342:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference/core/zio/task","title":"Task","description":"Task[A] is a type alias for ZIO[Any, Throwable, A], which represents an effect that has no requirements, and may fail with a Throwable value, or succeed with an A.","source":"@site/docs/reference/core/zio/task.md","sourceDirName":"reference/core/zio","slug":"/reference/core/zio/task","permalink":"/reference/core/zio/task","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/core/zio/task.md","tags":[],"version":"current","frontMatter":{"id":"task","title":"Task"},"sidebar":"reference-sidebar","previous":{"title":"URIO","permalink":"/reference/core/zio/urio"},"next":{"title":"RIO","permalink":"/reference/core/zio/rio"}}');var r=s(74848),i=s(28453);const o={id:"task",title:"Task"},a=void 0,c={},d=[];function l(e){const t={admonition:"admonition",code:"code",em:"em",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Task[A]"})," is a type alias for ",(0,r.jsx)(t.code,{children:"ZIO[Any, Throwable, A]"}),", which represents an effect that has no requirements, and may fail with a ",(0,r.jsx)(t.code,{children:"Throwable"})," value, or succeed with an ",(0,r.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["In Scala, a ",(0,r.jsx)(t.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect results of the type-checking process. It just helps us to have an expressive API design."]})}),"\n",(0,r.jsxs)(t.p,{children:["Let's see how the ",(0,r.jsx)(t.code,{children:"Task"})," type alias is defined:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",children:"type Task[+A] = ZIO[Any, Throwable, A]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["So a ",(0,r.jsx)(t.code,{children:"Task"})," is equivalent to a ",(0,r.jsx)(t.code,{children:"ZIO"})," that doesn't need any requirement, and may fail with a ",(0,r.jsx)(t.code,{children:"Throwable"}),", or succeed with an ",(0,r.jsx)(t.code,{children:"A"})," value."]}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes we know that our effect may fail, but we don't care about the type of that exception. This is where we can use ",(0,r.jsx)(t.code,{children:"Task"}),". The signature of this type alias is similar to ",(0,r.jsx)(t.code,{children:"Future[T]"})," and Cats ",(0,r.jsx)(t.code,{children:"IO"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If we want to be less precise and eliminate the need to think about requirements and error types, we can use ",(0,r.jsx)(t.code,{children:"Task"}),". This type alias is a good starting point for anyone who wants to refactor an existing code base which is written with Cats ",(0,r.jsx)(t.code,{children:"IO"})," or Monix ",(0,r.jsx)(t.code,{children:"Task"}),"."]}),"\n",(0,r.jsxs)(t.admonition,{title:"Principle of Least Power",type:"note",children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On the other hand, the type aliases are a way of specializing the ",(0,r.jsx)(t.code,{children:"ZIO"})," type for less powerful workflows."]}),(0,r.jsx)(t.p,{children:"Often, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the appropriate specialized type alias."}),(0,r.jsxs)(t.p,{children:["So there is no need to convert type aliases to the ",(0,r.jsx)(t.code,{children:"ZIO"})," data type, and whenever the ",(0,r.jsx)(t.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);