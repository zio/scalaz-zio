"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[58830],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var o=n(96540);const i={},d=o.createContext(i);function a(e){const t=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(d.Provider,{value:t},e.children)}},85117:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-dynamodb/guides/getting-started","title":"Getting Started","description":"Add the dependency to your build.sbt file","source":"@site/docs/zio-dynamodb/guides/getting-started.md","sourceDirName":"zio-dynamodb/guides","slug":"/zio-dynamodb/guides/getting-started","permalink":"/zio-dynamodb/guides/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/guides/getting-started.md","tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started"},"sidebar":"ecosystem-sidebar","previous":{"title":"Low Level API","permalink":"/zio-dynamodb/concepts/low-level-api"},"next":{"title":"High Level API Cheat Sheet","permalink":"/zio-dynamodb/guides/cheat-sheet"}}');var i=n(74848),d=n(28453);const a={id:"getting-started",title:"Getting Started"},r=void 0,s={},l=[{value:"Add the dependency to your build.sbt file",id:"add-the-dependency-to-your-buildsbt-file",level:2},{value:"Read &amp; write data to/from DynamoDB",id:"read--write-data-tofrom-dynamodb",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"add-the-dependency-to-your-buildsbt-file",children:"Add the dependency to your build.sbt file"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-dynamodb" % 1.0.0-RC18\n'})}),"\n",(0,i.jsx)(t.h3,{id:"read--write-data-tofrom-dynamodb",children:"Read & write data to/from DynamoDB"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio.aws.core.config\nimport zio.aws.{ dynamodb, netty }\nimport zio.dynamodb.DynamoDBQuery.{ get, put }\nimport zio.dynamodb.{ DynamoDBExecutor }\nimport zio.schema.{ DeriveSchema, Schema }\nimport zio.ZIOAppDefault\nimport zio.dynamodb.ProjectionExpression\n\nobject Main extends ZIOAppDefault {\n\n  final case class Person(id: Int, firstName: String)\n  object Person {\n    implicit lazy val schema: Schema.CaseClass2[Int, String, Person] = DeriveSchema.gen[Person]\n\n    val (id, firstName) = ProjectionExpression.accessors[Person]\n  }\n  val examplePerson = Person(1, "avi")\n\n  private val program = for {\n    _      <- put("personTable", examplePerson).execute\n    person <- get("personTable")(Person.id.partitionKey === 1).execute\n    _      <- zio.Console.printLine(s"hello $person")\n  } yield ()\n\n  override def run =\n    program.provide(\n      netty.NettyHttpClient.default,\n      config.AwsConfig.default, // uses real AWS dynamodb\n      dynamodb.DynamoDb.live,\n      DynamoDBExecutor.live\n    )\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);