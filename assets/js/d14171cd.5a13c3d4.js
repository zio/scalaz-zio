"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[66454],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var s=i(96540);const a={},n=s.createContext(a);function r(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(n.Provider,{value:t},e.children)}},86595:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-kafka/writing-tests","title":"Writing Tests with the `zio-kafka-testkit` library","description":"zio-kafka provides a zio-kafka-testkit library to help you test your code using zio-kafka.","source":"@site/docs/zio-kafka/writing-tests.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/writing-tests","permalink":"/zio-kafka/writing-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/writing-tests.md","tags":[],"version":"current","frontMatter":{"id":"writing-tests","title":"Writing Tests with the `zio-kafka-testkit` library"},"sidebar":"ecosystem-sidebar","previous":{"title":"Serialization and Deserialization","permalink":"/zio-kafka/serialization-and-deserialization"},"next":{"title":"ZIO Lambda","permalink":"/zio-lambda/"}}');var a=i(74848),n=i(28453);const r={id:"writing-tests",title:"Writing Tests with the `zio-kafka-testkit` library"},o=void 0,d={},c=[{value:"Testing a producer",id:"testing-a-producer",level:2},{value:"Testing a consumer",id:"testing-a-consumer",level:2},{value:"Utilities provided by the <code>zio-kafka-testkit</code> library",id:"utilities-provided-by-the-zio-kafka-testkit-library",level:2},{value:"<code>Kafka</code> service",id:"kafka-service",level:3},{value:"<code>KafkaTestUtils</code> utilities",id:"kafkatestutils-utilities",level:3},{value:"<code>ZIOSpecWithKafka</code> trait",id:"ziospecwithkafka-trait",level:3},{value:"<code>KafkaRandom</code> trait",id:"kafkarandom-trait",level:3}];function l(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["zio-kafka provides a ",(0,a.jsx)(t.code,{children:"zio-kafka-testkit"})," library to help you test your code using zio-kafka."]}),"\n",(0,a.jsxs)(t.p,{children:["To add it in your project, add the following dependency in your ",(0,a.jsx)(t.code,{children:"build.sbt"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-kafka-testkit" % "<latest-version>" % Test\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Let's study some examples of tests you can write with the ",(0,a.jsx)(t.code,{children:"zio-kafka-testkit"})," and ",(0,a.jsx)(t.code,{children:"zio-test"})," and let's see what this library provides you."]}),"\n",(0,a.jsx)(t.h2,{id:"testing-a-producer",children:"Testing a producer"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'import org.apache.kafka.clients.producer.ProducerRecord\nimport zio._\nimport zio.kafka.producer.Producer\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.KafkaTestUtils._ // An object containing several utilities to simplify writing your tests\nimport zio.kafka.testkit.Kafka // A trait representing a Kafka instance in your tests\nimport zio.test.TestAspect.{ sequential, timeout }\nimport zio.test._\n\nobject ProducerSpec extends ZIOSpecDefault {\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Producer test suite")(\n        test("minimal example") {\n          for {\n            _ <- Producer.produce(new ProducerRecord("topic", "boo", "baa"), Serde.string, Serde.string)\n          } yield assertCompletes\n        }\n        // ... more tests ...\n      )\n        .provideSome[Kafka](producer)             // Here, we provide a new instance of Producer per test\n        .provideSomeShared[Scope](Kafka.embedded) // Here, we provide an instance of Kafka for the entire suite\n    ) @@ timeout(2.minutes) @@ sequential\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This test is a very minimal example.",(0,a.jsx)(t.br,{}),"\n","It uses the ",(0,a.jsx)(t.code,{children:"Producer.produce"})," method from zio-kafka to produce a record to the Kafka cluster.",(0,a.jsx)(t.br,{}),"\n","The ",(0,a.jsx)(t.code,{children:"assertCompletes"})," assertion from zio-test is used to check that the effect completes successfully."]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, we decided to instantiate a new ",(0,a.jsx)(t.code,{children:"Producer"})," for each test, with the ",(0,a.jsx)(t.code,{children:".provideSome[Kafka](producer)"}),".",(0,a.jsx)(t.br,{}),"\n","We could have decided to share one instance of ",(0,a.jsx)(t.code,{children:"Producer"})," between all the tests of this suite by moving the ",(0,a.jsx)(t.code,{children:"producer"})," layer to the ",(0,a.jsx)(t.code,{children:"provideSomeShared"}),", which would have\nlooked like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'suite("producer test suite")(\n  // ... tests ...\n).provideSomeShared[Scope](Kafka.embedded, producer)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This ",(0,a.jsx)(t.code,{children:"producer"})," layer comes from the ",(0,a.jsx)(t.code,{children:"KafkaTestUtils"})," object in zio-kafka-testkit. It is a layer that bootstraps a ",(0,a.jsx)(t.code,{children:"Producer"})," instance."]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, we decided to share an instance of Kafka for the entire suite, with the ",(0,a.jsx)(t.code,{children:".provideSomeShared[Scope](Kafka.embedded)"}),".",(0,a.jsx)(t.br,{}),"\n","Kafka is slow to start, so it is better to only start it once and share it between all tests of the suite."]}),"\n",(0,a.jsxs)(t.p,{children:["We could have decided to instantiate a new instance of Kafka for each test by moving the ",(0,a.jsx)(t.code,{children:"Kafka.embedded"})," layer to the ",(0,a.jsx)(t.code,{children:"provideSome"}),", which would have\nlooked like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'suite("producer test suite")(\n  // ... tests ...\n).provideSome[Scope](Kafka.embedded, producer)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["We could also have decided to share one instance of ",(0,a.jsx)(t.code,{children:"Kafka"})," between different test suites (i.e. between different test files) by mixing the ",(0,a.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait,\nwhich would have looked like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'object ProducerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Producer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["More details about this ",(0,a.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait ",(0,a.jsx)(t.a,{href:"#ziospecwithkafka-trait",children:"below"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Finally, we annotate the suite with the ",(0,a.jsx)(t.code,{children:"timeout"})," and ",(0,a.jsx)(t.code,{children:"sequential"})," aspects.",(0,a.jsx)(t.br,{}),"\n","The ",(0,a.jsx)(t.code,{children:"timeout"})," aspect from zio-test is used to specify a timeout for the entire suite. If the suite takes more than 5 minutes to run, it will fail.",(0,a.jsx)(t.br,{}),"\n","The ",(0,a.jsx)(t.code,{children:"sequential"})," aspect from zio-test is used to specify that the tests in the suite must be run sequentially. This is necessary because Kafka is a shared resource.\nWe don't want tests to interfere with each other."]}),"\n",(0,a.jsx)(t.h2,{id:"testing-a-consumer",children:"Testing a consumer"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.kafka.consumer.{ Consumer, Subscription }\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.KafkaTestUtils.{ consumer, produceMany, producer }\nimport zio.kafka.testkit._\nimport zio.test.Assertion.hasSameElements\nimport zio.test.TestAspect.{ sequential, timeout }\nimport zio.test._\n\nobject ConsumerSpec extends ZIOSpecDefault with KafkaRandom {\n  override def kafkaPrefix: String = "consumer-spec"\n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Consumer test suite")(\n        test("minimal example") {\n          val kvs: List[(String, String)] = (1 to 5).toList.map(i => (s"key-$i", s"msg-$i"))\n          for {\n            topic  <- randomTopic\n            client <- randomClient\n            group  <- randomGroup\n\n            _ <- produceMany(topic, kvs) // Comes from `KafkaTestUtils`. Produces messages to the topic.\n\n            records <- Consumer\n                         .plainStream(Subscription.Topics(Set(topic)), Serde.string, Serde.string)\n                         .take(5)\n                         .runCollect\n                         .provideSome[Kafka](\n                           // Comes from `KafkaTestUtils`\n                           consumer(clientId = client, groupId = Some(group))\n                         )\n            consumed = records.map(r => (r.record.key, r.record.value)).toList\n          } yield assert(consumed)(hasSameElements(kvs))\n        },\n        // ... more tests ...\n      )\n        .provideSome[Kafka](producer)             // Here, we provide a new instance of Producer per test\n        .provideSomeShared[Scope](Kafka.embedded) // Here, we provide an instance of Kafka for the entire suite\n    ) @@ timeout(2.minutes) @@ sequential\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This test is also a quite minimal example.",(0,a.jsx)(t.br,{}),"\n","We produce 5 messages thanks to the ",(0,a.jsx)(t.code,{children:"KafkaTestUtils.produceMany"})," method from zio-kafka-testkit, then we consume them with the ",(0,a.jsx)(t.code,{children:"Consumer.plainStream"})," method from zio-kafka.",(0,a.jsx)(t.br,{}),"\n","Finally, we use the ",(0,a.jsx)(t.code,{children:"hasSameElements"})," assertion from zio-test to check that the consumed records are the same as the ones we produced."]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, we're reusing the ",(0,a.jsx)(t.code,{children:"producer"})," and the ",(0,a.jsx)(t.code,{children:"Kafka.embedded"})," layers we've seen in the ",(0,a.jsx)(t.a,{href:"#testing-a-producer",children:"Producer test example"}),".",(0,a.jsx)(t.br,{}),"\n","We're also using the ",(0,a.jsx)(t.code,{children:"KafkaTestUtils.consumer"})," layer from zio-kafka-testkit to instantiate a new ",(0,a.jsx)(t.code,{children:"Consumer"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Finally, we use the ",(0,a.jsx)(t.code,{children:"KafkaRandom"})," trait from zio-kafka-testkit and its methods to generate random values for the Consumer client ID, the Consumer group ID and the topic name.",(0,a.jsx)(t.br,{}),"\n","More details about this ",(0,a.jsx)(t.code,{children:"KafkaRandom"})," trait ",(0,a.jsx)(t.a,{href:"#kafkarandom-trait",children:"later in this page"}),".",(0,a.jsx)(t.br,{}),"\n","Using random values for these parameters is important to avoid conflicts between tests as we share one Kafka instance between all the tests of the suite."]}),"\n",(0,a.jsxs)(t.h2,{id:"utilities-provided-by-the-zio-kafka-testkit-library",children:["Utilities provided by the ",(0,a.jsx)(t.code,{children:"zio-kafka-testkit"})," library"]}),"\n",(0,a.jsxs)(t.h3,{id:"kafka-service",children:[(0,a.jsx)(t.code,{children:"Kafka"})," service"]}),"\n",(0,a.jsxs)(t.p,{children:["This trait represents a Kafka instance in your tests.",(0,a.jsx)(t.br,{}),"\n","It is used to provide the bootstrap servers to the ",(0,a.jsx)(t.code,{children:"Producer"})," and ",(0,a.jsx)(t.code,{children:"Consumer"})," layers."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"trait Kafka {\n  def bootstrapServers: List[String]\n  def stop(): UIO[Unit]\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"The companion object provides a few layers to provide a Kafka instance in your tests:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"object Kafka {\n  /**\n   * Creates an in-memory Kafka instance with a random port.\n   */\n  val embedded: ZLayer[Any, Throwable, Kafka]\n\n  /**\n   * Will connect to a Kafka instance running on localhost:9092 (with Docker, for example).\n   */\n  val local: ULayer[Kafka]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SASL authentication configured.\n   */\n  val saslEmbedded: ZLayer[Any, Throwable, Kafka.Sasl]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SSL authentication configured.\n   */\n  val sslEmbedded: ZLayer[Any, Throwable, Kafka]\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The in-memory Kafka instances are created using ",(0,a.jsx)(t.a,{href:"https://github.com/embeddedkafka/embedded-kafka",children:"embedded-kafka"}),"."]}),"\n",(0,a.jsxs)(t.h3,{id:"kafkatestutils-utilities",children:[(0,a.jsx)(t.code,{children:"KafkaTestUtils"})," utilities"]}),"\n",(0,a.jsxs)(t.p,{children:["This object provides several utilities to simplify writing your tests, like layers to boot a ",(0,a.jsx)(t.code,{children:"Producer"}),", a ",(0,a.jsx)(t.code,{children:"Consumer"}),", or an ",(0,a.jsx)(t.code,{children:"AdminClient"}),".",(0,a.jsx)(t.br,{}),"\n","It also provides several functions to produce records, and more.",(0,a.jsx)(t.br,{}),"\n","Each utility function is documented in the source code. Please have a look at the source code for more details.",(0,a.jsx)(t.br,{}),"\n","You can also look at ",(0,a.jsx)(t.code,{children:"zio-katka"})," tests in the ",(0,a.jsx)(t.code,{children:"zio-kafka-test"})," module to have examples on how to use these utilities."]}),"\n",(0,a.jsxs)(t.h3,{id:"ziospecwithkafka-trait",children:[(0,a.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait"]}),"\n",(0,a.jsxs)(t.p,{children:["This trait can be used if you want to share one Kafka instance between different test suites.",(0,a.jsx)(t.br,{}),"\n","This allows you to speed up your tests by booting a Kafka instance only once for all your test suites using this trait."]}),"\n",(0,a.jsx)(t.p,{children:"Usage example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'// In `src/test/scala/io/example/producer/ProducerSpec.scala`\nobject ProducerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Producer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n\n// In `src/test/scala/io/example/consumer/ConsumerSpec.scala`\nobject ConsumerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Consumer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This is a capability offered by ZIO2.",(0,a.jsx)(t.br,{}),"\n","See related zio-test documentation: ",(0,a.jsx)(t.a,{href:"https://zio.dev/reference/test/sharing-layers-between-multiple-files/",children:"https://zio.dev/reference/test/sharing-layers-between-multiple-files/"})]}),"\n",(0,a.jsxs)(t.h3,{id:"kafkarandom-trait",children:[(0,a.jsx)(t.code,{children:"KafkaRandom"})," trait"]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"KafkaRandom"})," trait provides a few methods to generate random values.\nTo use it, you need to mix it in your test suite, like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'import zio.kafka.consumer.Consumer\nimport zio.kafka.testkit.KafkaRandom\nimport zio.kafka.testkit.Kafka\nimport zio.kafka.testkit.KafkaTestUtils.consumer\nimport zio.test.{ assertTrue, Spec, TestEnvironment, ZIOSpecDefault }\nimport zio._\n\nobject MyServiceSpec extends ZIOSpecDefault with KafkaRandom {\n  // Required when mixing in the `KafkaRandom` trait\n  // The best is to use a different prefix for each test suite\n  override def kafkaPrefix: String = "my-service" \n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    suite("MyService")(\n      test("minimal example") {\n        for {\n          group    <- randomGroup // Comes from `KafkaRandom`\n          clientId <- randomClient // Comes from `KafkaRandom`\n          metrics  <- Consumer.metrics\n                        .provideSome[Kafka](\n                          // Comes from `KafkaTestUtils`\n                          consumer(clientId = clientId, groupId = Some(group))\n                        )\n        } yield assertTrue(metrics.nonEmpty)\n      }\n    ).provideSomeShared[Scope](Kafka.embedded)\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);