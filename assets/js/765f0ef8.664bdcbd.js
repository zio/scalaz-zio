"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[68390],{51931:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"zio-schema/operations/index","title":"ZIO Schema Operations","description":"Once we have defined our schemas, we can use them to perform a variety of operations. In this section, we will explore some of the most common operations that we can perform on schemas.","source":"@site/docs/zio-schema/operations/index.md","sourceDirName":"zio-schema/operations","slug":"/zio-schema/operations/","permalink":"/zio-schema/operations/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"ZIO Schema Operations","sidebar_label":"Operations"},"sidebar":"ecosystem-sidebar","previous":{"title":"Automatic Schema Derivation","permalink":"/zio-schema/automatic-schema-derivation"},"next":{"title":"The Default Value","permalink":"/zio-schema/operations/the-default-value"}}');var i=t(74848),o=t(28453);const s={id:"index",title:"ZIO Schema Operations",sidebar_label:"Operations"},r=void 0,c={},h=[];function m(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Once we have defined our schemas, we can use them to perform a variety of operations. In this section, we will explore some of the most common operations that we can perform on schemas."}),"\n",(0,i.jsx)(n.p,{children:"Before diving into the details, let's see a quick overview of the operations that we can perform on schemas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"sealed trait Schema[A] {\n  self =>\n\n  type Accessors[Lens[_, _, _], Prism[_, _, _], Traversal[_, _]]\n\n  def ? : Schema[Option[A]]\n\n  def <*>[B](that: Schema[B]): Schema[(A, B)]\n\n  def <+>[B](that: Schema[B]): Schema[scala.util.Either[A, B]]\n\n  def defaultValue: scala.util.Either[String, A]\n\n  def annotations: Chunk[Any]\n\n  def ast: MetaSchema \n\n  def annotate(annotation: Any): Schema[A]\n\n  def coerce[B](newSchema: Schema[B]): Either[String, Schema[B]]\n\n  def diff(thisValue: A, thatValue: A): Patch[A]\n\n  def patch(oldValue: A, diff: Patch[A]): scala.util.Either[String, A]\n\n  def fromDynamic(value: DynamicValue): scala.util.Either[String, A] \n\n  def makeAccessors(b: AccessorBuilder): Accessors[b.Lens, b.Prism, b.Traversal]\n\n  def migrate[B](newSchema: Schema[B]): Either[String, A => scala.util.Either[String, B]]\n\n  def optional: Schema[Option[A]]\n\n  def ordering: Ordering[A]\n\n  def orElseEither[B](that: Schema[B]): Schema[scala.util.Either[A, B]]\n\n  def repeated: Schema[Chunk[A]]\n\n  def serializable: Schema[Schema[A]]\n\n  def toDynamic(value: A): DynamicValue\n\n  def transform[B](f: A => B, g: B => A): Schema[B]\n  \n  def transformOrFail[B](f: A => scala.util.Either[String, B], g: B => scala.util.Either[String, A]): Schema[B]\n\n  def validate(value: A)(implicit schema: Schema[A]): Chunk[ValidationError]\n\n  def zip[B](that: Schema[B]): Schema[(A, B)]\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);