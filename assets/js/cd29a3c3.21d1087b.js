"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[28119],{6081:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"reference/core/rio","title":"RIO","description":"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.","source":"@site/versioned_docs/version-1.0.18/reference/core/rio.md","sourceDirName":"reference/core","slug":"/reference/core/rio","permalink":"/1.0.18/reference/core/rio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/core/rio.md","tags":[],"version":"1.0.18","frontMatter":{"id":"rio","title":"RIO"},"sidebar":"overview_sidebar","previous":{"title":"Task","permalink":"/1.0.18/reference/core/task"},"next":{"title":"IO","permalink":"/1.0.18/reference/core/io"}}');var s=t(74848),o=t(28453);const i={id:"rio",title:"RIO"},c=void 0,a={},l=[];function d(e){const r={blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"RIO[R, A]"})," is a type alias for ",(0,s.jsx)(r.code,{children:"ZIO[R, Throwable, A]"}),", which represents an effect that requires an ",(0,s.jsx)(r.code,{children:"R"}),", and may fail with a ",(0,s.jsx)(r.code,{children:"Throwable"})," value, or succeed with an ",(0,s.jsx)(r.code,{children:"A"}),"."]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.em,{children:"Note:"})})}),"\n",(0,s.jsxs)(r.p,{children:["In Scala, the ",(0,s.jsx)(r.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Let's see how ",(0,s.jsx)(r.code,{children:"RIO"})," is defined:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-scala",children:"type RIO[-R, +A]  = ZIO[R, Throwable, A]\n"})}),"\n",(0,s.jsxs)(r.p,{children:["So the ",(0,s.jsx)(r.code,{children:"RIO"})," just equal to ",(0,s.jsx)(r.code,{children:"ZIO"})," which its error channel is ",(0,s.jsx)(r.code,{children:"Throwable"}),"."]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note:"})," ",(0,s.jsx)(r.em,{children:"Principle of The Least Power"})]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the ",(0,s.jsx)(r.code,{children:"ZIO"})," type, specific for a less powerful workflow."]}),"\n",(0,s.jsx)(r.p,{children:"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias."}),"\n",(0,s.jsxs)(r.p,{children:["So there is no need to convert type aliases to the ",(0,s.jsx)(r.code,{children:"ZIO"})," data type, whenever the ",(0,s.jsx)(r.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>c});var n=t(96540);const s={},o=n.createContext(s);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);