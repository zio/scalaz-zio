"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60499],{19550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-http/examples/hello-world","title":"Hello World Example","description":"Simple Example","source":"@site/docs/zio-http/examples/hello-world.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/hello-world","permalink":"/zio-http/examples/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/hello-world.md","tags":[],"version":"current","frontMatter":{"id":"hello-world","title":"Hello World Example","sidebar_label":"Hello World"},"sidebar":"ecosystem-sidebar","previous":{"title":"Examples","permalink":"/zio-http/examples/"},"next":{"title":"HTTP Client-Server","permalink":"/zio-http/examples/http-client-server"}}');var l=t(74848),a=t(28453);const r={id:"hello-world",title:"Hello World Example",sidebar_label:"Hello World"},i=void 0,s={},d=[{value:"Simple Example",id:"simple-example",level:2},{value:"Advanced Example",id:"advanced-example",level:2},{value:"Advanced with CORS Example",id:"advanced-with-cors-example",level:2},{value:"Advanced with Middlewares Example",id:"advanced-with-middlewares-example",level:2}];function p(e){const n={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"simple-example",children:"Simple Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorld.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorld extends ZIOAppDefault {\n  // Responds with plain text\n  val homeRoute =\n    Method.GET / Root -> handler(Response.text("Hello World!"))\n\n  // Responds with JSON\n  val jsonRoute =\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}"""))\n\n  // Create HTTP route\n  val app = Routes(homeRoute, jsonRoute)\n\n  // Run it like any simple app\n  override val run = Server.serve(app).provide(Server.default)\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-example",children:"Advanced Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala" ',children:'package example\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.NettyConfig.LeakDetectionLevel\n\nobject HelloWorldAdvanced extends ZIOAppDefault {\n  // Set a port\n  val PORT = 58080\n\n  val fooBar =\n    Routes(\n      Method.GET / "foo" -> Handler.from(Response.text("bar")),\n      Method.GET / "bar" -> Handler.from(Response.text("foo")),\n    )\n\n  val app = Routes(\n    Method.GET / "random" -> handler(Random.nextString(10).map(Response.text(_))),\n    Method.GET / "utc"    -> handler(Clock.currentDateTime.map(s => Response.text(s.toString))),\n  )\n\n  val run = ZIOAppArgs.getArgs.flatMap { args =>\n    // Configure thread count using CLI\n    val nThreads: Int = args.headOption.flatMap(x => Try(x.toInt).toOption).getOrElse(0)\n\n    val config           = Server.Config.default\n      .port(PORT)\n    val nettyConfig      = NettyConfig.default\n      .leakDetection(LeakDetectionLevel.PARANOID)\n      .maxThreads(nThreads)\n    val configLayer      = ZLayer.succeed(config)\n    val nettyConfigLayer = ZLayer.succeed(nettyConfig)\n\n    (fooBar ++ app)\n      .serve[Any]\n      .provide(configLayer, nettyConfigLayer, Server.customized)\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-with-cors-example",children:"Advanced with CORS Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithCORS.scala" ',children:'package example\nimport zio._\n\nimport zio.http.Header.{AccessControlAllowOrigin, Origin}\nimport zio.http.Middleware.{CorsConfig, cors}\nimport zio.http._\nimport zio.http.codec.PathCodec\nimport zio.http.template._\n\nobject HelloWorldWithCORS extends ZIOAppDefault {\n\n  val config: CorsConfig =\n    CorsConfig(\n      allowedOrigin = {\n        case origin if origin == Origin.parse("http://localhost:3000").toOption.get =>\n          Some(AccessControlAllowOrigin.Specific(origin))\n        case _                                                                      => None\n      },\n    )\n\n  val backend: Routes[Any, Response] =\n    Routes(\n      Method.GET / "json" -> handler(Response.json("""{"message": "Hello World!"}""")),\n    ) @@ cors(config)\n\n  val frontend: Routes[Any, Response] =\n    Routes(\n      Method.GET / PathCodec.empty -> handler(\n        Response.html(\n          html(\n            p("Message: ", output()),\n            script("""\n                     |// This runs on http://localhost:3000\n                     |fetch("http://localhost:8080/json")\n                     |  .then((res) => res.json())\n                     |  .then((res) => document.querySelector("output").textContent = res.message);\n                     |""".stripMargin),\n          ),\n        ),\n      ),\n    )\n\n  val frontEndServer = Server.serve(frontend).provide(Server.defaultWithPort(3000))\n  val backendServer  = Server.serve(backend).provide(Server.defaultWithPort(8080))\n\n  val run = frontEndServer.zipPar(backendServer)\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-with-middlewares-example",children:"Advanced with Middlewares Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala" ',children:'package example\n\nimport java.util.concurrent.TimeUnit\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorldWithMiddlewares extends ZIOAppDefault {\n\n  val routes: Routes[Any, Response] = Routes(\n    // this will return result instantly\n    Method.GET / "text"         -> handler(ZIO.succeed(Response.text("Hello World!"))),\n    // this will return result after 5 seconds, so with 3 seconds timeout it will fail\n    Method.GET / "long-running" -> handler(ZIO.succeed(Response.text("Hello World!")).delay(5 seconds)),\n  )\n\n  val serverTime = Middleware.patchZIO(_ =>\n    for {\n      currentMilliseconds <- Clock.currentTime(TimeUnit.MILLISECONDS)\n      header = Response.Patch.addHeader("X-Time", currentMilliseconds.toString)\n    } yield header,\n  )\n  val middlewares =\n    // print debug info about request and response\n    Middleware.debug ++\n      // close connection if request takes more than 3 seconds\n      Middleware.timeout(3 seconds) ++\n      // add static header\n      Middleware.addHeader("X-Environment", "Dev") ++\n      // add dynamic header\n      serverTime\n\n  // Run it like any simple app\n  val run = Server.serve(routes @@ middlewares).provide(Server.default)\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const l={},a=o.createContext(l);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);