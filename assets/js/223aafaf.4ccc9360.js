"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[7167],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var r=a(96540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},84546:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/error-management/recovering/sandboxing","title":"Sandboxing","description":"We know that a ZIO effect may fail due to a failure, a defect, a fiber interruption, or a combination of these causes. So a ZIO effect may contain more than one cause. Using the ZIO#sandbox operator, we can sandbox all errors of a ZIO application, whether the cause is a failure, defect, or a fiber interruption or combination of these. This operator exposes the full cause of a ZIO effect into the error channel:","source":"@site/docs/reference/error-management/recovering/sandboxing.md","sourceDirName":"reference/error-management/recovering","slug":"/reference/error-management/recovering/sandboxing","permalink":"/reference/error-management/recovering/sandboxing","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/recovering/sandboxing.md","tags":[],"version":"current","frontMatter":{"id":"sandboxing","title":"Sandboxing","sidebar_label":"6. Sandboxing"},"sidebar":"reference-sidebar","previous":{"title":"5. Timing out","permalink":"/reference/error-management/recovering/timing-out"},"next":{"title":"Error Accumulation","permalink":"/reference/error-management/error-accumulation"}}');var t=a(74848),o=a(28453);const i={id:"sandboxing",title:"Sandboxing",sidebar_label:"6. Sandboxing"},s=void 0,c={},l=[];function u(e){const n={code:"code",em:"em",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["We know that a ZIO effect may fail due to a failure, a defect, a fiber interruption, or a combination of these causes. So a ZIO effect may contain more than one cause. Using the ",(0,t.jsx)(n.code,{children:"ZIO#sandbox"})," operator, we can sandbox all errors of a ZIO application, whether the cause is a failure, defect, or a fiber interruption or combination of these. This operator exposes the full cause of a ZIO effect into the error channel:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def sandbox: ZIO[R, Cause[E], A]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"ZIO#sandbox"})," operator to uncover the full causes of an ",(0,t.jsx)(n.em,{children:"exceptional effect"}),". So we can see all the errors that occurred as a type of ",(0,t.jsx)(n.code,{children:"Cause[E]"})," at the error channel of the ",(0,t.jsx)(n.code,{children:"ZIO"})," data type. So then we can use normal error-handling operators such as ",(0,t.jsx)(n.code,{children:"ZIO#catchSome"})," and ",(0,t.jsx)(n.code,{children:"ZIO#catchAll"})," operators:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val effect: ZIO[Any, String, String] =\n    ZIO.succeed("primary result") *> ZIO.fail("Oh uh!")\n\n  val myApp: ZIO[Any, Cause[String], String] =\n    effect.sandbox.catchSome {\n      case Cause.Interrupt(fiberId, _) =>\n        ZIO.debug(s"Caught interruption of a fiber with id: $fiberId") *>\n          ZIO.succeed("fallback result on fiber interruption")\n      case Cause.Die(value, _) =>\n        ZIO.debug(s"Caught a defect: $value") *>\n          ZIO.succeed("fallback result on defect")\n      case Cause.Fail(value, _) =>\n        ZIO.debug(s"Caught a failure: $value") *>\n          ZIO.succeed("fallback result on failure")\n    }\n\n  val finalApp: ZIO[Any, String, String] = myApp.unsandbox.debug("final result")\n\n  def run = finalApp\n}\n\n// Output:\n// Caught a failure: Oh uh!\n// final result: fallback result on failure\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"sandbox"})," operation we are exposing the full cause of an effect. So then we have access to the underlying cause in more detail. After handling exposed causes using ",(0,t.jsx)(n.code,{children:"ZIO#catch*"})," operators, we can undo the ",(0,t.jsx)(n.code,{children:"sandbox"})," operation using the ",(0,t.jsx)(n.code,{children:"unsandbox"})," operation. It will submerge the full cause (",(0,t.jsx)(n.code,{children:"Cause[E]"}),") again:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval effect: ZIO[Any, String, String] =\n  ZIO.succeed("primary result") *> ZIO.fail("Oh uh!")\n\neffect            // ZIO[Any, String, String]\n  .sandbox        // ZIO[Any, Cause[String], String]\n  .catchSome(???) // ZIO[Any, Cause[String], String]\n  .unsandbox      // ZIO[Any, String, String]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["There is another version of sandbox called ",(0,t.jsx)(n.code,{children:"ZIO#sandboxWith"}),". This operator helps us to sandbox, then catch all causes, and then unsandbox back:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def sandboxWith[R1 <: R, E2, B](f: ZIO[R1, Cause[E], A] => ZIO[R1, Cause[E2], B])\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's try the previous example using this operator:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val effect: ZIO[Any, String, String] =\n    ZIO.succeed("primary result") *> ZIO.fail("Oh uh!")\n\n  val myApp =\n    effect.sandboxWith[Any, String, String] { e =>\n      e.catchSome {\n        case Cause.Interrupt(fiberId, _) =>\n          ZIO.debug(s"Caught interruption of a fiber with id: $fiberId") *>\n            ZIO.succeed("fallback result on fiber interruption")\n        case Cause.Die(value, _) =>\n          ZIO.debug(s"Caught a defect: $value") *>\n            ZIO.succeed("fallback result on defect")\n        case Cause.Fail(value, _) =>\n          ZIO.debug(s"Caught a failure: $value") *>\n            ZIO.succeed("fallback result on failure")\n      }\n    }\n  def run = myApp.debug\n}\n\n// Output:\n// Caught a failure: Oh uh!\n// fallback result on failure\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);