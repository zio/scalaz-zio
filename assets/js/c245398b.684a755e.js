"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[36747],{32737:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"zio-optics/understanding-optics","title":"Understanding Optics","description":"ZIO Optics is based on a single representation of an optic as a combination of a getter and a setter.","source":"@site/docs/zio-optics/understanding-optics.md","sourceDirName":"zio-optics","slug":"/zio-optics/understanding-optics","permalink":"/zio-optics/understanding-optics","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-optics/understanding-optics.md","tags":[],"version":"current","frontMatter":{"id":"understanding-optics","title":"Understanding Optics"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Optics","permalink":"/zio-optics/"},"next":{"title":"Constructing Optics","permalink":"/zio-optics/constructing-optics"}}');var n=s(74848),r=s(28453);const c={id:"understanding-optics",title:"Understanding Optics"},a=void 0,o={},l=[{value:"Lens",id:"lens",level:2},{value:"Prism",id:"prism",level:2},{value:"Traversal",id:"traversal",level:2},{value:"Other",id:"other",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"ZIO Optics is based on a single representation of an optic as a combination of a getter and a setter."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"trait Optic[-GetWhole, -SetWholeBefore, -SetPiece, +GetError, +SetError, +GetPiece, +SetWholeAfter] {\n  def getOptic(whole: GetWhole): Either[GetError, GetPiece]\n  def setOptic(piece: SetPiece)(whole: SetWholeBefore): Either[SetError, SetWholeAfter]\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The getter can take some larger structure of type ",(0,n.jsx)(t.code,{children:"GetWhole"})," and get a part of it of type ",(0,n.jsx)(t.code,{children:"GetPiece"}),". It can potentially fail with an error of type ",(0,n.jsx)(t.code,{children:"GetError"})," because the part we are trying to get might not exist in the larger structure."]}),"\n",(0,n.jsxs)(t.p,{children:["The setter has the ability, given some piece of type ",(0,n.jsx)(t.code,{children:"SetPiece"})," and an original structure of type ",(0,n.jsx)(t.code,{children:"SetWholeBefore"}),", to return a new structure of type ",(0,n.jsx)(t.code,{children:"SetWholeAfter"}),". Setting can fail with an error of type ",(0,n.jsx)(t.code,{children:"SetError"})," because the piece we are trying to set might not exist in the structure."]}),"\n",(0,n.jsx)(t.h2,{id:"lens",children:"Lens"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Lens"})," is an optic that accesses a field of a product type, such as a tuple or case class."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"GetError"})," type of a ",(0,n.jsx)(t.code,{children:"Lens"})," is ",(0,n.jsx)(t.code,{children:"Nothing"})," because we can always get a field of a product type. The ",(0,n.jsx)(t.code,{children:"SetError"})," type is also ",(0,n.jsx)(t.code,{children:"Nothing"})," because we can always set the field of a product type to a new value."]}),"\n",(0,n.jsxs)(t.p,{children:["In this case the ",(0,n.jsx)(t.code,{children:"GetWhole"}),", ",(0,n.jsx)(t.code,{children:"SetWholeBefore"}),", and ",(0,n.jsx)(t.code,{children:"SetWholeAfter"})," types are the same and represent the product type. The ",(0,n.jsx)(t.code,{children:"GetPiece"})," and ",(0,n.jsx)(t.code,{children:"SetPiece"})," types are also the same and represent the field."]}),"\n",(0,n.jsx)(t.p,{children:"Thus, we have:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"type Lens[S, A] = Optic[S, S, A, Nothing, Nothing, A, S]\n"})}),"\n",(0,n.jsx)(t.p,{children:"The simplified signature is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"trait Lens[S, A] {\n  def getOptic(s: S): Either[Nothing, A]\n  def setOptic(a: A)(s: S): Either[Nothing, S]\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This conforms exactly to our description above. A lens is an optic where we can always get part of the larger structure and given an original structure we can always set a new value in that structure."}),"\n",(0,n.jsx)(t.h2,{id:"prism",children:"Prism"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Prism"})," is an optic that accesses a case of a sum type, such as the ",(0,n.jsx)(t.code,{children:"Left"})," or ",(0,n.jsx)(t.code,{children:"Right"})," cases of an ",(0,n.jsx)(t.code,{children:"Either"})," or one of the subtypes of a sealed trait."]}),"\n",(0,n.jsxs)(t.p,{children:["Getting part of a larger data structure with a prism can fail because the case we are trying to access might not exist. For example, we might be trying to access the right side of an ",(0,n.jsx)(t.code,{children:"Either"})," but the either is actually a ",(0,n.jsx)(t.code,{children:"Left"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["We use the data type ",(0,n.jsx)(t.code,{children:"OpticFailure"})," to model the different ways that getting or setting with an optic can fail. So the ",(0,n.jsx)(t.code,{children:"GetError"})," type of a prism will be ",(0,n.jsx)(t.code,{children:"OpticFailure"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"trait OpticFailure extends Throwable\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"SetError"})," type of a prism will be ",(0,n.jsx)(t.code,{children:"Nothing"})," because given one of the cases of a product type we can always return a new value of the product type since each case of the product type is an instance of the product type."]}),"\n",(0,n.jsx)(t.p,{children:"A prism also differs from a lens in that we do not need any original structure to set. A product type consists of nothing but its cases so if we have a new value of the case we want to set we can just use that value and don't need the original structure."}),"\n",(0,n.jsxs)(t.p,{children:["We represent this by using ",(0,n.jsx)(t.code,{children:"Any"})," for the ",(0,n.jsx)(t.code,{children:"SetWholeBefore"})," type, indicating that we do not need any original structure to set a new value."]}),"\n",(0,n.jsx)(t.p,{children:"Thus, the definition of a prism is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"type Prism[S, A] = Optic[S, Any, A, OpticFailure, Nothing, A, S]\n"})}),"\n",(0,n.jsx)(t.p,{children:"And the simplified signature is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"trait Prism[S, A] {\n  def getOptic(s: S): Either[OpticFailure, A]\n  def setOptic(a: Any)(s: S): Either[Nothing, S]\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"Again this conforms exactly to our description. A prism is an optic where we might not be able to get a value but can always set a value and in fact do not require any original structure to set."}),"\n",(0,n.jsx)(t.h2,{id:"traversal",children:"Traversal"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Traversal"})," is an optic that accesses zero or more values in a collection, such as a ",(0,n.jsx)(t.code,{children:"Chunk"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Both getting and setting can fail because, for example, we might be trying to get or set a value at an index that does not exist in the ",(0,n.jsx)(t.code,{children:"Chunk"}),". We also need the original structure because we may only be modifying part of the collection."]}),"\n",(0,n.jsxs)(t.p,{children:["The distinguishing feature of a ",(0,n.jsx)(t.code,{children:"Traversal"})," is that it can access zero or more values instead of a single value. We represent this by parameterizing ",(0,n.jsx)(t.code,{children:"SetPiece"})," and ",(0,n.jsx)(t.code,{children:"GetPiece"})," on a ",(0,n.jsx)(t.code,{children:"Chunk"})," instead of a single value."]}),"\n",(0,n.jsx)(t.p,{children:"The definition of a traversal looks like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"import zio.Chunk\n\ntype Traversal[S, A] = Optic[S, S, Chunk[A], OpticFailure, OpticFailure, Chunk[A], S]\n"})}),"\n",(0,n.jsx)(t.p,{children:"And the simplified signature looks like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"trait Traversal[S, A] {\n  def getOptic(s: S): Either[OpticFailure, Chunk[A]]\n  def setOptic(as: Chunk[A])(s: S): Either[OpticFailure, S]\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"other",children:"Other"}),"\n",(0,n.jsx)(t.p,{children:"ZIO Optics supports a wide variety of other optics:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Optional"})," - An ",(0,n.jsx)(t.code,{children:"Optional"})," is an optic that accesses part of a larger structure where the part being accessed may not exist and the structure contains more than just that part. Both the ",(0,n.jsx)(t.code,{children:"GetError"})," and ",(0,n.jsx)(t.code,{children:"SetError"})," types are ",(0,n.jsx)(t.code,{children:"OpticFailure"})," because the part may not exist in the structure and setting does require the original structure since it consists of more than just this one part."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Iso"})," - An ",(0,n.jsx)(t.code,{children:"Iso"})," is an optic that accesses a part of a structure where the structure consists of nothing but the part. Both the ",(0,n.jsx)(t.code,{children:"GetError"})," and ",(0,n.jsx)(t.code,{children:"SetError"})," types are ",(0,n.jsx)(t.code,{children:"Nothing"})," and the ",(0,n.jsx)(t.code,{children:"SetWholeBefore"})," type is ",(0,n.jsx)(t.code,{children:"Any"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Fold"})," - A ",(0,n.jsx)(t.code,{children:"Fold"})," is a ",(0,n.jsx)(t.code,{children:"Traversal"})," that only allows getting a collection of values. The ",(0,n.jsx)(t.code,{children:"SetWhole"})," before and ",(0,n.jsx)(t.code,{children:"SetPiece"})," types are nothing because it is impossible to ever set."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Getter"})," - A ",(0,n.jsx)(t.code,{children:"Getter"})," is an optic that only allows getting a value. Like a ",(0,n.jsx)(t.code,{children:"Fold"})," the ",(0,n.jsx)(t.code,{children:"SetWholeBefore"})," and ",(0,n.jsx)(t.code,{children:"SetPiece"})," types are ",(0,n.jsx)(t.code,{children:"Nothing"})," because it is impossible to ever set."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Setter"})," - A ",(0,n.jsx)(t.code,{children:"Setter"})," is an optic that only allows setting a value. The ",(0,n.jsx)(t.code,{children:"GetWhole"})," type is ",(0,n.jsx)(t.code,{children:"Nothing"})," because it is impossible to ever get."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["There are also more polymorphic versions of each optic that allow the types of the data structure and part before and after to differ. For example, a ",(0,n.jsx)(t.code,{children:"ZPrism"})," could allow us to access the right case of an ",(0,n.jsx)(t.code,{children:"Either[A, B]"})," and set a ",(0,n.jsx)(t.code,{children:"C"})," value to return an ",(0,n.jsx)(t.code,{children:"Either[A, C]"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>a});var i=s(96540);const n={},r=i.createContext(n);function c(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);