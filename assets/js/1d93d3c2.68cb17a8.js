"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[74424],{28453:(e,i,n)=>{n.d(i,{R:()=>g,x:()=>t});var o=n(96540);const l={},r=o.createContext(l);function g(e){const i=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:g(e.components),o.createElement(r.Provider,{value:i},e.children)}},46692:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>t,default:()=>f,frontMatter:()=>g,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"zio-logging/file-logger","title":"File Logger","description":"logger layer with configuration from config provider:","source":"@site/docs/zio-logging/file-logger.md","sourceDirName":"zio-logging","slug":"/zio-logging/file-logger","permalink":"/zio-logging/file-logger","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/file-logger.md","tags":[],"version":"current","frontMatter":{"id":"file-logger","title":"File Logger"},"sidebar":"ecosystem-sidebar","previous":{"title":"Console Logger","permalink":"/zio-logging/console-logger"},"next":{"title":"Reconfigurable Logger","permalink":"/zio-logging/reconfigurable-logger"}}');var l=n(74848),r=n(28453);const g={id:"file-logger",title:"File Logger"},t=void 0,s={},a=[{value:"Configuration",id:"configuration",level:2},{value:"Examples",id:"examples",level:2},{value:"File Logger",id:"file-logger",level:3}];function c(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.p,{children:"logger layer with configuration from config provider:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:"import zio.logging.fileLogger\nimport zio.{ ConfigProvider, Runtime }\n\nval configProvider: ConfigProvider = ???\n\nval logger = Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> fileLogger()\n"})}),"\n",(0,l.jsx)(i.p,{children:"logger layer with given configuration:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:"import zio.logging.{ fileLogger, FileLoggerConfig }\nimport zio.Runtime\n\nval config: FileLoggerConfig = ???\n\nval logger = Runtime.removeDefaultLoggers >>> fileLogger(config)\n"})}),"\n",(0,l.jsx)(i.p,{children:"there are other versions of file loggers:"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"zio.logging.fileJsonLogger"})," - output in json format"]}),"\n",(0,l.jsxs)(i.li,{children:["file async:","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"zio.logging.fileAsynLogger"})," - output in string format"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"zio.logging.fileAsyncJsonLogger"})," - output in json format"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsxs)(i.p,{children:["the configuration for file logger (",(0,l.jsx)(i.code,{children:"zio.logging.FileLoggerConfig"}),") has the following configuration structure:"]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{children:'logger {\n  # log format, default value: LogFormat.default\n  format = "%label{timestamp}{%fixed{32}{%timestamp}} %label{level}{%level} %label{thread}{%fiberId} %label{message}{%message} %label{cause}{%cause}"\n  \n  # URI to file\n  path = "file:///tmp/console_app.log"\n    \n  # charset configuration, default value: UTF-8\n  charset = "UTF-8"\n\n  # auto flush batch size, default value: 1\n  autoFlushBatchSize = 1\n\n  # if defined, buffered writer is used, with given buffer size\n  # bufferedIOSize = 8192\n  \n  # if defined, file log rolling policy is used\n  rollingPolicy {\n    type = TimeBasedRollingPolicy # time based file rolling policy based on date - currently only this one is supported\n  }\n  \n  # log filter\n  filter {\n    # see filter configuration\n    rootLevel = INFO\n  }\n}\n'})}),"\n",(0,l.jsxs)(i.p,{children:["see also ",(0,l.jsx)(i.a,{href:"/zio-logging/formatting-log-records#log-format-configuration",children:"log format configuration"})," and ",(0,l.jsx)(i.a,{href:"/zio-logging/log-filter#configuration",children:"filter configuration"})]}),"\n",(0,l.jsx)(i.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(i.p,{children:["You can find the source code ",(0,l.jsx)(i.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,l.jsx)(i.h3,{id:"file-logger",children:"File Logger"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.config.typesafe.TypesafeConfigProvider\nimport zio.logging.fileLogger\nimport zio.{ Config, ConfigProvider, ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, ZLayer }\n\nobject FileApp extends ZIOAppDefault {\n\n  val configString: String =\n    s"""\n       |logger {\n       |  format = "%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %cause"\n       |  path = "file:///tmp/file_app.log"\n       |  rollingPolicy {\n       |    type = TimeBasedRollingPolicy\n       |  }\n       |}\n       |""".stripMargin\n\n  val configProvider: ConfigProvider = TypesafeConfigProvider.fromHoconString(configString)\n\n  override val bootstrap: ZLayer[Any, Config.Error, Unit] =\n    Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> fileLogger()\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _ <- ZIO.logInfo("Start")\n      _ <- ZIO.fail("FAILURE")\n      _ <- ZIO.logInfo("Done")\n    } yield ExitCode.success\n}\n'})}),"\n",(0,l.jsxs)(i.p,{children:["Expected file name: ",(0,l.jsx)(i.code,{children:"file_app-2023-03-05.log"})]}),"\n",(0,l.jsx)(i.p,{children:"Expected file content:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{children:'2023-03-05T12:37:31+0100 INFO    [zio-fiber-4] zio.logging.example.FileApp:40 Start\n2023-03-05T12:37:31+0100 ERROR   [zio-fiber-0] zio-logger:  Exception in thread "zio-fiber-4" java.lang.String: FAILURE\n        at zio.logging.example.FileApp.run(FileApp.scala:41)\n'})})]})}function f(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);