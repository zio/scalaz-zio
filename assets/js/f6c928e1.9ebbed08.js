"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71139],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},61059:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"zio-http/examples/cli","title":"CLI Client-Server Examples","description":"","source":"@site/docs/zio-http/examples/cli.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/cli","permalink":"/zio-http/examples/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/cli.md","tags":[],"version":"current","frontMatter":{"id":"cli","title":"CLI Client-Server Examples","sidebar_label":"CLI"},"sidebar":"ecosystem-sidebar","previous":{"title":"Graceful Shutdown","permalink":"/zio-http/examples/graceful-shutdown"},"next":{"title":"Concrete Entity","permalink":"/zio-http/examples/concrete-entity"}}');var i=t(74848),s=t(28453);const r={id:"cli",title:"CLI Client-Server Examples",sidebar_label:"CLI"},a=void 0,c={},p=[];function l(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/endpoint/CliExamples.scala" ',children:'package example.endpoint\n\nimport zio._\nimport zio.cli._\n\nimport zio.schema._\nimport zio.schema.annotation.description\n\nimport zio.http.Header.Location\nimport zio.http._\nimport zio.http.codec._\nimport zio.http.endpoint.cli._\nimport zio.http.endpoint.{Endpoint, EndpointExecutor}\n\nfinal case class User(\n  @description("The unique identifier of the User")\n  id: Int,\n  @description("The user\'s name")\n  name: String,\n  @description("The user\'s email")\n  email: Option[String],\n)\nobject User {\n  implicit val schema: Schema[User] = DeriveSchema.gen[User]\n}\nfinal case class Post(\n  @description("The unique identifier of the User")\n  userId: Int,\n  @description("The unique identifier of the Post")\n  postId: Int,\n  @description("The post\'s contents")\n  contents: String,\n)\nobject Post {\n  implicit val schema: Schema[Post] = DeriveSchema.gen[Post]\n}\n\ntrait TestCliEndpoints {\n\n  val getUser =\n    Endpoint(Method.GET / "users" / int("userId") ?? Doc.p("The unique identifier of the user"))\n      .header(HeaderCodec.location ?? Doc.p("The user\'s location"))\n      .out[User] ?? Doc.p("Get a user by ID")\n\n  val getUserPosts =\n    Endpoint(\n      Method.GET /\n        "users" / int("userId") ?? Doc.p("The unique identifier of the user") /\n        "posts" / int("postId") ?? Doc.p("The unique identifier of the post"),\n    )\n      .query(\n        HttpCodec.query[String]("user-name") ?? Doc.p(\n          "The user\'s name",\n        ),\n      )\n      .out[List[Post]] ?? Doc.p("Get a user\'s posts by userId and postId")\n\n  val createUser =\n    Endpoint(Method.POST / "users")\n      .in[User]\n      .out[String] ?? Doc.p("Create a new user")\n}\n\nobject TestCliApp extends zio.cli.ZIOCliDefault with TestCliEndpoints {\n  val cliApp =\n    HttpCliApp\n      .fromEndpoints(\n        name = "users-mgmt",\n        version = "0.0.1",\n        summary = HelpDoc.Span.text("Users management CLI"),\n        footer = HelpDoc.p("Copyright 2023"),\n        host = "localhost",\n        port = 8080,\n        endpoints = Chunk(getUser, getUserPosts, createUser),\n        cliStyle = true,\n      )\n      .cliApp\n}\n\nobject TestCliServer extends zio.ZIOAppDefault with TestCliEndpoints {\n  val getUserRoute =\n    getUser.implementHandler {\n      Handler.fromFunctionZIO { case (id, _) =>\n        ZIO.succeed(User(id, "Juanito", Some("juanito@test.com"))).debug("Hello")\n      }\n    }\n\n  val getUserPostsRoute =\n    getUserPosts.implementHandler {\n      Handler.fromFunction { case (userId, postId, name) =>\n        List(Post(userId, postId, name))\n      }\n    }\n\n  val createUserRoute =\n    createUser.implementHandler {\n      Handler.fromFunction { user =>\n        user.name\n      }\n    }\n\n  val routes = Routes(getUserRoute, getUserPostsRoute, createUserRoute) @@ Middleware.debug\n\n  val run = Server.serve(routes).provide(Server.default)\n}\n\nobject TestCliClient extends zio.ZIOAppDefault with TestCliEndpoints {\n  val run =\n    clientExample\n      .provide(\n        EndpointExecutor.make(serviceName = "test"),\n        Client.default,\n      )\n\n  def clientExample: URIO[EndpointExecutor[Any, Unit], Unit] =\n    for {\n      executor <- ZIO.service[EndpointExecutor[Any, Unit]]\n      _        <- ZIO.scoped(executor(getUser(42, Location.parse("some-location").toOption.get))).debug("result1")\n      _        <- ZIO.scoped(executor(getUserPosts(42, 200, "adam")).debug("result2"))\n      _        <- ZIO.scoped(executor(createUser(User(2, "john", Some("john@test.com"))))).debug("result3")\n    } yield ()\n\n}\n'})})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);