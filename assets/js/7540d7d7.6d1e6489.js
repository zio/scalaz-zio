"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[74295],{51838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"zio-dynamodb/guides/transactions","title":"DynamoDB Transactions","description":"Transactions are as simple as calling the .transaction method on a DynamoDBQuery. As long as every component of the query is a valid transaction item and the DynamoDBQuery does not have a mix of get and write transaction items. A list of valid items for both types of queries is listed below.","source":"@site/docs/zio-dynamodb/guides/transactions.md","sourceDirName":"zio-dynamodb/guides","slug":"/zio-dynamodb/guides/transactions","permalink":"/zio-dynamodb/guides/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/guides/transactions.md","tags":[],"version":"current","frontMatter":{"id":"transactions","title":"DynamoDB Transactions"},"sidebar":"ecosystem-sidebar","previous":{"title":"Codec Customization","permalink":"/zio-dynamodb/guides/codec-customization"},"next":{"title":"Testing ZIO DynamoDB Applications","permalink":"/zio-dynamodb/guides/testing"}}');var i=n(74848),s=n(28453);const l={id:"transactions",title:"DynamoDB Transactions"},r=void 0,o={},c=[{value:"Examples",id:"examples",level:2},{value:"Write Transactions",id:"write-transactions",level:3},{value:"ReadTransactions",id:"readtransactions",level:3},{value:"Transaction Failures",id:"transaction-failures",level:2},{value:"Valid Transact Write Items",id:"valid-transact-write-items",level:3},{value:"Valid Transact Get Item",id:"valid-transact-get-item",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html",children:"Transactions"})," are as simple as calling the ",(0,i.jsx)(t.code,{children:".transaction"})," method on a ",(0,i.jsx)(t.code,{children:"DynamoDBQuery"}),". As long as every component of the query is a valid transaction item and the ",(0,i.jsx)(t.code,{children:"DynamoDBQuery"})," does not have a mix of get and write transaction items. A list of valid items for both types of queries is listed below."]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"Assuming the below model:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"final case class Student(email: String, subject: String)\nobject Person {\n  implicit lazy val schema: Schema.CaseClass2[String, String, Student] = DeriveSchema.gen[Student]\n\n  val (email, subject) = ProjectionExpression.accessors[Student]\n}\nfinal case class Bill(email: String, amount: Int)\nobject Bill {\n  implicit lazy val schema: Schema.CaseClass2[String, Int, Bill] = DeriveSchema.gen[Bill]\n\n  val (email, amount) = ProjectionExpression.accessors[Bill]\n}\nfinal case class WaitList(email: String)\nobject Bill {\n  implicit lazy val schema: Schema.CaseClass1[String, WaitList] = DeriveSchema.gen[WaitList]\n\n  val email = ProjectionExpression.accessors[WaitList]\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"write-transactions",children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html",children:"Write Transactions"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'val student = Student("avi@gmail.com", "maths")\nval bill = Bill("avi@gmail.com", 1)\n\nval putStudent = put("student", student)\nval billedStudent = put("billing", bill)\nval deleteFromWaitlist = deleteFrom("waitlist")(WaitList.email.partitionKey === student.email)\n\nval studentEnrollmentTransaction = (putStudent zip billedStudent zip deleteFromWaitlist).transaction\n\nfor {\n  _ <- studentEnrollmentTransaction.execute\n} yield ()\n'})}),"\n",(0,i.jsx)(t.h3,{id:"readtransactions",children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html",children:"ReadTransactions"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'val getStudent = get("student")(Student.id.partitionKey === "1")\nval getBill = get("billing")(Bill.id.partitionKey === "1")\n\nval getStudentAndBillTransaction = (getStudent zip getBill).transaction\n\nfor {\n  studentAndBill <- getStudentAndBillTransaction.execute\n} yield studentAndBill\n'})}),"\n",(0,i.jsx)(t.h2,{id:"transaction-failures",children:"Transaction Failures"}),"\n",(0,i.jsxs)(t.p,{children:["DynamoDBQueries using the ",(0,i.jsx)(t.code,{children:".transaction"})," method will fail at runtime if there are invalid transaction actions such as creating a table, scanning for items, or querying. Note a limited number of actions that can be performed for either a read or a write transaction. There is a ",(0,i.jsx)(t.code,{children:".safeTransaction"})," method that is also available that will return ",(0,i.jsx)(t.code,{children:"Either[DynamoDBError.TransactionError, DynamoDBQuery[A]]"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["There are more examples in our integration tests ",(0,i.jsx)(t.a,{href:"https://github.com/zio/zio-dynamodb/blob/series/2.x/dynamodb/src/it/scala/zio/dynamodb/TypeSafeApiCrudSpec.scala",children:"here"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/zio/zio-dynamodb/blob/series/2.x/dynamodb/src/it/scala/zio/dynamodb/LiveSpec.scala",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"valid-transact-write-items",children:"Valid Transact Write Items"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"PutItem"}),"\n",(0,i.jsx)(t.li,{children:"DeleteItem"}),"\n",(0,i.jsx)(t.li,{children:"BatchWriteItem"}),"\n",(0,i.jsx)(t.li,{children:"UpdateItem"}),"\n",(0,i.jsx)(t.li,{children:"ConditionCheck"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"valid-transact-get-item",children:"Valid Transact Get Item"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"GetItem"}),"\n",(0,i.jsx)(t.li,{children:"BatchGetItem"}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var a=n(96540);const i={},s=a.createContext(i);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);