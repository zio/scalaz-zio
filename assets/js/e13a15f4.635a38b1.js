"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[88017],{50593:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-dynamodb/reference/dynamodb-query","title":"DynamoDBQuery","description":"When we use the Low or High Level API constructors to create a query we end up with the type DynamoDBQuery which is a sealed trait.","source":"@site/docs/zio-dynamodb/reference/dynamodb-query.md","sourceDirName":"zio-dynamodb/reference","slug":"/zio-dynamodb/reference/dynamodb-query","permalink":"/zio-dynamodb/reference/dynamodb-query","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/dynamodb-query.md","tags":[],"version":"current","frontMatter":{"id":"dynamodb-query","title":"DynamoDBQuery"},"sidebar":"ecosystem-sidebar","previous":{"title":"$ and parse functions","permalink":"/zio-dynamodb/reference/low-level-api/dollar-function"},"next":{"title":"ProjectionExpression","permalink":"/zio-dynamodb/reference/projection-expression"}}');var n=r(74848),d=r(28453);const a={id:"dynamodb-query",title:"DynamoDBQuery"},i=void 0,o={},c=[{value:"<code>DynamoDBQuery</code> Combinators and Operations",id:"dynamodbquery-combinators-and-operations",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["When we use the Low or High Level API constructors to create a query we end up with the type ",(0,n.jsx)(t.code,{children:"DynamoDBQuery"})," which is a sealed trait."]}),"\n",(0,n.jsxs)(t.p,{children:["One of the primary methods on this trait is ",(0,n.jsx)(t.code,{children:"execute"})," which will run the query and return the result as a ZIO effect."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"def execute: ZIO[DynamoDBExecutor, DynamoDBError, Out] = ???\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"execute"})," method requires a ",(0,n.jsx)(t.code,{children:"DynamoDBExecutor"})," service in order to execute the query using the lower level ZIO AWS DynamoDB library."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"execute"})," method does the following:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["if the query type is a composite (",(0,n.jsx)(t.code,{children:"Zip"}),") then it will automatically batch or parallelise the queries - see\n",(0,n.jsx)(t.a,{href:"auto-batching-and-parallelisation",children:"Auto batching and parallelisation"})," for the exact rules"]}),"\n",(0,n.jsxs)(t.li,{children:["executes the query using the ",(0,n.jsx)(t.code,{children:"DynamoDBExecutor"})," service, which:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"converts it to an underlying ZIO AWS DynamoDB query"}),"\n",(0,n.jsxs)(t.li,{children:["converts the ZIO AWS DynamoDB response back to an ",(0,n.jsx)(t.code,{children:"Item"})," (type alias for an ",(0,n.jsx)(t.code,{children:"AttrMap"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["When using the High Level API transformations are done between the Scala model and the ",(0,n.jsx)(t.code,{children:"Item"})," type using the automatically\ngenerated codecs that make use of the ",(0,n.jsx)(t.code,{children:"ZIO Schema"})," in implicit scope."]}),"\n",(0,n.jsxs)(t.p,{children:["The next sections cover the surface area exposed by ",(0,n.jsx)(t.code,{children:"DynamoDBQuery"}),"."]}),"\n",(0,n.jsxs)(t.h2,{id:"dynamodbquery-combinators-and-operations",children:[(0,n.jsx)(t.code,{children:"DynamoDBQuery"})," Combinators and Operations"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"DynamoDBQuery Combinators"}),(0,n.jsx)(t.th,{children:"Alias"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"map"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"map the result of a query with a function"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"zip"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"<*>"})}),(0,n.jsxs)(t.td,{children:["combine 2 queries together and returns a tuple - makes the resulting query eligible for automatic batching or parallelisation ",(0,n.jsx)(t.a,{href:"auto-batching-and-parallelisation",children:"see Autobatching and Parallelisation"})," for more details"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"zipWith"}),(0,n.jsx)(t.td,{}),(0,n.jsxs)(t.td,{children:["does a ",(0,n.jsx)(t.code,{children:"zip"})," and then immediately maps the result with a function"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"zipLeft"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"<*"})}),(0,n.jsx)(t.td,{children:"a zip that ignores the result of the right query"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"zipRight"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"*>"})}),(0,n.jsx)(t.td,{children:"a zip that ignores the result of the left query"})]})]})]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"DynamoDBQuery Functions"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"def forEach[In, A, B](values: Iterable[A])(body: A => DynamoDBQuery[In, B]): DynamoDBQuery[In, List[B]]"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"DynamoDB.forEach"})," automates the zipping of queries of the same type using a collection as input. ",(0,n.jsx)(t.a,{href:"auto-batching-and-parallelisation",children:"see Autobatching and Parallelisation"})," for more details. ",(0,n.jsx)("br",{}),(0,n.jsx)("br",{})," Note that unprocessed items/keys are retried automatically and if they still fail a ",(0,n.jsx)(t.code,{children:"BatchError.WriteError"}),"/",(0,n.jsx)(t.code,{children:"BatchError.GetError"})," is returned both of which will contain a list of the unprocessed items/keys - see ",(0,n.jsx)(t.code,{children:"withRetryPolicy"})," in the below section for overriding the default retry policy."]})]})})]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"DynamoDBQuery Operations"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"capacity"}),(0,n.jsxs)(t.td,{children:["sets the ReturnConsumedCapacity. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-ReturnConsumedCapacity",children:"AWS API"}),". Note capacity data in the response is ignored by the High Level Api"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"consistency"}),(0,n.jsxs)(t.td,{children:["sets the ",(0,n.jsx)(t.code,{children:"ConsistencyMode"})," for read operations. Valid values are ",(0,n.jsx)(t.code,{children:"Strong"}),"and ",(0,n.jsx)(t.code,{children:"Weak"}),"(default) ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-ConsistentRead",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"filter"}),(0,n.jsxs)(t.td,{children:["sets the ",(0,n.jsx)(t.code,{children:"FilterExpression"})," - applies to ",(0,n.jsx)(t.code,{children:"ScanSome"}),", ",(0,n.jsx)(t.code,{children:"ScanAll"}),", ",(0,n.jsx)(t.code,{children:"QuerySome"}),", ",(0,n.jsx)(t.code,{children:"QueryAll"}),". Note the filter is applies ",(0,n.jsx)(t.strong,{children:"after"})," the read by DDB so no read units are saved, however latency costs are reduced."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"gsi"}),(0,n.jsxs)(t.td,{children:["creates a Global Secondary Index - applies to a ",(0,n.jsx)(t.code,{children:"CreateTable"})," query. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html#DDB-CreateTable-request-GlobalSecondaryIndexes",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"indexName"}),(0,n.jsxs)(t.td,{children:["sets the local secondary index or global secondary index name - applies to ",(0,n.jsx)(t.code,{children:"ScanSome"}),", ",(0,n.jsx)(t.code,{children:"ScanAll"}),", ",(0,n.jsx)(t.code,{children:"QuerySome"}),", ",(0,n.jsx)(t.code,{children:"QueryAll"}),". ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html#DDB-Scan-request-IndexName",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"lsi"}),(0,n.jsxs)(t.td,{children:["creates a local Secondary Index - applies to a ",(0,n.jsx)(t.code,{children:"CreateTable"})," query. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html#DDB-CreateTable-request-LocalSecondaryIndexes",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"metrics"}),(0,n.jsxs)(t.td,{children:["set ",(0,n.jsx)(t.code,{children:"ReturnItemCollectionMetrics"}),", valid values are ",(0,n.jsx)(t.code,{children:"None"})," (default) and ",(0,n.jsx)(t.code,{children:"Size"})," - applies to PutItem, UpdateItem, Delete, Transaction. Note that metric data in the response is ignored by the High Level API. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html#DDB-PutItem-request-ReturnItemCollectionMetrics",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"parallel(N)"}),(0,n.jsxs)(t.td,{children:["Applies only to ",(0,n.jsx)(t.code,{children:"Scan"})," - sements and runs the query in parallel in DDB and merges the items in the response. N is level of parallelism. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan",children:"AWS API"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"returns"}),(0,n.jsxs)(t.td,{children:["sets the ",(0,n.jsx)(t.code,{children:"ReturnValues"})," - applies to ",(0,n.jsx)(t.code,{children:"UpdateItem"}),", ",(0,n.jsx)(t.code,{children:"DeleteItem"}),", ",(0,n.jsx)(t.code,{children:"PutItem"})," (see ",(0,n.jsx)(t.a,{href:"reference/hi-level-api/crud-operations/index.md",children:"Crud Operations"})," reference section for each operation for more details). ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html#DDB-UpdateItem-request-ReturnValues",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"selectAllAttributes, selectAllProjectedAttributes, selectSpecificAttributes, selectCount"}),(0,n.jsxs)(t.td,{children:["Determines the attributes returned by Scan and Query ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-Select",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sortOrder"}),(0,n.jsxs)(t.td,{children:["sets the sort order for ",(0,n.jsx)(t.code,{children:"Query"}),"'s ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-ScanIndexForward",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"startKey"}),(0,n.jsxs)(t.td,{children:["Applies to ",(0,n.jsx)(t.code,{children:"Query"})," and ",(0,n.jsx)(t.code,{children:"Scan"})," and specifies the start key for the query. ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-ExclusiveStartKey",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"transaction"}),(0,n.jsxs)(t.td,{children:["executes the query in a transaction - see ",(0,n.jsx)(t.a,{href:"../guides/transactions",children:"Transactions Guide"})," for more details."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"where"}),(0,n.jsxs)(t.td,{children:["sets the ",(0,n.jsx)(t.code,{children:"ConditionExpression"})," - applies to ",(0,n.jsx)(t.code,{children:"PutItem"}),", ",(0,n.jsx)(t.code,{children:"DeleteOtem"}),", ",(0,n.jsx)(t.code,{children:"UpdateItem"})," and ",(0,n.jsx)(t.code,{children:"Scan"})," ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"whereKey"}),(0,n.jsxs)(t.td,{children:["set the ",(0,n.jsx)(t.code,{children:"KeyConditionExpr"})," applies to ",(0,n.jsx)(t.code,{children:"QuerySome"})," and ",(0,n.jsx)(t.code,{children:"QueryAll"}),". ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-KeyConditionExpression",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"withClientRequestToken"}),(0,n.jsxs)(t.td,{children:["set the client request token` - applies to write transactions ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html#DDB-TransactWriteItems-request-ClientRequestToken",children:"AWS API"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"withRetryPolicy"}),(0,n.jsxs)(t.td,{children:["override the default retry policy for a batched query - ",(0,n.jsx)(t.a,{href:"auto-batching-and-parallelisation",children:"see Autobatching and Parallelisation"})," for more details"]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var s=r(96540);const n={},d=s.createContext(n);function a(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);