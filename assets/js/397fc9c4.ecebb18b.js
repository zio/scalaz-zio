"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6977],{45989:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ecosystem/community/zio-arrow","title":"ZIO Arrow","description":"ZIO Arrow provides the ZArrow effect, which is a high-performance composition effect for the ZIO ecosystem.","source":"@site/docs/ecosystem/community/zio-arrow.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-arrow","permalink":"/ecosystem/community/zio-arrow","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-arrow.md","tags":[],"version":"current","frontMatter":{"id":"zio-arrow","title":"ZIO Arrow"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Apache Parquet","permalink":"/ecosystem/community/zio-apache-parquet"},"next":{"title":"ZIO AWS S3","permalink":"/ecosystem/community/zio-aws-s3"}}');var i=r(74848),o=r(28453);const s={id:"zio-arrow",title:"ZIO Arrow"},c=void 0,a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/zio-mesh/zio-arrow/",children:"ZIO Arrow"})," provides the ",(0,i.jsx)(n.code,{children:"ZArrow"})," effect, which is a high-performance composition effect for the ZIO ecosystem."]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ZArrow[E, A, B]"})," is an effect representing a computation parametrized over the input (",(0,i.jsx)(n.code,{children:"A"}),"), and the output (",(0,i.jsx)(n.code,{children:"B"}),") that may fail with an ",(0,i.jsx)(n.code,{children:"E"}),". Arrows focus on ",(0,i.jsx)(n.strong,{children:"composition"})," and ",(0,i.jsx)(n.strong,{children:"high-performance computation"}),". They are like simple functions, but they are lifted into the ",(0,i.jsx)(n.code,{children:"ZArrow"})," context."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ZArrow"})," delivers three main capabilities:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["** High-Performance** \u2014 ",(0,i.jsx)(n.code,{children:"ZArrow"})," exploits ",(0,i.jsx)(n.code,{children:"JVM"})," internals to dramatically decrease the number of allocations and dispatches, yielding an unprecedented runtime performance."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Abstract interface"})," \u2014 ",(0,i.jsx)(n.code,{children:"Arrow"})," is a more abstract data type, than ZIO Monad. It's more abstract than ZIO Streams. In a nutshell, ",(0,i.jsx)(n.code,{children:"ZArrow"})," allows a function-like interface that can have both different inputs and different outputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Easy Integration"})," \u2014 ",(0,i.jsx)(n.code,{children:"ZArrow"})," can both input and output ",(0,i.jsx)(n.code,{children:"ZIO Monad"})," and ",(0,i.jsx)(n.code,{children:"ZIO Stream"}),", simplifying application development with different ZIO Effect types."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.neurodyne" %% "zio-arrow" % "0.2.1"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"In this example we are going to write a repetitive task of reading a number from standard input and then power by 2 and then print the result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.arrow.ZArrow\nimport zio.arrow.ZArrow._\nimport zio.console._\nimport zio.{ExitCode, URIO}\n\nimport java.io.IOException\n\nobject ArrowExample extends zio.App {\n\n  val isPositive : ZArrow[Nothing, Int, Boolean]     = ZArrow((_: Int) > 0)\n  val toStr      : ZArrow[Nothing, Any, String]      = ZArrow((i: Any) => i.toString)\n  val toInt      : ZArrow[Nothing, String, Int]      = ZArrow((i: String) => i.toInt)\n  val getLine    : ZArrow[IOException, Any, String]  = ZArrow.liftM((_: Any) => getStrLn.provide(Console.live))\n  val printStr   : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStr(line).provide(Console.live))\n  val printLine  : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStrLn(line).provide(Console.live))\n  val power2     : ZArrow[Nothing, Int, Double]      = ZArrow((i: Int) => Math.pow(i, 2))\n  val enterNumber: ZArrow[Nothing, Unit, String]     = ZArrow((_: Unit) => "Enter positive number (-1 to exit): ")\n  val goodbye    : ZArrow[Nothing, Any, String]      = ZArrow((_: Any) => "Goodbye!")\n\n  val app: ZArrow[IOException, Unit, Boolean] =\n    enterNumber >>> printStr >>> getLine >>> toInt >>>\n      ifThenElse(isPositive)(\n        power2 >>> toStr >>> printLine >>> ZArrow((_: Any) => true)\n      )(\n        ZArrow((_: Any) => false)\n      )\n\n  val myApp = whileDo(app)(ZArrow(_ => ())) >>> goodbye >>> printLine\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.run(()).exitCode\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's see an example of running this program:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Enter positive number (-1 to exit): 25\n625.0\nEnter positive number (-1 to exit): 8\n64.0\nEnter positive number (-1 to exit): -1\nGoodbye!\n"})}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=L8AEj6IRNEE",children:"Blazing Fast, Pure Effects without Monads"})," by John De Goes (Dec 2018)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(96540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);