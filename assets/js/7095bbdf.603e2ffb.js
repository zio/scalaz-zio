"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80402],{46705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"zio-http/reference/overview","title":"Overview","description":"ZIO HTTP offers an expressive API for creating HTTP applications. It uses a domain-specific language (DSL) to define routes and handlers. Both server and client are designed in terms of HTTP as a function, so they are functions from Request to Response.","source":"@site/docs/zio-http/reference/overview.md","sourceDirName":"zio-http/reference","slug":"/zio-http/reference/overview","permalink":"/zio-http/reference/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/overview.md","tags":[],"version":"current","frontMatter":{"id":"overview","title":"Overview"},"sidebar":"ecosystem-sidebar","previous":{"title":"Reference","permalink":"/zio-http/reference/"},"next":{"title":"Server","permalink":"/zio-http/reference/server"}}');var s=t(74848),o=t(28453);const a={id:"overview",title:"Overview"},c=void 0,i={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"1.Routes",id:"1routes",level:3},{value:"2. Route",id:"2-route",level:3},{value:"3. Handler",id:"3-handler",level:3},{value:"Accessing the Request",id:"accessing-the-request",level:2},{value:"Accessing Services from The Environment",id:"accessing-services-from-the-environment",level:2},{value:"WebSocket Connection",id:"websocket-connection",level:2},{value:"Server",id:"server",level:2},{value:"Client",id:"client",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["ZIO HTTP offers an expressive API for creating HTTP applications. It uses a domain-specific language (DSL) to define routes and handlers. Both server and client are designed in terms of ",(0,s.jsx)(n.strong,{children:"HTTP as a function"}),", so they are functions from ",(0,s.jsx)(n.code,{children:"Request"})," to ",(0,s.jsx)(n.code,{children:"Response"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.p,{children:"ZIO HTTP has powerful functional domains that help in creating, modifying, and composing apps easily. Let's take a look at the core domain:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Routes"})," - A collection of ",(0,s.jsx)(n.code,{children:"Route"}),"s. If the error type of the routes is ",(0,s.jsx)(n.code,{children:"Response"}),", then they can be served."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Route"})," - A single route that can be matched against an HTTP ",(0,s.jsx)(n.code,{children:"Request"})," and produce a ",(0,s.jsx)(n.code,{children:"Response"}),". It comprises a ",(0,s.jsx)(n.code,{children:"RoutePattern"})," and a ",(0,s.jsx)(n.code,{children:"Handler"}),":","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RoutePattern"})," - A pattern that can be matched against an HTTP ",(0,s.jsx)(n.code,{children:"Request"}),". It is a combination of ",(0,s.jsx)(n.code,{children:"Method"})," and ",(0,s.jsx)(n.code,{children:"PathCodec"})," which can be used to match the ",(0,s.jsx)(n.code,{children:"Method"})," and ",(0,s.jsx)(n.code,{children:"Path"})," of the ",(0,s.jsx)(n.code,{children:"Request"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Handler"})," - A function that can convert a ",(0,s.jsx)(n.code,{children:"Request"})," into a ",(0,s.jsx)(n.code,{children:"Response"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's see each of these concepts inside a simple example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject ExampleServer extends ZIOAppDefault {\n\n  // A route that matches GET requests to /greet\n  // It doesn\'t require any service from the ZIO environment \n  // so the first type parameter is Any\n  // All its errors are handled so the second type parameter is Nothing\n  val greetRoute: Route[Any, Nothing] =\n    // The whole Method.GET / "greet" is a RoutePattern\n    Method.GET / "greet" ->\n            // The handler is a function that takes a Request and returns a Response\n            handler { (req: Request) =>\n              val name = req.queryParamToOrElse("name", "World")\n              Response.text(s"Hello $name!")\n            }\n\n  // A route that matches POST requests to /echo\n  // It doesn\'t require any service from the ZIO environment\n  // It is an unhandled route so the second type parameter is something other than Nothing\n  val echoRoute: Route[Any, Throwable] =\n    Method.POST / "echo" -> handler { (req: Request) =>\n      req.body.asString.map(Response.text(_))\n    }\n\n  // The Routes that don\'t require any service from the ZIO environment,\n  // so the first type parameter is Any.\n  // All the errors are handled by turning them into a Response.\n  val routes: Routes[Any, Response] =\n    // List of all the routes\n    Routes(greetRoute, echoRoute)\n            // Handle all unhandled errors\n            .handleError(e => Response.internalServerError(e.getMessage))\n\n  // Serving the routes using the default server layer on port 8080\n  def run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"1routes",children:"1.Routes"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Routes"})," is a collection of ",(0,s.jsx)(n.code,{children:"Route"})," values. It can be created using its default constructor:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"import zio.http._\n\nval routes: Routes[Any, Response] =\n  Routes(greetRoute, echoRoute)\n    .handleError(e => Response.internalServerError(e.getMessage))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Handler"})," and ",(0,s.jsx)(n.code,{children:"Route"})," can be transformed to ",(0,s.jsx)(n.code,{children:"Routes"})," by the ",(0,s.jsx)(n.code,{children:".toRoutes"})," method. To serve the routes, all errors should be handled by converting them into a ",(0,s.jsx)(n.code,{children:"Response"})," using for example the ",(0,s.jsx)(n.code,{children:".handleError"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["For handling routes, ZIO HTTP has a ",(0,s.jsx)(n.a,{href:"/zio-http/reference/routing/routes",children:(0,s.jsx)(n.code,{children:"Routes"})})," value, which allows us to aggregate a collection of individual routes. Behind the scenes, ZIO HTTP builds an efficient prefix-tree whenever needed to optimize dispatch."]}),"\n",(0,s.jsx)(n.h3,{id:"2-route",children:"2. Route"}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.code,{children:"Route"})," is a combination of a ",(0,s.jsx)(n.a,{href:"/zio-http/reference/routing/route_pattern",children:(0,s.jsx)(n.code,{children:"RoutePattern"})})," and a ",(0,s.jsx)(n.a,{href:"/zio-http/reference/handler",children:(0,s.jsx)(n.code,{children:"Handler"})}),". The ",(0,s.jsx)(n.code,{children:"RoutePattern"})," is a combination of a ",(0,s.jsx)(n.code,{children:"Method"})," and a ",(0,s.jsx)(n.a,{href:"/zio-http/reference/routing/path_codec",children:(0,s.jsx)(n.code,{children:"PathCodec"})})," that can be used to match the method and path of the request. The ",(0,s.jsx)(n.code,{children:"Handler"})," is a function that can convert a ",(0,s.jsx)(n.code,{children:"Request"})," into a ",(0,s.jsx)(n.code,{children:"Response"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PathCodec"})," can be parameterized to extract values from the path. In such cases, the ",(0,s.jsx)(n.code,{children:"Handler"})," should be a function that accepts the extracted values besides the ",(0,s.jsx)(n.code,{children:"Request"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval routes = Routes(\n  Method.GET / "user" / int("id") ->\n    handler { (id: Int, req: Request) =>\n      Response.text(s"Requested User ID: $id")\n    }\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about routes, see the ",(0,s.jsx)(n.a,{href:"/zio-http/reference/routing/routes",children:"Routes"})," page."]}),"\n",(0,s.jsx)(n.h3,{id:"3-handler",children:"3. Handler"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Handler"})," describes the transformation from an incoming ",(0,s.jsx)(n.code,{children:"Request"})," to an outgoing ",(0,s.jsx)(n.code,{children:"Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'val helloHandler =\n  handler { (_: Request) =>\n    Response.text("Hello World!")\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Handler"})," can be effectful, in which case it should be a function that returns a ",(0,s.jsx)(n.code,{children:"ZIO"})," effect, e.g.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val randomGeneratorHandler = \n  handler { (_: Request) =>\n    Random.nextIntBounded(100).map(_.toString).map(Response.text(_))\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are several ways to create a ",(0,s.jsx)(n.code,{children:"Handler"}),", to learn more about handlers, see the ",(0,s.jsx)(n.a,{href:"reference/handler.md",children:"Handlers"})," page."]}),"\n",(0,s.jsx)(n.h2,{id:"accessing-the-request",children:"Accessing the Request"}),"\n",(0,s.jsx)(n.p,{children:"To access the request, just create a handler that accepts the request:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio.http._\nimport zio._\n\nval routes = Routes(\n  Method.GET / "fruits" / "a" -> handler { (req: Request) =>\n    Response.text("URL:" + req.url.path.toString + " Headers: " + req.headers)\n  },\n\n  Method.POST / "fruits" / "a" -> handler { (req: Request) =>\n    req.body.asString.map(Response.text(_))\n  }\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about the request, see the ",(0,s.jsx)(n.a,{href:"/zio-http/reference/request",children:"Request"})," page."]}),"\n",(0,s.jsx)(n.h2,{id:"accessing-services-from-the-environment",children:"Accessing Services from The Environment"}),"\n",(0,s.jsxs)(n.p,{children:["ZIO HTTP is built on top of ZIO, which means that we can access services from the environment in our handlers. For example, we can access a ",(0,s.jsx)(n.code,{children:"Ref[Int]"})," service to create a simple counter:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject CounterExample extends ZIOAppDefault {\n  val routes: Routes[Ref[Int], Response] =\n    Routes(\n      Method.GET / "count" / int("n") ->\n              handler { (n: Int, _: Request) =>\n                for {\n                  ref <- ZIO.service[Ref[Int]]\n                  res <- ref.updateAndGet(_ + n)\n                } yield Response.text(s"Counter: $res")\n              },\n      )\n\n  def run = Server.serve(routes).provide(Server.default, ZLayer.fromZIO(Ref.make(0)))\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we should provide the required services to the server using the ",(0,s.jsx)(n.code,{children:"provide"})," method. In the above example, we provided the ",(0,s.jsx)(n.code,{children:"Ref[Int]"})," service using the ",(0,s.jsx)(n.code,{children:"ZLayer.fromZIO"})," method."]}),"\n",(0,s.jsx)(n.h2,{id:"websocket-connection",children:"WebSocket Connection"}),"\n",(0,s.jsxs)(n.p,{children:["To handle WebSocket connections, we can use ",(0,s.jsx)(n.code,{children:"Handler.webSocket"})," to create a socket app. To create a socket app, we need to create a socket that accepts ",(0,s.jsx)(n.code,{children:"WebSocketChannel"})," and produces ",(0,s.jsx)(n.code,{children:"ZIO"}),". Finally, we need to convert socketApp to ",(0,s.jsx)(n.code,{children:"Response"})," using ",(0,s.jsx)(n.code,{children:"toResponse"}),", so that we can run it like any other HTTP app."]}),"\n",(0,s.jsxs)(n.p,{children:["The below example shows a simple socket app, which sends ",(0,s.jsx)(n.code,{children:"WebsSocketTextFrame"}),' "BAR" on receiving ',(0,s.jsx)(n.code,{children:"WebsSocketTextFrame"}),' "FOO":']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio.http._\nimport zio.stream._\nimport zio._\n\nval socket =\n  Handler.webSocket { channel =>\n    channel.receiveAll {\n      case ChannelEvent.Read(WebSocketFrame.Text("FOO")) =>\n        channel.send(ChannelEvent.Read(WebSocketFrame.text("BAR")))\n      case _ =>\n        ZIO.unit\n    }\n  }\n\nval routes = \n  Routes(\n    Method.GET / "greet" / string("name") -> handler { (name: String, req: Request) => \n      Response.text(s"Greetings {$name}!")\n    },\n    Method.GET / "ws" -> handler(socket.toResponse)\n  )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We have a more detailed explanation of the WebSocket connection on the ",(0,s.jsx)(n.a,{href:"/zio-http/reference/socket/",children:"Socket"})," page."]}),"\n",(0,s.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,s.jsx)(n.p,{children:"As we have seen how to create HTTP apps, the only thing left is to run an HTTP server and serve requests."}),"\n",(0,s.jsx)(n.p,{children:"ZIO HTTP provides a way to set configurations for our server. The server can be configured according to the leak detection level, request size, address etc."}),"\n",(0,s.jsxs)(n.p,{children:["To launch our app, we need to start the server on a port. The below example shows a simple HTTP app that responds with empty content and a ",(0,s.jsx)(n.code,{children:"200"})," status code, deployed on port ",(0,s.jsx)(n.code,{children:"8090"})," using ",(0,s.jsx)(n.code,{children:"Server.start"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"import zio.http._\nimport zio._\n\nobject HelloWorld extends ZIOAppDefault {\n  val routes = Handler.ok.toRoutes\n\n  override def run =\n    Server.serve(routes).provide(Server.defaultWithPort(8090))\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we provided the default server with the port ",(0,s.jsx)(n.code,{children:"8090"})," to the app. To learn more about the server, see the ",(0,s.jsx)(n.a,{href:"/zio-http/reference/server",children:"Server"})," page."]}),"\n",(0,s.jsx)(n.h2,{id:"client",children:"Client"}),"\n",(0,s.jsx)(n.p,{children:"Besides creating HTTP apps, ZIO HTTP also provides a way to create HTTP clients. The client can be used to send requests to the server and receive responses:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject ClientExample extends ZIOAppDefault {\n\n  val app =\n    for {\n      client   <- ZIO.serviceWith[Client](_.host("localhost").port(8090))\n      response <- client.batched(Request.get("/"))\n      _        <- ZIO.debug("Response Status: " + response.status)\n    } yield ()\n\n  def run = app.provide(Client.default)\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the above example, we obtained the ",(0,s.jsx)(n.code,{children:"Client"})," service from the environment and sent a ",(0,s.jsx)(n.code,{children:"GET"})," request to the server. Finally, to run the client app, we provided the default ",(0,s.jsx)(n.code,{children:"Client"})," and ",(0,s.jsx)(n.code,{children:"Scope"})," services to the app. For more information about the client, see the ",(0,s.jsx)(n.a,{href:"/zio-http/reference/client",children:"Client"})," page."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);