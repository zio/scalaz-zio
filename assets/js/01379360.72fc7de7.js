"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[96382],{10055:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zio-logging/slf4j1","title":"SLF4J v1","description":"The Simple Logging Facade for Java (SLF4J v1 - working with JDK8) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j).","source":"@site/docs/zio-logging/slf4j1.md","sourceDirName":"zio-logging","slug":"/zio-logging/slf4j1","permalink":"/zio-logging/slf4j1","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/slf4j1.md","tags":[],"version":"current","frontMatter":{"id":"slf4j1","title":"SLF4J v1"},"sidebar":"ecosystem-sidebar","previous":{"title":"SLF4J v2","permalink":"/zio-logging/slf4j2"},"next":{"title":"SLF4J v2 bridge","permalink":"/zio-logging/slf4j2-bridge"}}');var a=o(74848),i=o(28453);const t={id:"slf4j1",title:"SLF4J v1"},l=void 0,s={},c=[{value:"Examples",id:"examples",level:2},{value:"SLF4J logger name and annotations",id:"slf4j-logger-name-and-annotations",level:3},{value:"Custom tracing annotation",id:"custom-tracing-annotation",level:3},{value:"Feature changes",id:"feature-changes",level:2},{value:"Version 2.2.0",id:"version-220",level:3}];function g(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The Simple Logging Facade for Java (",(0,a.jsx)(n.a,{href:"https://www.slf4j.org/",children:(0,a.jsx)(n.code,{children:"SLF4J v1"})})," - working with JDK8) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j)."]}),"\n",(0,a.jsx)(n.p,{children:"In order to use this logging backend, we need to add the following line in our build.sbt file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-logging-slf4j" % "2.5.0"\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"NOTE:"})})," SLF4J v1 implementation is similar to ",(0,a.jsx)(n.a,{href:"/zio-logging/slf4j2",children:"v2"}),",\nhowever there are some differences, v1 using ",(0,a.jsx)(n.a,{href:"https://logback.qos.ch/manual/mdc.html",children:"MDC context"}),", working with JDK8,\nv2 using ",(0,a.jsx)(n.a,{href:"https://www.slf4j.org/manual.html#fluent",children:"key-value pairs"}),", working with JDK9+.\nIt is recommended to use v2, as it is the latest version\nand also there may be MDC (using ",(0,a.jsx)(n.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html",children:"ThreadLocal"}),") issues,\nwhere in the case of parallel executions it can happen that MDC will be reset by different Fiber before the message is logged."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Logger layer:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio.logging.backend.SLF4J\n\nval logger = Runtime.removeDefaultLoggers >>> SLF4J.slf4j\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Default ",(0,a.jsx)(n.code,{children:"SLF4J"})," logger setup:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["logger name (by default)  is extracted from ",(0,a.jsx)(n.code,{children:"zio.Trace"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["for example, trace ",(0,a.jsx)(n.code,{children:"zio.logging.example.Slf4jSimpleApp.run(Slf4jSimpleApp.scala:17)"})," will have ",(0,a.jsx)(n.code,{children:"zio.logging.example.Slf4jSimpleApp"})," as logger name"]}),"\n",(0,a.jsxs)(n.li,{children:["NOTE: custom logger name may be set by ",(0,a.jsx)(n.code,{children:"zio.logging.loggerName"})," aspect"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["all annotations (logger name and log marker name annotations are excluded) are placed into ",(0,a.jsx)(n.a,{href:"https://logback.qos.ch/manual/mdc.html",children:"MDC context"})]}),"\n",(0,a.jsx)(n.li,{children:"cause is logged as throwable"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["See also ",(0,a.jsx)(n.a,{href:"/zio-logging/formatting-log-records#logformat-and-logappender",children:"LogFormat and LogAppender"})]}),"\n",(0,a.jsx)(n.p,{children:"Custom logger name set by aspect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.logInfo("Starting user operation") @@ zio.logging.loggerName("zio.logging.example.UserOperation")\n'})}),"\n",(0,a.jsx)(n.p,{children:"Log marker name set by aspect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.logInfo("Confidential user operation") @@ SLF4J.logMarkerName("CONFIDENTIAL")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["You can find the source code ",(0,a.jsx)(n.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,a.jsx)(n.h3,{id:"slf4j-logger-name-and-annotations",children:"SLF4J logger name and annotations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.LogAnnotation\nimport zio.logging.backend.SLF4J\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject Slf4jSimpleApp extends ZIOAppDefault {\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] = Runtime.removeDefaultLoggers >>> SLF4J.slf4j\n\n  private val users = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _       <- ZIO.logInfo("Start")\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.foreachPar(users) { uId =>\n        {\n          ZIO.logInfo("Starting user operation") *>\n            ZIO.logInfo("Confidential user operation") @@ SLF4J.logMarkerName("CONFIDENTIAL") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping user operation")\n        } @@ ZIOAspect.annotated("user", uId.toString)\n      } @@ LogAnnotation.TraceId(traceId) @@ zio.logging.loggerName("zio.logging.example.UserOperation")\n      _       <- ZIO.logInfo("Done")\n    } yield ExitCode.success\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Logback configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        <layout class="ch.qos.logback.classic.PatternLayout">\n            <Pattern>%d{HH:mm:ss.SSS} [%thread] [%mdc] %-5level %logger{36} %msg%n</Pattern>\n        </layout>\n    </appender>\n    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">\n        <Name>CONFIDENTIAL_FILTER</Name>\n        <Marker>CONFIDENTIAL</Marker>\n        <OnMatch>DENY</OnMatch>\n    </turboFilter>\n    <root level="debug">\n        <appender-ref ref="STDOUT" />\n    </root>\n</configuration>\n'})}),"\n",(0,a.jsx)(n.p,{children:"Expected Console Output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"12:16:21.951 [ZScheduler-Worker-8] [] INFO  zio.logging.example.Slf4jSimpleApp Start\n12:16:22.024 [ZScheduler-Worker-12] [user=0e3bd69c-ee62-4096-82b2-593760d3fb19, trace_id=6e956bcf-d534-4c16-9402-fb6bca13c9ab] INFO  zio.logging.example.UserOperation Starting user operation\n12:16:22.024 [ZScheduler-Worker-10] [user=869ed4c7-924d-4c02-ab5c-c30c1996a139, trace_id=6e956bcf-d534-4c16-9402-fb6bca13c9ab] INFO  zio.logging.example.UserOperation Starting user operation\n12:16:22.592 [ZScheduler-Worker-14] [user=869ed4c7-924d-4c02-ab5c-c30c1996a139, trace_id=6e956bcf-d534-4c16-9402-fb6bca13c9ab] INFO  zio.logging.example.UserOperation Stopping user operation\n12:16:22.592 [ZScheduler-Worker-1] [user=0e3bd69c-ee62-4096-82b2-593760d3fb19, trace_id=6e956bcf-d534-4c16-9402-fb6bca13c9ab] INFO  zio.logging.example.UserOperation Stopping user operation\n12:16:22.598 [ZScheduler-Worker-14] [] INFO  zio.logging.example.Slf4jSimpleApp Done\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-tracing-annotation",children:"Custom tracing annotation"}),"\n",(0,a.jsxs)(n.p,{children:["Following application has custom aspect ",(0,a.jsx)(n.code,{children:"currentTracingSpanAspect"})," implementation which taking current span from ",(0,a.jsx)(n.code,{children:"Tracing"})," service\nwhich then is added to logs by log annotation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.backend.SLF4J\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\ntrait Tracing {\n  def getCurrentSpan(): UIO[String]\n}\n\nfinal class LiveTracing extends Tracing {\n  override def getCurrentSpan(): UIO[String] = ZIO.succeed(UUID.randomUUID().toString)\n}\n\nobject LiveTracing {\n  val layer: ULayer[Tracing] = ZLayer.succeed(new LiveTracing)\n}\n\nobject CustomTracingAnnotationApp extends ZIOAppDefault {\n\n  private def currentTracingSpanAspect(key: String): ZIOAspect[Nothing, Tracing, Nothing, Any, Nothing, Any] =\n    new ZIOAspect[Nothing, Tracing, Nothing, Any, Nothing, Any] {\n      def apply[R <: Tracing, E, A](zio: ZIO[R, E, A])(implicit trace: Trace): ZIO[R, E, A] =\n        ZIO.serviceWithZIO[Tracing] { tracing =>\n          tracing.getCurrentSpan().flatMap { span =>\n            ZIO.logAnnotate(key, span)(zio)\n          }\n        }\n    }\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] = Runtime.removeDefaultLoggers >>> SLF4J.slf4j\n\n  private val users = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _ <- ZIO.foreachPar(users) { uId =>\n        {\n          ZIO.logInfo("Starting operation") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping operation")\n        } @@ ZIOAspect.annotated("user", uId.toString)\n      } @@ currentTracingSpanAspect("trace_id")\n      _ <- ZIO.logInfo("Done")\n    } yield ExitCode.success).provide(LiveTracing.layer)\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Expected Console Output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"15:53:20.145 [ZScheduler-Worker-9] [user=1abd8458-aefd-4780-88ec-cccd1310d4c8, trace_id=71436dd4-22d5-4e06-aaa7-f3ff7b108037] INFO  z.l.e.CustomTracingAnnotationApp Starting operation\n15:53:20.145 [ZScheduler-Worker-13] [user=878689e0-da30-49f8-8923-ed915c00db9c, trace_id=71436dd4-22d5-4e06-aaa7-f3ff7b108037] INFO  z.l.e.CustomTracingAnnotationApp Starting operation\n15:53:20.688 [ZScheduler-Worker-15] [user=1abd8458-aefd-4780-88ec-cccd1310d4c8, trace_id=71436dd4-22d5-4e06-aaa7-f3ff7b108037] INFO  z.l.e.CustomTracingAnnotationApp Stopping operation\n15:53:20.688 [ZScheduler-Worker-11] [user=878689e0-da30-49f8-8923-ed915c00db9c, trace_id=71436dd4-22d5-4e06-aaa7-f3ff7b108037] INFO  z.l.e.CustomTracingAnnotationApp Stopping operation\n15:53:20.691 [ZScheduler-Worker-15] [] INFO  z.l.e.CustomTracingAnnotationApp Done\n"})}),"\n",(0,a.jsx)(n.h2,{id:"feature-changes",children:"Feature changes"}),"\n",(0,a.jsx)(n.h3,{id:"version-220",children:"Version 2.2.0"}),"\n",(0,a.jsxs)(n.p,{children:["Deprecated log annotation with key ",(0,a.jsx)(n.code,{children:"slf4j_logger_name"})," (",(0,a.jsx)(n.code,{children:"SLF4J.loggerNameAnnotationKey"}),") removed,\nonly common log annotation with key ",(0,a.jsx)(n.code,{children:"logger_name"})," (",(0,a.jsx)(n.code,{children:"zio.logging.loggerNameAnnotationKey"}),") for logger name is supported now."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>l});var r=o(96540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);