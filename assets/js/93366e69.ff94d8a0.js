"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[87324],{96297:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"zio-dynamodb/concepts/low-level-api","title":"Low Level API","description":"The low level API provides low level query creation and execution while still offering a large reduction in boilerplate. It\'s is based one to one on DynamoDB abstractions and the surface area consists of:","source":"@site/docs/zio-dynamodb/concepts/low-level-api.md","sourceDirName":"zio-dynamodb/concepts","slug":"/zio-dynamodb/concepts/low-level-api","permalink":"/zio-dynamodb/concepts/low-level-api","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/concepts/low-level-api.md","tags":[],"version":"current","frontMatter":{"id":"low-level-api","title":"Low Level API"},"sidebar":"ecosystem-sidebar","previous":{"title":"High Level API","permalink":"/zio-dynamodb/concepts/high-level-api"},"next":{"title":"Getting Started","permalink":"/zio-dynamodb/guides/getting-started"}}');var i=s(74848),t=s(28453);const r={id:"low-level-api",title:"Low Level API"},l=void 0,a={},c=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The low level API provides low level query creation and execution while still offering a large reduction in boilerplate. It's is based one to one on DynamoDB abstractions and the surface area consists of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AttrMap"})," which is a convenience container with automatic conversion between Scala values and ",(0,i.jsx)(n.code,{children:"AttributeValue"}),"'s. It also has type aliases of ",(0,i.jsx)(n.code,{children:"PrimaryKey"})," and ",(0,i.jsx)(n.code,{children:"Item"})," (see reference section for more details)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$"})," function for creating untyped ",(0,i.jsx)(n.code,{children:"ProjectionExpression"}),"s eg ",(0,i.jsx)(n.code,{children:'$("person.address.houseNumber")'})]}),"\n",(0,i.jsxs)(n.li,{children:["query methods in the ",(0,i.jsx)(n.code,{children:"DynamoDBQuery"})," companion object that all contain the word ",(0,i.jsx)(n.code,{children:"Item"})," such as ",(0,i.jsx)(n.code,{children:"getItem"}),", ",(0,i.jsx)(n.code,{children:"putItem"}),", ",(0,i.jsx)(n.code,{children:"updateItem"}),", ",(0,i.jsx)(n.code,{children:"deleteItem"}),", ",(0,i.jsx)(n.code,{children:"queryAllItem"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Expressions - most of these query methods take expressions as arguments. Once we have a ",(0,i.jsx)(n.code,{children:"ProjectionExpression"})," via the dollar function we can use it as a springboard to create further expressions such as ",(0,i.jsx)(n.code,{children:"ConditionExpression"}),", ",(0,i.jsx)(n.code,{children:"UpdateExpression"})," and ",(0,i.jsx)(n.code,{children:"PrimaryKeyExpression"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ConditionExpression"}),"'s - ",(0,i.jsx)(n.code,{children:'$("name") === "John"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"UpdateExpression"}),"'s - ",(0,i.jsx)(n.code,{children:'$("name").set("Smith")'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Examples of low level queries are shown below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'for {\n  _ <- DynamoDBQuery.putItem("person-table", Item("id" -> "1", "name" -> "John", "age" -> 42)).execute\n  maybeFound <- DynamoDBQuery.getItem("person-table")(PrimaryKey("id" -> "1")).execute\n  _ <- DynamoDBQuery.updateItem("person-table")(PrimaryKey("id" -> "1"))($("name").set("Smith") + $("age").set(21)).execute\n  _ <- DynamoDBQuery.deleteItem("person-table")(PrimaryKey("id" -> "1")).execute\n} yield ()\n'})}),"\n",(0,i.jsx)(n.p,{children:"However there are some caveats to using the Low Level API:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It is not type safe - subtle runtime errors can occur - for example if there are typos in the field names, or if incompatible types are used in expressions."}),"\n",(0,i.jsx)(n.li,{children:"Serialization and deserialization of case classes is the responsibility of the user - this is usually a major burden."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var o=s(96540);const i={},t=o.createContext(i);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);