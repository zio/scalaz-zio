"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83102],{28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},66290:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"zio-kafka/example-of-consuming-producing-and-committing-offsets","title":"Example of Consuming, Producing and Committing Offsets","description":"This example shows how to consume messages from topic topica and produce transformed messages to topicb, after","source":"@site/docs/zio-kafka/example-of-consuming-producing-and-committing-offsets.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/example-of-consuming-producing-and-committing-offsets","permalink":"/zio-kafka/example-of-consuming-producing-and-committing-offsets","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/example-of-consuming-producing-and-committing-offsets.md","tags":[],"version":"current","frontMatter":{"id":"example-of-consuming-producing-and-committing-offsets","title":"Example of Consuming, Producing and Committing Offsets"},"sidebar":"ecosystem-sidebar","previous":{"title":"Consuming Kafka topics using ZIO Streams","permalink":"/zio-kafka/consuming-kafka-topics-using-zio-streams"},"next":{"title":"Partition Assignment And Offset Retrieval","permalink":"/zio-kafka/partition-assignment-and-offset-retrieval"}}');var s=o(74848),i=o(28453);const r={id:"example-of-consuming-producing-and-committing-offsets",title:"Example of Consuming, Producing and Committing Offsets"},c=void 0,a={},m=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This example shows how to consume messages from topic ",(0,s.jsx)(n.code,{children:"topic_a"})," and produce transformed messages to ",(0,s.jsx)(n.code,{children:"topic_b"}),", after\nwhich consumer offsets are committed."]}),"\n",(0,s.jsxs)(n.p,{children:["Processing is done in chunks using ",(0,s.jsx)(n.code,{children:"mapChunksZIO"})," for more efficiency."]}),"\n",(0,s.jsxs)(n.p,{children:["Please note: the ZIO consumer does not support automatic offset committing. As a result, it ignores the Kafka consumer\nsetting ",(0,s.jsx)(n.code,{children:"enable.auto.commit=true"}),". Developers should manually commit offsets using the provided commit methods,\ntypically after processing messages or at appropriate points in their application logic."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio.ZLayer\nimport zio.kafka.consumer._\nimport zio.kafka.producer._\nimport zio.kafka.serde._\nimport org.apache.kafka.clients.producer.ProducerRecord\n\nval consumerSettings: ConsumerSettings =\n  ConsumerSettings(List("localhost:9092")).withGroupId("group")\nval producerSettings: ProducerSettings =\n  ProducerSettings(List("localhost:9092"))\n\nfor {\n  consumer <- Consumer.make(consumerSettings)\n  producer <- Producer.make(producerSettings, Serde.int, Serde.string)\n  _ <-\n    consumer\n      .plainStream(Subscription.topics("my-input-topic"), Serde.int, Serde.long)\n      .map { record =>\n        val key: Int = record.record.key()\n        val value: Long = record.record.value()\n        val newValue: String = value.toString\n\n        val producerRecord: ProducerRecord[Int, String] =\n          new ProducerRecord("my-output-topic", key, newValue)\n        (producerRecord, record.offset)\n      }\n      .mapChunksZIO { chunk =>\n        val records = chunk.map(_._1)\n        val offsetBatch = OffsetBatch(chunk.map(_._2).toSeq)\n\n        producer.produceChunk[Any, Int, String](records) *>\n          offsetBatch.commit.as(Chunk(()))\n      }\n      .runDrain\n} yield ()\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);