"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[91226],{39016:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"overview/creating-effects","title":"Creating Effects","description":"This section explores some of the common ways to create ZIO effects from values, from computations, and from common Scala data types.","source":"@site/docs/overview/creating-effects.md","sourceDirName":"overview","slug":"/overview/creating-effects","permalink":"/overview/creating-effects","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/overview/creating-effects.md","tags":[],"version":"current","frontMatter":{"id":"creating-effects","title":"Creating Effects"},"sidebar":"overview_sidebar","previous":{"title":"Summary","permalink":"/overview/summary"},"next":{"title":"Basic Operations","permalink":"/overview/basic-operations"}}');var r=o(74848),c=o(28453);const s={id:"creating-effects",title:"Creating Effects"},a=void 0,i={},l=[{value:"From Values",id:"from-values",level:2},{value:"From Failure Values",id:"from-failure-values",level:2},{value:"From Scala Values",id:"from-scala-values",level:2},{value:"Option",id:"option",level:3},{value:"Either",id:"either",level:3},{value:"Try",id:"try",level:3},{value:"Future",id:"future",level:3},{value:"From Code",id:"from-code",level:2},{value:"Synchronous Code",id:"synchronous-code",level:3},{value:"Asynchronous Code",id:"asynchronous-code",level:3},{value:"Blocking Synchronous Code",id:"blocking-synchronous-code",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This section explores some of the common ways to create ZIO effects from values, from computations, and from common Scala data types."}),"\n",(0,r.jsx)(n.h2,{id:"from-values",children:"From Values"}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"ZIO.succeed"})," method, you can create an effect that, when executed, will succeed with the specified value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val s1 = ZIO.succeed(42)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"succeed"})," method takes a so-called ",(0,r.jsx)(n.em,{children:"by-name parameter"}),", which ensures that if you pass the method some code to execute, that this code will be stored inside the ZIO effect so that it can be managed by ZIO, and benefit from features like retries, timeouts, and automatic error logging."]}),"\n",(0,r.jsx)(n.h2,{id:"from-failure-values",children:"From Failure Values"}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"ZIO.fail"})," method, you can create an effect that, when executed, will fail with the specified value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val f1 = ZIO.fail("Uh oh!")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the ",(0,r.jsx)(n.code,{children:"ZIO"})," data type, there is no restriction on the error type. You may use strings, exceptions, or custom data types appropriate for your application."]}),"\n",(0,r.jsxs)(n.p,{children:["Many applications will model failures with classes that extend ",(0,r.jsx)(n.code,{children:"Throwable"})," or ",(0,r.jsx)(n.code,{children:"Exception"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val f2 = ZIO.fail(new Exception("Uh oh!"))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"from-scala-values",children:"From Scala Values"}),"\n",(0,r.jsx)(n.p,{children:"Scala's standard library contains a number of data types that can be converted into ZIO effects."}),"\n",(0,r.jsx)(n.h3,{id:"option",children:"Option"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"Option"})," can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.fromOption"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val zoption: IO[Option[Nothing], Int] = ZIO.fromOption(Some(2))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The error type of the resulting effect is ",(0,r.jsx)(n.code,{children:"Option[Nothing]"}),", signifying that if such an effect fails, it will fail with the value ",(0,r.jsx)(n.code,{children:"None"})," (which has type ",(0,r.jsx)(n.code,{children:"Option[Nothing]"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["You can transform a failure into some other error value using ",(0,r.jsx)(n.code,{children:"orElseFail"}),", one of many methods that ZIO provides for error management:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val zoption2: ZIO[Any, String, Int] = zoption.orElseFail("It wasn\'t there!")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["ZIO has a variety of other operators designed to make interfacing with ",(0,r.jsx)(n.code,{children:"Option"})," code easier. In the following advanced example, the operators ",(0,r.jsx)(n.code,{children:"some"}),"  and ",(0,r.jsx)(n.code,{children:"asSomeError"})," are used to make it easier to interface with methods returning ",(0,r.jsx)(n.code,{children:"Option"}),", similar to the ",(0,r.jsx)(n.code,{children:"OptionT"})," type in some Scala libraries."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val maybeId: ZIO[Any, Option[Nothing], String] = ZIO.fromOption(Some("abc123"))\ndef getUser(userId: String): ZIO[Any, Throwable, Option[User]] = ???\ndef getTeam(teamId: String): ZIO[Any, Throwable, Team] = ???\n\n\nval result: ZIO[Any, Throwable, Option[(User, Team)]] = (for {\n  id   <- maybeId\n  user <- getUser(id).some\n  team <- getTeam(user.teamId).asSomeError \n} yield (user, team)).unsome \n'})}),"\n",(0,r.jsx)(n.h3,{id:"either",children:"Either"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"Either"})," can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.fromEither"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val zeither: ZIO[Any, Nothing, String] = ZIO.fromEither(Right("Success!"))\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The error type of the resulting effect will be that of the ",(0,r.jsx)(n.code,{children:"Left"})," case, while the success type will be that of the ",(0,r.jsx)(n.code,{children:"Right"})," case."]}),"\n",(0,r.jsx)(n.h3,{id:"try",children:"Try"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Try"})," value can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.fromTry"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import scala.util.Try\n\nval ztry = ZIO.fromTry(Try(42 / 0))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The error type of the resulting effect will always be ",(0,r.jsx)(n.code,{children:"Throwable"})," because ",(0,r.jsx)(n.code,{children:"Try"})," can only fail with values of type ",(0,r.jsx)(n.code,{children:"Throwable"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"future",children:"Future"}),"\n",(0,r.jsxs)(n.p,{children:["A Scala ",(0,r.jsx)(n.code,{children:"Future"})," can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.fromFuture"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import scala.concurrent.Future\n\nlazy val future = Future.successful("Hello!")\n\nval zfuture: ZIO[Any, Throwable, String] =\n  ZIO.fromFuture { implicit ec =>\n    future.map(_ => "Goodbye!")\n  }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The function passed to ",(0,r.jsx)(n.code,{children:"fromFuture"})," is provided an ",(0,r.jsx)(n.code,{children:"ExecutionContext"}),", which allows ZIO to manage where the ",(0,r.jsx)(n.code,{children:"Future"})," runs (of course, you can ignore this ",(0,r.jsx)(n.code,{children:"ExecutionContext"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["The error type of the resulting effect will always be ",(0,r.jsx)(n.code,{children:"Throwable"}),", because ",(0,r.jsx)(n.code,{children:"Future"})," values can only fail with values of type ",(0,r.jsx)(n.code,{children:"Throwable"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"from-code",children:"From Code"}),"\n",(0,r.jsxs)(n.p,{children:["ZIO can convert any code (such as a call to some method) into an effect, whether that code is so-called ",(0,r.jsx)(n.em,{children:"synchronous"})," (directly returning a value), or ",(0,r.jsx)(n.em,{children:"asynchronous"})," (passing a value to callbacks)."]}),"\n",(0,r.jsx)(n.p,{children:"If done properly, when you convert code into a ZIO effect, this code will be stored inside the effect so that it can be managed by ZIO, and benefit from features like retries, timeouts, and automatic error logging."}),"\n",(0,r.jsx)(n.p,{children:"The conversion functions that ZIO has allow you to seamlessly use all features of ZIO with non-ZIO code written in Scala or Java, including third-party libraries."}),"\n",(0,r.jsx)(n.h3,{id:"synchronous-code",children:"Synchronous Code"}),"\n",(0,r.jsxs)(n.p,{children:["Synchronous code can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.attempt"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import scala.io.StdIn\n\nval readLine: ZIO[Any, Throwable, String] =\n  ZIO.attempt(StdIn.readLine())\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The error type of the resulting effect will always be ",(0,r.jsx)(n.code,{children:"Throwable"}),", because synchronous code may throw exceptions with any value of type ",(0,r.jsx)(n.code,{children:"Throwable"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you know for a fact that some code does not throw exceptions (except perhaps runtime exceptions), you can convert the code into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.succeed"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"def printLine(line: String): UIO[Unit] =\n  ZIO.succeed(println(line))\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sometimes, you may know that code throws a specific exception type, and you may wish to reflect this in the error parameter of your ZIO effect."}),"\n",(0,r.jsxs)(n.p,{children:["For this purpose, you can use the ",(0,r.jsx)(n.code,{children:"ZIO#refineToOrDie"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import java.io.IOException\n\nval readLine2: ZIO[Any, IOException, String] =\n  ZIO.attempt(StdIn.readLine()).refineToOrDie[IOException]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"asynchronous-code",children:"Asynchronous Code"}),"\n",(0,r.jsxs)(n.p,{children:["Asynchronous code that exposes a callback-based API can be converted into a ZIO effect using ",(0,r.jsx)(n.code,{children:"ZIO.async"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object legacy {\n  def login(\n    onSuccess: User => Unit,\n    onFailure: AuthError => Unit): Unit = ???\n}\n\nval login: ZIO[Any, AuthError, User] =\n  ZIO.async[Any, AuthError, User] { callback =>\n    legacy.login(\n      user => callback(ZIO.succeed(user)),\n      err  => callback(ZIO.fail(err))\n    )\n  }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Asynchronous effects are much easier to use than callback-based APIs, and they benefit from ZIO features like interruption, resource-safety, and error management."}),"\n",(0,r.jsx)(n.h2,{id:"blocking-synchronous-code",children:"Blocking Synchronous Code"}),"\n",(0,r.jsxs)(n.p,{children:["Some synchronous code may engage in so-called ",(0,r.jsx)(n.em,{children:"blocking IO"}),", which puts a thread into a waiting state, as it waits for some operating system call to complete. For maximum throughput, this code should not run on your application's primary thread pool, but rather, in a special thread pool that is dedicated to blocking operations."]}),"\n",(0,r.jsxs)(n.p,{children:["ZIO has a blocking thread pool built into the runtime, and lets you execute effects there with ",(0,r.jsx)(n.code,{children:"ZIO.blocking"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import scala.io.{ Codec, Source }\n\ndef download(url: String) =\n  ZIO.attempt {\n    Source.fromURL(url)(Codec.UTF8).mkString\n  }\n\ndef safeDownload(url: String) =\n  ZIO.blocking(download(url))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As an alternative, if you wish to convert blocking code directly into a ZIO effect, you can use the ",(0,r.jsx)(n.code,{children:"ZIO.attemptBlocking"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val sleeping =\n  ZIO.attemptBlocking(Thread.sleep(Long.MaxValue))\n"})}),"\n",(0,r.jsx)(n.p,{children:"The resulting effect will be executed on ZIO's blocking thread pool."}),"\n",(0,r.jsxs)(n.p,{children:["If you have some synchronous code that will respond to Java's ",(0,r.jsx)(n.code,{children:"Thread.interrupt"})," (such as ",(0,r.jsx)(n.code,{children:"Thread.sleep"})," or lock-based code), then you can convert this code into an interruptible ZIO effect using the ",(0,r.jsx)(n.code,{children:"ZIO.attemptBlockingInterrupt"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["Some synchronous code can only be cancelled by invoking some other code, which is responsible for canceling the running computation. To convert such code into a ZIO effect, you can use the ",(0,r.jsx)(n.code,{children:"ZIO.attemptBlockingCancelable"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import java.net.ServerSocket\nimport zio.UIO\n\ndef accept(l: ServerSocket) =\n  ZIO.attemptBlockingCancelable(l.accept())(ZIO.succeed(l.close()))\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["If you are comfortable creating effects from values, converting from Scala types into effects, and converting synchronous and asynchronous code into effects, the next step is learning ",(0,r.jsx)(n.a,{href:"/overview/basic-operations",children:"basic operations"})," on effects."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(96540);const r={},c=t.createContext(r);function s(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);