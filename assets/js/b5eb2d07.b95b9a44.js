"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[37572],{37208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>i});const c=JSON.parse('{"id":"zio-direct/supported-constructs","title":"Scala Constructs Supported by ZIO-Direct","description":"ZIO-direct supports using the following constructs inside of a defer block. Approximate translations of the what the Scala code looks like are available below. In order to see the exact translations for any code in a defer block, use defer.info.","source":"@site/docs/zio-direct/supported-constructs.md","sourceDirName":"zio-direct","slug":"/zio-direct/supported-constructs","permalink":"/zio-direct/supported-constructs","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-direct/supported-constructs.md","tags":[],"version":"current","frontMatter":{"id":"supported-constructs","title":"Scala Constructs Supported by ZIO-Direct","sidebar_label":"Supported Constructs"},"sidebar":"ecosystem-sidebar","previous":{"title":"Introduction","permalink":"/zio-direct/"},"next":{"title":"IntelliJ Support","permalink":"/zio-direct/intellij-support"}}');var a=t(74848),s=t(28453);const o={id:"supported-constructs",title:"Scala Constructs Supported by ZIO-Direct",sidebar_label:"Supported Constructs"},l="Supported Constructs",r={},i=[{value:"blocks",id:"blocks",level:3},{value:"if/else",id:"ifelse",level:3},{value:"match",id:"match",level:3},{value:"try",id:"try",level:3},{value:"while",id:"while",level:3},{value:"for-loop/foreach",id:"for-loopforeach",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"supported-constructs",children:"Supported Constructs"})}),"\n",(0,a.jsxs)(n.p,{children:["ZIO-direct supports using the following constructs inside of a ",(0,a.jsx)(n.code,{children:"defer"})," block. Approximate translations of the what the Scala code looks like are available below. In order to see the exact translations for any code in a defer block, use ",(0,a.jsx)(n.code,{children:"defer.info"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"blocks",children:"blocks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'defer {\n  val a = ZIO.succeed("Hello").run\n  val b = ZIO.succeed("World").run\n  a + " " + b\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Translation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.succeed("Hello").flatMap { a =>\n  ZIO.succeed("World").map { b =>\n    a + " " + b\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Blocks can also have nested blocks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'defer {\n  val a = ZIO.succeed("Hello").run\n  val b = {\n    val x = ZIO.succeed("to").run\n    val y = ZIO.succeed("World").run\n    x + " " + y\n  }\n  a + " " + b\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Translation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.succeed("Hello").flatMap { a =>\n  {\n    ZIO.succeed("to").flatMap { x =>\n      ZIO.succeed("World").map { y =>\n        x + " " + y\n      }\n    }\n  }.map { b =>\n    a + " " + b\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"ifelse",children:"if/else"}),"\n",(0,a.jsx)(n.p,{children:"If statements with one or multiple ZIO.run values in the condition(s) and action(s)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'defer {\n  if (ZIO.succeed(123).run < 456 && ZIO.succeed("foo") == "foo")\n    ZIO.succeed("a").run\n  else\n    ZIO.succeed("b").run\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Translation:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Note that each condition is separated into it's own nested flatMap chain step\n(from left-to-right) so if earlier conditions yield ",(0,a.jsx)(n.code,{children:"false"})," ZIO computations of\nlater ones will not be executed."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.succeed(123).flatMap { a =>\n  if (a < 456)\n    ZIO.succeed("foo").flatMap { b =>\n      if (b == "foo")\n        ZIO.succeed("a")\n      else\n        ZIO.succeed("b")\n    }\n  else\n    ZIO.succeed("b")\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"match",children:"match"}),"\n",(0,a.jsxs)(n.p,{children:['Match statements with ZIO.run in the left-hand-side (before "match") and/or the right-hand-side (after the "=>").\nZIO.run calls inside of match guards (i.e. if-statements after ',(0,a.jsx)(n.code,{children:"case Clause"}),") are not supported yet."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'defer {\n  ZIO.succeed("Hello").run match {\n    case hello @ "Hello" =>\n      val world = ZIO.succeed(" World").run\n      hello + " " + world\n    case _ =>\n      "Nothing"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Translation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ZIO.succeed("Hello").flatMap { x =>\n  x match {\n    case hello @ "Hello" =>\n      ZIO.succeed(" World").flatMap { world =>\n        hello + " " + world\n      }\n    case _ =>\n      ZIO.succeed("Nothing")\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"try",children:"try"}),"\n",(0,a.jsx)(n.p,{children:'Try statements with ZIO.run in the left-hand-side (before "try") and/or the right-hand-side (after the "=>").'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"defer {\n  try {\n    val a = ZIO.succeed(123).run\n    val b = ZIO.attempt(somethingUnsafe).run\n    a + b\n  } catch {\n    case e: Exception =>\n      ZIO.succeed(789).run\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Translation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"ZIO.succeed(123).flatMap { a =>\n  ZIO.attempt(somethingUnsafe).map { b =>\n    a + b\n  }.catchAll { e =>\n    ZIO.succeed(789)\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note that because try-statements are translated into ZIO.catchAll, errors that go into fail fail-channel\nwill not be caught by the catch block. For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    // Will not be caught!!\n    ZIO.succeed(throwsException()).run\n  } catch {\n    case e: Exception => 123\n  }\n}\n\ndefer {\n  try {\n    // WILL be caught!!\n    ZIO.attemt(throwsException()).run\n  } catch {\n    case e: Exception => 123\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In cases where methods that throw exceptions not not wrapped into ZIO computations, they will also\nnot be caught because the assumption is that they are pure-computations hence can be wrapped into ",(0,a.jsx)(n.code,{children:"ZIO.succeed"})," blocks."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    // Will not be caught!!\n    throwsException()\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.succeed(throwsException()).catchAll { e =>\n  case e: Exception => 123\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In order to rectify this situation, a region-based operator ",(0,a.jsx)(n.code,{children:"unsafe { ... }"})," can be used to wrap\nall blocks of code that could potentially throw exceptions. ZIO-Direct will the know to wrap\nthem into ",(0,a.jsx)(n.code,{children:"ZIO.attempt"})," clauses instead of ",(0,a.jsx)(n.code,{children:"ZIO.succeed"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    unsafe {\n      // This WILL be caught!!\n      throwsException()\n    }\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.attempt(throwsException()).catchAll { e =>\n  case e: Exception => 123\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note that that ZIO computations with ",(0,a.jsx)(n.code,{children:".run"})," calls and other kinds of constructs supported by zio-direct\ncan be used inside of ",(0,a.jsx)(n.code,{children:"unsafe"})," blocks, and these computations will be used as-is (i.e. if they contain\nZIO.succeed calls the will not be changed into something else)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"defer {\n  try {\n    unsafe {\n      val a = ZIO.succeed(123).run\n      throwsException()\n      val b = ZIO.succeed(456).run\n      a + b\n    }\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.succeed(123).flatMap { a =>\n  ZIO.attempt(throwsException()).flatMap { _ =>\n    ZIO.succeed(456).map { b =>\n      a + b\n    }\n  }\n}.catchAll { e =>\n  case e: Exception => 123\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"while",children:"while"}),"\n",(0,a.jsx)(n.p,{children:"While-clauses will be translated into recursive functions that conditionally recurse into a flatMap call based on the while-condition."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Generally due to the presence of functions like ",(0,a.jsx)(n.a,{href:"https://zio.dev/reference/control-flow/#iterate",children:(0,a.jsx)(n.code,{children:"ZIO.iterate"})})," and ",(0,a.jsx)(n.a,{href:"https://zio.dev/reference/test/aspects/repeat-and-retry/#repeat",children:(0,a.jsx)(n.code,{children:"ZIO.repeat"})})," the critical use-case for ZIO-direct's while-loop should be limited."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'// Note that because mutable variable usage is generally not allowed in zio-direct the below code can only be run in "Lenient Mode."\nvar i = 0\ndefer {\n  while (i < 10) {\n    ZIO.attempt(println("Hello")).run\n    i += 1\n  }\n}\n\n// Translation:\nval i = 0\ndef loop(): ZIO[Any, Throwable, Unit] = {\n  if (i < 10) {\n    ZIO.attempt(println("Hello")).flatMap { _ =>\n      i += 1\n      loop()\n    }\n  } else {\n    ZIO.unit\n  }\n}\nloop()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Since mutable variables are generally not allowed in ",(0,a.jsx)(n.code,{children:"defer { ... }"})," blocks, it is recommended to use mutable references from ZIO's\n",(0,a.jsx)(n.a,{href:"https://zio.dev/reference/concurrency/ref/",children:(0,a.jsx)(n.code,{children:"Ref"})})," class instead."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'defer {\n  val ref = Ref.make(0).run\n  while (ref.get.run < 10) {\n    ZIO.attempt(println("Hello")).run\n    ref.update(_ + 1).run\n  }\n}\n\n// Translation:\nRef.make(0).flatMap { ref =>\n  def loop(): ZIO[Any, Throwable, Unit] = {\n    ref.get.flatMap { x =>\n      if (x < 10) {\n        ZIO.attempt(println("Hello")).flatMap { _ =>\n          ref.update(_ + 1).flatMap { _ =>\n            loop()\n          }\n        }\n      } else {\n        ZIO.unit\n      }\n    }\n  }\n  loop()\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"for-loopforeach",children:"for-loop/foreach"}),"\n",(0,a.jsx)(n.p,{children:"Scala for-loops and collection.foreach are the same thing (the former dis desugars into the latter).\nZIO-direct will translate them into ZIO.foreach calls."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Similar to while-loops, this construct is\nlargely overshawoed by ZIO's own ",(0,a.jsx)(n.a,{href:"https://zio.dev/reference/control-flow/#iterate",children:(0,a.jsx)(n.code,{children:"foreach"})})," and ",(0,a.jsx)(n.a,{href:"https://zio.dev/reference/control-flow/#foreach",children:(0,a.jsx)(n.code,{children:"iterate"})})," combinators."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"defer {\n  for (i <- 1 to 10) {\n    ZIO.attempt(println(i)).run\n  }\n}\n\n// Translation:\nZIO.foreach(1 to 10) { i =>\n  ZIO.attempt(println(i))\n}.map(_ => ()) // since the final result must have a type of Unit\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var c=t(96540);const a={},s=c.createContext(a);function o(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);