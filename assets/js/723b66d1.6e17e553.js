"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[38722],{70824:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"zio-schema/operations/validation","title":"Validation","description":"When we create a schema for a type, we can also specify validation rules for the type. Validations are a way to ensure that the data conforms to certain rules.","source":"@site/docs/zio-schema/operations/validating-types.md","sourceDirName":"zio-schema/operations","slug":"/zio-schema/operations/validation","permalink":"/zio-schema/operations/validation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/validating-types.md","tags":[],"version":"current","frontMatter":{"id":"validation","title":"Validation"},"sidebar":"ecosystem-sidebar","previous":{"title":"Transforming Schemas","permalink":"/zio-schema/operations/transforming-schemas"},"next":{"title":"Diffing and Patching","permalink":"/zio-schema/operations/diffing-and-patching"}}');var i=n(74848),s=n(28453);const o={id:"validation",title:"Validation"},r=void 0,c={},l=[];function d(e){const a={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:"When we create a schema for a type, we can also specify validation rules for the type. Validations are a way to ensure that the data conforms to certain rules."}),"\n",(0,i.jsxs)(a.p,{children:["Using ",(0,i.jsx)(a.code,{children:"Schema#validate"})," we can validate a value against the validation rules of its schema:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:"trait Schema[A] {\n  def validate(value: A)(implicit schema: Schema[A]): Chunk[ValidationError]\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["Let's write a schema for the ",(0,i.jsx)(a.code,{children:"Person"})," case class and add validation rules to it. For example, we can specify that the ",(0,i.jsx)(a.code,{children:"age"})," field must be greater than 0 and less than 120 and the ",(0,i.jsx)(a.code,{children:"name"})," field must be non-empty:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import zio.Chunk\nimport zio.schema._\nimport zio.schema.Schema._\nimport zio.schema.validation.Validation\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = CaseClass2(\n    id0 = TypeId.fromTypeName("Person"),\n    field01 = Schema.Field(\n      name0 = "name",\n      schema0 = Schema[String],\n      validation0 = Validation.minLength(1),\n      get0 = (p: Person) => p.name,\n      set0 = { (p: Person, s: String) => p.copy(name = s) }\n    ),\n    field02 = Schema.Field(\n      name0 = "age",\n      schema0 = Schema[Int],\n      validation0 = Validation.between(0, 120),\n      get0 = (p: Person) => p.age,\n      set0 = { (p: Person, age: Int) => p.copy(age = age) }\n    ),\n    construct0 = (name, age) => Person(name, age),\n    annotations0 = Chunk.empty\n  )\n}\n'})}),"\n",(0,i.jsxs)(a.p,{children:["Both fields of the ",(0,i.jsx)(a.code,{children:"Person"})," case class have validation rules. Let's see what happens when we try to validate a ",(0,i.jsx)(a.code,{children:"Person"})," value that does not conform to the validation rules:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import zio._\nimport zio.schema.validation._\n\nval result: Chunk[ValidationError] = Person.schema.validate(Person("John Doe", 130))\nprintln(result)\n'})}),"\n",(0,i.jsx)(a.p,{children:"Due to the failed validation rules, a list of the specific rules that were not met is generated. In this case, it indicates that the age is not equal, or less than 120."})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>r});var t=n(96540);const i={},s=t.createContext(i);function o(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);