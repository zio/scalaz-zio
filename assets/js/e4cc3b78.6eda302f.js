"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[88716],{52097:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-s3/index","title":"Introduction to ZIO S3","description":"Thin wrapper over S3 async client for ZIO","source":"@site/docs/zio-s3/index.md","sourceDirName":"zio-s3","slug":"/zio-s3/","permalink":"/zio-s3/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-s3/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to ZIO S3","sidebar_label":"ZIO S3"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO RocksDB","permalink":"/zio-rocksdb/"},"next":{"title":"ZIO SBT","permalink":"/zio-sbt/"}}');var i=t(74848),a=t(28453);const o={id:"index",title:"Introduction to ZIO S3",sidebar_label:"ZIO S3"},r=void 0,l={},c=[{value:"Setup",id:"setup",level:2},{value:"How to use it ?",id:"how-to-use-it-",level:2},{value:"Credentials",id:"credentials",level:2},{value:"Test / Stub",id:"test--stub",level:2},{value:"Examples",id:"examples",level:2},{value:"Support any commands ?",id:"support-any-commands-",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Thin wrapper over S3 async client for ZIO"}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'//support scala 2.12 / 2.13\n\nlibraryDependencies += "dev.zio" %% "zio-s3" % "0.4.2.1"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-it-",children:"How to use it ?"}),"\n",(0,i.jsx)(n.p,{children:"ZIO-S3 is a thin wrapper over the s3 async java client. It exposes the main operations of the s3 java client."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\nimport zio.Chunk\nimport zio.s3._\nimport zio.stream.{ZSink, ZStream}\nimport software.amazon.awssdk.services.s3.model.S3Exception\n\n  // list all buckets available  \n  listBuckets.provideLayer(\n     live("us-east-1", AwsBasicCredentials.create("accessKeyId", "secretAccessKey"))\n  )\n  \n  // list all objects of all buckets\n  val l2: ZStream[S3, S3Exception, String] = (for {\n     bucket <- ZStream.fromIterableZIO(listBuckets) \n     obj <- listAllObjects(bucket.name)\n  } yield obj.bucketName + "/" + obj.key).provideLayer(\n     live("us-east-1", AwsBasicCredentials.create("accessKeyId", "secretAccessKey"))\n  )  \n'})}),"\n",(0,i.jsxs)(n.p,{children:["All available s3 combinators and operations are available in the package object ",(0,i.jsx)(n.code,{children:"zio.s3"}),", you only need to ",(0,i.jsx)(n.code,{children:"import zio.s3._"})]}),"\n",(0,i.jsx)(n.h2,{id:"credentials",children:"Credentials"}),"\n",(0,i.jsxs)(n.p,{children:["zio-s3 expose credentials providers from aws ",(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/credentials.html",children:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/credentials.html"}),"\nIf credentials cannot be found in one or multiple providers selected the operation will fail with ",(0,i.jsx)(n.code,{children:"InvalidCredentials"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\nimport zio._\nimport software.amazon.awssdk.regions.Region\nimport software.amazon.awssdk.services.s3.model.S3Exception\nimport zio.s3._\nimport zio.s3.providers._\n\n// build S3 Layer from basic credentials\nval s3: Layer[S3Exception, S3] =\n  live(Region.AF_SOUTH_1, AwsBasicCredentials.create("key", "secret"))\n\n// build S3 Layer from System properties or Environment variables\nval s3: Layer[S3Exception, S3] =\n  liveZIO(Region.AF_SOUTH_1, system <> env)\n\n// build S3 Layer  from Instance profile credentials\nval s3: Layer[S3Exception, S3] =\n  liveZIO(Region.AF_SOUTH_1, instanceProfile)\n\n// build S3 Layer from web identity token credentials with STS. awssdk sts module required to be on classpath\nval s3: Layer[S3Exception, S3] = liveZIO(Region.AF_SOUTH_1, webIdentity)\n\n// build S3 Layer from default available credentials providers\nval s3: Layer[S3Exception, S3] = liveZIO(Region.AF_SOUTH_1, default)\n\n// use custom logic to fetch aws credentials\nval zcredentials: ZIO[R, S3Exception, AwsCredentials] = ??? // specific implementation to fetch credentials\nval s3: ZLayer[Any, S3Exception, S3] = settings(Region.AF_SOUTH_1, zcredentials) >>> live\n\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test--stub",children:"Test / Stub"}),"\n",(0,i.jsx)(n.p,{children:"a stub implementation of s3 storage is provided for testing purpose and use internally a filesystem to simulate s3 storage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.nio.core.file.{Path => ZPath}\nimport zio.s3._\n\n// build s3 Layer\nval stubS3: ZLayer[Any, Nothing, S3] = stub(ZPath("/tmp/s3-data"))\n\n// list all buckets available by using S3 Stub Layer \n// will list all directories of `/tmp/s3-data`\nlistBuckets.provideLayer(stubS3) \n'})}),"\n",(0,i.jsxs)(n.p,{children:["More information here on how to use ",(0,i.jsx)(n.a,{href:"https://zio.dev/docs/howto/howto_use_layers",children:"ZLayer https://zio.dev/docs/howto/howto_use_layers"})]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import software.amazon.awssdk.services.s3.model.S3Exception\nimport zio._\nimport zio.stream.{ ZSink, ZStream }\nimport zio.s3._\n\n// upload\nval json: Chunk[Byte] = Chunk.fromArray("""{  "id" : 1 , "name" : "A1" }""".getBytes)\nval up: ZIO[S3, S3Exception, Unit] = putObject(\n  "bucket-1",\n  "user.json",\n  json.length,\n  ZStream.fromChunk(json),\n  UploadOptions.fromContentType("application/json")\n)\n\n// multipartUpload \nimport java.io.FileInputStream\nimport java.nio.file.Paths\n\nval is = ZStream.fromInputStream(new FileInputStream(Paths.get("/my/path/to/myfile.zip").toFile))\nval proc2: ZIO[S3, S3Exception, Unit] =\n  multipartUpload(\n    "bucket-1",\n    "upload/myfile.zip",\n    is,\n    MultipartUploadOptions.fromUploadOptions(UploadOptions.fromContentType("application/zip"))\n  )(4)\n\n// download\nimport java.io.OutputStream\n\nval os: OutputStream = ???\nval proc3: ZIO[S3, Exception, Long] = getObject("bucket-1", "upload/myfile.zip").run(ZSink.fromOutputStream(os))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"support-any-commands-",children:"Support any commands ?"}),"\n",(0,i.jsx)(n.p,{children:"If you need a method which is not wrapped by the library, you can have access to underlying S3 client in a safe manner by using"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import java.util.concurrent.CompletableFuture\nimport zio.s3._\nimport software.amazon.awssdk.services.s3.S3AsyncClient\n \ndef execute[T](f: S3AsyncClient => CompletableFuture[T]) \n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);