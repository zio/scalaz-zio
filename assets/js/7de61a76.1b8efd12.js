"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[19390],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},41918:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"zio-json/performance","title":"Performance","description":"The following benchmarks are freely available to run on your hardware with sbt \\"zioJsonJVM/jmh:run -prof gc\\" and can be extended to include more niche libraries. We only compare zio-json against Circe and Play as they are the incumbent solutions used by most of the Scala ecosystem.","source":"@site/docs/zio-json/performance.md","sourceDirName":"zio-json","slug":"/zio-json/performance","permalink":"/zio-json/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-json/performance.md","tags":[],"version":"current","frontMatter":{"id":"performance","title":"Performance"},"sidebar":"ecosystem-sidebar","previous":{"title":"Manual Instances","permalink":"/zio-json/manual-instances"},"next":{"title":"Security","permalink":"/zio-json/security"}}');var o=s(74848),t=s(28453);const i={id:"performance",title:"Performance"},a=void 0,c={},d=[{value:"Even More Performance",id:"even-more-performance",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The following benchmarks are freely available to run on your hardware with ",(0,o.jsx)(n.code,{children:'sbt "zioJsonJVM/jmh:run -prof gc"'})," and can be extended to include more niche libraries. We only compare ",(0,o.jsx)(n.code,{children:"zio-json"})," against Circe and Play as they are the incumbent solutions used by most of the Scala ecosystem."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"zio-json"}),", when used in legacy mode (i.e. using a ",(0,o.jsx)(n.code,{children:"StringReader"}),"), is typically x2 faster than Circe and x5 faster than Play. When used with Loom, ",(0,o.jsx)(n.code,{children:"zio-json"})," has finished its work before the others even begin. The following benchmarks are therefore only for legacy mode comparisons."]}),"\n",(0,o.jsx)(n.p,{children:"There are two main factors to consider when comparing the performance of JSON libraries: memory usage and operations per second. We perform measurements in one thread at a time but in a real server situation, there are multiple threads each consuming resources."}),"\n",(0,o.jsxs)(n.p,{children:["Here are JMH benchmarks (higher ",(0,o.jsx)(n.code,{children:"ops/sec"})," is better, lower ",(0,o.jsx)(n.code,{children:"MB/sec"})," is better) on a standard Google Maps API performance-testing dataset (stressing array and number parsing). Note that a better metric for memory usage might be ",(0,o.jsx)(n.code,{children:"MB"})," per decode or encode, since it can be misleading to have the same ",(0,o.jsx)(n.code,{children:"MB/sec"})," but be processing more JSON: the library that consumes the least amount of memory is likely to have highest throughput."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec      MB/sec\nzio    15761 \xb1 283   1633 \xb1 29     | 14289 \xb1  84  2214 \xb1 12\ncirce   8832 \xb1 269   1816 \xb1 55     | 11980 \xb1 142  2030 \xb1 24\nplay    5756 \xb1  47   2260 \xb1 19     |  6669 \xb1 160  2677 \xb1 64\n"})}),"\n",(0,o.jsx)(n.p,{children:"on a standard Twitter API performance-testing dataset (stressing nested case classes with lots of fields)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec      MB/sec\nzio    16989 \xb1 113    827 \xb1  6     | 23085 \xb1 641  1791 \xb1 50\ncirce  16010 \xb1  72   1349 \xb1  6     | 15664 \xb1 209  1627 \xb1 22\nplay    5256 \xb1 165   1231 \xb1 39     | 15580 \xb1 314  2260 \xb1 45\n"})}),"\n",(0,o.jsx)(n.p,{children:"on a standard GeoJSON performance-testing dataset (stressing nested sealed traits that use a discriminator)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec       MB/sec\nzio    17104 \xb1 155   2768 \xb1 25     | 5372 \xb1 26      817 \xb1  4\ncirce   8388 \xb1 118   2879 \xb1 41     | 4762 \xb1 47      592 \xb1  6\nplay     704 \xb1   9   3946 \xb1 55     | 2587 \xb1 24     1091 \xb1 10\n"})}),"\n",(0,o.jsx)(n.p,{children:"and on a standard synthetic performance-testing dataset (stressing nested recursive types)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec       MB/sec\nzio    59099 \xb1 1307  2108 \xb1 46     | 32048 \xb1  240  2573 \xb1 19\ncirce  19609 \xb1  370  2873 \xb1 53     | 13830 \xb1  109  1730 \xb1 14\nplay    9001 \xb1  182  3348 \xb1 67     | 14529 \xb1  200  3533 \xb1 48\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"zio-json"})," easily wins every benchmark except ops/sec for the Twitter test data where Circe matches ops/sec but loses heavily on memory usage. Play loses on every benchmark."]}),"\n",(0,o.jsx)(n.h2,{id:"even-more-performance",children:"Even More Performance"}),"\n",(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"zio-json"})," isn't fast enough for you, then try out ",(0,o.jsx)(n.a,{href:"https://github.com/plokhotnyuk/jsoniter-scala",children:"jsoniter-scala"}),"; whereas ",(0,o.jsx)(n.code,{children:"zio-json"})," is fully integrated into ZIO, including streams and pipeline support, jsoniter is library agnostic."]}),"\n",(0,o.jsx)(n.p,{children:"JSON is an inefficient transport format and everybody would benefit from a port of this library to msgpack or protobuf. For legacy services, a port supporting XML is also be possible."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);