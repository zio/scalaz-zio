"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[96342],{83642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"zio-metrics-connectors/metrics/instrumentation-examples","title":"Instrumentation Examples","description":"The trait below is used in the ZIO Metrics sample application just to show how the individual aspects","source":"@site/docs/zio-metrics-connectors/metrics/instrumentation-examples.md","sourceDirName":"zio-metrics-connectors/metrics","slug":"/zio-metrics-connectors/metrics/instrumentation-examples","permalink":"/zio-metrics-connectors/metrics/instrumentation-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-metrics-connectors/metrics/instrumentation-examples.md","tags":[],"version":"current","frontMatter":{"id":"instrumentation-examples","title":"Instrumentation Examples"},"sidebar":"ecosystem-sidebar","previous":{"title":"Micrometer Connector","permalink":"/zio-metrics-connectors/metrics/micrometer-connector"},"next":{"title":"ZIO Mock","permalink":"/zio-mock/"}}');var a=n(74848),i=n(28453);const o={id:"instrumentation-examples",title:"Instrumentation Examples"},r=void 0,c={},l=[];function m(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The trait below is used in the ZIO Metrics sample application just to show how the individual aspects\ncan be configured and used."}),"\n",(0,a.jsxs)(t.p,{children:["Please refer to ",(0,a.jsx)(t.a,{href:"/zio-metrics-connectors/metrics/statsd-client",children:"StatsD"})," and ",(0,a.jsx)(t.a,{href:"/zio-metrics-connectors/metrics/prometheus-client",children:"Prometheus"})," to see how the captured\nmetrics can be visualized in the supported back ends."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'trait InstrumentedSample {\n\n  // Create a gauge, it can be applied to effects yielding a Double\n  val aspGauge1 = Metric.gauge("gauge1")\n\n  val aspGauge2 = Metric.gauge("gauge2")\n\n  // Create a histogram with 12 buckets: 0..100 in steps of 10, Infinite\n  // It also can be applied to effects yielding a Double\n  val aspHistogram =\n    Metric.histogram("myHistogram", MetricKeyType.Histogram.Boundaries.linear(0.0d, 10.0d, 11))\n\n  // Create a summary that can hold 100 samples, the max age of the samples is 1 day.\n  // The summary should report th 10%, 50% and 90% Quantile\n  // It can be applied to effects yielding an Int\n  val aspSummary =\n    Metric.summary("mySummary", 1.day, 100, 0.03d, Chunk(0.1, 0.5, 0.9)).contramap[Int](_.toDouble)\n\n  // Create a Set to observe the occurrences of unique Strings\n  // It can be applied to effects yielding a String\n  val aspSet = Metric.frequency("mySet")\n\n  // Create a counter applicable to any effect\n  val aspCountAll = Metric.counter("countAll").contramap[Any](_ => 1L)\n\n  private lazy val gaugeSomething = for {\n    _ <- Random.nextDoubleBetween(0.0d, 100.0d) @@ aspGauge1 @@ aspCountAll\n    _ <- Random.nextDoubleBetween(-50d, 50d) @@ aspGauge2 @@ aspCountAll\n  } yield ()\n\n  // Just record something into a histogram\n  private lazy val observeNumbers = for {\n    _ <- Random.nextDoubleBetween(0.0d, 120.0d) @@ aspHistogram @@ aspCountAll\n    _ <- Random.nextIntBetween(100, 500) @@ aspSummary @@ aspCountAll\n  } yield ()\n\n  // Observe Strings in order to capture unique values\n  private lazy val observeKey = for {\n    _ <- Random.nextIntBetween(10, 20).map(v => s"myKey-$v") @@ aspSet @@ aspCountAll\n  } yield ()\n\n  def program: ZIO[Any, Nothing, Unit] = for {\n    _ <- gaugeSomething.schedule(Schedule.spaced(200.millis)).forkDaemon\n    _ <- observeNumbers.schedule(Schedule.spaced(150.millis)).forkDaemon\n    _ <- observeKey.schedule(Schedule.spaced(300.millis)).forkDaemon\n  } yield ()\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(96540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);