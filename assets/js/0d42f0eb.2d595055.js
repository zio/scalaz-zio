"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[13382],{37646:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"zio-config/read-from-various-sources","title":"Read from various Sources","description":"zio-config supports various sources.","source":"@site/docs/zio-config/read-from-various-sources.md","sourceDirName":"zio-config","slug":"/zio-config/read-from-various-sources","permalink":"/zio-config/read-from-various-sources","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/read-from-various-sources.md","tags":[],"version":"current","frontMatter":{"id":"read-from-various-sources","title":"Read from various Sources"},"sidebar":"ecosystem-sidebar","previous":{"title":"Automatic Derivation of Config","permalink":"/zio-config/automatic-derivation-of-config"},"next":{"title":"Automatic Validations","permalink":"/zio-config/automatic-validations"}}');var a=o(74848),s=o(28453);const r={id:"read-from-various-sources",title:"Read from various Sources"},t=void 0,l={},c=[{value:"HOCON String",id:"hocon-string",level:2},{value:"HOCON File",id:"hocon-file",level:2},{value:"Json",id:"json",level:2},{value:"Yaml FIle",id:"yaml-file",level:2},{value:"Xml String",id:"xml-string",level:2},{value:"Indexed Map, Array datatype, and a some implementation notes",id:"indexed-map-array-datatype-and-a-some-implementation-notes",level:3},{value:"What does it mean to users?",id:"what-does-it-mean-to-users",level:4},{value:"Another simple example of an indexed format",id:"another-simple-example-of-an-indexed-format",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"zio-config supports various sources."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio._, Config._, ConfigProvider._\nimport zio.config._, magnolia._\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"case class MyConfig(ldap: String, port: Int, dburl: String)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val myConfig =\n  (string("LDAP") zip int("PORT") zip string("DB_URL")).to[MyConfig]\n\n // val automatedConfig = deriveConfig[MyConfig]; using zio-config-magnolia\n'})}),"\n",(0,a.jsx)(n.h2,{id:"hocon-string",children:"HOCON String"}),"\n",(0,a.jsxs)(n.p,{children:["To enable HOCON source, you have to bring in ",(0,a.jsx)(n.code,{children:"zio-config-typesafe"})," module.\nThere are many examples in examples module in zio-config."]}),"\n",(0,a.jsx)(n.p,{children:"Here is an quick example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio.config.typesafe._\nimport zio.config.magnolia._\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'case class SimpleConfig(port: Int, url: String, region: Option[String])\n\nval automaticDescription = deriveConfig[SimpleConfig]\n\nval hoconSource =\n  ConfigProvider.fromHoconString(\n      """\n      {\n        port : 123\n        url  : bla\n        region: useast\n      }\n\n      """\n    )\n\n\nval anotherHoconSource =\n  ConfigProvider.fromHoconString(\n      """\n        port=123\n        url=bla\n        region=useast\n      """\n  )\n\nhoconSource.load(deriveConfig[SimpleConfig])\n\n// yielding SimpleConfig(123,bla,Some(useast))\n'})}),"\n",(0,a.jsx)(n.h2,{id:"hocon-file",children:"HOCON File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'ConfigProvider.fromHoconFile(new java.io.File("fileapth"))\n'})}),"\n",(0,a.jsx)(n.h2,{id:"json",children:"Json"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"zio-config-typesafe"})," module to fetch json as well"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val jsonString =\n   """\n   {\n     "port" : "123"\n     "url"  : "bla"\n     "region": "useast"\n   }\n\n   """\n\nConfigProvider.fromHoconString(jsonString)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"yaml-file",children:"Yaml FIle"}),"\n",(0,a.jsxs)(n.p,{children:["Similar to Hocon source, we have ",(0,a.jsx)(n.code,{children:"ConfigProvider.fromYamlString"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio.config.yaml._\n\nConfigProvider.fromYamlString\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"xml-string",children:"Xml String"}),"\n",(0,a.jsx)(n.p,{children:"zio-config can read XML strings. Note that it's experimental with a dead simple native xml parser,\nCurrently it cannot XML comments, and has not been tested with complex data types, which will be fixed in the near future."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.config.xml.experimental._\nimport zio.Config\n\nfinal case class Configuration(aws: Aws, database: Database)\n\nobject Configuration {\n  val config: Config[Configuration] =\n    Aws.config.nested("aws").zip(Database.config.nested("database")).to[Configuration].nested("config")\n\n  final case class Aws(region: String, account: String)\n\n  object Aws {\n    val config: Config[Aws] = Config.string("region").zip(Config.string("account")).to[Aws]\n  }\n  final case class Database(port: Int, url: String)\n\n  object Database {\n    val config: Config[Database] = Config.int("port").zip(Config.string("url")).to[Database]\n  }\n}\n\nval config =\n  s"""\n     |<config>\n     |  <aws region="us-east" account="personal"></aws>\n     |  <database port="123" url="some url"></database>\n     |</config>\n     |\n     |""".stripMargin\n\nval parsed = ConfigProvider.fromYamlString(config).load(Configuration.config)\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"indexed-map-array-datatype-and-a-some-implementation-notes",children:"Indexed Map, Array datatype, and a some implementation notes"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"zio-config"})," comes up with the idea of ",(0,a.jsx)(n.code,{children:"IndexedFlat"})," allowing you to define indexed configs (see examples below).\nHowever, the constructors of ",(0,a.jsx)(n.code,{children:"IndexedFlat"})," is not exposed to the user for the time being, since it can conflate with some ideas in ",(0,a.jsx)(n.code,{children:"zio.core"})," ",(0,a.jsx)(n.code,{children:"Flat"}),",\nand resulted in failures whenever ",(0,a.jsx)(n.code,{children:"IndexedFlat"})," was converted to a ",(0,a.jsx)(n.code,{children:"Flat"})," internally. Example: ",(0,a.jsx)(n.a,{href:"https://github.com/zio/zio-config/issues/1095",children:"https://github.com/zio/zio-config/issues/1095"})]}),"\n",(0,a.jsxs)(n.p,{children:["Therefore, some of these ideas around ",(0,a.jsx)(n.code,{children:"Indexing"})," is  pushed back to ",(0,a.jsx)(n.code,{children:"ZIO"})," and incorporated within the ",(0,a.jsx)(n.code,{children:"Flat"})," structure."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://github.com/zio/zio/pull/7823",children:"https://github.com/zio/zio/pull/7823"})," and ",(0,a.jsx)(n.a,{href:"https://github.com/zio/zio/pull/7891",children:"https://github.com/zio/zio/pull/7891"})]}),"\n",(0,a.jsx)(n.p,{children:"These changes are to keep the backward compatibility of ZIO library itself."}),"\n",(0,a.jsx)(n.h4,{id:"what-does-it-mean-to-users",children:"What does it mean to users?"}),"\n",(0,a.jsxs)(n.p,{children:["It implies, for sequence (or list) datatypes, you can use either ",(0,a.jsx)(n.code,{children:"<nil>"})," or ",(0,a.jsx)(n.code,{children:'""'})," to represent empty list in a flat structure.\nSee the below example where it tries to mix indexing into flat structure.\nWe recommend using ",(0,a.jsx)(n.code,{children:"<nil>"})," over ",(0,a.jsx)(n.code,{children:'""'})," whenever you are trying  to represent a real indexed format"]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.config._, magnolia._\n\nfinal case class Department(name: String, block: Int)\n\nfinal case class Employee(departments: List[Department], name: String)\nfinal case class Config(employees: List[Employee])\n\nval map =\n  Map(\n    "employees[0].name" -> "jon",\n    "employees[0].departments[0].name" -> "science",\n    "employees[0].departments[0].block" -> "10",\n    "employees[0].departments[1].name" -> "maths",\n    "employees[0].departments[2].block" -> "11",\n    "employees[1].name" -> "foo",\n    "employees[1].departments" -> "<nil>",\n  )\n  \n\nConfigProvider.fromMap(map).load(derivedConfig[Config])\n\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Although we support indexing within Flat, formats such as Json/HOCON/XML is far better to work with indexing,\nand zio-config supports these formats making use of the above idea."}),"\n",(0,a.jsx)(n.h4,{id:"another-simple-example-of-an-indexed-format",children:"Another simple example of an indexed format"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'\nimport zio.config._, magnolia._\n\nfinal case class Employee(age: Int, name: String)\n\n val map = \n   Map(\n     "department.employees[0].age" -> "10",\n     "department.employees[0].name" -> "foo",\n     "department.employees[1].age" -> "11",\n     "department.employees[1].name" -> "bar",\n     "department.employees[2].age" -> "12",\n     "department.employees[2].name" -> "baz",\n   )\n\n\nval provider = ConfigProvider.fromMap(map)\nval config = Config.listOf("employees", deriveConfig[Employee]).nested("department")\nval result = provider.load(config)\n\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>t});var i=o(96540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);