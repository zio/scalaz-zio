"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[66454],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},86595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-kafka/writing-tests","title":"Writing Tests with the `zio-kafka-testkit` library","description":"Zio-kafka provides a zio-kafka-testkit library to help you test your code using zio-kafka.","source":"@site/docs/zio-kafka/writing-tests.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/writing-tests","permalink":"/zio-kafka/writing-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/writing-tests.md","tags":[],"version":"current","frontMatter":{"id":"writing-tests","title":"Writing Tests with the `zio-kafka-testkit` library"},"sidebar":"ecosystem-sidebar","previous":{"title":"Serialization and Deserialization","permalink":"/zio-kafka/serialization-and-deserialization"},"next":{"title":"Migrating to zio-kafka 3","permalink":"/zio-kafka/migrating-to-zio-kafka-3"}}');var i=n(74848),a=n(28453);const r={id:"writing-tests",title:"Writing Tests with the `zio-kafka-testkit` library"},o=void 0,d={},c=[{value:"Testing a producer",id:"testing-a-producer",level:2},{value:"Producer layer",id:"producer-layer",level:3},{value:"More Kafka sharing options",id:"more-kafka-sharing-options",level:3},{value:"Considerations for sharing Kafka between tests",id:"considerations-for-sharing-kafka-between-tests",level:2},{value:"Testing a consumer",id:"testing-a-consumer",level:2},{value:"More consumer options",id:"more-consumer-options",level:2},{value:"Utilities provided by the <code>zio-kafka-testkit</code> library",id:"utilities-provided-by-the-zio-kafka-testkit-library",level:2},{value:"<code>Kafka</code> service",id:"kafka-service",level:3},{value:"<code>KafkaTestUtils</code> utilities",id:"kafkatestutils-utilities",level:3},{value:"<code>ZIOSpecWithKafka</code> trait",id:"ziospecwithkafka-trait",level:3},{value:"<code>KafkaRandom</code> trait",id:"kafkarandom-trait",level:3}];function l(e){const t={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Zio-kafka provides a ",(0,i.jsx)(t.code,{children:"zio-kafka-testkit"})," library to help you test your code using zio-kafka."]}),"\n",(0,i.jsxs)(t.p,{children:["To add it in your project, add the following dependency in your ",(0,i.jsx)(t.code,{children:"build.sbt"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-kafka-testkit" % "<latest-version>" % Test\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Let's study some examples of tests you can write with the ",(0,i.jsx)(t.code,{children:"zio-kafka-testkit"})," and ",(0,i.jsx)(t.code,{children:"zio-test"})," and let's see what this\nlibrary provides you."]}),"\n",(0,i.jsx)(t.h2,{id:"testing-a-producer",children:"Testing a producer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import org.apache.kafka.clients.producer.ProducerRecord\nimport zio._\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.Kafka\nimport zio.kafka.testkit.KafkaTestUtils\nimport zio.test.TestAspect.{timeout, withLiveClock}\nimport zio.test._\n\nobject ProducerSpec extends ZIOSpecDefault {\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Producer test suite")(\n        test("minimal example") {\n          for {\n            producer <- KafkaTestUtils.makeProducer // (1)\n            _ <- producer.produce(new ProducerRecord("topic", "boo", "baa"), Serde.string, Serde.string) // (3)\n          } yield assertCompletes // (3)\n        }\n        // ... more tests ...\n      )\n        .provideSomeShared[Scope](Kafka.embedded) // (4) Provide an embedded Kafka instance, shared in the entire suite\n      ) @@ withLiveClock @@ timeout(2.minutes) // (5)\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The main entry points for zio-kafka test kit are the classes ",(0,i.jsx)(t.code,{children:"KafkaTestUtils"})," and ",(0,i.jsx)(t.code,{children:"Kafka"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["(1) A producer is created with lots of default settings. It knows how to connect to the Kafka broker by getting a\n",(0,i.jsx)(t.code,{children:"Kafka"})," instance from the environment (see (4))."]}),"\n",(0,i.jsx)(t.p,{children:"(2) The producer is used to produce a record."}),"\n",(0,i.jsxs)(t.p,{children:["Take a look at the ",(0,i.jsx)(t.code,{children:"produce*"})," methods in ",(0,i.jsx)(t.code,{children:"KafkaTestUtils"})," when you need to produce a lot of records."]}),"\n",(0,i.jsxs)(t.p,{children:["(3) The ",(0,i.jsx)(t.code,{children:"assertCompletes"})," assertion from zio-test is used to check that the effect completes without errors."]}),"\n",(0,i.jsxs)(t.p,{children:["(4) Provide a ",(0,i.jsx)(t.code,{children:"Kafka"})," instance as a layer shared between all the tests. In this test we provide an ",(0,i.jsx)(t.strong,{children:"Embedded Kafka"}),",\nmeaning that a complete Kafka cluster is started and stopped inside the current JVM."]}),"\n",(0,i.jsx)(t.p,{children:"See further below for more options, such as connecting to an external Kafka cluster."}),"\n",(0,i.jsxs)(t.p,{children:["Note that any services that are ",(0,i.jsx)(t.em,{children:"not"})," provided at this line, must be given as type parameter to ",(0,i.jsx)(t.code,{children:"provideSomeShared"}),". In\nthis case we are not providing a ",(0,i.jsx)(t.code,{children:"Scope"})," (it is provided by the test framework)."]}),"\n",(0,i.jsx)(t.p,{children:"(5) Zio-kafka requires a live clock."}),"\n",(0,i.jsx)(t.h3,{id:"producer-layer",children:"Producer layer"}),"\n",(0,i.jsxs)(t.p,{children:["In this example above, we decided to make a new ",(0,i.jsx)(t.code,{children:"Producer"})," in each test. We could have decided to share one instance of\n",(0,i.jsx)(t.code,{children:"Producer"})," between all the tests of this suite. For this purpose we can get a Producer layer using\n",(0,i.jsx)(t.code,{children:"KafkaTestUtils.producer"}),". The result is:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'suite("producer test suite")(\n  // ... tests ...\n).provideSomeShared[Scope](Kafka.embedded, KafkaTestUtils.producer)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"more-kafka-sharing-options",children:"More Kafka sharing options"}),"\n",(0,i.jsx)(t.p,{children:"Kafka is slow to start, so it is better to only start it once and share it between all tests of the suite."}),"\n",(0,i.jsxs)(t.p,{children:["However, if we insist on a separate embedded Kafka ",(0,i.jsx)(t.em,{children:"per test"}),", we can provide the ",(0,i.jsx)(t.code,{children:"Kafka.embedded"})," layer with\n",(0,i.jsx)(t.code,{children:"provideSome"})," (instead of ",(0,i.jsx)(t.code,{children:"provideSomeShared"}),"), which looks like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'suite("producer test suite")(\n  // ... tests ...\n).provideSome[Scope](Kafka.embedded)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["We can also share one embedded ",(0,i.jsx)(t.code,{children:"Kafka"})," instance between different test suites (i.e. between different test files) by\nmixing in the ",(0,i.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait, this looks like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'object ProducerSpec extends ZIOSpecWithKafka { // (1)\n  override def spec: Spec[TestEnvironment & Scope & Kafka, Any] =\n    (\n      suite("Producer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Scope & Kafka](/* ...other layers... */) // (2)\n      )\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["(1) Note the ",(0,i.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait usage here instead of ",(0,i.jsx)(t.code,{children:"ZIOSpecDefault"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["(2) When we need to provide additional layers with ",(0,i.jsx)(t.code,{children:"provideSome"})," or ",(0,i.jsx)(t.code,{children:"provideSomeShared"}),", both ",(0,i.jsx)(t.code,{children:"Scope"})," and ",(0,i.jsx)(t.code,{children:"Kafka"})," are\nnow provided by the test framework. Therefore, we need to include both in the type parameter."]}),"\n",(0,i.jsxs)(t.p,{children:["More details about this ",(0,i.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait ",(0,i.jsx)(t.a,{href:"#ziospecwithkafka-trait",children:"below"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"considerations-for-sharing-kafka-between-tests",children:"Considerations for sharing Kafka between tests"}),"\n",(0,i.jsxs)(t.p,{children:["Zio tests by default all run concurrently. Tests may interfere with each other through the shared Kafka resource. The\nbest way to prevent interference is by making sure each test uses a different topic. If this is not feasible, we can use\nthe ",(0,i.jsx)(t.code,{children:"sequential"})," aspect from zio-test to run the tests one by one."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio.test.TestAspect.sequential\n\nsuite("test suite")(\n // ... tests ...\n) @@ sequential\n'})}),"\n",(0,i.jsx)(t.h2,{id:"testing-a-consumer",children:"Testing a consumer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.kafka.consumer.Subscription\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.KafkaTestUtils\nimport zio.kafka.testkit._\nimport zio.test.Assertion.hasSameElements\nimport zio.test.TestAspect.{timeout, withLiveClock}\nimport zio.test._\n\nobject ConsumerSpec extends ZIOSpecDefault {\n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Consumer test suite")(\n        test("minimal example") {\n          // Records (as key/value pairs) to produce and consume\n          val kvs: List[(String, String)] = (1 to 5).toList.map(i => (s"key-$i", s"msg-$i"))\n          for {\n            topic <- Random.nextUUID.map("topic-" + _.toString) // (1)\n            client <- Random.nextUUID.map("client-" + _.toString)\n            group <- Random.nextUUID.map("group-" + _.toString)\n\n            _ <- KafkaTestUtils.createCustomTopic(topic, partitionCount = 3) // (2)\n\n            producer <- KafkaTestUtils.makeProducer\n            _ <- KafkaTestUtils.produceMany(producer, topic, kvs) // (3)\n\n            consumer <- KafkaTestUtils.makeConsumer(clientId = client, groupId = Some(group)) // (4)\n            records <- consumer\n              .plainStream(Subscription.topics(topic), Serde.string, Serde.string)\n              .take(5)\n              .runCollect // (5)\n            consumed = records.map(r => (r.record.key, r.record.value)).toList\n          } yield assert(consumed)(hasSameElements(kvs))\n        }\n      )\n        .provideSomeShared[Scope](Kafka.embedded) // (6)\n      ) @@ withLiveClock @@ timeout(2.minutes)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"(1) Using random values for these parameters is important to avoid conflicts between tests as we share one Kafka\ninstance between all the tests of the suite."}),"\n",(0,i.jsx)(t.p,{children:"(2) Here we create a topic with 3 partitions. Note that by default Kafka auto-creates topics. Therefore, creating\na topic explicitly is only needed when we want to control the number of partitions, or when your Kafka cluster does\nnot allow auto-created topics."}),"\n",(0,i.jsxs)(t.p,{children:["(3) A producer is constructed and 5 records are produced with ",(0,i.jsx)(t.code,{children:"KafkaTestUtils.produceMany"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["(4) A consumer is constructed with ",(0,i.jsx)(t.code,{children:"KafkaTestUtils.makeConsumer"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"(5) The consumer reads 5 records from the topic."}),"\n",(0,i.jsxs)(t.p,{children:["Be careful with the ",(0,i.jsx)(t.code,{children:"take"})," method, due to pre-fetching, the consumer may have fetched more from the topic than expected."]}),"\n",(0,i.jsxs)(t.p,{children:["(6) Similarly as in the producer test above, we provide the ",(0,i.jsx)(t.code,{children:"Kafka.embedded"})," layer."]}),"\n",(0,i.jsx)(t.h2,{id:"more-consumer-options",children:"More consumer options"}),"\n",(0,i.jsxs)(t.p,{children:["If we want to share a consumer between tests, we can use the ",(0,i.jsx)(t.code,{children:"KafkaTestUtils.consumer"})," layer and provide it with the\n",(0,i.jsx)(t.code,{children:"provideSomeShared"})," method (see the producer example above for more details)."]}),"\n",(0,i.jsxs)(t.h2,{id:"utilities-provided-by-the-zio-kafka-testkit-library",children:["Utilities provided by the ",(0,i.jsx)(t.code,{children:"zio-kafka-testkit"})," library"]}),"\n",(0,i.jsxs)(t.h3,{id:"kafka-service",children:[(0,i.jsx)(t.code,{children:"Kafka"})," service"]}),"\n",(0,i.jsxs)(t.p,{children:["This trait represents a Kafka instance in your tests. It is used to provide the bootstrap servers to the constructor\nmethods in ",(0,i.jsx)(t.code,{children:"KafkaTestUtils"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"trait Kafka {\n  def bootstrapServers: List[String]\n\n  def stop(): UIO[Unit]\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"The companion object provides a few layers to provide a Kafka instance in your tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"object Kafka {\n  /**\n   * Creates an in-memory Kafka instance with a random port.\n   */\n  val embedded: ZLayer[Any, Throwable, Kafka]\n\n  /**\n   * Will connect to a Kafka instance running on localhost:9092 (with Docker, for example).\n   */\n  val local: ULayer[Kafka]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SASL authentication configured.\n   */\n  val saslEmbedded: ZLayer[Any, Throwable, Kafka.Sasl]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SSL authentication configured.\n   */\n  val sslEmbedded: ZLayer[Any, Throwable, Kafka]\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The in-memory Kafka instances are created using ",(0,i.jsx)(t.a,{href:"https://github.com/embeddedkafka/embedded-kafka",children:"embedded-kafka"}),"."]}),"\n",(0,i.jsxs)(t.h3,{id:"kafkatestutils-utilities",children:[(0,i.jsx)(t.code,{children:"KafkaTestUtils"})," utilities"]}),"\n",(0,i.jsxs)(t.p,{children:["This object provides several utilities to simplify writing your tests, like constructing a ",(0,i.jsx)(t.code,{children:"Producer"}),", a ",(0,i.jsx)(t.code,{children:"Consumer"}),",\nor an ",(0,i.jsx)(t.code,{children:"AdminClient"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"It also provides several functions to produce records, and more."}),"\n",(0,i.jsxs)(t.p,{children:["Each utility function is documented in the source code. Please have a look at the source code for more details.",(0,i.jsx)(t.br,{}),"\n","You can also look at ",(0,i.jsx)(t.code,{children:"zio-kafka"})," tests in the ",(0,i.jsx)(t.code,{children:"zio-kafka-test"})," module to have examples on how to use these utilities."]}),"\n",(0,i.jsxs)(t.h3,{id:"ziospecwithkafka-trait",children:[(0,i.jsx)(t.code,{children:"ZIOSpecWithKafka"})," trait"]}),"\n",(0,i.jsxs)(t.p,{children:["This trait can be used if you want to share one Kafka instance between different test suites.",(0,i.jsx)(t.br,{}),"\n","This allows you to speed up your tests by booting a Kafka instance only once for all your test suites using this trait."]}),"\n",(0,i.jsx)(t.p,{children:"Usage example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'// In `src/test/scala/io/example/producer/ProducerSpec.scala`\nobject ProducerSpec extends ZIOSpecWithKafka { // Note `ZIOSpecWithKafka`\n  override def spec: Spec[TestEnvironment & Scope & Kafka, Any] =\n    suite("Producer test suite")(\n      // ... tests ...\n    ) @@ timeout(2.minutes)\n}\n\n// In `src/test/scala/io/example/consumer/ConsumerSpec.scala`\nobject ConsumerSpec extends ZIOSpecWithKafka { // Note `ZIOSpecWithKafka`\n  override def spec: Spec[TestEnvironment & Scope & Kafka, Any] =\n    suite("Consumer test suite")(\n      // ... tests ...\n    ) @@ timeout(2.minutes)\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This is a capability offered by ZIO2.",(0,i.jsx)(t.br,{}),"\n","See related zio-test documentation: ",(0,i.jsx)(t.a,{href:"https://zio.dev/reference/test/sharing-layers-between-multiple-files/",children:"https://zio.dev/reference/test/sharing-layers-between-multiple-files/"})]}),"\n",(0,i.jsxs)(t.h3,{id:"kafkarandom-trait",children:[(0,i.jsx)(t.code,{children:"KafkaRandom"})," trait"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"KafkaRandom"})," trait provides a few methods to generate random values.\nTo use it, you need to mix it in your test suite, like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio.kafka.testkit.Kafka\nimport zio.kafka.testkit.KafkaRandom\nimport zio.kafka.testkit.KafkaTestUtils\nimport zio.test._\nimport zio._\n\nobject MyServiceSpec extends ZIOSpecDefault with KafkaRandom {\n  // Required when mixing in the `KafkaRandom` trait\n  // The best is to use a different prefix for each test suite\n  override def kafkaPrefix: String = "my-service"\n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    suite("MyService")(\n      test("minimal example") {\n        for {\n          topic    <- randomTopic  // Comes from `KafkaRandom`\n          clientId <- randomClient // Comes from `KafkaRandom`\n          groupId  <- randomGroup  // Comes from `KafkaRandom`\n          // ... \n        } yield assertCompletes\n      }\n    ).provideSomeShared[Scope](Kafka.embedded)\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);