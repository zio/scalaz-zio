"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59110],{25852:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/concurrency/zref","title":"ZRef","description":"A ZRef[EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ZRef are set and get.","source":"@site/versioned_docs/version-1.0.18/reference/concurrency/zref.md","sourceDirName":"reference/concurrency","slug":"/reference/concurrency/zref","permalink":"/1.0.18/reference/concurrency/zref","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/concurrency/zref.md","tags":[],"version":"1.0.18","frontMatter":{"id":"zref","title":"ZRef"},"sidebar":"overview_sidebar","previous":{"title":"Introduction","permalink":"/1.0.18/reference/concurrency/"},"next":{"title":"Ref","permalink":"/1.0.18/reference/concurrency/ref"}}');var o=r(74848),c=r(28453);const s={id:"zref",title:"ZRef"},i=void 0,a={},l=[];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"ZRef[EA, EB, A, B]"})," is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ",(0,o.jsx)(n.code,{children:"ZRef"})," are ",(0,o.jsx)(n.code,{children:"set"})," and ",(0,o.jsx)(n.code,{children:"get"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"set"})})," takes a value of type ",(0,o.jsx)(n.code,{children:"A"})," and sets the reference to a new value, potentially failing with an error of type ",(0,o.jsx)(n.code,{children:"EA"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"get"})})," gets the current value of the reference and returns a value of type ",(0,o.jsx)(n.code,{children:"B"}),", potentially\nfailing with an error of type ",(0,o.jsx)(n.code,{children:"EB"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["When the error and value types of the ",(0,o.jsx)(n.code,{children:"ZRef"})," are unified, that is, it is a ",(0,o.jsx)(n.code,{children:"ZRef[E, E, A, A]"}),", the ",(0,o.jsx)(n.code,{children:"ZRef"})," also supports atomic ",(0,o.jsx)(n.code,{children:"modify"})," and ",(0,o.jsx)(n.code,{children:"update"})," operations. All operations are guaranteed to be safe for concurrent access."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Note:"})})}),"\n",(0,o.jsxs)(n.p,{children:["While ",(0,o.jsx)(n.code,{children:"ZRef"})," provides the functional equivalent of a mutable reference, the value inside the ",(0,o.jsx)(n.code,{children:"ZRef"})," should be immutable. For performance reasons ",(0,o.jsx)(n.code,{children:"ZRef"})," is implemented in terms of compare and swap operations rather than synchronization. ",(0,o.jsx)(n.strong,{children:"These operations are not safe for mutable values that do not support concurrent access"}),"."]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(96540);const o={},c=t.createContext(o);function s(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);