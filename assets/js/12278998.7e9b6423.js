"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[75249],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(96540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},67921:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","title":"Tutorial: How to Monitor a ZIO Application Using ZIO\'s Built-in Metric System?","description":"Introduction","source":"@site/docs/guides/tutorials/monitor-a-zio-application-using-zios-built-in-metric-system.md","sourceDirName":"guides/tutorials","slug":"/guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","permalink":"/guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/tutorials/monitor-a-zio-application-using-zios-built-in-metric-system.md","tags":[],"version":"current","frontMatter":{"id":"monitor-a-zio-application-using-zio-built-in-metric-system","title":"Tutorial: How to Monitor a ZIO Application Using ZIO\'s Built-in Metric System?","sidebar_label":"Monitoring a ZIO Application Using ZIO\'s Built-in Metric System"},"sidebar":"guides-sidebar","previous":{"title":"Producing/Consuming Data To/From Kafka Topics","permalink":"/guides/tutorials/producing-consuming-data-from-kafka-topics"},"next":{"title":"Debugging a ZIO Application","permalink":"/guides/tutorials/debug-a-zio-application"}}');var o=s(74848),i=s(28453);const r={id:"monitor-a-zio-application-using-zio-built-in-metric-system",title:"Tutorial: How to Monitor a ZIO Application Using ZIO's Built-in Metric System?",sidebar_label:"Monitoring a ZIO Application Using ZIO's Built-in Metric System"},a=void 0,u={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Running the Example",id:"running-the-example",level:2},{value:"Trying a Simple Example",id:"trying-a-simple-example",level:2},{value:"Built-in ZIO HTTP Metrics",id:"built-in-zio-http-metrics",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Serving Prometheus Metrics",id:"serving-prometheus-metrics",level:2},{value:"Testing the Metrics",id:"testing-the-metrics",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"ZIO has a built-in metric system that allows us to monitor the performance of our application. This is very useful for debugging and tuning our application. In this tutorial, we are going to learn how to add metrics to our application and then how to connect our application to one of the metric backends, e.g. Prometheus."}),"\n",(0,o.jsx)(t.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,o.jsxs)(t.p,{children:["To access the code examples, you can clone the ",(0,o.jsx)(t.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstarts"})," project:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-restful-webservice-metrics\n"})}),"\n",(0,o.jsx)(t.p,{children:"And finally, run the application using sbt:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ sbt run\n"})}),"\n",(0,o.jsx)(t.p,{children:"Alternatively, to enable hot-reloading and prevent port binding issues, you can use:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"sbt reStart\n"})}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsxs)(t.p,{children:['If you encounter a "port already in use" error, you can use ',(0,o.jsx)(t.code,{children:"sbt-revolver"})," to manage server restarts more effectively. The ",(0,o.jsx)(t.code,{children:"reStart"})," command will start your server and ",(0,o.jsx)(t.code,{children:"reStop"})," will properly stop it, releasing the port."]}),(0,o.jsxs)(t.p,{children:["To enable this feature, we have included ",(0,o.jsx)(t.code,{children:"sbt-revolver"})," in the project. For more details on this, refer to the ",(0,o.jsx)(t.a,{href:"https://zio.dev/zio-http/installation#hot-reload-changes-watch-mode",children:"ZIO HTTP documentation on hot-reloading"}),"."]})]}),"\n",(0,o.jsx)(t.h2,{id:"trying-a-simple-example",children:"Trying a Simple Example"}),"\n",(0,o.jsx)(t.p,{children:"Before going to apply the metrics in our application, let's try a simple example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.metrics.Metric\n\nobject MainApp extends ZIOAppDefault {\n  private val count = Metric.counterInt("fib_call_total").fromConst(1)\n\n  def fib(n: Int): ZIO[Any, Nothing, Int] =\n    if (n <= 1) ZIO.succeed(1)\n    else for {\n      a <- fib(n - 1) @@ count\n      b <- fib(n - 2) @@ count\n    } yield a + b\n\n  def run =\n    for {\n      i <- Console.readLine("Please enter a number to calculate fibonacci: ").mapAttempt(_.toInt)\n      n <- fib(i) @@ count\n      _ <- Console.printLine(s"fib($i) = $n")\n      c <- count.value\n      _ <- ZIO.debug(s"number of fib calls to calculate fib($i): ${c.count}")\n    } yield ()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["In this example, we are going to calculate the Fibonacci number for a given number. We also count the number of times we call the ",(0,o.jsx)(t.code,{children:"fib"})," function using the ",(0,o.jsx)(t.code,{children:"count"})," metric. Finally, we will print the value of the metric as a debug message."]}),"\n",(0,o.jsx)(t.p,{children:"This is a pedagogical example of how to use metrics. In real life, we will probably want to poll the metrics using a web API and feed them to a monitoring system, e.g. Prometheus. In the following sections, we will learn how to do that by applying the metrics to our RESTful web service."}),"\n",(0,o.jsx)(t.h2,{id:"built-in-zio-http-metrics",children:"Built-in ZIO HTTP Metrics"}),"\n",(0,o.jsxs)(t.p,{children:["ZIO HTTP has built-in support for metrics. We can attach metrics middleware to our HTTP application using the ",(0,o.jsx)(t.code,{children:"@@"})," syntax:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\n\nobject UserRoutes {\n\n  def apply(): Routes[UserRepo, Response] =\n    Routes(\n      Method.GET / "users" -> handler {\n        UserRepo.users.foldZIO(\n          e =>\n            ZIO\n              .logError(s"Failed to retrieve users. $e") *>\n              ZIO.fail(Response.internalServerError("Cannot retrieve users!")),\n          users =>\n            ZIO\n              .log(\n                s"Retrieved users successfully: response length=${users.length}"\n              )\n              .as(Response(body = Body.from(users)))\n        )\n      }\n    ) @@ Middleware.metrics()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"metrics"})," middleware is attached to all the routes in the ",(0,o.jsx)(t.code,{children:"UserRoutes"}),". Currently, it only counts the number of requests to the ",(0,o.jsx)(t.code,{children:"/users"})," endpoint. We can add more routes to the ",(0,o.jsx)(t.code,{children:"UserRoutes"})," and all of them will be counted by the ",(0,o.jsx)(t.code,{children:"metrics"})," middleware."]}),"\n",(0,o.jsx)(t.p,{children:"After adding the metrics to routes, it is time to serve the metrics as a RESTful API. Before that, let's add the required dependencies to our project."}),"\n",(0,o.jsx)(t.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,o.jsxs)(t.p,{children:["In the following sections, we are going to utilize the ",(0,o.jsx)(t.code,{children:"zio-metrics-connector"})," module from the ZIO ZMX project and also provide metrics as a REST API. So let's add the following dependency to our project:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-metrics-connectors"            % "2.3.1"\nlibraryDependencies += "dev.zio" %% "zio-metrics-connectors-prometheus" % "2.3.1"\n'})}),"\n",(0,o.jsx)(t.p,{children:"This module provides various connectors for metrics backend, e.g. Prometheus."}),"\n",(0,o.jsx)(t.h2,{id:"serving-prometheus-metrics",children:"Serving Prometheus Metrics"}),"\n",(0,o.jsx)(t.p,{children:"The following snippet shows how to provide an HTTP endpoint that exposes the metrics as a REST API for Prometheus:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio.http._\nimport zio._\nimport zio.metrics.connectors.prometheus.PrometheusPublisher\n\nobject PrometheusPublisherRoutes {\n  def apply(): Routes[PrometheusPublisher, Nothing] = {\n    Routes(\n      Method.GET / "metrics" ->\n        handler(\n          ZIO.serviceWithZIO[PrometheusPublisher](_.get.map(Response.text))\n        )\n    )\n  }\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Next, we need to add the ",(0,o.jsx)(t.code,{children:"PrometheusPublisherRoutes"})," HTTP App to our application:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"import zio._\nimport zio.http._\nimport zio.metrics.connectors.{MetricsConfig, prometheus}\n\nobject MainApp extends ZIOAppDefault {\n  private val metricsConfig = ZLayer.succeed(MetricsConfig(1.seconds))\n\n  def run =\n    Server.serve(\n      GreetingRoutes() ++ DownloadRoutes() ++ CounterRoutes() ++ UserRoutes() ++ PrometheusPublisherRoutes()\n    ).provide(\n      Server.default,\n\n      // An layer responsible for storing the state of the `counterApp`\n      ZLayer.fromZIO(Ref.make(0)),\n\n      // To use the persistence layer, provide the `PersistentUserRepo.layer` layer instead\n      InmemoryUserRepo.layer,\n\n      // configs for metric backends\n      metricsConfig,\n\n      // The prometheus reporting layer\n      prometheus.publisherLayer,\n      prometheus.prometheusLayer,\n    )\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"testing-the-metrics",children:"Testing the Metrics"}),"\n",(0,o.jsx)(t.p,{children:"Now that we have the metrics as a REST API, we can test them. Let's run the application and then send some requests to the application as below:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'$ curl -i http://localhost:8080/users -d \'{"name": "John", "age": 42}\'\n$ curl -i http://localhost:8080/users -d \'{"name": "Jane", "age": 43}\'\n$ curl -i http://localhost:8080/users\n'})}),"\n",(0,o.jsx)(t.p,{children:'If we fetch the metrics from the "/metrics" endpoint, we will see the metrics in the Prometheus format, like below:'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'$ curl -i http://localhost:8080/metrics\nHTTP/1.1 200 OK\ncontent-type: text/plain\ndate: Tue, 30 Apr 2024 18:58:26 GMT\ncontent-length: 4801\n\n# TYPE http_concurrent_requests_total gauge\n# HELP http_concurrent_requests_total\nhttp_concurrent_requests_total{method="GET",path="/users",} 0.0 1714503503829\n# TYPE http_concurrent_requests_total gauge\n# HELP http_concurrent_requests_total\nhttp_concurrent_requests_total{method="POST",path="/users",} 0.0 1714503503829\n# TYPE http_request_duration_seconds histogram\n# HELP http_request_duration_seconds\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.005",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.01",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.025",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.05",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.075",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.1",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.25",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.5",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="0.75",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="1.0",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="2.5",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="5.0",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="7.5",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="10.0",} 2.0 1714503503829\nhttp_request_duration_seconds_bucket{method="POST",path="/users",status="200",le="+Inf",} 2.0 1714503503829\n\nhttp_request_duration_seconds_sum{method="POST",path="/users",status="200",} 0.100570365 1714503503829\nhttp_request_duration_seconds_count{method="POST",path="/users",status="200",} 2.0 1714503503829\nhttp_request_duration_seconds_min{method="POST",path="/users",status="200",} 0.00120463 1714503503829\nhttp_request_duration_seconds_max{method="POST",path="/users",status="200",} 0.099365735 1714503503829\n# TYPE http_request_duration_seconds histogram\n# HELP http_request_duration_seconds\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.005",} 0.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.01",} 0.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.025",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.05",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.075",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.1",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.25",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.5",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="0.75",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="1.0",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="2.5",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="5.0",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="7.5",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="10.0",} 1.0 1714503503829\nhttp_request_duration_seconds_bucket{method="GET",path="/users",status="200",le="+Inf",} 1.0 1714503503829\n\nhttp_request_duration_seconds_sum{method="GET",path="/users",status="200",} 0.017157212 1714503503829\nhttp_request_duration_seconds_count{method="GET",path="/users",status="200",} 1.0 1714503503829\nhttp_request_duration_seconds_min{method="GET",path="/users",status="200",} 0.017157212 1714503503829\nhttp_request_duration_seconds_max{method="GET",path="/users",status="200",} 0.017157212 1714503503829\n# TYPE http_requests_total counter\n# HELP http_requests_total\nhttp_requests_total{method="POST",path="/users",status="200",} 2.0 1714503503829\n# TYPE http_requests_total counter\n# HELP http_requests_total\nhttp_requests_total{method="GET",path="/users",status="200",} 1.0 1714503503829\u23ce\n'})}),"\n",(0,o.jsx)(t.p,{children:"Now that we have the metrics as a REST API, we can add this endpoint to our Prometheus server to fetch the metrics periodically."}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(t.p,{children:"In this tutorial, we have learned how to define metrics and apply them to our application. We have also learned how to provide the metrics as a REST API which then can be polled by a Prometheus server."}),"\n",(0,o.jsxs)(t.p,{children:["All the source code associated with this article is available on the ",(0,o.jsx)(t.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstart"})," on GitHub."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);