"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60695],{13563:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>t,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"zio-logging/console-logger","title":"Console Logger","description":"logger layer with configuration from config provider:","source":"@site/docs/zio-logging/console-logger.md","sourceDirName":"zio-logging","slug":"/zio-logging/console-logger","permalink":"/zio-logging/console-logger","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/console-logger.md","tags":[],"version":"current","frontMatter":{"id":"console-logger","title":"Console Logger"},"sidebar":"ecosystem-sidebar","previous":{"title":"Log Filter","permalink":"/zio-logging/log-filter"},"next":{"title":"File Logger","permalink":"/zio-logging/file-logger"}}');var a=o(74848),r=o(28453);const t={id:"console-logger",title:"Console Logger"},s=void 0,l={},g=[{value:"Configuration",id:"configuration",level:2},{value:"Examples",id:"examples",level:2},{value:"Colorful Console Logger With Log Filtering",id:"colorful-console-logger-with-log-filtering",level:3},{value:"JSON Console Logger",id:"json-console-logger",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"logger layer with configuration from config provider:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio.logging.consoleLogger\nimport zio.{ ConfigProvider, Runtime }\n\nval configProvider: ConfigProvider = ???\n\nval logger = Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> consoleLogger()\n"})}),"\n",(0,a.jsx)(n.p,{children:"logger layer with given configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio.logging.{ consoleLogger, ConsoleLoggerConfig }\nimport zio.Runtime\n\nval config: ConsoleLoggerConfig = ???\n\nval logger = Runtime.removeDefaultLoggers >>> consoleLogger(config)\n"})}),"\n",(0,a.jsx)(n.p,{children:"there are other versions of console loggers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"zio.logging.consoleJsonLogger"})," - output in json format"]}),"\n",(0,a.jsxs)(n.li,{children:["error console:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"zio.logging.consoleErrLogger"})," - output in string format"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"zio.logging.consoleErrJsonLogger"})," - output in json format"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["the configuration for console logger (",(0,a.jsx)(n.code,{children:"zio.logging.ConsoleLoggerConfig"}),") has the following configuration structure:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'logger {\n  # log format, default value: LogFormat.default\n  format = "%label{timestamp}{%fixed{32}{%timestamp}} %label{level}{%level} %label{thread}{%fiberId} %label{message}{%message} %label{cause}{%cause}"\n  \n  # log filter\n  filter {\n    # see filter configuration\n    rootLevel = INFO\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["see also ",(0,a.jsx)(n.a,{href:"/zio-logging/formatting-log-records#log-format-configuration",children:"log format configuration"})," and ",(0,a.jsx)(n.a,{href:"/zio-logging/log-filter#configuration",children:"filter configuration"})]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(n.p,{children:["You can find the source code ",(0,a.jsx)(n.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,a.jsx)(n.h3,{id:"colorful-console-logger-with-log-filtering",children:"Colorful Console Logger With Log Filtering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.config.typesafe.TypesafeConfigProvider\nimport zio.logging.consoleLogger\nimport zio.{ Cause, Config, ConfigProvider, ExitCode, Runtime, Scope, URIO, ZIO, ZIOAppDefault, ZLayer }\n\nobject ConsoleColoredApp extends ZIOAppDefault {\n\n  val configString: String =\n    s"""\n       |logger {\n       |\n       |  format = "%highlight{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %cause}"\n       |\n       |  filter {\n       |    mappings {\n       |      "zio.logging.example.LivePingService" = "DEBUG"\n       |    }\n       |  }\n       |}\n       |""".stripMargin\n\n  val configProvider: ConfigProvider = TypesafeConfigProvider.fromHoconString(configString)\n\n  override val bootstrap: ZLayer[Any, Config.Error, Unit] =\n    Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> consoleLogger()\n\n  private def ping(address: String): URIO[PingService, Unit] =\n    PingService\n      .ping(address)\n      .foldZIO(\n        e => ZIO.logErrorCause(s"ping: $address - error", Cause.fail(e)),\n        r => ZIO.logInfo(s"ping: $address - result: $r")\n      )\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _ <- ping("127.0.0.1")\n      _ <- ping("x8.8.8.8")\n    } yield ExitCode.success).provide(LivePingService.layer)\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Expected console output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'2023-03-05T12:24:05+0100 DEBUG   [zio-fiber-4] zio.logging.example.LivePingService:37 ping: /127.0.0.1 \n2023-03-05T12:24:05+0100 INFO    [zio-fiber-4] zio.logging.example.ConsoleColoredApp:43 ping: 127.0.0.1 - result: true \n2023-03-05T12:24:05+0100 ERROR   [zio-fiber-4] zio.logging.example.LivePingService:36 ping: x8.8.8.8 - invalid address error Exception in thread "zio-fiber-4" java.net.UnknownHostException: x8.8.8.8: nodename nor servname provided, or not known\n\tat java.base/java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n\tat java.base/java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n\tat java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1529)\n\tat java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n\tat java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1519)\n\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1378)\n\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1306)\n\tat java.base/java.net.InetAddress.getByName(InetAddress.java:1256)\n\tat zio.logging.example.LivePingService.$anonfun$ping$2(PingService.scala:35)\n\tat zio.ZIOCompanionVersionSpecific.$anonfun$attempt$1(ZIOCompanionVersionSpecific.scala:100)\n\tat java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n\tat java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n\tat java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1529)\n\tat java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n\tat java.net.InetAddress.getAllByName0(InetAddress.java:1519)\n\tat java.net.InetAddress.getAllByName(InetAddress.java:1378)\n\tat java.net.InetAddress.getAllByName(InetAddress.java:1306)\n\tat java.net.InetAddress.getByName(InetAddress.java:1256)\n\tat zio.logging.example.LivePingService.ping(PingService.scala:35)\n\tat zio.logging.example.LivePingService.ping(PingService.scala:36)\n\tat zio.logging.example.LivePingService.ping(PingService.scala:33)\n\tat zio.logging.example.ConsoleColoredApp.ping(ConsoleColoredApp.scala:41)\n\tat zio.logging.example.ConsoleColoredApp.run(ConsoleColoredApp.scala:49)\n\tat zio.logging.example.ConsoleColoredApp.run(ConsoleColoredApp.scala:50)\n2023-03-05T12:24:05+0100 ERROR   [zio-fiber-4] zio.logging.example.ConsoleColoredApp:42 ping: x8.8.8.8 - error Exception in thread "zio-fiber-" java.net.UnknownHostException: x8.8.8.8: nodename nor servname provided, or not known\n\tat java.base/java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n\tat java.base/java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n\tat java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1529)\n\tat java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n\tat java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1519)\n\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1378)\n\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1306)\n\tat java.base/java.net.InetAddress.getByName(InetAddress.java:1256)\n\tat zio.logging.example.LivePingService.$anonfun$ping$2(PingService.scala:35)\n\tat zio.ZIOCompanionVersionSpecific.$anonfun$attempt$1(ZIOCompanionVersionSpecific.scala:100)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"json-console-logger",children:"JSON Console Logger"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.{ LogAnnotation, consoleJsonLogger }\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject ConsoleJsonApp extends ZIOAppDefault {\n\n  final case class User(firstName: String, lastName: String) {\n    def toJson: String = s"""{"first_name":"$firstName","last_name":"$lastName"}""".stripMargin\n  }\n\n  private val userLogAnnotation = LogAnnotation[User]("user", (_, u) => u, _.toJson)\n  private val uuid              = LogAnnotation[UUID]("uuid", (_, i) => i, _.toString)\n\n  val logFormat =\n    "%label{timestamp}{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ}} %label{level}{%level} %label{fiberId}{%fiberId} %label{message}{%message} %label{cause}{%cause} %label{name}{%name} %kvs"\n  \n  val configProvider: ConfigProvider = ConfigProvider.fromMap(\n    Map(\n      "logger/format"           -> logFormat,\n      "logger/filter/rootLevel" -> LogLevel.Info.label\n    ),\n    "/"\n  )\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> consoleJsonLogger()\n\n  private val uuids = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.foreachPar(uuids) { uId =>\n        {\n          ZIO.logInfo("Starting operation") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping operation")\n        } @@ userLogAnnotation(User("John", "Doe")) @@ uuid(uId)\n      } @@ LogAnnotation.TraceId(traceId)\n      _       <- ZIO.logInfo("Done")\n    } yield ExitCode.success\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Expected console output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'{"timestamp":"2023-03-08T19:36:04+0100","level":"INFO","fiberId":"zio-fiber-5","message":"Starting operation","name":"zio.logging.example.ConsoleJsonApp","trace_id":"f30c2e89-006c-4f7c-adfa-497e3bba1b98","uuid":"3b971312-cb3e-420e-8c12-7fb96add2224","user":{"first_name":"John","last_name":"Doe"}}\n{"timestamp":"2023-03-08T19:36:04+0100","level":"INFO","fiberId":"zio-fiber-6","message":"Starting operation","name":"zio.logging.example.ConsoleJsonApp","trace_id":"f30c2e89-006c-4f7c-adfa-497e3bba1b98","uuid":"93b87ff0-410a-4fc1-9cc7-b7eb7c655f60","user":{"first_name":"John","last_name":"Doe"}}\n{"timestamp":"2023-03-08T19:36:05+0100","level":"INFO","fiberId":"zio-fiber-5","message":"Stopping operation","name":"zio.logging.example.ConsoleJsonApp","trace_id":"f30c2e89-006c-4f7c-adfa-497e3bba1b98","uuid":"3b971312-cb3e-420e-8c12-7fb96add2224","user":{"first_name":"John","last_name":"Doe"}}\n{"timestamp":"2023-03-08T19:36:05+0100","level":"INFO","fiberId":"zio-fiber-6","message":"Stopping operation","name":"zio.logging.example.ConsoleJsonApp","trace_id":"f30c2e89-006c-4f7c-adfa-497e3bba1b98","uuid":"93b87ff0-410a-4fc1-9cc7-b7eb7c655f60","user":{"first_name":"John","last_name":"Doe"}}\n{"timestamp":"2023-03-08T19:36:05+0100","level":"INFO","fiberId":"zio-fiber-4","message":"Done","name":"zio.logging.example.ConsoleJsonApp"}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>s});var i=o(96540);const a={},r=i.createContext(a);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);