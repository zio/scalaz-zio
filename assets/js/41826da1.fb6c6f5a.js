"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[51040],{64832:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ecosystem/community/zio-apache-parquet","title":"ZIO Apache Parquet","description":"ZIO Apache Parquet is a ZIO-powered Apache Parquet library.","source":"@site/docs/ecosystem/community/zio-apache-parquet.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-apache-parquet","permalink":"/ecosystem/community/zio-apache-parquet","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-apache-parquet.md","tags":[],"version":"current","frontMatter":{"id":"zio-apache-parquet","title":"ZIO Apache Parquet"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO AMQP","permalink":"/ecosystem/community/zio-amqp"},"next":{"title":"ZIO Arrow","permalink":"/ecosystem/community/zio-arrow"}}');var t=n(74848),o=n(28453);const i={id:"zio-apache-parquet",title:"ZIO Apache Parquet"},c=void 0,s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://github.com/grouzen/zio-apache-parquet",children:"ZIO Apache Parquet"})," is a ZIO-powered Apache Parquet library."]}),"\n",(0,t.jsx)(r.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(r.p,{children:["ZIO Apache Parquet is a ZIO wrapper for ",(0,t.jsx)(r.a,{href:"https://github.com/apache/parquet-java",children:"parquet-java"})," and ",(0,t.jsx)(r.a,{href:"https://github.com/apache/hadoop",children:"hadoop"})," to easily read and write Parquet files without running a Spark cluster."]}),"\n",(0,t.jsx)(r.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"ZIO & ZIO Streams"})," \u2014 naturally integrates with ZIO ecosystem."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"ZIO Schema"})," \u2014 type-safe filter predicates and codecs derivation."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Clean and simple API"})," \u2014 easy to use, no magic."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'libraryDependencies += "me.mnedokushev" %% "zio-apache-parquet-core" % "0.1.0"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.p,{children:"A simple demo showcasing how to write a small chunk of data and read it applying a filter predicate."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'//> using scala "3.5.0"\n//> using dep me.mnedokushev::zio-apache-parquet-core:0.1.0\n\nimport zio.*\nimport zio.schema.*\nimport me.mnedokushev.zio.apache.parquet.core.codec.*\nimport me.mnedokushev.zio.apache.parquet.core.hadoop.{ ParquetReader, ParquetWriter, Path }\nimport me.mnedokushev.zio.apache.parquet.core.filter.syntax.*\nimport me.mnedokushev.zio.apache.parquet.core.filter.*\n\nimport java.nio.file.Files\n\nobject Filtering extends ZIOAppDefault:\n\n  case class MyRecord(a: Int, b: String, c: Option[Long])\n\n  object MyRecord:\n    // We need to provide field names using singleton types\n    given Schema.CaseClass3.WithFields["a", "b", "c", Int, String, Option[Long], MyRecord] =\n      DeriveSchema.gen[MyRecord]\n    given SchemaEncoder[MyRecord]                                                          =\n      Derive.derive[SchemaEncoder, MyRecord](SchemaEncoderDeriver.default)\n    given ValueEncoder[MyRecord]                                                           =\n      Derive.derive[ValueEncoder, MyRecord](ValueEncoderDeriver.default)\n    given ValueDecoder[MyRecord]                                                           =\n      Derive.derive[ValueDecoder, MyRecord](ValueDecoderDeriver.default)\n    given TypeTag[MyRecord]                                                                =\n      Derive.derive[TypeTag, MyRecord](TypeTagDeriver.default)\n\n    // Define accessors to use them later in the filter predicate.\n    // You can give any names to the accessors as we demonstrate here.\n    val (id, name, age) = Filter[MyRecord].columns\n\n  val data =\n    Chunk(\n      MyRecord(1, "bob", Some(10L)),\n      MyRecord(2, "bob", Some(12L)),\n      MyRecord(3, "alice", Some(13L)),\n      MyRecord(4, "john", None)\n    )\n\n  val recordsFile = Path(Files.createTempDirectory("records")) / "records.parquet"\n\n  override def run =\n    (\n      for {\n        writer   <- ZIO.service[ParquetWriter[MyRecord]]\n        reader   <- ZIO.service[ParquetReader[MyRecord]]\n        _        <- writer.writeChunk(recordsFile, data)\n        fromFile <- reader.readChunkFiltered(\n                      recordsFile,\n                      filter(\n                        MyRecord.id > 1 `and` (\n                          MyRecord.name =!= "bob" `or`\n                            // Use .nullable syntax for optional fields.\n                            MyRecord.age.nullable > 10L\n                        )\n                      )\n                    )\n        _        <- Console.printLine(fromFile)\n      } yield ()\n    ).provide(\n      ParquetWriter.configured[MyRecord](),\n      ParquetReader.configured[MyRecord]()\n    )\n  // Outputs:\n  // Chunk(MyRecord(2,bob,Some(12)),MyRecord(3,alice,Some(13)),MyRecord(4,john,None))\n'})}),"\n",(0,t.jsxs)(r.p,{children:["See the full docs on the project's ",(0,t.jsx)(r.a,{href:"https://mnedokushev.me/zio-apache-parquet/",children:"website"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var a=n(96540);const t={},o=a.createContext(t);function i(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);