"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[57820],{69970:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/stream/zstream/creating-zio-streams","title":"Creating ZIO Streams","description":"There are several ways to create ZIO Stream. In this section, we are going to enumerate some of the important ways of creating ZStream.","source":"@site/docs/reference/stream/zstream/creating-zio-streams.md","sourceDirName":"reference/stream/zstream","slug":"/reference/stream/zstream/creating-zio-streams","permalink":"/reference/stream/zstream/creating-zio-streams","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/creating-zio-streams.md","tags":[],"version":"current","frontMatter":{"id":"creating-zio-streams","title":"Creating ZIO Streams"},"sidebar":"reference-sidebar","previous":{"title":"Chunked Streams","permalink":"/reference/stream/zstream/streams-are-chunked-by-default"},"next":{"title":"Resourceful Streams","permalink":"/reference/stream/zstream/resourceful-streams"}}');var t=a(74848),s=a(28453);const o={id:"creating-zio-streams",title:"Creating ZIO Streams"},i=void 0,c={},l=[{value:"Common Constructors",id:"common-constructors",level:2},{value:"From Success and Failure",id:"from-success-and-failure",level:2},{value:"From Chunks",id:"from-chunks",level:2},{value:"From ZIO",id:"from-zio",level:2},{value:"From Asynchronous Callback",id:"from-asynchronous-callback",level:2},{value:"From Iterators",id:"from-iterators",level:2},{value:"From Iterables",id:"from-iterables",level:2},{value:"From Repetition",id:"from-repetition",level:2},{value:"From Unfolding/Pagination",id:"from-unfoldingpagination",level:2},{value:"Unfold",id:"unfold",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Unfolding vs. Pagination",id:"unfolding-vs-pagination",level:3},{value:"From Wrapped Streams",id:"from-wrapped-streams",level:2},{value:"From Java IO",id:"from-java-io",level:2},{value:"From Java Stream",id:"from-java-stream",level:2},{value:"From Queue and Hub",id:"from-queue-and-hub",level:2},{value:"From Schedule",id:"from-schedule",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["There are several ways to create ZIO Stream. In this section, we are going to enumerate some of the important ways of creating ",(0,t.jsx)(n.code,{children:"ZStream"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"common-constructors",children:"Common Constructors"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.apply"})," \u2014 Creates a pure stream from a variable list of values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val stream: ZStream[Any, Nothing, Int] = ZStream(1, 2, 3)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.unit"})," \u2014 A stream that contains a single ",(0,t.jsx)(n.code,{children:"Unit"})," value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val unit: ZStream[Any, Nothing, Unit] = ZStream.unit\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.never"})," \u2014 A stream that produces no value or fails with an error:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val never: ZStream[Any, Nothing, Nothing] = ZStream.never\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.repeat"})," \u2014 A stream that repeats using the specified schedule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val repeat: ZStream[Any, Nothing, Int] = \n  ZStream(1).repeat(Schedule.forever)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.iterate"})," \u2014 Takes an initial value and applies the given function to the initial value iteratively. The initial value is the first value produced by the stream, followed by f(init), f(f(init)), ..."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val nats: ZStream[Any, Nothing, Int] = \n  ZStream.iterate(1)(_ + 1) // 1, 2, 3, ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.range"})," \u2014 A stream from a range of integers ",(0,t.jsx)(n.code,{children:"[min, max)"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val range: ZStream[Any, Nothing, Int] = ZStream.range(1, 5) // 1, 2, 3, 4\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.service[R]"})," \u2014 Create a stream that extract the requested service from the environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait Foo\n\nval fooStream: ZStream[Foo, Nothing, Foo] = ZStream.service[Foo]\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.scoped"})," \u2014 Creates a single-valued stream from a scoped resource:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val scopedStream: ZStream[Any, Throwable, BufferedReader] =\n  ZStream.scoped(\n    ZIO.fromAutoCloseable(\n      ZIO.attemptBlocking(\n        Files.newBufferedReader(java.nio.file.Paths.get("file.txt"))\n      )\n    )\n  )\n'})}),"\n",(0,t.jsx)(n.h2,{id:"from-success-and-failure",children:"From Success and Failure"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.code,{children:"ZIO"})," data type, we can create a ",(0,t.jsx)(n.code,{children:"ZStream"})," using ",(0,t.jsx)(n.code,{children:"fail"})," and ",(0,t.jsx)(n.code,{children:"succeed"})," methods:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val s1: ZStream[Any, String, Nothing] = ZStream.fail("Uh oh!")\nval s2: ZStream[Any, Nothing, Int]    = ZStream.succeed(5)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"from-chunks",children:"From Chunks"}),"\n",(0,t.jsxs)(n.p,{children:["We can create a stream from a ",(0,t.jsx)(n.code,{children:"Chunk"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val s1 = ZStream.fromChunk(Chunk(1, 2, 3))\n// s1: ZStream[Any, Nothing, Int] = zio.stream.ZStream@4b1a2b8a\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or from multiple ",(0,t.jsx)(n.code,{children:"Chunks"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val s2 = ZStream.fromChunks(Chunk(1, 2, 3), Chunk(4, 5, 6))\n// s2: ZStream[Any, Nothing, Int] = zio.stream.ZStream@1937314c\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from-zio",children:"From ZIO"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromZIO"})," \u2014 We can create a stream from a ZIO workflow by using ",(0,t.jsx)(n.code,{children:"ZStream.fromZIO"})," constructor. For example, the following stream is a stream that reads a line from a user:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val readline: ZStream[Any, IOException, String] = \n  ZStream.fromZIO(Console.readLine)\n"})}),"\n",(0,t.jsx)(n.p,{children:"A stream that produces one random number:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val randomInt: ZStream[Any, Nothing, Int] = \n  ZStream.fromZIO(Random.nextInt)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromZIOOption"})," \u2014 In some cases, depending on the result of the ZIO workflow, we should decide to emit an element or return an empty stream. In these cases, we can use ",(0,t.jsx)(n.code,{children:"fromZIOOption"})," constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object ZStream {\n  def fromZIOOption[R, E, A](fa: ZIO[R, Option[E], A]): ZStream[R, E, A] = ???\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's see an example of using this constructor. In this example, we read a string from user input, and then decide to emit that or not; If the user enters an ",(0,t.jsx)(n.code,{children:"EOF"})," string, we emit an empty stream, otherwise we emit the user input:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val userInput: ZStream[Any, IOException, String] = \n  ZStream.fromZIOOption(\n    Console.readLine.mapError(Option(_)).flatMap {\n      case "EOF" => ZIO.fail[Option[IOException]](None)\n      case o     => ZIO.succeed(o)\n    }\n  ) \n'})}),"\n",(0,t.jsx)(n.h2,{id:"from-asynchronous-callback",children:"From Asynchronous Callback"}),"\n",(0,t.jsxs)(n.p,{children:["Assume we have an asynchronous function that is based on callbacks. We would like to register a callbacks on that function and get back a stream of the results emitted by those callbacks. We have ",(0,t.jsx)(n.code,{children:"ZStream.async"})," which can adapt functions that call their callbacks multiple times and emit the results over a stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'// Asynchronous Callback-based API\ndef registerCallback(\n    name: String,\n    onEvent: Int => Unit,\n    onError: Throwable => Unit\n): Unit = ???\n\n// Lifting an Asynchronous API to ZStream\nval stream = ZStream.async[Any, Throwable, Int] { cb =>\n  registerCallback(\n    "foo",\n    event => cb(ZIO.succeed(Chunk(event))),\n    error => cb(ZIO.fail(error).mapError(Some(_)))\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The error type of the ",(0,t.jsx)(n.code,{children:"register"})," function is optional, so by setting the error to the ",(0,t.jsx)(n.code,{children:"None"})," we can use it to signal the end of the stream."]}),"\n",(0,t.jsx)(n.h2,{id:"from-iterators",children:"From Iterators"}),"\n",(0,t.jsxs)(n.p,{children:["Iterators are data structures that allow us to iterate over a sequence of elements. Similarly, we can think of ZIO Streams as effectual Iterators; every ",(0,t.jsx)(n.code,{children:"ZStream"})," represents a collection of one or more, but effectful values."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromIteratorSucceed"})," \u2014 We can convert an iterator that does not throw exception to ",(0,t.jsx)(n.code,{children:"ZStream"})," by using ",(0,t.jsx)(n.code,{children:"ZStream.fromIteratorSucceed"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val s1: ZStream[Any, Throwable, Int] = ZStream.fromIterator(Iterator(1, 2, 3))\nval s2: ZStream[Any, Throwable, Int] = ZStream.fromIterator(Iterator.range(1, 4))\nval s3: ZStream[Any, Throwable, Int] = ZStream.fromIterator(Iterator.continually(0))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Also, there is another constructor called ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ZStream.fromIterator"})})," that creates a stream from an iterator which may throw an exception."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromIteratorZIO"})," \u2014 If we have an effectful Iterator that may throw Exception, we can use ",(0,t.jsx)(n.code,{children:"fromIteratorZIO"})," to convert that to the ZIO Stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import scala.io.Source\nval lines: ZStream[Any, Throwable, String] = \n  ZStream.fromIteratorZIO(ZIO.attempt(Source.fromFile("file.txt").getLines()))\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using this method is not good for resourceful effects like above, so it's better to rewrite that using ",(0,t.jsx)(n.code,{children:"ZStream.fromIteratorScoped"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromIteratorScoped"})," \u2014 Using this constructor we can convert a scoped iterator to ZIO Stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val lines: ZStream[Any, Throwable, String] = \n  ZStream.fromIteratorScoped(\n    ZIO.fromAutoCloseable(\n      ZIO.attempt(scala.io.Source.fromFile("file.txt"))\n    ).map(_.getLines())\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromJavaIterator"})," \u2014 It is the Java version of these constructors which create a stream from Java iterator that may throw an exception. We can convert any Java collection to an iterator and then lift them to the ZIO Stream."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, to convert the Java Stream to the ZIO Stream, ",(0,t.jsx)(n.code,{children:"ZStream"})," has a ",(0,t.jsx)(n.code,{children:"fromJavaStream"})," constructor which convert the Java Stream to the Java Iterator and then convert that to the ZIO Stream using ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaIterator"})," constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"def fromJavaStream[A](stream: => java.util.stream.Stream[A]): ZStream[Any, Throwable, A] =\n  ZStream.fromJavaIterator(stream.iterator())\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, ",(0,t.jsx)(n.code,{children:"ZStream"})," has ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaIteratorSucceed"}),", ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaIteratorZIO"})," and ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaIteratorScoped"})," constructors."]}),"\n",(0,t.jsx)(n.h2,{id:"from-iterables",children:"From Iterables"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromIterable"})," \u2014 We can create a stream from ",(0,t.jsx)(n.code,{children:"Iterable"})," collection of values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val list = ZStream.fromIterable(List(1, 2, 3))\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromIterableZIO"})," \u2014 If we have an effect producing a value of type ",(0,t.jsx)(n.code,{children:"Iterable"})," we can use ",(0,t.jsx)(n.code,{children:"fromIterableZIO"})," constructor to create a stream of that effect."]}),"\n",(0,t.jsxs)(n.p,{children:["Assume we have a database that returns a list of users using ",(0,t.jsx)(n.code,{children:"Task"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait Database {\n  def getUsers: Task[List[User]]\n}\n\nobject Database {\n  def getUsers: ZIO[Database, Throwable, List[User]] = \n    ZIO.serviceWithZIO[Database](_.getUsers)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As this operation is effectful, we can use ",(0,t.jsx)(n.code,{children:"ZStream.fromIterableZIO"})," to convert the result to the ",(0,t.jsx)(n.code,{children:"ZStream"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val users: ZStream[Database, Throwable, User] = \n  ZStream.fromIterableZIO(Database.getUsers)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from-repetition",children:"From Repetition"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.repeat"})," \u2014 Repeats the provided value infinitely:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val repeatZero: ZStream[Any, Nothing, Int] = ZStream.repeat(0)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.repeatWith"})," \u2014 This is another variant of ",(0,t.jsx)(n.code,{children:"repeat"}),", which repeats according to the provided schedule. For example, the following stream produce zero value every second:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.Clock._\nimport zio.Duration._\nimport zio.Random._\nimport zio.Schedule\nval repeatZeroEverySecond: ZStream[Any, Nothing, Int] = \n  ZStream.repeatWithSchedule(0, Schedule.spaced(1.seconds))\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.repeatZIO"})," \u2014 Assume we have an effectful API, and we need to call that API and create a stream from the result of that. We can create a stream from that effect that repeats forever."]}),"\n",(0,t.jsx)(n.p,{children:"Let's see an example of creating a stream of random numbers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val randomInts: ZStream[Any, Nothing, Int] =\n  ZStream.repeatZIO(Random.nextInt)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.repeatZIOOption"})," \u2014 We can repeatedly evaluate the given effect and terminate the stream based on some conditions."]}),"\n",(0,t.jsx)(n.p,{children:'Let\'s create a stream repeatedly from user inputs until user enter "EOF" string:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val userInputs: ZStream[Any, IOException, String] = \n  ZStream.repeatZIOOption(\n    Console.readLine.mapError(Option(_)).flatMap {\n      case "EOF" => ZIO.fail[Option[IOException]](None)\n      case o     => ZIO.succeed(o)\n    }\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here is another interesting example of using ",(0,t.jsx)(n.code,{children:"repeatZIOOption"}),"; In this example, we are draining an ",(0,t.jsx)(n.code,{children:"Iterator"})," to create a stream of that iterator:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"def drainIterator[A](it: Iterator[A]): ZStream[Any, Throwable, A] =\n  ZStream.repeatZIOOption {\n    ZIO.attempt(it.hasNext).mapError(Some(_)).flatMap { hasNext =>\n      if (hasNext) ZIO.attempt(it.next()).mapError(Some(_))\n      else ZIO.fail(None)\n    }\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.tick"})," \u2014  A stream that emits Unit values spaced by the specified duration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val stream: ZStream[Any, Nothing, Unit] = \n  ZStream.tick(1.seconds)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There are some other variant of repetition API like ",(0,t.jsx)(n.code,{children:"repeatZIOWith"}),", ",(0,t.jsx)(n.code,{children:"repeatZIOOption"}),", ",(0,t.jsx)(n.code,{children:"repeatZIOChunk"})," and ",(0,t.jsx)(n.code,{children:"repeatZIOChunkOption"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"from-unfoldingpagination",children:"From Unfolding/Pagination"}),"\n",(0,t.jsxs)(n.p,{children:["In functional programming, ",(0,t.jsx)(n.code,{children:"unfold"})," is dual to ",(0,t.jsx)(n.code,{children:"fold"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"fold"})," we can process a data structure and build a return value. For example, we can process a ",(0,t.jsx)(n.code,{children:"List[Int]"})," and return the sum of all its elements."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"unfold"})," represents an operation that takes an initial value and generates a recursive data structure, one-piece element at a time by using a given state function. For example, we can create a natural number by using ",(0,t.jsx)(n.code,{children:"one"})," as the initial element and the ",(0,t.jsx)(n.code,{children:"inc"})," function as the state function."]}),"\n",(0,t.jsx)(n.h3,{id:"unfold",children:"Unfold"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.unfold"})," \u2014 ",(0,t.jsx)(n.code,{children:"ZStream"})," has ",(0,t.jsx)(n.code,{children:"unfold"})," function, which is defined as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object ZStream {\n  def unfold[S, A](s: S)(f: S => Option[(A, S)]): ZStream[Any, Nothing, A] = ???\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"s"})," \u2014 An initial state value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"f"})," \u2014 A state function ",(0,t.jsx)(n.code,{children:"f"})," that will be applied to the initial state ",(0,t.jsx)(n.code,{children:"s"}),". If the result of this application is ",(0,t.jsx)(n.code,{children:"None"})," the stream will end, otherwise the result is ",(0,t.jsx)(n.code,{children:"Some"}),", so the next element in the stream would be ",(0,t.jsx)(n.code,{children:"A"})," and the current state of transformation changed to the new ",(0,t.jsx)(n.code,{children:"S"}),", this new state is the basis of the next unfold process."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, we can a stream of natural numbers using ",(0,t.jsx)(n.code,{children:"ZStream.unfold"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val nats: ZStream[Any, Nothing, Int] = ZStream.unfold(1)(n => Some((n, n + 1)))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can write ",(0,t.jsx)(n.code,{children:"countdown"})," function using ",(0,t.jsx)(n.code,{children:"unfold"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"def countdown(n: Int) = ZStream.unfold(n) {\n  case 0 => None\n  case s => Some((s, s - 1))\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Running this function with an input value of 3 returns a ",(0,t.jsx)(n.code,{children:"ZStream"})," which contains 3, 2, 1 values."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.unfoldZIO"})," \u2014 ",(0,t.jsx)(n.code,{children:"unfoldZIO"})," is an effectful version of ",(0,t.jsx)(n.code,{children:"unfold"}),". It helps us to perform ",(0,t.jsx)(n.em,{children:"effectful state transformation"})," when doing unfold operation."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's write a stream of lines of input from a user until the user enters the ",(0,t.jsx)(n.code,{children:"exit"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val inputs: ZStream[Any, IOException, String] = ZStream.unfoldZIO(()) { _ =>\n  Console.readLine.map {\n    case "exit"  => None\n    case i => Some((i, ()))\n  } \n}   \n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ZStream.unfoldChunk"}),", and ",(0,t.jsx)(n.code,{children:"ZStream.unfoldChunkZIO"})," are other variants of ",(0,t.jsx)(n.code,{children:"unfold"})," operations but for ",(0,t.jsx)(n.code,{children:"Chunk"})," data type."]}),"\n",(0,t.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.paginate"})," \u2014 This is similar to ",(0,t.jsx)(n.code,{children:"unfold"}),", but allows the emission of values to end one step further. For example the following stream emits ",(0,t.jsx)(n.code,{children:"0, 1, 2, 3"})," elements:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val stream = ZStream.paginate(0) { s =>\n  s -> (if (s < 3) Some(s + 1) else None)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.code,{children:"unfold"})," API, ",(0,t.jsx)(n.code,{children:"ZStream"})," has various other forms as well as ",(0,t.jsx)(n.code,{children:"ZStream.paginateZIO"}),", ",(0,t.jsx)(n.code,{children:"ZStream.paginateChunk"})," and ",(0,t.jsx)(n.code,{children:"ZStream.paginateChunkZIO"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"unfolding-vs-pagination",children:"Unfolding vs. Pagination"}),"\n",(0,t.jsxs)(n.p,{children:["One might ask what is the difference between ",(0,t.jsx)(n.code,{children:"unfold"})," and ",(0,t.jsx)(n.code,{children:"paginate"})," combinators? When we should prefer one over another? So, let's find the answer to this question by doing another example."]}),"\n",(0,t.jsxs)(n.p,{children:["Assume we have a paginated API that returns an enormous amount of data in a paginated fashion. When we call that API, it returns a data type ",(0,t.jsx)(n.code,{children:"ResultPage"})," which contains the first-page result and, it also contains a flag indicating whether that result is the last one, or we have more data on the next page:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"case class PageResult(results: Chunk[RowData], isLast: Boolean)\n\ndef listPaginated(pageNumber: Int): ZIO[Any, Throwable, PageResult] = ZIO.fail(???)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We want to convert this API to a stream of ",(0,t.jsx)(n.code,{children:"RowData"})," events. For the first attempt, we might think we can do it by using ",(0,t.jsx)(n.code,{children:"unfold"})," operation as below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val firstAttempt: ZStream[Any, Throwable, RowData] = \n  ZStream.unfoldChunkZIO(0) { pageNumber =>\n    for {\n      page <- listPaginated(pageNumber)\n    } yield\n      if (page.isLast) None\n      else Some((page.results, pageNumber + 1))\n  }\n"})}),"\n",(0,t.jsx)(n.p,{children:"But it doesn't work properly; it doesn't include the last page result. So let's do a trick and to perform another API call to include the last page results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val secondAttempt: ZStream[Any, Throwable, RowData] = \n  ZStream.unfoldChunkZIO(Option[Int](0)) {\n    case None => ZIO.none // We already hit the last page\n    case Some(pageNumber) => // We did not hit the last page yet\n     for {\n        page <- listPaginated(pageNumber)\n      } yield Some(page.results, if (page.isLast) None else Some(pageNumber + 1))\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This works and contains all the results of returned pages. It works but as we saw, ",(0,t.jsx)(n.code,{children:"unfold"})," is not friendliness to retrieve data from paginated APIs."]}),"\n",(0,t.jsxs)(n.p,{children:["We need to do some hacks and extra works to include results from the last page. This is where ",(0,t.jsx)(n.code,{children:"ZStream.paginate"})," operation comes to play, it helps us to convert a paginated API to ZIO stream in a more ergonomic way. Let's rewrite this solution by using ",(0,t.jsx)(n.code,{children:"paginate"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val finalAttempt: ZStream[Any, Throwable, RowData] = \n  ZStream.paginateChunkZIO(0) { pageNumber =>\n    for {\n      page <- listPaginated(pageNumber)\n    } yield page.results -> (if (!page.isLast) Some(pageNumber + 1) else None)\n  }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from-wrapped-streams",children:"From Wrapped Streams"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes we have an effect that contains a ",(0,t.jsx)(n.code,{children:"ZStream"}),", we can unwrap the embedded stream and produce a stream from those effects. If the stream is wrapped with the ",(0,t.jsx)(n.code,{children:"ZIO"})," effect, we use ",(0,t.jsx)(n.code,{children:"unwrap"}),", and if it is wrapped with scoped ",(0,t.jsx)(n.code,{children:"ZIO"})," we use ",(0,t.jsx)(n.code,{children:"unwrapScoped"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val wrappedWithZIO: UIO[ZStream[Any, Nothing, Int]] = \n  ZIO.succeed(ZStream(1, 2, 3))\nval s1: ZStream[Any, Nothing, Int] = \n  ZStream.unwrap(wrappedWithZIO)\n\nval wrappedWithZIOScoped = ZIO.succeed(ZStream(1, 2, 3))\nval s2: ZStream[Any, Nothing, Int] = \n  ZStream.unwrapScoped(wrappedWithZIOScoped)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from-java-io",children:"From Java IO"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromPath"})," \u2014 Create ZIO Stream from a file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import java.nio.file.Paths\nval file: ZStream[Any, Throwable, Byte] = \n  ZStream.fromPath(Paths.get("file.txt"))\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromInputStream"})," \u2014 Creates a stream from a ",(0,t.jsx)(n.code,{children:"java.io.InputStream"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val stream: ZStream[Any, IOException, Byte] = \n  ZStream.fromInputStream(new FileInputStream("file.txt"))\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the InputStream will not be explicitly closed after it is exhausted. Use ",(0,t.jsx)(n.code,{children:"ZStream.fromInputStreamZIO"}),", or ",(0,t.jsx)(n.code,{children:"ZStream.fromInputStreamScoped"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromInputStreamZIO"})," \u2014 Creates a stream from a ",(0,t.jsx)(n.code,{children:"java.io.InputStream"}),". Ensures that the InputStream is closed after it is exhausted:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val stream: ZStream[Any, IOException, Byte] = \n  ZStream.fromInputStreamZIO(\n    ZIO.attempt(new FileInputStream("file.txt"))\n      .refineToOrDie[IOException]\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromInputStreamScoped"})," \u2014 Creates a stream from a scoped ",(0,t.jsx)(n.code,{children:"java.io.InputStream"})," value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val scoped: ZIO[Scope, IOException, FileInputStream] =\n  ZIO.fromAutoCloseable(\n    ZIO.attempt(new FileInputStream("file.txt"))\n  ).refineToOrDie[IOException]\n\nval stream: ZStream[Any, IOException, Byte] = \n  ZStream.fromInputStreamScoped(scoped)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromResource"})," \u2014 Create a stream from resource file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val stream: ZStream[Any, IOException, Byte] =\n  ZStream.fromResource("file.txt")\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ZStream.fromReader"})," \u2014 Creates a stream from a ",(0,t.jsx)(n.code,{children:"java.io.Reader"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val stream: ZStream[Any, IOException, Char] = \n   ZStream.fromReader(new FileReader("file.txt"))\n'})}),"\n",(0,t.jsxs)(n.p,{children:["ZIO Stream also has ",(0,t.jsx)(n.code,{children:"ZStream.fromReaderZIO"})," and ",(0,t.jsx)(n.code,{children:"ZStream.fromReaderScoped"})," variants."]}),"\n",(0,t.jsx)(n.h2,{id:"from-java-stream",children:"From Java Stream"}),"\n",(0,t.jsxs)(n.p,{children:["We can use ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaStreamTotal"})," to convert a Java Stream to ZIO Stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val stream: ZStream[Any, Throwable, Int] = \n  ZStream.fromJavaStream(java.util.stream.Stream.of(1, 2, 3))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["ZIO Stream also has ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaStream"}),", ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaStreamZIO"})," and ",(0,t.jsx)(n.code,{children:"ZStream.fromJavaStreamScoped"})," variants."]}),"\n",(0,t.jsx)(n.h2,{id:"from-queue-and-hub",children:"From Queue and Hub"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Queue"})," and ",(0,t.jsx)(n.code,{children:"Hub"})," are two asynchronous messaging data types in ZIO that can be converted into the ZIO Stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object ZStream {\n  def fromQueue[O](\n    queue: Dequeue[O],\n    maxChunkSize: Int = DefaultChunkSize\n  ): ZStream[Any, Nothing, O] = ???\n\n  def fromHub[A](\n    hub: Hub[A]\n  ): ZStream[Any, Nothing, A] = ???\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If they contain ",(0,t.jsx)(n.code,{children:"Chunk"})," of elements, we can use ",(0,t.jsx)(n.code,{children:"ZStream.fromChunk..."})," constructors to create a stream from those elements (e.g. ",(0,t.jsx)(n.code,{children:"ZStream.fromChunkQueue"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"for {\n  promise <- Promise.make[Nothing, Unit]\n  hub     <- Hub.unbounded[Chunk[Int]]\n  scoped = ZStream.fromChunkHubScoped(hub).tap(_ => promise.succeed(()))\n  stream  = ZStream.unwrapScoped(scoped)\n  fiber   <- stream.foreach(printLine(_)).fork\n  _       <- promise.await\n  _       <- hub.publish(Chunk(1, 2, 3))\n  _       <- fiber.join\n} yield ()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Also, If we need to shutdown a ",(0,t.jsx)(n.code,{children:"Queue"})," or ",(0,t.jsx)(n.code,{children:"Hub"}),", once the stream is closed, we should use ",(0,t.jsx)(n.code,{children:"ZStream.from..Shutdown"})," constructors (e.g. ",(0,t.jsx)(n.code,{children:"ZStream.fromQueueWithShutdown"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Also, we can lift a ",(0,t.jsx)(n.code,{children:"TQueue"})," to the ZIO Stream:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"for {\n  q <- STM.atomically(TQueue.unbounded[Int])\n  stream = ZStream.fromTQueue(q)\n  fiber <- stream.foreach(printLine(_)).fork\n  _     <- STM.atomically(q.offer(1))\n  _     <- STM.atomically(q.offer(2))\n  _     <- fiber.join\n} yield ()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from-schedule",children:"From Schedule"}),"\n",(0,t.jsxs)(n.p,{children:["We can create a stream from a ",(0,t.jsx)(n.code,{children:"Schedule"})," that does not require any further input. The stream will emit an element for each value output from the schedule, continuing for as long as the schedule continues:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val stream: ZStream[Any, Nothing, Long] =\n  ZStream.fromSchedule(Schedule.spaced(1.second) >>> Schedule.recurs(10))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var r=a(96540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);