"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[30247],{14205:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>t,contentTitle:()=>s,default:()=>c,frontMatter:()=>g,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"zio-logging/slf4j2-bridge","title":"SLF4J v2 bridge","description":"It is possible to use zio-logging for SLF4J loggers, usually third-party non-ZIO libraries. To do so, import  the zio-logging-slf4j2-bridge module for SLF4J v2 (using JDK9+ module system (JPMS))","source":"@site/docs/zio-logging/slf4j2-bridge.md","sourceDirName":"zio-logging","slug":"/zio-logging/slf4j2-bridge","permalink":"/zio-logging/slf4j2-bridge","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/slf4j2-bridge.md","tags":[],"version":"current","frontMatter":{"id":"slf4j2-bridge","title":"SLF4J v2 bridge"},"sidebar":"ecosystem-sidebar","previous":{"title":"SLF4J v1","permalink":"/zio-logging/slf4j1"},"next":{"title":"SLF4J v1 bridge","permalink":"/zio-logging/slf4j1-bridge"}}');var l=n(74848),r=n(28453);const g={id:"slf4j2-bridge",title:"SLF4J v2 bridge"},s=void 0,t={},a=[{value:"Examples",id:"examples",level:2},{value:"SLF4J bridge with JSON console logger",id:"slf4j-bridge-with-json-console-logger",level:3}];function d(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(o.p,{children:["It is possible to use ",(0,l.jsx)(o.code,{children:"zio-logging"})," for SLF4J loggers, usually third-party non-ZIO libraries. To do so, import  the ",(0,l.jsx)(o.code,{children:"zio-logging-slf4j2-bridge"})," module for ",(0,l.jsx)(o.a,{href:"https://www.slf4j.org/faq.html#changesInVersion200",children:"SLF4J v2"})," (using JDK9+ module system (",(0,l.jsx)(o.a,{href:"http://openjdk.java.net/projects/jigsaw/spec/",children:"JPMS"}),"))"]}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-logging-slf4j2-bridge" % "2.5.0"\n'})}),"\n",(0,l.jsxs)(o.p,{children:["and use one of the ",(0,l.jsx)(o.code,{children:"Slf4jBridge"})," layers when setting up logging:"]}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:"import zio.logging.slf4j.Slf4jBridge\n\nprogram.provideCustom(Slf4jBridge.init())\n"})}),"\n",(0,l.jsxs)(o.p,{children:[(0,l.jsx)(o.code,{children:"Slf4jBridge"})," layers:"]}),"\n",(0,l.jsxs)(o.ul,{children:["\n",(0,l.jsxs)(o.li,{children:[(0,l.jsx)(o.code,{children:"Slf4jBridge.init(configPath: NonEmptyChunk[String] = logFilterConfigPath)"})," - setup with ",(0,l.jsx)(o.code,{children:"LogFilter"})," from ",(0,l.jsx)(o.a,{href:"/zio-logging/log-filter#configuration",children:"filter configuration"}),", default configuration path: ",(0,l.jsx)(o.code,{children:"logger.filter"}),", default ",(0,l.jsx)(o.code,{children:"LogLevel"})," is ",(0,l.jsx)(o.code,{children:"INFO"})]}),"\n",(0,l.jsxs)(o.li,{children:[(0,l.jsx)(o.code,{children:"Slf4jBridge.init(filter: LogFilter[Any])"})," - setup with given ",(0,l.jsx)(o.code,{children:"LogFilter"})]}),"\n",(0,l.jsxs)(o.li,{children:[(0,l.jsx)(o.code,{children:"Slf4jBridge.initialize"})," - setup without filtering"]}),"\n"]}),"\n",(0,l.jsxs)(o.p,{children:["SLF4J v2 ",(0,l.jsx)(o.a,{href:"https://www.slf4j.org/manual.html#fluent",children:"key-value pairs"})," are propagated like ZIO log annotations."]}),"\n",(0,l.jsxs)(o.p,{children:["Need for log filtering in slf4j bridge: libraries with slf4j loggers, may have conditional logic for logging,\nwhich using functions like ",(0,l.jsx)(o.a,{href:"https://github.com/qos-ch/slf4j/blob/master/slf4j-api/src/main/java/org/slf4j/Logger.java#L170",children:"org.slf4j.Logger.isTraceEnabled()"}),".\nlogging parts may contain message and log parameters construction, which may be expensive and degrade performance of application."]}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(o.p,{children:["SLF4J logger name is stored in log annotation with key ",(0,l.jsx)(o.code,{children:"logger_name"})," (",(0,l.jsx)(o.code,{children:"zio.logging.loggerNameAnnotationKey"}),"), following log format"]}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:"import zio.logging.slf4j.Slf4jBridge\nimport zio.logging.LoggerNameExtractor\n\nval loggerName = LoggerNameExtractor.loggerNameAnnotationOrTrace\nval loggerNameFormat = loggerName.toLogFormat()\n"})}),"\n",(0,l.jsx)(o.p,{children:"may be used to get logger name from log annotation or ZIO Trace."}),"\n",(0,l.jsx)(o.p,{children:"This logger name extractor is used by default in log filter, which applying log filtering by defined logger name and level:"}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:'val logFilterConfig = LogFilter.LogLevelByNameConfig(\n  LogLevel.Info,\n  "zio.logging.slf4j" -> LogLevel.Debug,\n  "SLF4J-LOGGER"      -> LogLevel.Warning\n)\n\nval logFilter: LogFilter[String] = logFilterConfig.toFilter\n'})}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsx)(o.p,{children:"SLF4J bridge with custom logger can be setup:"}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:"import zio.logging.slf4j.Slf4jBridge\nimport zio.logging.consoleJsonLogger\n\nval logger = Runtime.removeDefaultLoggers >>> consoleJsonLogger() >+> Slf4jBridge.init()\n"})}),"\n",(0,l.jsx)("br",{}),"\n",(0,l.jsxs)(o.p,{children:[(0,l.jsx)(o.strong,{children:"NOTE:"})," You should either use ",(0,l.jsx)(o.code,{children:"zio-logging-slf4j"})," to send all ZIO logs to an SLF4j provider (such as logback, log4j etc) OR ",(0,l.jsx)(o.code,{children:"zio-logging-slf4j-bridge"})," to send all SLF4j logs to\nZIO logging. Enabling both causes circular logging and makes no sense."]}),"\n",(0,l.jsx)(o.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(o.p,{children:["You can find the source code ",(0,l.jsx)(o.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,l.jsx)(o.h3,{id:"slf4j-bridge-with-json-console-logger",children:"SLF4J bridge with JSON console logger"}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.{ ConsoleLoggerConfig, LogAnnotation, LogFilter, LogFormat, LoggerNameExtractor, consoleJsonLogger }\nimport zio.{ ExitCode, LogLevel, Runtime, Scope, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer }\n\nimport java.util.UUID\n\nobject Slf4jBridgeExampleApp extends ZIOAppDefault {\n\n  private val slf4jLogger = org.slf4j.LoggerFactory.getLogger("SLF4J-LOGGER")\n\n  private val logFilterConfig = LogFilter.LogLevelByNameConfig(\n    LogLevel.Info,\n    "zio.logging.slf4j" -> LogLevel.Debug,\n    "SLF4J-LOGGER"      -> LogLevel.Warning\n  )\n\n  private val logFormat = LogFormat.label(\n    "name",\n    LoggerNameExtractor.loggerNameAnnotationOrTrace.toLogFormat()\n  ) + LogFormat.allAnnotations(Set(zio.logging.loggerNameAnnotationKey)) + LogFormat.default\n\n  private val loggerConfig = ConsoleLoggerConfig(logFormat, logFilterConfig)\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleJsonLogger(loggerConfig) >+> Slf4jBridge.init(loggerConfig.toFilter)\n\n  private val uuids = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _ <- ZIO.logInfo("Start")\n      _ <- ZIO.foreachPar(uuids) { u =>\n        ZIO.succeed(slf4jLogger.info("Test {}!", "INFO")) *> ZIO.succeed(\n          slf4jLogger.atWarn().addArgument("WARNING").log("Test {}!")\n        ) @@ LogAnnotation.UserId(\n          u.toString\n        )\n      } @@ LogAnnotation.TraceId(UUID.randomUUID())\n      _ <- ZIO.logDebug("Done")\n    } yield ExitCode.success\n\n}\n'})}),"\n",(0,l.jsx)(o.p,{children:"Expected Console Output:"}),"\n",(0,l.jsx)(o.pre,{children:(0,l.jsx)(o.code,{children:'{"name":"zio.logging.example.Slf4jBridgeExampleApp","timestamp":"2024-05-28T08:05:48.056029+02:00","level":"INFO","thread":"zio-fiber-735317063","message":"Start"}\n{"name":"SLF4J-LOGGER","trace_id":"416f3886-717c-4359-9f6e-c260e49fd158","user_id":"580376aa-f851-43a2-8b17-9456ce005e93","timestamp":"2024-05-28T08:05:48.065133+02:00","level":"WARN","thread":"zio-fiber-1749629949","message":"Test WARNING!"}\n{"name":"SLF4J-LOGGER","trace_id":"416f3886-717c-4359-9f6e-c260e49fd158","user_id":"76d49e0d-7c28-47fd-b5a1-d05afb487cfe","timestamp":"2024-05-28T08:05:48.065174+02:00","level":"WARN","thread":"zio-fiber-697454589","message":"Test WARNING!"}\n{"name":"zio.logging.example.Slf4jBridgeExampleApp","timestamp":"2024-05-28T08:05:48.068127+02:00","level":"DEBUG","thread":"zio-fiber-735317063","message":"Done"}\n'})})]})}function c(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,l.jsx)(o,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>g,x:()=>s});var i=n(96540);const l={},r=i.createContext(l);function g(e){const o=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:g(e.components),i.createElement(r.Provider,{value:o},e.children)}}}]);