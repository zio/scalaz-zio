"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[45642],{28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var t=o(96540);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}},39978:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"zio-schema/derivations/codecs/thrift","title":"Apache Thrift Codecs","description":"Introduction","source":"@site/docs/zio-schema/derivations/codecs/thrift.md","sourceDirName":"zio-schema/derivations/codecs","slug":"/zio-schema/derivations/codecs/thrift","permalink":"/zio-schema/derivations/codecs/thrift","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/thrift.md","tags":[],"version":"current","frontMatter":{"id":"thrift","title":"Apache Thrift Codecs","sidebar_label":"Apache Thrift"},"sidebar":"ecosystem-sidebar","previous":{"title":"Apache Avro","permalink":"/zio-schema/derivations/codecs/avro"},"next":{"title":"BSON","permalink":"/zio-schema/derivations/codecs/bson"}}');var i=o(74848),c=o(28453);const r={id:"thrift",title:"Apache Thrift Codecs",sidebar_label:"Apache Thrift"},s=void 0,a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"BinaryCodec",id:"binarycodec",level:2},{value:"Example",id:"example",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Apache Thrift is an open-source framework that allows seamless communication and data sharing between different programming languages and platforms. In this section, we will explore how to derive Apache Thrift codecs from a ZIO Schema."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["To derive Apache Thrift codecs from a ZIO Schema, we need to add the following dependency to our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema-thrift" % "1.6.2"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"binarycodec",children:"BinaryCodec"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ThriftCodec"})," object inside the ",(0,i.jsx)(n.code,{children:"zio.schema.codec"})," package provides the ",(0,i.jsx)(n.code,{children:"thriftCodec"})," operator which allows us to derive Protobuf codecs from a ZIO Schema:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object ThriftCodec {\n  implicit def thriftCodec[A](implicit schema: Schema[A]): BinaryCodec[A] = ???\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Let's try an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema.codec._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    DeriveSchema.gen\n    \n  implicit val thriftCodec: BinaryCodec[Person] =\n    ThriftCodec.thriftCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Apache Thrift Codec Example:")\n    person: Person = Person("John", 42)\n    encoded: Chunk[Byte] = Person.thriftCodec.encode(person)\n    _ <- ZIO.debug(s"person object encoded to Thrift\'s binary format: ${toHex(encoded)}")\n    decoded <- ZIO.fromEither(Person.thriftCodec.decode(encoded))\n    _ <- ZIO.debug(s"Thrift object decoded to Person class: $decoded")\n  } yield ()\n\n  def toHex(bytes: Chunk[Byte]): String =\n    bytes.map("%02x".format(_)).mkString(" ")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here is the output of running the above program:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"Apache Thrift Codec Example: \nperson object encoded to Thrift's binary format: 0b 00 01 00 00 00 04 4a 6f 68 6e 08 00 02 00 00 00 2a 00\nThrift object decoded to Person class: Person(John,42)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);