"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[63572],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},76824:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/services/system","title":"System","description":"System service contains several useful functions related to system environments and properties. Both of system environments and system properties are key/value pairs. They are used to pass user-defined information to our application.","source":"@site/docs/reference/services/system.md","sourceDirName":"reference/services","slug":"/reference/services/system","permalink":"/reference/services/system","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/services/system.md","tags":[],"version":"current","frontMatter":{"id":"system","title":"System"},"sidebar":"reference-sidebar","previous":{"title":"Random","permalink":"/reference/services/random"},"next":{"title":"Programming Paradigms in ZIO","permalink":"/reference/architecture/programming-paradigms-in-zio"}}');var t=s(74848),i=s(28453);const o={id:"system",title:"System"},a=void 0,l={},c=[{value:"System Environment",id:"system-environment",level:2},{value:"System Property",id:"system-property",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["System service contains several useful functions related to system environments and properties. Both of ",(0,t.jsx)(n.strong,{children:"system environments"})," and ",(0,t.jsx)(n.strong,{children:"system properties"})," are key/value pairs. They are used to pass user-defined information to our application."]}),"\n",(0,t.jsx)(n.p,{children:"Environment variables are global operating system level variables available to all applications running on the same machine, while properties are application-level variables provided to our application."}),"\n",(0,t.jsx)(n.h2,{id:"system-environment",children:"System Environment"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"env"})," function retrieves the value of an environment variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nfor {\n  user <- System.env("USER")\n  _    <- user match {\n            case Some(value) => \n              Console.printLine(s"The USER env is: $value")\n            case None        => \n              Console.printLine("Oops! The USER env is not set")\n          }\n} yield ()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"system-property",children:"System Property"}),"\n",(0,t.jsxs)(n.p,{children:["Also, the System service has a ",(0,t.jsx)(n.code,{children:"property"})," function to retrieve the value of a system property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nfor {\n  user <- System.property("LOG_LEVEL")\n  _    <- user match {\n           case Some(value) => \n             Console.printLine(s"The LOG_LEVEL property is: $value")\n           case None => \n             Console.printLine("Oops! The LOG_LEVEL property is not set")\n         }\n} yield ()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,t.jsxs)(n.p,{children:["With the ",(0,t.jsx)(n.code,{children:"lineSeparator"})," method, we can determine the line separator for the underlying platform:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'System.lineSeparator\n// res2: String = """\n// """\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);