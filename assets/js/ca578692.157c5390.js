"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[74928],{80225:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"reference/resource/managed","title":"Managed","description":"Managed[E, A] is a type alias for ZManaged[Any, E, A], which represents a managed resource that has no requirements, and may fail with an E, or succeed with an A.","source":"@site/versioned_docs/version-1.0.18/reference/resource/managed.md","sourceDirName":"reference/resource","slug":"/reference/resource/managed","permalink":"/1.0.18/reference/resource/managed","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/resource/managed.md","tags":[],"version":"1.0.18","frontMatter":{"id":"managed","title":"Managed"},"sidebar":"overview_sidebar","previous":{"title":"ZManaged","permalink":"/1.0.18/reference/resource/zmanaged"},"next":{"title":"TaskManaged","permalink":"/1.0.18/reference/resource/task-managed"}}');var r=a(74848),i=a(28453);const d={id:"managed",title:"Managed"},o=void 0,c={},t=[{value:"Creating a Managed",id:"creating-a-managed",level:2},{value:"Managed with ZIO environment",id:"managed-with-zio-environment",level:2},{value:"Combining Managed",id:"combining-managed",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Managed[E, A]"})," is a type alias for ",(0,r.jsx)(n.code,{children:"ZManaged[Any, E, A]"}),", which represents a managed resource that has no requirements, and may fail with an ",(0,r.jsx)(n.code,{children:"E"}),", or succeed with an ",(0,r.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Managed"})," type alias is defined as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"type Managed[+E, +A] = ZManaged[Any, E, A]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Managed"})," is a data structure that encapsulates the acquisition and the release of a resource, which may be used by invoking the ",(0,r.jsx)(n.code,{children:"use"})," method of the resource. The resource will be automatically acquired before the resource is used, and automatically released after the resource is used."]}),"\n",(0,r.jsxs)(n.p,{children:["Resources do not survive the scope of ",(0,r.jsx)(n.code,{children:"use"}),", meaning that if you attempt to capture the resource, leak it from ",(0,r.jsx)(n.code,{children:"use"}),", and then use it after the resource has been consumed, the resource will not be valid anymore and may fail with some checked error, as per the type of the functions provided by the resource."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\ndef doSomething(queue: Queue[Int]): UIO[Unit] = IO.unit\n\nval managedResource = Managed.make(Queue.unbounded[Int])(_.shutdown)\nval usedResource: UIO[Unit] = managedResource.use { queue => doSomething(queue) }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the queue will be created when ",(0,r.jsx)(n.code,{children:"use"})," is called, and ",(0,r.jsx)(n.code,{children:"shutdown"})," will be called when ",(0,r.jsx)(n.code,{children:"doSomething"})," completes."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-managed",children:"Creating a Managed"}),"\n",(0,r.jsxs)(n.p,{children:["As shown in the previous example, a ",(0,r.jsx)(n.code,{children:"Managed"})," can be created by passing an ",(0,r.jsx)(n.code,{children:"acquire"})," function and a ",(0,r.jsx)(n.code,{children:"release"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"It can also be created from an effect. In this case the release function will do nothing."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\ndef acquire: IO[Throwable, Int] = IO.effect(???)\n\nval managedFromEffect: Managed[Throwable, Int] = Managed.fromEffect(acquire)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can create a ",(0,r.jsx)(n.code,{children:"Managed"})," from a pure value as well."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\nval managedFromValue: Managed[Nothing, Int] = Managed.succeed(3)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"managed-with-zio-environment",children:"Managed with ZIO environment"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Managed[E, A]"})," is actually an alias for ",(0,r.jsx)(n.code,{children:"ZManaged[Any, E, A]"}),". If you'd like your ",(0,r.jsx)(n.code,{children:"acquire"}),", ",(0,r.jsx)(n.code,{children:"release"})," or ",(0,r.jsx)(n.code,{children:"use"})," functions to require an environment R, just use ",(0,r.jsx)(n.code,{children:"ZManaged"})," instead of ",(0,r.jsx)(n.code,{children:"Managed"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.console._\n\nval zManagedResource: ZManaged[Console, Nothing, Unit] = ZManaged.make(console.putStrLn("acquiring").orDie)(_ => console.putStrLn("releasing").orDie)\nval zUsedResource: URIO[Console, Unit] = zManagedResource.use { _ => console.putStrLn("running").orDie }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"combining-managed",children:"Combining Managed"}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to combine multiple ",(0,r.jsx)(n.code,{children:"Managed"})," using ",(0,r.jsx)(n.code,{children:"flatMap"})," to obtain a single ",(0,r.jsx)(n.code,{children:"Managed"})," that will acquire and release all the resources."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'val managedQueue: Managed[Nothing, Queue[Int]] = Managed.make(Queue.unbounded[Int])(_.shutdown)\nval managedFile: Managed[IOException, File] = Managed.make(openFile("data.json"))(closeFile)\n\nval combined: Managed[IOException, (Queue[Int], File)] = for {\n    queue <- managedQueue\n    file  <- managedFile\n} yield (queue, file)\n\nval usedCombinedRes: IO[IOException, Unit] = combined.use { case (queue, file) => doSomething(queue, file) }\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>o});var s=a(96540);const r={},i=s.createContext(r);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);