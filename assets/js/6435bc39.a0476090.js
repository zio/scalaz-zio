"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2360],{76435:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"zio-connect/s3-connector","title":"S3 Connector","description":"Setup","source":"@site/docs/zio-connect/s3-connector.md","sourceDirName":"zio-connect","slug":"/zio-connect/s3-connector","permalink":"/zio-connect/s3-connector","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-connect/s3-connector.md","tags":[],"version":"current","frontMatter":{"id":"s3-connector","title":"S3 Connector"},"sidebar":"ecosystem-sidebar","previous":{"title":"File Connector","permalink":"/zio-connect/file-connector"},"next":{"title":"ZIO Constraintless","permalink":"/zio-constraintless/"}}');var s=n(74848),o=n(28453);const i={id:"s3-connector",title:"S3 Connector"},r=void 0,a={},l=[{value:"Setup",id:"setup",level:2},{value:"How to use it?",id:"how-to-use-it",level:2},{value:"Test / Stub",id:"test--stub",level:2},{value:"Operators &amp; Examples",id:"operators--examples",level:2},{value:"<code>copyObject</code>",id:"copyobject",level:2},{value:"<code>createBucket</code>",id:"createbucket",level:2},{value:"<code>deleteEmptyBucket</code>",id:"deleteemptybucket",level:2},{value:"<code>deleteObjects</code>",id:"deleteobjects",level:2},{value:"<code>existsBucket</code>",id:"existsbucket",level:2},{value:"<code>existsObject</code>",id:"existsobject",level:2},{value:"<code>getObject</code>",id:"getobject",level:2},{value:"<code>listBuckets</code>",id:"listbuckets",level:2},{value:"<code>listObjects</code>",id:"listobjects",level:2},{value:"<code>moveObject</code>",id:"moveobject",level:2},{value:"<code>putObject</code>",id:"putobject",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-connect-s3" % "0.4.4"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use-it",children:"How to use it?"}),"\n",(0,s.jsxs)(t.p,{children:["All available S3Connector combinators and operations are available in the package object ",(0,s.jsx)(t.code,{children:"zio.connect.s3"}),", you only need to import ",(0,s.jsx)(t.code,{children:"zio.connect.s3._"})]}),"\n",(0,s.jsxs)(t.p,{children:["First, you must configure the underlying S3 connection provided by ",(0,s.jsx)(t.code,{children:"zio-aws"})," you can read more about how to configure it ",(0,s.jsx)(t.a,{href:"https://zio.github.io/zio-aws/docs/overview/overview_config",children:"here"}),"\nIf you have default credentials in the system environment typically at ",(0,s.jsx)(t.code,{children:"~/.aws/credentials"})," or as env variables\nthe following configuration will likely work."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import zio._\nimport zio.connect.s3._\nimport zio.stream._\nimport zio.aws.core.config.AwsConfig\nimport zio.aws.netty.NettyHttpClient\n\nlazy val zioAwsConfig = NettyHttpClient.default >>> AwsConfig.default\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now let's create a bucket:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val bucketName = BucketName("this-very-charming-bucket-name") // BucketName is a zio prelude newtype of String\n\nval program1: ZIO[S3Connector, S3Exception, Unit] =\n  for {\n    _ <- ZStream(bucketName) >>> createBucket\n  } yield ()\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The way to understand this is to recognize that ",(0,s.jsx)(t.code,{children:"createBucket"})," is a ",(0,s.jsx)(t.code,{children:"ZSink"})," that expects elements of type ",(0,s.jsx)(t.code,{children:"BucketName"})," as its streamed input.\nIn this case we have a ",(0,s.jsx)(t.code,{children:"ZStream"})," with a single element of type ",(0,s.jsx)(t.code,{children:"BucketName"})," but we could have an arbitrary number of buckets and the code\nwould look and work virtually the same."]}),"\n",(0,s.jsx)(t.p,{children:"Okay, let's put some readable bytes into that bucket:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'val objectKey = ObjectKey("my-object") // ObjectKey is a zio prelude newtype of String\n\nval program2: ZIO[S3Connector, S3Exception, Unit] =\n  for {\n    content <- Random.nextString(100).map(_.getBytes).map(Chunk.fromArray)\n    _       <- ZStream.fromChunk(content) >>> putObject(bucketName, objectKey)\n  } yield ()\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here a stream of chunks of bytes are streamed into the ",(0,s.jsx)(t.code,{children:"putObject"})," sink. The sink takes two arguments, the bucket name and the object key to associate with the data\nbeing streamed in."]}),"\n",(0,s.jsx)(t.p,{children:"Let's list objects in the bucket:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"val program3: ZIO[S3Connector, S3Exception, Chunk[ObjectKey]] =\n  for {\n    keys <- listObjects(bucketName).runCollect\n  } yield keys\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"listObjects"})," is a ",(0,s.jsx)(t.code,{children:"ZStream"})," that emits elements of type ",(0,s.jsx)(t.code,{children:"ObjectKey"})," and we can use the ",(0,s.jsx)(t.code,{children:"runCollect"})," operator to collect\nall the elements into a ",(0,s.jsx)(t.code,{children:"Chunk"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Here's what it looks like to get an object put earlier:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"val program5: ZIO[S3Connector, Object, String] =\n  for {\n    content <- getObject(bucketName, objectKey) >>> ZPipeline.utf8Decode >>> ZSink.mkString\n  } yield content\n"})}),"\n",(0,s.jsx)(t.p,{children:"Finally, let's look at how to run one of these programs:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"def run = program1.provide(zioAwsConfig, S3.live, s3ConnectorLiveLayer)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You need to provide the configuration layer for ",(0,s.jsx)(t.code,{children:"zio-aws"}),", the ",(0,s.jsx)(t.code,{children:"S3"})," layer from ",(0,s.jsx)(t.code,{children:"zio-aws"})," and the ",(0,s.jsx)(t.code,{children:"s3ConnectorLiveLayer"}),"\nwhich is the live implementation of the ",(0,s.jsx)(t.code,{children:"S3Connector"})," interface."]}),"\n",(0,s.jsx)(t.h2,{id:"test--stub",children:"Test / Stub"}),"\n",(0,s.jsxs)(t.p,{children:["A stub implementation of S3Connector is provided for testing purposes via the ",(0,s.jsx)(t.code,{children:"TestS3Connector.layer"}),". It uses\ninternally an ",(0,s.jsx)(t.code,{children:"TRef[Map[BucketName, S3Bucket]]"})," instead of talking to S3. You can create the test harness as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import zio.connect.s3._\n\nobject MyTestSpec extends ZIOSpecDefault {\n\n  override def spec =\n    suite("MyTestSpec")(???)\n      .provide(s3ConnectorTestLayer)\n\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"operators--examples",children:"Operators & Examples"}),"\n",(0,s.jsx)(t.p,{children:"The following operators are available:"}),"\n",(0,s.jsx)(t.h2,{id:"copyobject",children:(0,s.jsx)(t.code,{children:"copyObject"})}),"\n",(0,s.jsx)(t.p,{children:"Copy an object from one bucket to another"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(CopyObject(bucket1, objectKey, bucket2)) >>> copyObject\n"})}),"\n",(0,s.jsx)(t.h2,{id:"createbucket",children:(0,s.jsx)(t.code,{children:"createBucket"})}),"\n",(0,s.jsx)(t.p,{children:"Creates S3 buckets"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(bucketName1, bucketName2) >>> createBucket\n"})}),"\n",(0,s.jsx)(t.h2,{id:"deleteemptybucket",children:(0,s.jsx)(t.code,{children:"deleteEmptyBucket"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes empty S3 buckets"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(bucketName1, bucketName2) >>> deleteEmptyBucket\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The buckets must be empty, if they are not you will get an ",(0,s.jsx)(t.code,{children:"BucketsNotEmptyException"})," from S3"]}),"\n",(0,s.jsx)(t.h2,{id:"deleteobjects",children:(0,s.jsx)(t.code,{children:"deleteObjects"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes objects from an S3 bucket"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(objectKey1, objectKey2) >>> deleteObjects(bucketName)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Does not result in an error, if object keys do not exist"}),"\n",(0,s.jsx)(t.h2,{id:"existsbucket",children:(0,s.jsx)(t.code,{children:"existsBucket"})}),"\n",(0,s.jsx)(t.p,{children:"Checks if a bucket exists"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(bucketName1, bucketName2) >>> existsBucket\n"})}),"\n",(0,s.jsx)(t.h2,{id:"existsobject",children:(0,s.jsx)(t.code,{children:"existsObject"})}),"\n",(0,s.jsx)(t.p,{children:"Checks if an object exists in an s3 bucket"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(objectKey1, objectKey2) >>> existsObject(bucketName)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It expects the bucket to exist and will return a ",(0,s.jsx)(t.code,{children:"NoSuchBucketException"})," if the ",(0,s.jsx)(t.em,{children:"bucket"})," does not"]}),"\n",(0,s.jsx)(t.h2,{id:"getobject",children:(0,s.jsx)(t.code,{children:"getObject"})}),"\n",(0,s.jsx)(t.p,{children:"Gets an object from an S3 bucket"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"getObject(bucket2, objectKey) >>> ZPipeline.utf8Decode >>> ZSink.mkString\n"})}),"\n",(0,s.jsx)(t.p,{children:"You will receive the objects as a stream of bytes, parsing/decoding of course depends on the object contents.\nThe example here assumes you have a stream of utf-8 encoded bytes and you want to decode them into a string."}),"\n",(0,s.jsx)(t.h2,{id:"listbuckets",children:(0,s.jsx)(t.code,{children:"listBuckets"})}),"\n",(0,s.jsx)(t.p,{children:"Lists all buckets in the account"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"listBuckets >>> ZSink.collectAll\n"})}),"\n",(0,s.jsx)(t.p,{children:"Currently, gets ALL buckets, there is no pagination support yet. You may want to use some other ZStream combinators\nto filter the lists prior to collecting bucket names"}),"\n",(0,s.jsx)(t.h2,{id:"listobjects",children:(0,s.jsx)(t.code,{children:"listObjects"})}),"\n",(0,s.jsxs)(t.p,{children:["Lists all objects keys in a bucket takes a ",(0,s.jsx)(t.code,{children:"BucketName"})," as an argument"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"listObjects(bucketName) >>> ZSink.collectAll\n"})}),"\n",(0,s.jsx)(t.p,{children:"Currently, gets ALL objects in the bucket, there is no pagination support yet. You may want to use some other ZStream combinators\nto filter the lists prior to collecting object keys"}),"\n",(0,s.jsx)(t.h2,{id:"moveobject",children:(0,s.jsx)(t.code,{children:"moveObject"})}),"\n",(0,s.jsx)(t.p,{children:"Move an object from one bucket to another"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream(MoveObject(sourceBucket, sourceKey, targetBucket, targetKey)) >>> moveObject\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"sourceBucket"}),", ",(0,s.jsx)(t.code,{children:"sourceKey"}),", and ",(0,s.jsx)(t.code,{children:"targetBucket"})," must exist. If the ",(0,s.jsx)(t.code,{children:"targetKey"})," exists, it will be overwritten."]}),"\n",(0,s.jsx)(t.h2,{id:"putobject",children:(0,s.jsx)(t.code,{children:"putObject"})}),"\n",(0,s.jsx)(t.p,{children:"Puts an object into an S3 bucket"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"ZStream.fromChunk(content) >>> putObject(bucketName, objectKey)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Expects as stream of bytes, returns a ",(0,s.jsx)(t.code,{children:"Unit"})," if successful."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var c=n(96540);const s={},o=c.createContext(s);function i(e){const t=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),c.createElement(o.Provider,{value:t},e.children)}}}]);