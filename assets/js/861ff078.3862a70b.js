"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[24467],{31061:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/stream/zstream/consuming-streams","title":"Consuming Streams","description":"Using a Sink","source":"@site/docs/reference/stream/zstream/consuming-streams.md","sourceDirName":"reference/stream/zstream","slug":"/reference/stream/zstream/consuming-streams","permalink":"/reference/stream/zstream/consuming-streams","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/consuming-streams.md","tags":[],"version":"current","frontMatter":{"id":"consuming-streams","title":"Consuming Streams"},"sidebar":"reference-sidebar","previous":{"title":"Operations","permalink":"/reference/stream/zstream/operations"},"next":{"title":"Error Handling","permalink":"/reference/stream/zstream/error-handling"}}');var t=s(74848),a=s(28453);const i={id:"consuming-streams",title:"Consuming Streams"},o=void 0,c={},l=[{value:"Using a Sink",id:"using-a-sink",level:3},{value:"Using fold",id:"using-fold",level:3},{value:"Using foreach",id:"using-foreach",level:3}];function m(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.Console._\nimport zio.stream._\n\nval result: Task[Unit] = ZStream.fromIterable(0 to 100).foreach(printLine(_))\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-a-sink",children:"Using a Sink"}),"\n",(0,t.jsxs)(n.p,{children:["To consume a stream using ",(0,t.jsx)(n.code,{children:"ZSink"})," we can pass ",(0,t.jsx)(n.code,{children:"ZSink"})," to the ",(0,t.jsx)(n.code,{children:"ZStream#run"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val sum: UIO[Int] = ZStream(1,2,3).run(ZSink.sum)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-fold",children:"Using fold"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ZStream#fold"})," method executes the fold operation over the stream of values and returns a ",(0,t.jsx)(n.code,{children:"ZIO"})," effect containing the result:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val s1: ZIO[Any, Nothing, Int] = ZStream(1, 2, 3, 4, 5).runFold(0)(_ + _)\nval s2: ZIO[Any, Nothing, Int] = ZStream.iterate(1)(_ + 1).runFoldWhile(0)(_ <= 5)(_ + _)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-foreach",children:"Using foreach"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"ZStream#foreach"})," is another way of consuming elements of a stream. It takes a callback of type ",(0,t.jsx)(n.code,{children:"O => ZIO[R1, E1, Any]"})," which passes each element of a stream to this callback:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"ZStream(1, 2, 3).foreach(printLine(_))\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);