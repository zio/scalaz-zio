"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[73998],{63405:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ecosystem/community/rezilience","title":"Rezilience","description":"Rezilience is a ZIO-native library for making resilient distributed systems.","source":"@site/docs/ecosystem/community/rezilience.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/rezilience","permalink":"/ecosystem/community/rezilience","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/rezilience.md","tags":[],"version":"current","frontMatter":{"id":"rezilience","title":"Rezilience"},"sidebar":"ecosystem-sidebar","previous":{"title":"MUnit ZIO","permalink":"/ecosystem/community/munit-zio"},"next":{"title":"Scala k8s","permalink":"/ecosystem/community/scala-k8s"}}');var r=i(74848),l=i(28453);const s={id:"rezilience",title:"Rezilience"},o=void 0,c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/svroonland/rezilience",children:"Rezilience"})," is a ZIO-native library for making resilient distributed systems."]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"Rezilience is a ZIO-native fault tolerance library with a collection of policies for making asynchronous systems more resilient to failures inspired by Polly, Resilience4J, and Akka. It does not have external library dependencies other than ZIO."}),"\n",(0,r.jsx)(n.p,{children:"It comprises these policies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CircuitBreaker"})," \u2014 Temporarily prevent trying calls after too many failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RateLimiter"})," \u2014 Limit the rate of calls to a system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bulkhead"})," \u2014 Limit the number of in-flight calls to a system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retry"})," \u2014 Try again after transient failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeout"})," \u2014 Interrupt execution if a call does not complete in time"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,r.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "nl.vroste" %% "rezilience" % "<version>"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Let's try an example of writing ",(0,r.jsx)(n.em,{children:"Circuit Breaker"})," policy for calling an external API:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import nl.vroste.rezilience.CircuitBreaker.{CircuitBreakerCallError, State}\nimport nl.vroste.rezilience._\nimport zio._\nimport zio.clock.Clock\nimport zio.console.{Console, putStrLn}\nimport zio.duration._\n\nobject CircuitBreakerExample extends zio.App {\n\n  def callExternalSystem: ZIO[Console, String, Nothing] =\n    putStrLn("External service called, but failed!").orDie *>\n      ZIO.fail("External service failed!")\n\n  val myApp: ZIO[Console with Clock, Nothing, Unit] =\n    CircuitBreaker.withMaxFailures(\n      maxFailures = 10,\n      resetPolicy = Schedule.exponential(1.second),\n      onStateChange = (state: State) =>\n        ZIO(println(s"State changed to $state")).orDie\n    ).use { cb =>\n      for {\n        _ <- ZIO.foreach_(1 to 10)(_ => cb(callExternalSystem).either)\n        _ <- cb(callExternalSystem).catchAll(errorHandler)\n        _ <- ZIO.sleep(2.seconds)\n        _ <- cb(callExternalSystem).catchAll(errorHandler)\n      } yield ()\n    }\n\n  def errorHandler: CircuitBreakerCallError[String] => URIO[Console, Unit] = {\n    case CircuitBreaker.CircuitBreakerOpen =>\n      putStrLn("Circuit breaker blocked the call to our external system").orDie\n    case CircuitBreaker.WrappedError(error) =>\n      putStrLn(s"External system threw an exception: $error").orDie\n  }\n  \n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(96540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);