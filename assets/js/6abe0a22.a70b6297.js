"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[97022],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var n=t(96540);const r={},o=n.createContext(r);function i(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:s},e.children)}},83218:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"zio-process/interactive-processes","title":"Interactive Processes","description":"Sometimes you want to interact with a process in a back-and-forth manner by sending requests to the process and receiving responses back. For example, interacting with a repl-like process like node -i, python -i, etc. or an ssh server.","source":"@site/docs/zio-process/interactive-processes.md","sourceDirName":"zio-process","slug":"/zio-process/interactive-processes","permalink":"/zio-process/interactive-processes","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-process/interactive-processes.md","tags":[],"version":"current","frontMatter":{"id":"interactive-processes","title":"Interactive Processes"},"sidebar":"ecosystem-sidebar","previous":{"title":"Piping","permalink":"/zio-process/piping"},"next":{"title":"Other","permalink":"/zio-process/other"}}');var r=t(74848),o=t(28453);const i={id:"interactive-processes",title:"Interactive Processes"},c=void 0,a={},p=[];function d(e){const s={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Sometimes you want to interact with a process in a back-and-forth manner by sending requests to the process and receiving responses back. For example, interacting with a repl-like process like ",(0,r.jsx)(s.code,{children:"node -i"}),", ",(0,r.jsx)(s.code,{children:"python -i"}),", etc. or an ssh server."]}),"\n",(0,r.jsx)(s.p,{children:"Here is an example of communicating with an interactive NodeJS shell:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",children:'for {\n  commandQueue <- Queue.unbounded[Chunk[Byte]]\n  process      <- Command("node", "-i").stdin(ProcessInput.fromQueue(commandQueue)).run\n  sep          <- System.lineSeparator\n  fiber        <- process.stdout.linesStream.foreach { line =>\n                    ZIO.debug(s"Response from REPL: $line")\n                  }.fork\n  _            <- commandQueue.offer(Chunk.fromArray(s"1+1${sep}".getBytes(StandardCharsets.UTF_8)))\n  _            <- commandQueue.offer(Chunk.fromArray(s"2**8${sep}".getBytes(StandardCharsets.UTF_8)))\n  _            <- commandQueue.offer(Chunk.fromArray(s"process.exit(0)${sep}".getBytes(StandardCharsets.UTF_8)))  \n  _            <- fiber.join  \n} yield ()\n'})}),"\n",(0,r.jsx)(s.p,{children:"You would probably want to create a helper for the repeated code, but this just a minimal example to help get you started."})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);