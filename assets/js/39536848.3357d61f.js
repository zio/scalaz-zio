"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[44525],{5170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-http/reference/aop/handler_aspect","title":"HandlerAspect","description":"A HandlerAspect is a wrapper around ProtocolStack with the two following features:","source":"@site/docs/zio-http/reference/aop/handler_aspect.md","sourceDirName":"zio-http/reference/aop","slug":"/zio-http/reference/aop/handler_aspect","permalink":"/zio-http/reference/aop/handler_aspect","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/aop/handler_aspect.md","tags":[],"version":"current","frontMatter":{"id":"handler_aspect","title":"HandlerAspect"},"sidebar":"ecosystem-sidebar","previous":{"title":"Middleware","permalink":"/zio-http/reference/aop/middleware"},"next":{"title":"Socket","permalink":"/zio-http/reference/socket/"}}');var a=t(74848),r=t(28453);const i={id:"handler_aspect",title:"HandlerAspect"},o=void 0,l={},c=[{value:"Creating a HandlerAspect",id:"creating-a-handleraspect",level:2},{value:"Built-in Handler Aspects",id:"built-in-handler-aspects",level:2},{value:"Intercepting",id:"intercepting",level:2},{value:"Intercepting the Incoming Requests",id:"intercepting-the-incoming-requests",level:3},{value:"Intercepting the Outgoing Responses",id:"intercepting-the-outgoing-responses",level:3},{value:"Intercepting Both Incoming Requests and Outgoing Responses",id:"intercepting-both-incoming-requests-and-outgoing-responses",level:3},{value:"Intercepting Statefully",id:"intercepting-statefully",level:3},{value:"Intercepting Statefully (Patching Responses)",id:"intercepting-statefully-patching-responses",level:3},{value:"Leveraging Output Context",id:"leveraging-output-context",level:2},{value:"Session Example",id:"session-example",level:3},{value:"Custom Authentication Example",id:"custom-authentication-example",level:3},{value:"Authentication Handler Aspects",id:"authentication-handler-aspects",level:2},{value:"Basic Authentication Example",id:"basic-authentication-example",level:3},{value:"Custom Authentication Providing Example",id:"custom-authentication-providing-example",level:3},{value:"Failing HandlerAspects",id:"failing-handleraspects",level:2},{value:"Updating Requests and Responses",id:"updating-requests-and-responses",level:2},{value:"Access Control HandlerAspects",id:"access-control-handleraspects",level:2},{value:"Cookie Operations",id:"cookie-operations",level:2},{value:"Conditional Application of HandlerAspects",id:"conditional-application-of-handleraspects",level:2},{value:"Request Logging Handler Aspect",id:"request-logging-handler-aspect",level:2},{value:"Running Effect Before/After Every Request",id:"running-effect-beforeafter-every-request",level:2},{value:"Redirect Handler Aspect",id:"redirect-handler-aspect",level:2},{value:"Trailing Slash Handler Aspect",id:"trailing-slash-handler-aspect",level:2},{value:"Patching Response Handler Aspect",id:"patching-response-handler-aspect",level:2},{value:"Debug Handler Aspect",id:"debug-handler-aspect",level:2},{value:"Examples",id:"examples",level:2},{value:"A Simple Middleware Example",id:"a-simple-middleware-example",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," is a wrapper around ",(0,a.jsx)(n.code,{children:"ProtocolStack"})," with the two following features:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["It is a ",(0,a.jsx)(n.code,{children:"ProtocolStack"})," that only works with ",(0,a.jsx)(n.code,{children:"Request"})," and ",(0,a.jsx)(n.code,{children:"Response"})," types. So it is suitable for writing middleware in the context of HTTP protocol. So it can almost be thought of (not the same) as a ",(0,a.jsx)(n.code,{children:"ProtocolStack[Env, Request, Request, Response, Response]]"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["It is specialized to work with an output context ",(0,a.jsx)(n.code,{children:"CtxOut"})," that can be passed through the middleware stack. This allows each layer to add its output context to the transformation process. So the ",(0,a.jsx)(n.code,{children:"CtxOut"})," will be a tuple of all the output contexts that each layer in the stack has added. These output contexts are useful when we are writing middleware that needs to pass some information, which is the result of some computation based on the input request, to the handler that is at the end of the middleware stack."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The diagram below illustrates how ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," works:"]}),"\n",(0,a.jsx)("div",{style:{textAlign:"center",margin:"10px"},children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"HandlerAspect Diagram",src:t(48677).A+""})})}),"\n",(0,a.jsxs)(n.p,{children:["Now, we are ready to see the definition of ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"final case class HandlerAspect[-Env, +CtxOut](\n  protocol: ProtocolStack[Env, Request, (Request, CtxOut), Response, Response]\n) extends Middleware[Env] {\n    def apply[Env1 <: Env, Err](routes: Routes[Env1, Err]): Routes[Env1, Err] = ???\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Like the ",(0,a.jsx)(n.code,{children:"ProtocolStack"}),", the ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," is a stack of layers. When we compose two ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," using the ",(0,a.jsx)(n.code,{children:"++"})," operator, we are composing handler aspects sequentially. So each layer in the stack corresponds to a separate transformation."]}),"\n",(0,a.jsxs)(n.p,{children:["Similar to the ",(0,a.jsx)(n.code,{children:"ProtocolStack"}),", each layer in the ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," may also be stateful at the level of each transformation. So, for example, a layer that is timing request durations may capture the start time of the request in the incoming interceptor, and pass this state to the outgoing interceptor, which can then compute the duration."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-handleraspect",children:"Creating a HandlerAspect"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),"'s companion object provides many methods to create a ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),". But in this section, we are going to introduce the most basic ones that are used as a building block to create a more complex ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.identity"})," is the simplest ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," that does nothing. It is useful when you want to create a ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," that does not modify the request or response."]}),"\n",(0,a.jsxs)(n.p,{children:["After this simple ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),", let's dive into the ",(0,a.jsx)(n.code,{children:"HandlerAspect.intercept*"})," constructors. Using these, we can create a ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," that can intercept the incoming request, outgoing response, or both."]}),"\n",(0,a.jsx)(n.h2,{id:"built-in-handler-aspects",children:"Built-in Handler Aspects"}),"\n",(0,a.jsx)(n.p,{children:"ZIO HTTP offers a versatile set of built-in handler aspects, designed to enhance and customize the handling of HTTP requests and responses. These aspects can be easily integrated into our application to provide various functionalities. For the rest of this page, we will explore how to use them in our applications."}),"\n",(0,a.jsx)(n.h2,{id:"intercepting",children:"Intercepting"}),"\n",(0,a.jsx)(n.h3,{id:"intercepting-the-incoming-requests",children:"Intercepting the Incoming Requests"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptIncomingHandler"})," constructor takes a handler function and applies it to the incoming request. It is useful when we want to modify or access the request before it reaches the handler or the next layer in the stack."]}),"\n",(0,a.jsx)(n.p,{children:"Let's see an example of how to use this constructor to create a handler aspect that checks the IP address of the incoming request and allows only the whitelisted IP addresses to access the server:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nval whitelistMiddleware: HandlerAspect[Any, Unit] =\n  HandlerAspect.interceptIncomingHandler {\n    val whitelist = Set("127.0.0.1", "0.0.0.0")\n    Handler.fromFunctionZIO[Request] { request =>\n      request.headers.get("X-Real-IP") match {\n        case Some(host) if whitelist.contains(host) =>\n          ZIO.succeed((request, ()))\n        case _ =>\n          ZIO.fail(Response.forbidden("Your IP is banned from accessing the server."))\n      }\n    }\n  }\n'})}),"\n",(0,a.jsx)(n.h3,{id:"intercepting-the-outgoing-responses",children:"Intercepting the Outgoing Responses"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptOutgoingHandler"})," constructor takes a handler function and applies it to the outgoing response. It is useful when we want to modify or access the response before it reaches the client or the next layer in the stack."]}),"\n",(0,a.jsx)(n.p,{children:"Let's work on creating a handler aspect that adds a custom header to the response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval addCustomHeader: HandlerAspect[Any, Unit] =\n  HandlerAspect.interceptOutgoingHandler(\n    Handler.fromFunction[Response](_.addHeader("X-Custom-Header", "Hello from Custom Middleware!")),\n  )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"interceptOutgoingHandler"})," takes a handler function that receives a ",(0,a.jsx)(n.code,{children:"Response"})," and returns a ",(0,a.jsx)(n.code,{children:"Response"}),". This is simpler than the ",(0,a.jsx)(n.code,{children:"interceptIncomingHandler"})," as it does not necessitate the output context to be passed along with the response."]}),"\n",(0,a.jsx)(n.h3,{id:"intercepting-both-incoming-requests-and-outgoing-responses",children:"Intercepting Both Incoming Requests and Outgoing Responses"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptHandler"})," takes two handler functions, one for the incoming request and one for the outgoing response."]}),"\n",(0,a.jsxs)(n.p,{children:["In the following example, we are going to create a handler aspect that counts the number of incoming requests and outgoing responses and stores them in a ",(0,a.jsx)(n.code,{children:"Ref"})," inside the ZIO environment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\ndef inc(label: String) =\n  for {\n    counter <- ZIO.service[Ref[Map[String, Long]]]\n    _ <- counter.update(_.updatedWith(label) {\n      case Some(current) => Some(current + 1)\n      case None => Some(1)\n    })\n  } yield ()\n\nval countRequests: Handler[Ref[Map[String, Long]], Nothing, Request, (Request, Unit)] =\n  Handler.fromFunctionZIO[Request](request => inc("requests").as((request, ())))\n\nval countResponses: Handler[Ref[Map[String, Long]], Nothing, Response, Response] =\n  Handler.fromFunctionZIO[Response](response => inc("responses").as(response))\n\nval counterMiddleware: HandlerAspect[Ref[Map[String, Long]], Unit] =\n  HandlerAspect.interceptHandler(countRequests)(countResponses)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Then, we can write another handler aspect that is responsible for adding a route to get the statistics of the incoming requests and outgoing responses:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.schema.codec.JsonCodec.zioJsonBinaryCodec\n\nval statsMiddleware: Middleware[Ref[Map[String, Long]]] =\n  new Middleware[Ref[Map[String, Long]]] {\n    override def apply[Env1 <: Ref[Map[String, Long]], Err](routes: Routes[Env1, Err]): Routes[Env1, Err] =\n      routes ++ Routes(\n        Method.GET / "stats" -> Handler.fromFunctionZIO[Request] { _ =>\n          ZIO.serviceWithZIO[Ref[Map[String, Long]]](_.get).map(stats => Response(body = Body.from(stats)))\n        },\n      )\n  }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["After attaching these two handler aspects to our ",(0,a.jsx)(n.code,{children:"Routes"}),", we have to provide the initial state for the ",(0,a.jsx)(n.code,{children:"Ref[Map[String, Long]]"})," to the whole application's environment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"Server.serve(routes @@ counterMiddleware @@ statsMiddleware)\n  .provide(\n    Server.default,\n    ZLayer.fromZIO(Ref.make(Map.empty[String, Long]))\n  )\n"})}),"\n",(0,a.jsx)(n.h3,{id:"intercepting-statefully",children:"Intercepting Statefully"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptHandlerStateful"})," constructor is like the ",(0,a.jsx)(n.code,{children:"interceptHandler"}),", but it allows the incoming handler to have a state that can be passed to the next layer in the stack, and finally, that state can be accessed by the outgoing handler."]}),"\n",(0,a.jsx)(n.p,{children:"Here is how it works:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The incoming handler receives a ",(0,a.jsx)(n.code,{children:"Request"})," and produces a tuple of ",(0,a.jsx)(n.code,{children:"State"})," and ",(0,a.jsx)(n.code,{children:"(Request, CtxOut)"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"The state produced by the incoming handler is passed to the next layer in the stack."}),"\n",(0,a.jsxs)(n.li,{children:["The outgoing handler receives the ",(0,a.jsx)(n.code,{children:"State"})," along with the ",(0,a.jsx)(n.code,{children:"Response"})," as a tuple, i.e. ",(0,a.jsx)(n.code,{children:"(State, Response)"}),", and produces a ",(0,a.jsx)(n.code,{children:"Response"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"So, we can pass some state from the incoming handler to the outgoing handler."}),"\n",(0,a.jsxs)(n.p,{children:["In the following example, we are going to write an handler aspect that calculates the response time and includes it in the ",(0,a.jsx)(n.code,{children:"X-Response-Time"})," header:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport java.util.concurrent.TimeUnit\n\nval incomingTime: Handler[Any, Nothing, Request, (Long, (Request, Unit))] =\n  Handler.fromFunctionZIO(request => ZIO.clockWith(_.currentTime(TimeUnit.MILLISECONDS)).map(t => (t, (request, ()))))\n\nval outgoingTime: Handler[Any, Nothing, (Long, Response), Response] =\n  Handler.fromFunctionZIO { case (incomingTime, response) =>\n    ZIO\n      .clockWith(_.currentTime(TimeUnit.MILLISECONDS).map(t => t - incomingTime))\n      .map(responseTime => response.addHeader("X-Response-Time", s"${responseTime}ms"))\n  }\n\nval responseTime: HandlerAspect[Any, Unit] =\n  HandlerAspect.interceptHandlerStateful(incomingTime)(outgoingTime)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["By attaching this handler aspect to any route, we can see the response time in the ",(0,a.jsx)(n.code,{children:"X-Response-Time"})," header:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ curl -X GET 'http://127.0.0.1:8080/hello' -i\nHTTP/1.1 200 OK\ncontent-type: text/plain\nX-Response-Time: 100ms\ncontent-length: 12\n\nHello World!\u23ce\n"})}),"\n",(0,a.jsx)(n.h3,{id:"intercepting-statefully-patching-responses",children:"Intercepting Statefully (Patching Responses)"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes we want to apply a series of transformations to the outgoing response. We can use the ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptPatch"})," and ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptPatchZIO"})," to achieve this."]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"Response.Patch"})," is a data type that represents a function (or series of functions) that can be applied to a response and return a new response. The ",(0,a.jsx)(n.code,{children:"HanlderAspect.interceptPatch*"})," uses this data type to transform the response."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerApect.interceptPatch"})," takes two groups of arguments:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Intercepting the Incoming Request"}),": The first one is a function that takes the incoming ",(0,a.jsx)(n.code,{children:"Request"})," and produces a ",(0,a.jsx)(n.code,{children:"State"}),". This state is passed through the handler aspect stack and then can be accessed through the interception phase of the outgoing response."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Intercepting the Outgoing Response"}),": The second one is a function that takes a tuple of ",(0,a.jsx)(n.code,{children:"Response"})," and ",(0,a.jsx)(n.code,{children:"State"})," and returns a ",(0,a.jsx)(n.code,{children:"Response.Patch"})," that will be applied to the outgoing response."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's try to rewrite the previous example using the ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptPatch"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport java.util.concurrent.TimeUnit\n\nval incomingTime: Request => ZIO[Any, Nothing, Long] =\n  (_: Request) => ZIO.clockWith(_.currentTime(TimeUnit.MILLISECONDS))\n\nval outgoingTime: (Response, Long) => ZIO[Any, Nothing, Response.Patch] =\n  (_: Response, incomingTime: Long) =>\n    ZIO\n      .clockWith(_.currentTime(TimeUnit.MILLISECONDS).map(t => t - incomingTime))\n      .map(responseTime => Response.Patch.addHeader("X-Response-Time", s"${responseTime}ms"))\n\nval responseTime: HandlerAspect[Any, Unit] =\n  HandlerAspect.interceptPatchZIO(incomingTime)(outgoingTime)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"leveraging-output-context",children:"Leveraging Output Context"}),"\n",(0,a.jsx)(n.p,{children:"Ordinary Middlewares are intended to bracket a request's execution by intercepting the request, possibly modifying it or short-circuiting its execution, and then performing some post-processing on the response."}),"\n",(0,a.jsxs)(n.p,{children:["However, we sometimes want to gather some contextual information about a request and pass it alongside to the request's handler. This can be achieved with the ",(0,a.jsx)(n.code,{children:"HandlerAspect[Env, CtxOut]"})," type, which extends ",(0,a.jsx)(n.code,{children:"Middleware[Env]"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," middleware produces a value of type ",(0,a.jsx)(n.code,{children:"CtxOut"})," on each request, which the routing DSL will accept just like a path component."]}),"\n",(0,a.jsxs)(n.p,{children:["If we take a look at the definition of ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),", we can see that it has two type parameters, ",(0,a.jsx)(n.code,{children:"Env"})," and ",(0,a.jsx)(n.code,{children:"CtxOut"}),". The ",(0,a.jsx)(n.code,{children:"CtxOut"})," is the output context. When we don't need to pass any context to the output, we use ",(0,a.jsx)(n.code,{children:"Unit"})," as the output context, otherwise, we can utilize any type as the output context."]}),"\n",(0,a.jsxs)(n.p,{children:["Before diving into a real-world example, let's try to understand the output context with simple examples. First, assume that we have an identity ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," that does nothing but passes an integer value to the output context:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.http._\n\nval intAspect: HandlerAspect[Any, Int] = HandlerAspect.identity.as(42)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To access this integer value in the handler, we need to define a handler that receives a tuple of ",(0,a.jsx)(n.code,{children:"(Int, Request)"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val intRequestHandler: Handler[Int, Nothing, Request, Response] =\n  Handler.fromFunctionZIO[Request] { (_: Request) =>\n    ZIO.serviceWith[Int] { n =>\n      Response.text(s"Received the $n value from the output context!")\n    }\n  }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If we attach the ",(0,a.jsx)(n.code,{children:"intAspect"})," to this handler, we get back a handler that receives a ",(0,a.jsx)(n.code,{children:"Request"})," and produces a ",(0,a.jsx)(n.code,{children:"Response"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val handler: Handler[Any, Response, Request, Response] = \n  intRequestHandler @@ intAspect\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Another thing to note is that when we compose multiple ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),"s with output context of non-",(0,a.jsx)(n.code,{children:"Unit"})," type, the output context of composed ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," will be a tuple of all the output contexts:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val stringAspect: HandlerAspect[Any, String] = \n  HandlerAspect.identity.as("Hello, World!")\n\nval intStringAspect: HandlerAspect[Any, (Int, String)] = \n  intAspect ++ stringAspect\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Correspondingly, to access the output context of this ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),", we need to have a handler that receives a tuple of ",(0,a.jsx)(n.code,{children:"(Int, String, Request)"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val intStringRequestHandler: Handler[(Int, String), Nothing, Request, Response] =\n  Handler.fromFunctionZIO[Request] { (req: Request) => ZIO.serviceWith[(Int, String)] { case (n, s) =>\n      Response.text(s"Received the $n and $s values from the output context!")\n    }\n  }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, we can attach the ",(0,a.jsx)(n.code,{children:"intStringAspect"})," to this handler:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val handler: Handler[Any, Response, Request, Response] = \n  intStringRequestHandler @@ (intAspect ++ stringAspect)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"session-example",children:"Session Example"}),"\n",(0,a.jsxs)(n.p,{children:["To look up a ",(0,a.jsx)(n.code,{children:"Session"}),", we might use a ",(0,a.jsx)(n.code,{children:"sessionMiddleware"})," with type ",(0,a.jsx)(n.code,{children:"HandlerAspect[Env, Session]"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'Routes(\n  Method.GET / "user" / int("userId") -> handler { \n    (userId: Int, request: Request) =>\n      withContext((session: Session) => UserRepository.getUser(session.organizationId, userId))\n  }\n) @@ sessionMiddleware\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect"})," companion object provides a number of helpful constructors for these middlewares.\nFor this example, we would probably use ",(0,a.jsx)(n.code,{children:"HandlerAspect.interceptHandler"}),", which wraps an incoming-request handler as well as one which performs any necessary post-processing on the outgoing response:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val incomingHandler: Handler[Env, Response, Request, (Request, Session)] = ???\nval outgoingHandler: Handler[Env, Nothing, Response, Response] = ???\nHandlerAspect.interceptHandler(incomingHandler)(outgoingHandler)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note the asymmetry in the type parameters of these two handlers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["In the incoming case, the handler emits a ",(0,a.jsx)(n.code,{children:"Response"})," on the error-channel whenever the service cannot produce a ",(0,a.jsx)(n.code,{children:"Session"}),", effectively short-circuiting the processing of this request."]}),"\n",(0,a.jsxs)(n.li,{children:["The outgoing handler, by contrast, has ",(0,a.jsx)(n.code,{children:"Nothing"})," as its ",(0,a.jsx)(n.code,{children:"Err"})," type, meaning that it ",(0,a.jsx)(n.strong,{children:"cannot"})," fail and must always produce a ",(0,a.jsx)(n.code,{children:"Response"})," on the success channel."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"custom-authentication-example",children:"Custom Authentication Example"}),"\n",(0,a.jsx)(n.p,{children:"Now, let's see a real-world example where we can leverage the output context."}),"\n",(0,a.jsx)(n.p,{children:"In the following example, we are going to write an authentication handler aspect that checks the JWT token in the incoming request and passes the user information to the handler:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport scala.util.Try\nimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}\n\n// Secret Authentication key\nval SECRET_KEY = "secretKey"\n\ndef jwtDecode(token: String, key: String): Try[JwtClaim] =\n  Jwt.decode(token, key, Seq(JwtAlgorithm.HS512))\n\nval bearerAuthWithContext: HandlerAspect[Any, String] =\n  HandlerAspect.interceptIncomingHandler(Handler.fromFunctionZIO[Request] { request =>\n    request.header(Header.Authorization) match {\n      case Some(Header.Authorization.Bearer(token)) =>\n        ZIO\n          .fromTry(jwtDecode(token.value.asString, SECRET_KEY))\n          .orElseFail(Response.badRequest("Invalid or expired token!"))\n          .flatMap(claim => ZIO.fromOption(claim.subject).orElseFail(Response.badRequest("Missing subject claim!")))\n          .map(u => (request, u))\n\n      case _ => ZIO.fail(Response.unauthorized.addHeaders(Headers(Header.WWWAuthenticate.Bearer(realm = "Access"))))\n    }\n  })\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now, let's define the ",(0,a.jsx)(n.code,{children:"/profile/me"})," route that requires authentication output context:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val profileRoute: Route[Any, Response] =\n  Method.GET / "profile" / "me" -> \n    Handler.fromFunctionZIO[Request] { (_: Request) => \n     ZIO.serviceWith[String](name => Response.text(s"Welcome $name!"))\n  } @@ bearerAuthWithContext\n'})}),"\n",(0,a.jsxs)(n.p,{children:["That's it! Now, in the handler of the ",(0,a.jsx)(n.code,{children:"/profile/me"})," route, we have the username that is extracted from the JWT token inside the authentication handler aspect and passed to it."]}),"\n",(0,a.jsxs)(n.p,{children:["The following code snippet is the complete example. Using the login route, we can get the JWT token and use it to access the protected ",(0,a.jsx)(n.code,{children:"/profile/me"})," route:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationServer.scala" ',children:'package example\n\nimport java.time.Clock\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\n\nimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}\n\n/**\n * This is an example to demonstrate bearer Authentication middleware. The\n * Server has 2 routes. The first one is for login, Upon a successful login, it\n * will return a jwt token for accessing protected routes. The second route is a\n * protected route that is accessible only if the request has a valid jwt token.\n * AuthenticationClient example can be used to makes requests to this server.\n */\nobject AuthenticationServer extends ZIOAppDefault {\n  implicit val clock: Clock = Clock.systemUTC\n\n  // Secret Authentication key\n  val SECRET_KEY = "secretKey"\n\n  def jwtEncode(username: String, key: String): String =\n    Jwt.encode(JwtClaim(subject = Some(username)).issuedNow.expiresIn(300), key, JwtAlgorithm.HS512)\n\n  def jwtDecode(token: String, key: String): Try[JwtClaim] =\n    Jwt.decode(token, key, Seq(JwtAlgorithm.HS512))\n\n  val bearerAuthWithContext: HandlerAspect[Any, String] =\n    HandlerAspect.interceptIncomingHandler(Handler.fromFunctionZIO[Request] { request =>\n      request.header(Header.Authorization) match {\n        case Some(Header.Authorization.Bearer(token)) =>\n          ZIO\n            .fromTry(jwtDecode(token.value.asString, SECRET_KEY))\n            .orElseFail(Response.badRequest("Invalid or expired token!"))\n            .flatMap(claim => ZIO.fromOption(claim.subject).orElseFail(Response.badRequest("Missing subject claim!")))\n            .map(u => (request, u))\n\n        case _ => ZIO.fail(Response.unauthorized.addHeaders(Headers(Header.WWWAuthenticate.Bearer(realm = "Access"))))\n      }\n    })\n\n  def routes: Routes[Any, Response] =\n    Routes(\n      // A route that is accessible only via a jwt token\n      Method.GET / "profile" / "me" -> handler { (_: Request) =>\n        ZIO.serviceWith[String](name => Response.text(s"Welcome $name!"))\n      } @@ bearerAuthWithContext,\n\n      // A login route that is successful only if the password is the reverse of the username\n      Method.GET / "login" ->\n        handler { (request: Request) =>\n          val form = request.body.asMultipartForm.orElseFail(Response.badRequest)\n          for {\n            username <- form\n              .map(_.get("username"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing username field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing username value!")))\n            password <- form\n              .map(_.get("password"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing password field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing password value!")))\n          } yield\n            if (password.reverse.hashCode == username.hashCode)\n              Response.text(jwtEncode(username, SECRET_KEY))\n            else\n              Response.unauthorized("Invalid username or password.")\n        },\n    ) @@ Middleware.debug\n\n  override val run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"After running the server, we can test it using the following client code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationClient.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject AuthenticationClient extends ZIOAppDefault {\n\n  /**\n   * This example is trying to access a protected route in AuthenticationServer\n   * by first making a login request to obtain a jwt token and use it to access\n   * a protected route. Run AuthenticationServer before running this example.\n   */\n  val url = "http://localhost:8080"\n\n  val loginUrl = URL.decode(s"${url}/login").toOption.get\n  val greetUrl = URL.decode(s"${url}/profile/me").toOption.get\n\n  val program = for {\n    client   <- ZIO.service[Client]\n    // Making a login request to obtain the jwt token. In this example the password should be the reverse string of username.\n    token    <- client\n      .batched(\n        Request\n          .get(loginUrl)\n          .withBody(\n            Body.fromMultipartForm(\n              Form(\n                FormField.simpleField("username", "John"),\n                FormField.simpleField("password", "nhoJ"),\n              ),\n              Boundary("boundary123"),\n            ),\n          ),\n      )\n      .flatMap(_.body.asString)\n    // Once the jwt token is procured, adding it as a Bearer token in Authorization header while accessing a protected route.\n    response <- client.batched(Request.get(greetUrl).addHeader(Header.Authorization.Bearer(token)))\n    body     <- response.body.asString\n    _        <- Console.printLine(body)\n  } yield ()\n\n  override val run = program.provide(Client.default)\n\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"authentication-handler-aspects",children:"Authentication Handler Aspects"}),"\n",(0,a.jsxs)(n.p,{children:["There are several built-in ",(0,a.jsx)(n.code,{children:"HandlerAspect"}),"s that can be used to implement authentication in ZIO HTTP:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Basic Authentication"}),": The ",(0,a.jsx)(n.code,{children:"basicAuth"})," and ",(0,a.jsx)(n.code,{children:"basicAuthZIO"})," handler aspect can be used to implement basic authentication."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Bearer Authentication"}),": The ",(0,a.jsx)(n.code,{children:"bearerAuth"})," and ",(0,a.jsx)(n.code,{children:"bearerAuthZIO"})," handler aspect can be used to implement bearer authentication. We have to provide a function that validates the bearer token."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom Authentication"}),": The ",(0,a.jsx)(n.code,{children:"customAuth"})," and ",(0,a.jsx)(n.code,{children:"customAuthZIO"})," handler aspects can be used to implement custom authentication. We have to provide a function that validates the request."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom Authentication providing"}),": The ",(0,a.jsx)(n.code,{children:"customAuthProviding"})," and ",(0,a.jsx)(n.code,{children:"customAuthProvidingZIO"})," handler aspects allow us to provide a value to the handler based on the authentication result."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"basic-authentication-example",children:"Basic Authentication Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/BasicAuth.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http.Middleware.basicAuth\nimport zio.http._\nimport zio.http.codec.PathCodec.string\n\nobject BasicAuth extends ZIOAppDefault {\n\n  // Http app that requires basic auth\n  val user: Routes[Any, Response] = Routes(\n    Method.GET / "user" / string("name") / "greet" ->\n      handler { (name: String, _: Request) =>\n        Response.text(s"Welcome to the ZIO party! ${name}")\n      },\n  )\n\n  // Add basic auth middleware\n  val routes: Routes[Any, Response] = user @@ basicAuth("admin", "admin")\n\n  val run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"custom-authentication-providing-example",children:"Custom Authentication Providing Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/middleware/CustomAuthProviding.scala" ',children:'package example.middleware\n\nimport zio.Config.Secret\nimport zio._\n\nimport zio.http._\nimport zio.http.codec.PathCodec.string\n\nobject CustomAuthProviding extends ZIOAppDefault {\n\n  final case class AuthContext(value: String)\n\n  // Provides an AuthContext to the request handler\n  val provideContext: HandlerAspect[Any, AuthContext] = HandlerAspect.customAuthProviding[AuthContext] { r =>\n    {\n      r.headers.get(Header.Authorization).flatMap {\n        case Header.Authorization.Basic(uname, password) if Secret(uname.reverse) == password =>\n          Some(AuthContext(uname))\n        case _                                                                                =>\n          None\n      }\n\n    }\n  }\n\n  // Multiple routes that require an AuthContext via withContext\n  val secureRoutes: Routes[AuthContext, Response] = Routes(\n    Method.GET / "a" -> handler((_: Request) => withContext((ctx: AuthContext) => Response.text(ctx.value))),\n    Method.GET / "b" / int("id")      -> handler((id: Int, _: Request) =>\n      withContext((ctx: AuthContext) => Response.text(s"for id: $id: ${ctx.value}")),\n    ),\n    Method.GET / "c" / string("name") -> handler((name: String, _: Request) =>\n      withContext((ctx: AuthContext) => Response.text(s"for name: $name: ${ctx.value}")),\n    ),\n  )\n\n  val app: Routes[Any, Response] = secureRoutes @@ provideContext\n\n  val run = Server.serve(app).provide(Server.default)\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"To the example, start the server and fire a curl request with an incorrect user/password combination:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -i --user admin:wrong http://localhost:8080/user/admin/greet\n\nHTTP/1.1 401 Unauthorized\nwww-authenticate: Basic\ncontent-length: 0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We notice in the response that first ",(0,a.jsx)(n.code,{children:"basicAuth"})," handler aspect responded ",(0,a.jsx)(n.code,{children:"HTTP/1.1 401 Unauthorized"})," and then patch handler aspect attached a ",(0,a.jsx)(n.code,{children:"X-Environment: Dev"})," header."]}),"\n",(0,a.jsx)(n.h2,{id:"failing-handleraspects",children:"Failing HandlerAspects"}),"\n",(0,a.jsxs)(n.p,{children:["We can abort the requests by specific response using ",(0,a.jsx)(n.code,{children:"HandlerAspect.fail"})," and ",(0,a.jsx)(n.code,{children:"HandlerAspect.failWith"})," aspects, so the downstream handlers will not be executed:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nmyHandler @@ HandlerAspect.fail(Response.forbidden("Access Denied!"))\n\nmyHandler @@ HandlerAspect\n  .fail(Response.forbidden("Access Denied!"))\n  .when(req => req.method == Method.DELETE)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"updating-requests-and-responses",children:"Updating Requests and Responses"}),"\n",(0,a.jsx)(n.p,{children:"Several aspects are useful for updating the requests and responses:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"HandlerAspect"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Request"}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"HandlerAspect.updateRequest"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.updateRequestZIO"})]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Request's Method"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"HandlerAspect.updateMethod"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Request's Path"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"HandlerAspect.updatePath"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Request's URL"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"HandlerAspect.updateURL"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Response"}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"HandlerAspect.updateResponse"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.updateResponseZIO"})]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Response Headers"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"HandlerAspect.updateHeaders"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Update Response Status"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"HandlerAspect.status"})})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"These aspects can be used to modify the request and response before they reach the handler or the client. They take a function that transforms the request or response and returns the updated request or response. Let's see an example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val dropTrailingSlash = HandlerAspect.updateURL(_.dropTrailingSlash)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"access-control-handleraspects",children:"Access Control HandlerAspects"}),"\n",(0,a.jsxs)(n.p,{children:["To allow and disallow access to an HTTP based on some conditions, we can use the ",(0,a.jsx)(n.code,{children:"HandlerAspect.allow"})," and ",(0,a.jsx)(n.code,{children:"HandlerAspect.allowZIO"})," aspects."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val disallow: HandlerAspect[Any, Unit] = HandlerAspect.allow(_ => false)\nval allow: HandlerAspect[Any, Unit]    = HandlerAspect.allow(_ => true)\n\nval whitelistAspect: HandlerAspect[Any, Unit] = {\n  val whitelist = Set("127.0.0.1", "0.0.0.0")\n  HandlerAspect.allow(r =>\n    r.headers.get("X-Real-IP") match {\n      case Some(host) => whitelist.contains(host)\n      case None       => false\n    },\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"cookie-operations",children:"Cookie Operations"}),"\n",(0,a.jsx)(n.p,{children:"Several aspects are useful for adding, signing, and managing cookies:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"HandlerAspect.addCookie"})," and ",(0,a.jsx)(n.code,{children:"HandlerAspect.addCookieZIO"})," to add cookies"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"HandlerAspect.signCookies"})," to sign cookies"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"HandlerAspect.flashScopeHandling"})," to manage the flash scope"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conditional-application-of-handleraspects",children:"Conditional Application of HandlerAspects"}),"\n",(0,a.jsxs)(n.p,{children:["We can attach a handler aspect conditionally using ",(0,a.jsx)(n.code,{children:"HandlerAspect#when"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect#whenZIO"}),", and ",(0,a.jsx)(n.code,{children:"HandlerAspect#whenHeader"})," methods. Wen also uses the following constructors to have conditional handler aspects: ",(0,a.jsx)(n.code,{children:"HandlerAspect.when"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.whenZIO"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.whenHeader"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.whenResponse"}),", and ",(0,a.jsx)(n.code,{children:"HandlerAspect.whenResponseZIO"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["We have also some ",(0,a.jsx)(n.code,{children:"if-then-else"})," style constructors to create conditional aspects like ",(0,a.jsx)(n.code,{children:"HandlerAspect.ifHeaderThenElse"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.ifMethodThenElse"}),", ",(0,a.jsx)(n.code,{children:"HandlerAspect.ifRequestThenElse"}),", and ",(0,a.jsx)(n.code,{children:"HandlerAspect.ifRequestThenElseZIO"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"request-logging-handler-aspect",children:"Request Logging Handler Aspect"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"requestLogging"})," handler aspect is a common aspect that logs incoming requests. It is useful for debugging and monitoring purposes. This aspect logs information such as request method, URL, status code, duration, response and request size by default. We can also configure it to log request and response bodies, request and response headers which are disabled by default:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object HandlerAspect {\n  def requestLogging(\n    level: Status => LogLevel = (_: Status) => LogLevel.Info,\n    loggedRequestHeaders: Set[Header.HeaderType] = Set.empty,\n    loggedResponseHeaders: Set[Header.HeaderType] = Set.empty,\n    logRequestBody: Boolean = false,\n    logResponseBody: Boolean = false,\n    requestCharset: Charset = StandardCharsets.UTF_8,\n    responseCharset: Charset = StandardCharsets.UTF_8,\n  ): HandlerAspect[Any, Unit] = ???\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"running-effect-beforeafter-every-request",children:"Running Effect Before/After Every Request"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"runBefore"})," and ",(0,a.jsx)(n.code,{children:"runAfter"})," aspects are useful for running an effect before and after every request. These aspects can be used to perform some side effects like logging, metrics and debugging, before and after every request."]}),"\n",(0,a.jsx)(n.h2,{id:"redirect-handler-aspect",children:"Redirect Handler Aspect"}),"\n",(0,a.jsxs)(n.p,{children:["There is another handler aspect called ",(0,a.jsx)(n.code,{children:"HandlerAspect.redirect"})," which takes a ",(0,a.jsx)(n.code,{children:"URL"})," and redirects requests to that URL."]}),"\n",(0,a.jsx)(n.h2,{id:"trailing-slash-handler-aspect",children:"Trailing Slash Handler Aspect"}),"\n",(0,a.jsx)(n.p,{children:"A trailing slash is the last forward-slash character at the end of some URLs. ZIO HTTP have two built-in aspect to handle trailing slashes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.redirectTrailingSlash"})," aspect is useful for redirecting requests with trailing slashes to the same URL without a trailing slash. This aspect is useful for SEO purposes and to avoid duplicate content issues."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.dropTrailingSlash"})," aspect just drops the trailing slash from the request URL."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"patching-response-handler-aspect",children:"Patching Response Handler Aspect"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HandlerAspect.patch"})," and ",(0,a.jsx)(n.code,{children:"HandlerAspect.patchZIO"})," take a function from ",(0,a.jsx)(n.code,{children:"Request"})," to ",(0,a.jsx)(n.code,{children:"Response.Patch"})," and apply the patch to the response."]}),"\n",(0,a.jsx)(n.p,{children:"Here is an example of a handler aspect that adds a custom header to the response if the request has a specific header:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'HandlerAspect.patch(request =>\n  if (request.hasHeader("X-Foo"))\n    Response.Patch.addHeader("X-Bar", "Bar Value")\n  else \n    Response.Patch.empty\n)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"debug-handler-aspect",children:"Debug Handler Aspect"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"debug"})," handler aspect is a useful aspect for debugging requests and responses. It prints the response status code, request method and url, and the response time of each request to the console."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'  val helloRoute =\n    Method.GET / "hello" -> Handler.fromResponse(Response.text("Hello World!")) @@ HandlerAspect.debug\n'})}),"\n",(0,a.jsxs)(n.p,{children:["When we send a GET request to the ",(0,a.jsx)(n.code,{children:"/hello"})," route, we can see the following output in the console:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"200 GET /hello 14ms\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"a-simple-middleware-example",children:"A Simple Middleware Example"}),"\n",(0,a.jsxs)(n.p,{children:["Let us consider a simple example using an out-of-the-box handler aspect called ",(0,a.jsx)(n.code,{children:"addHeader"}),". We will write an aspect that will attach a custom header to the response."]}),"\n",(0,a.jsx)(n.p,{children:"We create an aspect that appends an additional header to the response indicating whether it is a Dev/Prod/Staging environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala" ',children:'package example\n\nimport java.util.concurrent.TimeUnit\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorldWithMiddlewares extends ZIOAppDefault {\n\n  val routes: Routes[Any, Response] = Routes(\n    // this will return result instantly\n    Method.GET / "text"         -> handler(ZIO.succeed(Response.text("Hello World!"))),\n    // this will return result after 5 seconds, so with 3 seconds timeout it will fail\n    Method.GET / "long-running" -> handler(ZIO.succeed(Response.text("Hello World!")).delay(5 seconds)),\n  )\n\n  val serverTime = Middleware.patchZIO(_ =>\n    for {\n      currentMilliseconds <- Clock.currentTime(TimeUnit.MILLISECONDS)\n      header = Response.Patch.addHeader("X-Time", currentMilliseconds.toString)\n    } yield header,\n  )\n  val middlewares =\n    // print debug info about request and response\n    Middleware.debug ++\n      // close connection if request takes more than 3 seconds\n      Middleware.timeout(3 seconds) ++\n      // add static header\n      Middleware.addHeader("X-Environment", "Dev") ++\n      // add dynamic header\n      serverTime\n\n  // Run it like any simple app\n  val run = Server.serve(routes @@ middlewares).provide(Server.default)\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:'Fire a curl request, and we see an additional header added to the response indicating the "Dev" environment:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -i http://localhost:8080/Bob\n\nHTTP/1.1 200 OK\ncontent-type: text/plain\nX-Environment: Dev\ncontent-length: 12\n\nHello Bob\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},48677:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/handler-aspect-b91f6f81d64103994a13207a5038d01e.svg"}}]);