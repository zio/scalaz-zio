"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[32313],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>l});var s=i(96540);const n={},a=s.createContext(n);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},55035:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-http/examples/serving-static-files","title":"Serving Static Files Example","description":"Serving Static Files","source":"@site/docs/zio-http/examples/serving-static-files.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/serving-static-files","permalink":"/zio-http/examples/serving-static-files","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/serving-static-files.md","tags":[],"version":"current","frontMatter":{"id":"serving-static-files","title":"Serving Static Files Example","sidebar_label":"Serving Static Files"},"sidebar":"ecosystem-sidebar","previous":{"title":"Https Client and Server","permalink":"/zio-http/examples/https-client-server"},"next":{"title":"HTML Templating","permalink":"/zio-http/examples/html-templating"}}');var n=i(74848),a=i(28453);const r={id:"serving-static-files",title:"Serving Static Files Example",sidebar_label:"Serving Static Files"},l=void 0,o={},c=[{value:"Serving Static Files",id:"serving-static-files",level:2},{value:"Serving Static Resource Files",id:"serving-static-resource-files",level:2}];function p(e){const t={code:"code",h2:"h2",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"serving-static-files",children:"Serving Static Files"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StaticFiles.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject StaticFiles extends ZIOAppDefault {\n\n  /**\n   * Creates an HTTP app that only serves static files from resources via\n   * "/static". For paths other than the resources directory, see\n   * [[zio.http.Middleware.serveDirectory]].\n   */\n  val routes = Routes.empty @@ Middleware.serveResources(Path.empty / "static")\n\n  override def run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"serving-static-resource-files",children:"Serving Static Resource Files"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StaticServer.scala" ',children:'package example\n\nimport zio.ZIOAppDefault\n\nimport zio.http._\nimport zio.http.codec.PathCodec.trailing\nimport zio.http.template._\n\nobject StaticServer extends ZIOAppDefault {\n\n  // A simple app to serve static resource files from a local directory.\n  val app = Routes(\n    Method.GET / "static" / trailing -> handler {\n      val extractPath    = Handler.param[(Path, Request)](_._1)\n      val extractRequest = Handler.param[(Path, Request)](_._2)\n\n      for {\n        path <- extractPath\n        file <- Handler.getResourceAsFile(path.encode)\n        http <-\n        // Rendering a custom UI to list all the files in the directory\n        extractRequest >>> (if (file.isDirectory) {\n                              // Accessing the files in the directory\n                              val files = file.listFiles.toList.sortBy(_.getName)\n                              val base  = "/static/"\n                              val rest  = path\n\n                              // Custom UI to list all the files in the directory\n                              Handler.template(s"File Explorer ~$base${path}") {\n                                ul(\n                                  li(a(href := s"$base$rest", "..")),\n                                  files.map { file =>\n                                    li(\n                                      a(\n                                        href := s"$base${path.encode}${if (path.isRoot) file.getName\n                                          else "/" + file.getName}",\n                                        file.getName,\n                                      ),\n                                    )\n                                  },\n                                )\n                              }\n                            }\n\n                            // Return the file if it\'s a static resource\n                            else if (file.isFile) Handler.fromFile(file)\n\n                            // Return a 404 if the file doesn\'t exist\n                            else Handler.notFound)\n      } yield http\n    },\n  ).sandbox\n\n  val run = Server.serve(app).provide(Server.default)\n\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);