"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3174],{13529:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/resource/scopedref","title":"ScopedRef: Mutable Reference For Resources","description":"ScopedRef is a resourceful version of Ref data type. So it is a Ref for resourceful effects.","source":"@site/docs/reference/resource/scopedref.md","sourceDirName":"reference/resource","slug":"/reference/resource/scopedref","permalink":"/reference/resource/scopedref","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/resource/scopedref.md","tags":[],"version":"current","frontMatter":{"id":"scopedref","title":"ScopedRef: Mutable Reference For Resources","sidebar_label":"ScopedRef"},"sidebar":"reference-sidebar","previous":{"title":"ZKeyedPool","permalink":"/reference/resource/zkeyedpool"},"next":{"title":"Introduction to ZIO Streams","permalink":"/reference/stream/"}}');var o=n(74848),c=n(28453);const t={id:"scopedref",title:"ScopedRef: Mutable Reference For Resources",sidebar_label:"ScopedRef"},i=void 0,d={},a=[{value:"Operations",id:"operations",level:2},{value:"Construction",id:"construction",level:2},{value:"Example",id:"example",level:2}];function l(e){const r={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef"})," is a resourceful version of ",(0,o.jsx)(r.code,{children:"Ref"})," data type. So it is a ",(0,o.jsx)(r.code,{children:"Ref"})," for resourceful effects."]}),"\n",(0,o.jsx)(r.h2,{id:"operations",children:"Operations"}),"\n",(0,o.jsx)(r.p,{children:"There are two basic operations: get and set:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef#get"})," returns the current value of the scoped ref."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef#set"})," sets the scoped ref to a new value by acquiring the new resource to create a new value of the scoped ref. Setting a new value releases the old resource automatically."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"construction",children:"Construction"}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"ScopedRef"})," has two constructors:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-scala",children:"object ScopedRef {\n  def make[A](a: => A): ZIO[Scope, Nothing, ScopedRef[A]] = ???\n  def fromAcquire[R, E, A](acquire: ZIO[R, E, A]): ZIO[R with Scope, E, ScopedRef[A]] = ???\n}\n"})}),"\n",(0,o.jsxs)(r.p,{children:["So we have two options to create a ",(0,o.jsx)(r.code,{children:"ScopedRef"}),":"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef.make"})," creates a scoped ref from an ordinary value. We can use this constructor when we don't need to acquire a resource to create a value of the scoped ref, for example, when we have a constant value."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef.fromAcquire"})," creates a scoped ref from an effect that resourcefully produces a value."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"ScopedRef"})," is resourceful, so its lifetimes is scoped. Whenever we don't need it anymore, we can release it by using ",(0,o.jsx)(r.code,{children:"ZIO#scoped"})," combinator."]})}),"\n",(0,o.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(r.p,{children:["Let's see how changing the value of a ",(0,o.jsx)(r.code,{children:"ScopedRef"})," automatically releases the old resource:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.unit\n    r1 = ZIO.acquireRelease(\n           ZIO\n             .debug("acquiring the first resource")\n             .as(5)\n         )(_ => ZIO.debug("releasing the first resource"))\n    r2 = ZIO.acquireRelease(\n           ZIO\n             .debug("acquiring the second resource")\n             .as(10)\n         )(_ => ZIO.debug("releasing the second resource"))\n    sref <- ScopedRef.fromAcquire(r1)\n    _    <- sref.get.debug\n    _    <- sref.set(r2)\n    _    <- sref.get.debug\n  } yield ()\n}\n'})}),"\n",(0,o.jsx)(r.p,{children:"The output:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"acquiring the first resource\n5\nacquiring the second resource\nreleasing the first resource\n10\nreleasing the second resource\n"})})]})}function u(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>i});var s=n(96540);const o={},c=s.createContext(o);function t(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(c.Provider,{value:r},e.children)}}}]);