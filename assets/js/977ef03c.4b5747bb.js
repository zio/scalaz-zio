"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[19099],{6969:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"reference/observability/logging","title":"Introduction to Logging in ZIO","description":"ZIO supports a lightweight built-in logging facade that standardizes the interface to logging functionality. So it doesn\'t replace existing logging libraries, but also we can plug it into one of the existing logging backends.","source":"@site/docs/reference/observability/logging.md","sourceDirName":"reference/observability","slug":"/reference/observability/logging","permalink":"/reference/observability/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/observability/logging.md","tags":[],"version":"current","frontMatter":{"id":"logging","title":"Introduction to Logging in ZIO","sidebar_label":"Logging"},"sidebar":"reference-sidebar","previous":{"title":"SubscriptionRef","permalink":"/reference/stream/subscription-ref"},"next":{"title":"Introduction to ZIO Metrics","permalink":"/reference/observability/metrics/"}}');var t=o(74848),a=o(28453);const s={id:"logging",title:"Introduction to Logging in ZIO",sidebar_label:"Logging"},r=void 0,l={},c=[{value:"Logging Levels",id:"logging-levels",level:2},{value:"Spans",id:"spans",level:2},{value:"Log Annotations",id:"log-annotations",level:2},{value:"ZIO&#39;s Built-in Log Annotation",id:"zios-built-in-log-annotation",level:3},{value:"Typed Log Annotations",id:"typed-log-annotations",level:3},{value:"Further Reading",id:"further-reading",level:2}];function g(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"ZIO supports a lightweight built-in logging facade that standardizes the interface to logging functionality. So it doesn't replace existing logging libraries, but also we can plug it into one of the existing logging backends."}),"\n",(0,t.jsxs)(n.p,{children:["We can easily log using the ",(0,t.jsx)(n.code,{children:"ZIO.log"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval app =\n  for {\n    _ <- ZIO.log("Application started!")\n    name <- Console.readLine("Please enter your name: ")\n    _ <- ZIO.log("User entered its name: $name")\n    _ <- Console.printLine("Hello, $name")\n  } yield ()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"logging-levels",children:"Logging Levels"}),"\n",(0,t.jsxs)(n.p,{children:["To log with a specific log-level, we can use the ",(0,t.jsx)(n.code,{children:"ZIO.logLevel"})," combinator:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'ZIO.logLevel(LogLevel.Warning) {\n  ZIO.log("The response time exceeded its threshold!")\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Or we can use the following functions directly:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ZIO.logDebug"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ZIO.logError"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ZIO.logFatal"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ZIO.logInfo"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ZIO.logWarning"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, for log with the error level, we can use ",(0,t.jsx)(n.code,{children:"ZIO.logError"})," like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'ZIO.logError("File does not exist: ~/var/www/favicon.ico")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"spans",children:"Spans"}),"\n",(0,t.jsx)(n.p,{children:"It also supports spans:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'ZIO.logSpan("myspan") {\n  ZIO.sleep(1.second) *> ZIO.log("The job is finished!")\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"ZIO Logging calculates the running duration of that span and includes that in the logging data corresponding to its span\nlabel."}),"\n",(0,t.jsx)(n.h2,{id:"log-annotations",children:"Log Annotations"}),"\n",(0,t.jsx)(n.p,{children:"ZIO by default adds some contextual information to the log messages, like the timestamp, log level, fiber ID, and source location. Sometimes these default contextual information are not sufficient to understand the circumstances under which they were generated. In such cases, we need to add custom contextual information to the log messages. We can do this using log annotations."}),"\n",(0,t.jsx)(n.h3,{id:"zios-built-in-log-annotation",children:"ZIO's Built-in Log Annotation"}),"\n",(0,t.jsxs)(n.p,{children:["For example, in microservice environments, we might have several services that are communicating with each other. In such cases, we might want to correlate the logs generated by different services. We can do this by adding a log annotation called ",(0,t.jsx)(n.code,{children:"correlation_id"}),". This log annotation can be very simple, just a string, that is passed along with requests and responses. So, when we log a message, we know which request or response it is related to. ZIO has a built-in log annotation API that allows us to add such custom contextual information to the log messages:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def randomDelay = Random.nextIntBounded(1000).flatMap(t => ZIO.sleep(t.millis))\n\n  def run =\n    ZIO.foreachParDiscard(Chunk("UserA", "UserB", "UserC")) { user =>\n      ZIO.logAnnotate("correlation_id", user) {\n        for {\n          _ <- ZIO.log("fetching user from database") *> randomDelay\n          _ <- ZIO.log("downloading user\'s profile picture") *> randomDelay\n        } yield ()\n      }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of the log messages generated by the above code, each log message contains the ",(0,t.jsx)(n.code,{children:"correlation_id"})," log annotation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'timestamp=2024-05-14T15:44:50.734129Z level=INFO thread=#zio-fiber-851563977 message="fetching user from database" location=zio.examples.MainApp.run file=MainApp.scala line=12 correlation_id=UserC\ntimestamp=2024-05-14T15:44:50.734127Z level=INFO thread=#zio-fiber-41969365 message="fetching user from database" location=zio.examples.MainApp.run file=MainApp.scala line=12 correlation_id=UserA\ntimestamp=2024-05-14T15:44:50.734123Z level=INFO thread=#zio-fiber-1775966732 message="fetching user from database" location=zio.examples.MainApp.run file=MainApp.scala line=12 correlation_id=UserB\ntimestamp=2024-05-14T15:44:50.928248Z level=INFO thread=#zio-fiber-851563977 message="downloading user\'s profile picture" location=zio.examples.MainApp.run file=MainApp.scala line=13 correlation_id=UserC\ntimestamp=2024-05-14T15:44:51.054287Z level=INFO thread=#zio-fiber-41969365 message="downloading user\'s profile picture" location=zio.examples.MainApp.run file=MainApp.scala line=13 correlation_id=UserA\ntimestamp=2024-05-14T15:44:51.534263Z level=INFO thread=#zio-fiber-1775966732 message="downloading user\'s profile picture" location=zio.examples.MainApp.run file=MainApp.scala line=13 correlation_id=UserB\n'})}),"\n",(0,t.jsx)(n.h3,{id:"typed-log-annotations",children:"Typed Log Annotations"}),"\n",(0,t.jsxs)(n.p,{children:["In more complex scenarios, we might want to add more structured information to the log messages. For example, we might want to add the user information to the log messages. In such cases, we need a typed log annotation that supports structured information, e.g. a ",(0,t.jsx)(n.code,{children:"User"})," case class that contains the user's id, name, email, etc."]}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.a,{href:"https://zio.dev/zio-logging",children:"ZIO Logging"}),", we can define typed log annotations using the ",(0,t.jsx)(n.code,{children:"LogAnnotation"})," class. So let's add required dependencies to the ",(0,t.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-logging" % "4.0.2",\n  "dev.zio" %% "zio-json"    % "0.7.3"\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now, let's assume we have a ",(0,t.jsx)(n.code,{children:"User"})," case class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"case class User(firstName: String, lastName: String)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can define a typed log annotation for the ",(0,t.jsx)(n.code,{children:"User"})," case class like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.json.{DeriveJsonEncoder, EncoderOps}\nimport zio.logging.{ConsoleLoggerConfig, LogAnnotation, LogFormat, consoleJsonLogger}\nimport zio._\n\nobject TypedLogAnnotationExample extends ZIOAppDefault {\n\n  case class User(firstName: String, lastName: String)\n\n  object User {\n    implicit val encoder = DeriveJsonEncoder.gen[User]\n  }\n\n  private val userLogAnnotation = LogAnnotation[User]("user", (_, u) => u, _.toJson)\n  \n  private val logConfig = ConsoleLoggerConfig.default.copy(\n    format = LogFormat.default + LogFormat.annotation(LogAnnotation.TraceId) + LogFormat.annotation(userLogAnnotation)\n  )\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleJsonLogger(logConfig)\n\n  def run =\n    for {\n      _ <- ZIO.foreachPar(List(User("John", "Doe"), User("Jane", "Doe"))) { user =>\n        {\n          ZIO.logInfo("Starting operation") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping operation")\n        } @@ userLogAnnotation(user)\n      }\n      _ <- ZIO.logInfo("Done")\n    } yield ()\n\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The log messages generated by the above code will contain the ",(0,t.jsx)(n.code,{children:"user"})," log annotation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{"timestamp":"2024-05-14T20:37:33.744171+04:30","level":"INFO","thread":"zio-fiber-6","message":"Starting operation","user":{"firstName":"Jane","lastName":"Doe"}}\n{"timestamp":"2024-05-14T20:37:33.744166+04:30","level":"INFO","thread":"zio-fiber-5","message":"Starting operation","user":{"firstName":"John","lastName":"Doe"}}\n{"timestamp":"2024-05-14T20:37:34.334837+04:30","level":"INFO","thread":"zio-fiber-5","message":"Stopping operation","user":{"firstName":"John","lastName":"Doe"}}\n{"timestamp":"2024-05-14T20:37:34.334848+04:30","level":"INFO","thread":"zio-fiber-6","message":"Stopping operation","user":{"firstName":"Jane","lastName":"Doe"}}\n{"timestamp":"2024-05-14T20:37:34.337953+04:30","level":"INFO","thread":"zio-fiber-4","message":"Done"}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://zio.dev/zio-logging",children:"ZIO Logging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/guides/tutorials/enable-logging-in-a-zio-application",children:"How to Enable Logging in a ZIO Application"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/guides/tutorials/create-custom-logger-for-a-zio-application",children:"How to Create a Custom Logger for a ZIO Application?"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var i=o(96540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);