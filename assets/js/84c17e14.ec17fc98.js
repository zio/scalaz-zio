"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[90132],{42226:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ecosystem/community/zio-grpc","title":"ZIO gRPC","description":"ZIO-gRPC lets us write purely functional gRPC servers and clients.","source":"@site/docs/ecosystem/community/zio-grpc.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-grpc","permalink":"/ecosystem/community/zio-grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-grpc.md","tags":[],"version":"current","frontMatter":{"id":"zio-grpc","title":"ZIO gRPC"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO AWS S3","permalink":"/ecosystem/community/zio-aws-s3"},"next":{"title":"ZIO K8s","permalink":"/ecosystem/community/zio-k8s"}}');var s=r(74848),l=r(28453);const i={id:"zio-grpc",title:"ZIO gRPC"},t=void 0,c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://scalapb.github.io/zio-grpc/",children:"ZIO-gRPC"})," lets us write purely functional gRPC servers and clients."]}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Key features of ZIO gRPC:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Functional and Type-safe"})," \u2014 Use the power of Functional Programming and the Scala compiler to build robust, correct and fully featured gRPC servers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Support for Streaming"})," \u2014 Use ZIO's feature-rich ",(0,s.jsx)(n.code,{children:"ZStream"}),"s to create server-streaming, client-streaming, and bi-directionally streaming RPC endpoints."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Highly Concurrent"})," \u2014 Leverage the power of ZIO to build asynchronous clients and servers without deadlocks and race conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Safety"})," \u2014 Safely cancel an RPC call by interrupting the effect. Resources on the server will never leak!"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scala.js Support"})," \u2014 ZIO gRPC comes with Scala.js support, so we can send RPCs to our service from the browser."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["First of all we need to add following lines to the ",(0,s.jsx)(n.code,{children:"project/plugins.sbt"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'addSbtPlugin("com.thesamet" % "sbt-protoc" % "1.0.2")\n\nlibraryDependencies +=\n  "com.thesamet.scalapb.zio-grpc" %% "zio-grpc-codegen" % "0.5.0"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then in order to use this library, we need should add the following line in our ",(0,s.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'PB.targets in Compile := Seq(\n  scalapb.gen(grpc = true) -> (sourceManaged in Compile).value / "scalapb",\n  scalapb.zio_grpc.ZioCodeGenerator -> (sourceManaged in Compile).value / "scalapb"\n)\n\nlibraryDependencies ++= Seq(\n  "io.grpc" % "grpc-netty" % "1.39.0",\n  "com.thesamet.scalapb" %% "scalapb-runtime-grpc" % scalapb.compiler.Version.scalapbVersion\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we are going to implement a simple server and client for the following gRPC ",(0,s.jsx)(n.em,{children:"proto"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\noption java_multiple_files = true;\noption java_package = "io.grpc.examples.helloworld";\noption java_outer_classname = "HelloWorldProto";\noption objc_class_prefix = "HLW";\n\npackage helloworld;\n\n// The greeting service definition.\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user\'s name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The hello world server would be like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import io.grpc.ServerBuilder\nimport io.grpc.examples.helloworld.helloworld.ZioHelloworld.ZGreeter\nimport io.grpc.examples.helloworld.helloworld.{HelloReply, HelloRequest}\nimport io.grpc.protobuf.services.ProtoReflectionService\nimport scalapb.zio_grpc.{ServerLayer, ServiceList}\nimport zio.console.putStrLn\nimport zio.{ExitCode, URIO, ZEnv, ZIO}\n\nobject HelloWorldServer extends zio.App {\n\n  val helloService: ZGreeter[ZEnv, Any] =\n    (request: HelloRequest) =>\n      putStrLn(s"Got request: $request") *>\n        ZIO.succeed(HelloReply(s"Hello, ${request.name}"))\n\n\n  val myApp = for {\n    _ <- putStrLn("Server is running. Press Ctrl-C to stop.")\n    _ <- ServerLayer\n      .fromServiceList(\n        ServerBuilder\n          .forPort(9000)\n          .addService(ProtoReflectionService.newInstance()),\n        ServiceList.add(helloService))\n      .build.useForever\n  } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"And this is an example of using its client:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import io.grpc.ManagedChannelBuilder\nimport io.grpc.examples.helloworld.helloworld.HelloRequest\nimport io.grpc.examples.helloworld.helloworld.ZioHelloworld.GreeterClient\nimport scalapb.zio_grpc.ZManagedChannel\nimport zio.console._\nimport zio.{ExitCode, URIO}\n\nobject HelloWorldClient extends zio.App {\n  def myApp =\n    for {\n      r <- GreeterClient.sayHello(HelloRequest("World"))\n      _ <- putStrLn(r.message)\n    } yield ()\n\n  val clientLayer =\n    GreeterClient.live(\n      ZManagedChannel(\n        ManagedChannelBuilder.forAddress("localhost", 9000).usePlaintext()\n      )\n    )\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.provideCustom(clientLayer).exitCode\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=XTkhxRTH1nE",children:"Functional, Type-safe, Testable Microservices with ZIO gRPC"})," by Nadav Samet (July 2020)"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>t});var o=r(96540);const s={},l=o.createContext(s);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);