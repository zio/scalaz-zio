"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[39059],{88439:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/error-management/recovering/folding","title":"Folding","description":"Scala\'s Option and Either data types have fold, which let us handle both failure and success at the same time. In a similar fashion, ZIO effects also have several methods that allow us to handle both failure and success.","source":"@site/docs/reference/error-management/recovering/folding.md","sourceDirName":"reference/error-management/recovering","slug":"/reference/error-management/recovering/folding","permalink":"/reference/error-management/recovering/folding","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/recovering/folding.md","tags":[],"version":"current","frontMatter":{"id":"folding","title":"Folding","sidebar_label":"3. Folding"},"sidebar":"reference-sidebar","previous":{"title":"2. Fallback","permalink":"/reference/error-management/recovering/fallback"},"next":{"title":"4. Retrying","permalink":"/reference/error-management/recovering/retrying"}}');var t=a(74848),s=a(28453);const i={id:"folding",title:"Folding",sidebar_label:"3. Folding"},o=void 0,l={},c=[{value:"<code>ZIO#fold</code>/<code>ZIO#foldZIO</code>",id:"ziofoldziofoldzio",level:2},{value:"<code>ZIO#foldCause</code>/<code>ZIO#foldCauseZIO</code>",id:"ziofoldcauseziofoldcausezio",level:2},{value:"<code>ZIO#foldTraceZIO</code>",id:"ziofoldtracezio",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Scala's ",(0,t.jsx)(n.code,{children:"Option"})," and ",(0,t.jsx)(n.code,{children:"Either"})," data types have ",(0,t.jsx)(n.code,{children:"fold"}),", which let us handle both failure and success at the same time. In a similar fashion, ",(0,t.jsx)(n.code,{children:"ZIO"})," effects also have several methods that allow us to handle both failure and success."]}),"\n",(0,t.jsxs)(n.h2,{id:"ziofoldziofoldzio",children:[(0,t.jsx)(n.code,{children:"ZIO#fold"}),"/",(0,t.jsx)(n.code,{children:"ZIO#foldZIO"})]}),"\n",(0,t.jsxs)(n.p,{children:["The first fold method, ",(0,t.jsx)(n.code,{children:"ZIO#fold"}),", lets us non-effectfully handle both failure and success, by supplying a non-effectful handler for each case. The second fold method, ",(0,t.jsx)(n.code,{children:"ZIO#foldZIO"}),", lets us effectfully handle both failure and success, by supplying an effectful (but still pure) handler for each case:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def fold[B](\n    failure: E => B,\n    success: A => B\n  ): ZIO[R, Nothing, B]\n\n  def foldZIO[R1 <: R, E2, B](\n    failure: E => ZIO[R1, E2, B],\n    success: A => ZIO[R1, E2, B]\n  ): ZIO[R1, E2, B]\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's try an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nlazy val DefaultData: Array[Byte] = Array(0, 0)\n\nval primaryOrDefaultData: UIO[Array[Byte]] =\n  readFile("primary.data").fold(_ => DefaultData, data => data)\n'})}),"\n",(0,t.jsx)(n.p,{children:"We can ignore any failure and success values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval result: ZIO[Any, Nothing, Unit] =\n  ZIO\n    .fail("Uh oh!")         // ZIO[Any, String, Int]\n    .as(5)                  // ZIO[Any, String, Int]\n    .fold(_ => (), _ => ()) // ZIO[Any, Nothing, Unit]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["It is equivalent to use the ",(0,t.jsx)(n.code,{children:"ZIO#ignore"})," operator instead:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval result: ZIO[Any, Nothing, Unit] = ZIO.fail("Uh oh!").as(5).ignore\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now let's try the effectful version of the fold operation. In this example, in case of failure on reading from the primary file, we will fallback to another effectful operation which will read data from the secondary file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val primaryOrSecondaryData: IO[IOException, Array[Byte]] =\n  readFile("primary.data").foldZIO(\n    failure = _    => readFile("secondary.data"),\n    success = data => ZIO.succeed(data)\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Nearly all error handling methods are defined in terms of ",(0,t.jsx)(n.code,{children:"foldZIO"}),", because it is both powerful and fast."]}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, ",(0,t.jsx)(n.code,{children:"foldZIO"})," is used to handle both failure and success of the ",(0,t.jsx)(n.code,{children:"readUrls"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val urls: UIO[Content] =\n  readUrls("urls.json").foldZIO(\n    error   => ZIO.succeed(NoContent(error)),\n    success => fetchContent(success)\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["It's important to note that both ",(0,t.jsx)(n.code,{children:"ZIO#fold"})," and ",(0,t.jsx)(n.code,{children:"ZIO#foldZIO"})," operators cannot catch fiber interruptions. So the following application will crash due to ",(0,t.jsx)(n.code,{children:"InterruptedException"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run = (ZIO.interrupt *> ZIO.fail("Uh oh!")).fold(_ => (), _ => ())\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"And here is the output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'timestamp=2022-02-24T13:41:01.696273024Z level=ERROR thread=#zio-fiber-0 message="Exception in thread "zio-fiber-2" java.lang.InterruptedException: Interrupted by thread "zio-fiber-"\n   at <empty>.MainApp.run(MainApp.scala:4)"\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"ziofoldcauseziofoldcausezio",children:[(0,t.jsx)(n.code,{children:"ZIO#foldCause"}),"/",(0,t.jsx)(n.code,{children:"ZIO#foldCauseZIO"})]}),"\n",(0,t.jsxs)(n.p,{children:["This cause version of the ",(0,t.jsx)(n.code,{children:"fold"})," operator is useful to access the full cause of the underlying fiber. So in case of failure, based on the exact cause, we can determine what to do:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def foldCause[B](\n    failure: Cause[E] => B,\n    success: A => B\n  ): ZIO[R, Nothing, B]\n\n  def foldCauseZIO[R1 <: R, E2, B](\n    failure: Cause[E] => ZIO[R1, E2, B],\n    success: A => ZIO[R1, E2, B]\n  ): ZIO[R1, E2, B]\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Among the fold operators, these are the most powerful combinators. They can recover from any error, even fiber interruptions."}),"\n",(0,t.jsx)(n.p,{children:"In the following example, we are printing the proper message according to what cause occurred due to failure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval exceptionalEffect: ZIO[Any, Throwable, Unit] = ???\n\nval myApp: ZIO[Any, IOException, Unit] =\n  exceptionalEffect.foldCauseZIO(\n    failure = {\n      case Cause.Fail(value, _)        => Console.printLine(s"failure: $value")\n      case Cause.Die(value, _)         => Console.printLine(s"cause: $value")\n      case Cause.Interrupt(failure, _) => Console.printLine(s"${failure.threadName} interrupted!")\n      case _                           => Console.printLine("failed due to other causes")\n    },\n    success = succeed => Console.printLine(s"succeeded with $succeed value")\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When catching errors using this operator, if our cases were not exhaustive, we may receive a defect of the type ",(0,t.jsx)(n.code,{children:"scala.MatchError"})," :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nimport java.io.IOException\n\nobject MainApp extends ZIOAppDefault {\n  val exceptionalEffect: ZIO[Any, Throwable, Unit] = ZIO.interrupt\n\n  val myApp: ZIO[Any, IOException, Unit] =\n    exceptionalEffect.foldCauseZIO(\n      failure = {\n        case Cause.Fail(value, _) => ZIO.debug(s"failure: $value")\n        case Cause.Die(value, _) => ZIO.debug(s"cause: ${value.toString}")\n        // case Cause.Interrupt(failure, _) => ZIO.debug(s"${failure.threadName} interrupted!")\n      },\n      success = succeed => ZIO.debug(s"succeeded with $succeed value")\n    )\n\n  def run = myApp\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'timestamp=2022-02-24T11:05:40.241436257Z level=ERROR thread=#zio-fiber-0 message="Exception in thread "zio-fiber-2" scala.MatchError: Interrupt(Runtime(2,1645700739),Trace(Runtime(2,1645700739),Chunk(<empty>.MainApp.exceptionalEffect(MainApp.scala:6),<empty>.MainApp.myApp(MainApp.scala:9)))) (of class zio.Cause$Interrupt)\n\tat MainApp$.$anonfun$myApp$1(MainApp.scala:10)\n\tat zio.ZIO$TracedCont$$anon$33.apply(ZIO.scala:6167)\n\tat zio.ZIO$TracedCont$$anon$33.apply(ZIO.scala:6165)\n\tat zio.internal.FiberContext.runUntil(FiberContext.scala:885)\n\tat zio.internal.FiberContext.run(FiberContext.scala:115)\n\tat zio.internal.ZScheduler$$anon$1.run(ZScheduler.scala:151)\n\tat zio.internal.FiberContext.runUntil(FiberContext.scala:538)"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"ziofoldtracezio",children:(0,t.jsx)(n.code,{children:"ZIO#foldTraceZIO"})}),"\n",(0,t.jsx)(n.p,{children:"This version of fold, provide us the facility to access the trace info of the failure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def foldTraceZIO[R1 <: R, E2, B](\n    failure: ((E, Trace)) => ZIO[R1, E2, B],\n    success: A => ZIO[R1, E2, B]\n  )(implicit ev: CanFail[E]): ZIO[R1, E2, B]\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval result: ZIO[Any, Nothing, Int] =\n  validate(5).foldTraceZIO(\n    failure = {\n      case (_: NegativeAgeException, trace) =>\n        ZIO.succeed(0).debug(\n          "The entered age is negative\\n" +\n            s"trace info: ${trace.stackTrace.mkString("\\n")}"\n        )\n      case (_: IllegalAgeException, trace) =>\n        ZIO.succeed(0).debug(\n          "The entered age in not legal\\n" +\n            s"trace info: ${trace.stackTrace.mkString("\\n")}"\n        )\n    },\n    success = s => ZIO.succeed(s)\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that similar to ",(0,t.jsx)(n.code,{children:"ZIO#fold"})," and ",(0,t.jsx)(n.code,{children:"ZIO#foldZIO"})," this operator cannot recover from fiber interruptions."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(96540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);