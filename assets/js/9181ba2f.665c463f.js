"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[22551],{79075:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"zio-aws/index","title":"Overview","description":"ZIO AWS is AWS wrapper for ZIO for all AWS services using the AWS Java SDK v2.","source":"@site/docs/zio-aws/index.md","sourceDirName":"zio-aws","slug":"/zio-aws/","permalink":"/zio-aws/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-aws/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Overview"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO AMQP","permalink":"/zio-amqp/"},"next":{"title":"Artifacts","permalink":"/zio-aws/artifacts"}}');var t=i(74848),o=i(28453);const a={id:"index",title:"Overview"},r=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://zio.dev/zio-aws",children:"ZIO AWS"})," is AWS wrapper for ",(0,t.jsx)(n.a,{href:"https://zio.dev",children:"ZIO"})," for ",(0,t.jsx)(n.em,{children:"all"})," AWS services using the AWS Java SDK v2."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg",alt:"Production Ready"})})," ",(0,t.jsx)(n.img,{src:"https://github.com/zio/zio-aws/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,t.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-aws-core_2.13/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-aws-core_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,t.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-aws-core_2.13/",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-aws-core_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,t.jsx)(n.a,{href:"https://javadoc.io/doc/dev.zio/zio-aws-docs_2.13",children:(0,t.jsx)(n.img,{src:"https://javadoc.io/badge2/dev.zio/zio-aws-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,t.jsx)(n.a,{href:"https://github.com/zio/zio-aws",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/github/stars/zio/zio-aws?style=social",alt:"ZIO AWS"})})]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"The goal is to have access to all AWS functionality for cases when only a simple, direct access is needed from a ZIO application, or to be used as a building block for higher level wrappers around specific services."}),"\n",(0,t.jsx)(n.p,{children:"Key features of ZIO AWS:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Common configuration layer"}),"\n",(0,t.jsx)(n.li,{children:"ZIO module layer per AWS service"}),"\n",(0,t.jsx)(n.li,{children:"Wrapper for all operations on all services"}),"\n",(0,t.jsx)(n.li,{children:"HTTP service implementations for functional Scala HTTP libraries, injected through ZIO\u2019s module system"}),"\n",(0,t.jsx)(n.li,{children:"ZStream wrapper around paginated operations"}),"\n",(0,t.jsx)(n.li,{children:"Service-specific extra configuration"}),"\n",(0,t.jsx)(n.li,{children:"More idiomatic Scala request and response types wrapping the Java classes"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["There are tones of artifacts ",(0,t.jsx)(n.a,{href:"/zio-aws/artifacts",children:"published"})," for each AWS service. We can pick whichever services we need."]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["The following example uses the ",(0,t.jsx)(n.em,{children:"ElasticBeanstalk"})," and ",(0,t.jsx)(n.em,{children:"EC2"})," APIs:"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note"})}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/zio-aws/artifacts",children:"artifacts"})," page for the latest release."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-aws-core"             % "<version>"\nlibraryDependencies += "dev.zio" %% "zio-aws-ec2"              % "<version>"\nlibraryDependencies += "dev.zio" %% "zio-aws-elasticbeanstalk" % "<version>"\nlibraryDependencies += "dev.zio" %% "zio-aws-netty"            % "<version>"\n'})}),"\n",(0,t.jsx)(n.p,{children:"And here is the example code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.aws.core.AwsError\nimport zio.aws.core.config.AwsConfig\nimport zio.aws.ec2.Ec2\nimport zio.aws.ec2.model._\nimport zio.aws.ec2.model.primitives._\nimport zio.aws.elasticbeanstalk.ElasticBeanstalk\nimport zio.aws.elasticbeanstalk.model._\nimport zio.aws.elasticbeanstalk.model.primitives._\nimport zio.aws.netty.NettyHttpClient\nimport zio._\nimport zio.stream._\n\nobject ZIOAWSExample extends ZIOAppDefault {\n  val program: ZIO[Ec2 & ElasticBeanstalk, AwsError, Unit] =\n    for {\n      appsResult <- ElasticBeanstalk.describeApplications(\n        DescribeApplicationsRequest(applicationNames = Some(List(ApplicationName("my-service"))))\n      )\n      app <- appsResult.getApplications.map(_.headOption)\n      _ <- app match {\n        case Some(appDescription) =>\n          for {\n            applicationName <- appDescription.getApplicationName\n            _ <- Console\n              .printLine(\n                s"Got application description for $applicationName"\n              )\n              .ignore\n\n            envStream = ElasticBeanstalk.describeEnvironments(\n              DescribeEnvironmentsRequest(applicationName =\n                Some(applicationName)\n              )\n            )\n\n            _ <- envStream.run(ZSink.foreach { env =>\n              env.getEnvironmentName.flatMap { environmentName =>\n                (for {\n                  environmentId <- env.getEnvironmentId\n                  _ <- Console\n                    .printLine(\n                      s"Getting the EB resources of $environmentName"\n                    )\n                    .ignore\n\n                  resourcesResult <-\n                    ElasticBeanstalk.describeEnvironmentResources(\n                      DescribeEnvironmentResourcesRequest(environmentId =\n                        Some(environmentId)\n                      )\n                    )\n                  resources <- resourcesResult.getEnvironmentResources\n                  _ <- Console\n                    .printLine(\n                      s"Getting the EC2 instances in $environmentName"\n                    )\n                    .ignore\n                  instances <- resources.getInstances\n                  instanceIds <- ZIO.foreach(instances)(_.getId)\n                  _ <- Console\n                    .printLine(\n                      s"Instance IDs are ${instanceIds.mkString(", ")}"\n                    )\n                    .ignore\n\n                  reservationsStream = Ec2.describeInstances(\n                    DescribeInstancesRequest(instanceIds = Some(instanceIds.map(id => zio.aws.ec2.model.primitives.InstanceId(ResourceId.unwrap(id)))))\n                  )\n                  _ <- reservationsStream.run(ZSink.foreach { reservation =>\n                    reservation.getInstances\n                      .flatMap { instances =>\n                        ZIO.foreach(instances) { instance =>\n                          for {\n                            id <- instance.getInstanceId\n                            typ <- instance.getInstanceType\n                            launchTime <- instance.getLaunchTime\n                            _ <- Console.printLine(s"  instance $id:").ignore\n                            _ <- Console.printLine(s"    type: $typ").ignore\n                            _ <- Console\n                              .printLine(\n                                s"    launched at: $launchTime"\n                              )\n                              .ignore\n                          } yield ()\n                        }\n                      }\n                  })\n                } yield ()).catchAll { error =>\n                  Console\n                    .printLineError(\n                      s"Failed to get info for $environmentName: $error"\n                    )\n                    .ignore\n                }\n              }\n            })\n          } yield ()\n        case None =>\n          ZIO.unit\n      }\n    } yield ()\n\n  override def run: URIO[ZIOAppArgs, ExitCode] = {\n    val httpClient = NettyHttpClient.default\n    val awsConfig = httpClient >>> AwsConfig.default\n    val aws = awsConfig >>> (Ec2.live ++ ElasticBeanstalk.live)\n\n    program\n      .provideLayer(aws)\n      .either\n      .flatMap {\n        case Left(error) =>\n          Console.printLineError(s"AWS error: $error").ignore.as(ExitCode.failure)\n        case Right(_) =>\n          ZIO.unit.as(ExitCode.success)\n      }\n  }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(96540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);