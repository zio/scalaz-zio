"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[17009],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var a=n(96540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},67261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"zio-prelude/functional-data-types/index","title":"Functional Data Types in ZIO Prelude","description":"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems.","source":"@site/docs/zio-prelude/functional-data-types/index.md","sourceDirName":"zio-prelude/functional-data-types","slug":"/zio-prelude/functional-data-types/","permalink":"/zio-prelude/functional-data-types/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-prelude/functional-data-types/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Functional Data Types in ZIO Prelude","sidebar_label":"Functional Data Types"},"sidebar":"ecosystem-sidebar","previous":{"title":"NonEmptyForEach","permalink":"/zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach"},"next":{"title":"Equivalence","permalink":"/zio-prelude/functional-data-types/equivalence"}}');var i=n(74848),o=n(28453);const s={id:"index",title:"Functional Data Types in ZIO Prelude",sidebar_label:"Functional Data Types"},l=void 0,r={},d=[];function c(e){const t={a:"a",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/equivalence",children:"Equivalence"})})," - A description of an equivalence relationship between two data types."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/nonemptylist",children:"NonEmptyList"})})," - A list that is guaranteed to be non-empty to more accurately model situations where we know a collection has at least one element."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/these",children:"These"})})," - A data type that may either be a ",(0,i.jsx)(t.code,{children:"Left"})," with an ",(0,i.jsx)(t.code,{children:"A"}),", a ",(0,i.jsx)(t.code,{children:"Right"})," with a ",(0,i.jsx)(t.code,{children:"B"}),", or a ",(0,i.jsx)(t.code,{children:"Both"})," with an ",(0,i.jsx)(t.code,{children:"A"})," and a ",(0,i.jsx)(t.code,{children:"B"}),", useful for modeling problems such as merging streams of data."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/validation",children:"Validation"})})," - A data type that may be either a success or an accumulation of one or more errors, allowing modeling multiple failures for applications such as data validation."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/zset",children:"ZSet"})}),' - A generalization of a set that generalizes measures of "how many" of an element exist in a set, supporting multi-sets, "fuzzy" sets, and other data structures.']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/zio-prelude/functional-data-types/zvalidation",children:"ZValidation"})})," - A generalization of ",(0,i.jsx)(t.code,{children:"Validation"})," that allows maintaining a log of warnings in addition to accumulating errors."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);