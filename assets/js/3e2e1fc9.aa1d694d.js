"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71765],{2547:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-works-6df7b234b639594144e1e42799284ee7.png"},4831:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-not-works-a14b809555eb4249f39786781d249b49.png"},8750:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-lub-vs-console-6aaede2ffb000072d9692b0cccf04fb1.png"},28453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>o});var n=t(96540);const l={},s=n.createContext(l);function r(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),n.createElement(s.Provider,{value:i},e.children)}},61863:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"zio-direct/intellij-support","title":"ZIO-Direct IntelliJ Support","description":"It is highly recommended that you use Metals instead of IntelliJ for ZIO-Direct development since Metals correctly infers types for defer blocks (and other whitebox macros). This is especially true in Scala 3 where IntelliJ does not properly support union-types upon which the defer mechanism relies for ZIO error type composition.","source":"@site/docs/zio-direct/intellij-support.md","sourceDirName":"zio-direct","slug":"/zio-direct/intellij-support","permalink":"/zio-direct/intellij-support","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-direct/intellij-support.md","tags":[],"version":"current","frontMatter":{"id":"intellij-support","title":"ZIO-Direct IntelliJ Support","sidebar_label":"IntelliJ Support"},"sidebar":"ecosystem-sidebar","previous":{"title":"Supported Constructs","permalink":"/zio-direct/supported-constructs"},"next":{"title":"Other Supported Monads","permalink":"/zio-direct/other-supported-monads"}}');var l=t(74848),s=t(28453);const r={id:"intellij-support",title:"ZIO-Direct IntelliJ Support",sidebar_label:"IntelliJ Support"},o="IntelliJ Support",c={},a=[{value:"Installation",id:"installation",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Type Incongruence",id:"type-incongruence",level:4},{value:"Scala 3 Union-Type Limitations",id:"scala-3-union-type-limitations",level:4}];function d(e){const i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"intellij-support",children:"IntelliJ Support"})}),"\n",(0,l.jsxs)(i.blockquote,{children:["\n",(0,l.jsxs)(i.p,{children:["It is highly recommended that you use Metals instead of IntelliJ for ZIO-Direct development since Metals correctly infers types for ",(0,l.jsx)(i.code,{children:"defer"})," blocks (and other whitebox macros). This is especially true in Scala 3 where IntelliJ does not properly support union-types upon which the ",(0,l.jsx)(i.code,{children:"defer"})," mechanism relies for ZIO error type composition."]}),"\n"]}),"\n",(0,l.jsxs)(i.p,{children:["It is well known that IntelliJ does not support type inference with whitebox macros because it does not read types from the Scala compiler.\nSince ",(0,l.jsx)(i.code,{children:"defer"})," is a whitebox macro, IntelliJ will not be able to infer the type of the ",(0,l.jsx)(i.code,{children:"defer"})," block."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Not Works",src:t(4831).A+"",width:"1325",height:"1167"})}),"\n",(0,l.jsxs)(i.p,{children:["To circumvent this limitation, IntelliJ provides a mechanism to load custom library-specific\nplugins called Library-Extensions that can provide type information to the IDE (info ",(0,l.jsx)(i.a,{href:"https://github.com/JetBrains/intellij-scala/wiki/Library-Extensions",children:"here"}),').\nLibrary-Extension plugins are automatically loaded by IntelliJ when a library like zio-direct "asks" for one\nby providing a configuration file in the library\'s jar.']}),"\n",(0,l.jsx)(i.p,{children:"ZIO-Direct provides a Library-Extension plugin that is loaded by IntelliJ to provide type information."}),"\n",(0,l.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:"When adding a library dependency on zio-direct in the build.sbt file:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-scala",children:'// Build.sbt\nlibraryDependencies += "dev.zio" %% "zio-direct" % "..."\n'})}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:["Click the ",(0,l.jsx)(i.code,{children:"reload"})," button in the SBT panel of the IntelliJ project."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ SBT Reload",src:t(78352).A+"",width:"1990",height:"1563"})}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:'Once the SBT configuration is reloaded, the following message will appear in the bottom right corner of the IntelliJ project window. Click "Yes".'}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Import Plugin",src:t(81764).A+"",width:"3833",height:"2148"})}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:["IntelliJ will automatically download the zio-direct library and the Library-Extension plugin. The typing of ",(0,l.jsx)(i.code,{children:"defer"})," blocks should then work as expected."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Works",src:t(2547).A+"",width:"2005",height:"955"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(i.p,{children:'If the "Extensions Available" dialog does not appear or a manual reload of the zio-direct-intellij plugin is required. This typically involves manually clearing the imported libraries and then forcing a re-import from SBT. This is necessary so that IntelliJ runs the correct triggers to load the zio-direct-intellij plugin.'}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:["Go to the ",(0,l.jsx)(i.code,{children:"Project Structure"})," -> ",(0,l.jsx)(i.code,{children:"Libraries"})," dialog. Select all the libraries (Cmd+A) and click the ",(0,l.jsx)(i.code,{children:"-"})," button."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Clear Libraries",src:t(96492).A+"",width:"2336",height:"2055"})}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:["Once this is complete and all the libraries are removed. Go back to the SBT panel and click the ",(0,l.jsx)(i.code,{children:"reload"})," button."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ SBT Reload",src:t(78352).A+"",width:"1990",height:"1563"})}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:'Once the SBT project structure is reloaded, the "Extensions Available" dialog should appear.'}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Import Plugin",src:t(81764).A+"",width:"3833",height:"2148"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"caveats",children:"Caveats"}),"\n",(0,l.jsx)(i.h4,{id:"type-incongruence",children:"Type Incongruence"}),"\n",(0,l.jsxs)(i.p,{children:["Since the zio-direct-intellij plugin is still experimental, the types that it infers may be incorrect. Use the ",(0,l.jsx)(i.code,{children:"defer.info"})," function to check the Scala-compiler inferred type of the ",(0,l.jsx)(i.code,{children:"defer"})," block."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Info",src:t(74034).A+"",width:"1901",height:"1352"})}),"\n",(0,l.jsx)(i.h4,{id:"scala-3-union-type-limitations",children:"Scala 3 Union-Type Limitations"}),"\n",(0,l.jsxs)(i.p,{children:["Additionally, since IntelliJ does not properly support union-types, it is impossible to correctly infer the error type of a ",(0,l.jsx)(i.code,{children:"defer"})," that composes multiple ZIO effects with errors in Scala 3. Instead, the zio-direct-intellij plugin will use a least-upper bound instead of a union-type."]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.img,{alt:"IntelliJ Lub VS Console",src:t(8750).A+"",width:"2052",height:"1490"})}),"\n",(0,l.jsxs)(i.p,{children:["While in practice, this is not a problem since the least-upper bound is always a supertype of the union-type, it is still a limitation of the zio-direct-intellij plugin. If any unexpected issues occur, you can force zio-direct to infer least-upper-bound types by using ",(0,l.jsx)(i.code,{children:"defer(Use.withAbstractError) { ... }"})," however as this setting is not fully supported (e.g. it does not correctly infer error-types that contain type-parameters) it must be used with caution."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},74034:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-info-check-adcb2df3175bdb002fc34cb0cf0a0043.png"},78352:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-sbt-reload-eaf2a983574bf8ae8b001a9c8280016a.png"},81764:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-import-plugin-5f6fe3fc43de5002704bf67a870eab2f.png"},96492:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/intellij-clear-libraries-166d5cfd3ecf783e62b4ffca56ce4943.png"}}]);