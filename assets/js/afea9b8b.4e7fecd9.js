"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[54723],{14218:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/di/index","title":"Introduction to Dependency Injection in ZIO","description":"What is a Dependency?","source":"@site/docs/reference/di/index.md","sourceDirName":"reference/di","slug":"/reference/di/","permalink":"/reference/di/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/di/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to Dependency Injection in ZIO"},"sidebar":"reference-sidebar","previous":{"title":"Accessor Methods (deprecated)","permalink":"/reference/service-pattern/accessor-methods"},"next":{"title":"Motivation","permalink":"/reference/di/motivation"}}');var r=i(74848),s=i(28453);const o={id:"index",title:"Introduction to Dependency Injection in ZIO"},c=void 0,d={},l=[{value:"What is a Dependency?",id:"what-is-a-dependency",level:2},{value:"What is Dependency Injection?",id:"what-is-dependency-injection",level:2},{value:"ZIO&#39;s Built-in Dependency Injection",id:"zios-built-in-dependency-injection",level:2},{value:"ZIO&#39;s Dependency Injection Features",id:"zios-dependency-injection-features",level:2},{value:"Other Frameworks",id:"other-frameworks",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"what-is-a-dependency",children:"What is a Dependency?"}),"\n",(0,r.jsx)(n.p,{children:"When we implement a service, we might need to use other services. So a dependency is just another service that is required to fulfill its functionality:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"class Editor {\n val formatter = new Formatter\n val compiler = new Compiler\n \n def formatAndCompile(code: String): UIO[String] = \n formatter.format(code).flatMap(compiler.compile)\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"what-is-dependency-injection",children:"What is Dependency Injection?"}),"\n",(0,r.jsx)(n.p,{children:"Dependency injection is a pattern for decoupling the usage of dependencies from their actual creation process. In other words, it is a process of injecting dependencies of service from the outside world. The service itself doesn't know how to create its dependencies."}),"\n",(0,r.jsxs)(n.p,{children:["The following example shows an ",(0,r.jsx)(n.code,{children:"Editor"})," service that depends on ",(0,r.jsx)(n.code,{children:"Formatter"})," and ",(0,r.jsx)(n.code,{children:"Compiler"})," services. It doesn't use dependency injection:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._ \n\nclass Editor {\n private val formatter = new Formatter\n private val compiler = new Compiler\n \n def formatAndCompile(code: String): UIO[String] =\n formatter.format(code).flatMap(compiler.compile)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Editor"})," class in the above example is responsible for creating the ",(0,r.jsx)(n.code,{children:"Formatter"})," and ",(0,r.jsx)(n.code,{children:"Compiler"})," services. The client of the ",(0,r.jsx)(n.code,{children:"Editor"})," class doesn't have any control over these services. The client can't use a different implementation for the ",(0,r.jsx)(n.code,{children:"Formatter"})," and ",(0,r.jsx)(n.code,{children:"Compiler"})," services. So it makes it hard to test the ",(0,r.jsx)(n.code,{children:"Editor"})," class."]}),"\n",(0,r.jsx)(n.p,{children:"Let's try to change the above example to use the constructor-based dependency injection pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nclass Editor(formatter: Formatter, compiler: Compiler) {\n def formatAndCompile(code: String): UIO[String] = ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"Editor"})," service is not responsible for creating its dependencies. Instead, they are expected to be injected from the caller site. The ",(0,r.jsx)(n.code,{children:"Editor"})," service does not know how its dependencies are created, they are just injected into its constructor."]}),"\n",(0,r.jsx)(n.p,{children:"So dependency injection is a very simple concept and can be implemented with simple constructs. In a lot of situations, we are not required to use any tools or frameworks."}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.a,{href:"/reference/di/motivation",children:"motivation page"})," we explain why applications should use the dependency injection pattern in more detail."]}),"\n",(0,r.jsx)(n.h2,{id:"zios-built-in-dependency-injection",children:"ZIO's Built-in Dependency Injection"}),"\n",(0,r.jsx)(n.p,{children:"ZIO has a full solution to the dependency injection problem. It provides a built-in approach to dependency injection using the following tools in combination together:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ZIO Environment"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["We use the ",(0,r.jsx)(n.code,{children:"ZIO.serviceXYZ"})," to access services inside the ZIO environment, without having any knowledge of how the services are created or implemented. Using ",(0,r.jsx)(n.code,{children:"ZIO.serviceXYZ"})," helps us to decouple our usage of services from the implementation of the services."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Consequently, all dependencies will be encoded inside the ",(0,r.jsx)(n.code,{children:"R"})," type parameter of our ZIO application. This specifies which services are required to fulfill the application's functionality."]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["We use the ",(0,r.jsx)(n.code,{children:"ZIO.provideXYZ"})," to provide services to the ZIO environment. This is the opposite operation of ",(0,r.jsx)(n.code,{children:"ZIO.serviceXYZ"}),". It allows us to inject all dependencies into the ZIO environment."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ZLayer"}),"\u2014 We use layers to create the dependency graph that our application depends on."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We can have dependency injection through three simple steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Accessing services from the ZIO environment"}),"\n",(0,r.jsx)(n.li,{children:"Building the dependency graph"}),"\n",(0,r.jsx)(n.li,{children:"Providing services to the ZIO environment"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We will discuss them in more detail throughout ",(0,r.jsx)(n.a,{href:"/reference/di/dependency-injection-in-zio",children:"this page"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"zios-dependency-injection-features",children:"ZIO's Dependency Injection Features"}),"\n",(0,r.jsx)(n.p,{children:"Dependency injection in ZIO is very powerful, which increases developer productivity. Let's recap some important features of dependency injection in ZIO:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Composable"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composable Environment"}),"\u2014 Because of the very composable nature of the ",(0,r.jsx)(n.code,{children:"ZIO"})," data type, its environment type parameter is also composable. So when we compose multiple ",(0,r.jsx)(n.code,{children:"ZIO"})," effects, where each one requires a specific service, we finally get a ",(0,r.jsx)(n.code,{children:"ZIO"})," effect that requires all the required services that each of the composed effects requires."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For example, if we ",(0,r.jsx)(n.code,{children:"zip"})," two effects of type ",(0,r.jsx)(n.code,{children:"ZIO[A, Nothing, Int]"})," and ",(0,r.jsx)(n.code,{children:"ZIO[B, Throwable, String]"}),", the result of this operation will become ",(0,r.jsx)(n.code,{children:"ZIO[A with B, Throwable, (Int, String)]"}),". The result operation requires both ",(0,r.jsx)(n.code,{children:"A"})," and ",(0,r.jsx)(n.code,{children:"B"})," services."]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composable Dependencies"}),"\u2014 The ",(0,r.jsx)(n.code,{children:"ZLayer"})," is also composable, as well as ZIO's environment type parameter. So we can compose multiple layers to ",(0,r.jsx)(n.a,{href:"/reference/di/building-dependency-graph",children:"create a complex dependency graph"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type-Safe"}),"\u2014 All the required dependencies should be provided at compile time. If we forget to provide the required services at compile time, we will get a compile error. So if our program compiles successfully, we can be sure that we won't have runtime errors due to missing dependencies."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Effectful"}),"\u2014 We build dependency graphs using ",(0,r.jsx)(n.code,{children:"ZLayer"}),". Since ",(0,r.jsx)(n.code,{children:"ZLayer"})," is effectful, we can create a dependency graph in an effectful way."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resourceful"}),"\u2014 It also helps us to have resourceful dependencies, where we can manage the creation and release phases of the dependencies."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parallelism"}),"\u2014 All dependencies are created in parallel, and will be provided to our application."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"other-frameworks",children:"Other Frameworks"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"ZLayer"})," along with the ZIO environment to use dependency injection is optional. While we encourage users to use ZIO's idiomatic dependency injection, it is not mandatory."]}),"\n",(0,r.jsx)(n.p,{children:"We can still use other DI solutions. Here are some other options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/google/guice",children:"Guice"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://izumi.7mind.io/distage/index.html",children:"izumi distage"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/softwaremill/macwire",children:"MacWire"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);