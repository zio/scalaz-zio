"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[87492],{78430:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"zio-schema/derivations/codecs/bson","title":"Bson Codecs","description":"Introduction","source":"@site/docs/zio-schema/derivations/codecs/bson.md","sourceDirName":"zio-schema/derivations/codecs","slug":"/zio-schema/derivations/codecs/bson","permalink":"/zio-schema/derivations/codecs/bson","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/bson.md","tags":[],"version":"current","frontMatter":{"id":"bson","title":"Bson Codecs","sidebar_label":"BSON"},"sidebar":"ecosystem-sidebar","previous":{"title":"Apache Thrift","permalink":"/zio-schema/derivations/codecs/thrift"},"next":{"title":"JSON","permalink":"/zio-schema/derivations/codecs/json"}}');var c=n(74848),i=n(28453);const a={id:"bson",title:"Bson Codecs",sidebar_label:"BSON"},d=void 0,t={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"BsonSchemaCodec",id:"bsonschemacodec",level:2},{value:"Example",id:"example",level:2}];function l(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(o.h2,{id:"introduction",children:"Introduction"}),"\n",(0,c.jsxs)(o.p,{children:["BSON (Binary JSON) is a binary serialization format used to store and exchange data efficiently. In this article, we will explore how to derive BSON codecs from a ZIO Schema. The ",(0,c.jsx)(o.code,{children:"zio-schema-bson"})," module, provides support for deriving codecs from ZIO Schema, and makes it easy to communicate data in BSON format."]}),"\n",(0,c.jsx)(o.h2,{id:"installation",children:"Installation"}),"\n",(0,c.jsx)(o.p,{children:"To use BSON codecs, you need to add the following dependency to your Scala project:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema-bson" % 1.6.1\n'})}),"\n",(0,c.jsx)(o.h2,{id:"bsonschemacodec",children:"BsonSchemaCodec"}),"\n",(0,c.jsxs)(o.p,{children:["The ",(0,c.jsx)(o.code,{children:"BsonSchemaCodec"})," object inside the ",(0,c.jsx)(o.code,{children:"zio.schema.codec"})," package provides the ",(0,c.jsx)(o.code,{children:"bsonCodec"})," operator which allows us to derive Protobuf codecs from a ZIO Schema:"]}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-scala",children:"object BsonSchemaCodec {\n  def bsonCodec[A](schema: Schema[A]): BsonCodec[A]\n}\n"})}),"\n",(0,c.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,c.jsx)(o.p,{children:"Let's see an example of how to derive a BSON codec for a case class using ZIO Schema:"}),"\n",(0,c.jsx)(o.pre,{children:(0,c.jsx)(o.code,{className:"language-scala",children:'import org.bson.BsonValue\nimport zio._\nimport zio.bson._\nimport zio.schema.codec._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen\n  implicit val bsonCodec: BsonCodec[Person] =\n    BsonSchemaCodec.bsonCodec(Person.schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Bson Example:")\n    person: Person     = Person("John", 42)\n    encoded: BsonValue = person.toBsonValue\n    _       <- ZIO.debug(s"person object encoded to BsonValue: $encoded")\n    decoded <- ZIO.fromEither(encoded.as[Person])\n    _ <- ZIO.debug(s"BsonValue of person object decoded to Person: $decoded")\n  } yield ()\n}\n'})}),"\n",(0,c.jsxs)(o.p,{children:["In the example above, we defined a case class ",(0,c.jsx)(o.code,{children:"Person"})," with fields ",(0,c.jsx)(o.code,{children:"name"})," and ",(0,c.jsx)(o.code,{children:"age"}),". We then derived a ZIO Schema for the ",(0,c.jsx)(o.code,{children:"Person"})," case class using ",(0,c.jsx)(o.code,{children:"DeriveSchema.gen"}),"."]}),"\n",(0,c.jsxs)(o.p,{children:["The ",(0,c.jsx)(o.code,{children:"BsonSchemaCodec.bsonCodec"})," method allowed us to create a BSON codec for the ",(0,c.jsx)(o.code,{children:"Person"})," case class by passing its corresponding ZIO Schema. Now, we can effortlessly encode ",(0,c.jsx)(o.code,{children:"Person"})," objects to BSON and decode BSON values back to Person instances."]})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,c.jsx)(o,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>d});var s=n(96540);const c={},i=s.createContext(c);function a(e){const o=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(i.Provider,{value:o},e.children)}}}]);