"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[68248],{98235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"zio-kafka/preventing-duplicates","title":"Preventing duplicates","description":"In zio-kafka processing of records runs asynchronously with partition management. This brings substantial performance","source":"@site/docs/zio-kafka/preventing-duplicates.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/preventing-duplicates","permalink":"/zio-kafka/preventing-duplicates","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/preventing-duplicates.md","tags":[],"version":"current","frontMatter":{"id":"preventing-duplicates","title":"Preventing duplicates"},"sidebar":"ecosystem-sidebar","previous":{"title":"Tuning the consumer","permalink":"/zio-kafka/consumer-tuning"},"next":{"title":"Sharing a Consumer between multiple streams","permalink":"/zio-kafka/sharing-consumer"}}');var o=n(74848),a=n(28453);const r={id:"preventing-duplicates",title:"Preventing duplicates"},i=void 0,c={},u=[];function l(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["In zio-kafka processing of records runs asynchronously with partition management. This brings substantial performance\nadvantages but causes some records to be consumed and processed ",(0,o.jsx)(t.em,{children:"twice"})," when a rebalance occurs. To prevent this,\nsince version 2.7.1 zio-kafka supports a new mode in which we prevent duplicates due to rebalances. You can enable it\nas follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio.*\nimport zio.kafka.consumer.ConsumerSettings\n\nval consumerSettings: ConsumerSettings =\n  ConsumerSettings(List("localhost:9092"))\n    .withGroupId("group")\n    .withRebalanceSafeCommits(true)       // enable rebalance-safe-commits mode\n    .withMaxRebalanceDuration(30.seconds) // defaults to 3 minutes\n'})}),"\n",(0,o.jsx)(t.p,{children:"With rebalance-safe-commits mode enabled, rebalances are held up for up to max-rebalance-duration to wait for pending\ncommits to be completed. Once pending commits are completed, it is safe for another consumer in the group to take over\na partition."}),"\n",(0,o.jsx)(t.p,{children:"For this to work correctly, your program must process a chunk of records within max-rebalance-duration. The clock\nstarts the moment the chunk is pushed into the stream and ends when the commits for these records complete."}),"\n",(0,o.jsxs)(t.p,{children:["For more information see the scaladocs in ",(0,o.jsx)(t.code,{children:"ConsumerSettings"}),", read the description of\n",(0,o.jsx)(t.a,{href:"https://github.com/zio/zio-kafka/pull/1098",children:"pull request #1098"})," that introduced this feature, or watch the presentation\n",(0,o.jsx)(t.a,{href:"https://www.youtube.com/watch?v=MJoRwEyyVxM",children:"Making ZIO-Kafka Safer And Faster"}),". The relevant part starts at 10:24."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(96540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);