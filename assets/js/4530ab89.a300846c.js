"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[65987],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var t=a(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},63519:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/index","title":"Scan and Query Operations","description":"The High Level API mirrors the Scan and Query operations of DDB but with a high level of type safety.","source":"@site/docs/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/index.md","sourceDirName":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations","slug":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Scan and Query Operations","sidebar_label":"Scan and Query Operations"},"sidebar":"ecosystem-sidebar","previous":{"title":"deleteFrom","permalink":"/zio-dynamodb/reference/hi-level-api/crud-operations/delete"},"next":{"title":"scanAll","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all"}}');var r=a(74848),i=a(28453);const o={id:"index",title:"Scan and Query Operations",sidebar_label:"Scan and Query Operations"},s=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The High Level API mirrors the Scan and Query operations of DDB but with a high level of type safety."}),"\n",(0,r.jsxs)(n.p,{children:["We have to start of with a Scala model of the table and add an implicit schema reference in the companion object together with some convenience ",(0,r.jsx)(n.code,{children:"ProjectionExpression"}),"'s via the ",(0,r.jsx)(n.code,{children:"accessors"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"// year is the sort key\nfinal case class Equipment(id: String, year: Int, name: String, price: Double)\nobject Equipment {\n  implicit val schema: Schema.CaseClass4[String, Int, String, Double, Equipment] = DeriveSchema.gen[Equipment]\n  val (id, year, name, price)                                                    = ProjectionExpression.accessors[Equipment]\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"A summary is shown below and detailed sections can be found for each operation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object DynamoDBQuery { \n  // Scan/Query operations\n\n  def scanAll[A: Schema](\n    tableName: String\n  ): DynamoDBQuery[A, Stream[Throwable, A]] = ???\n\n  def scanSome[A: Schema](\n    tableName: String,\n    limit: Int\n  ): DynamoDBQuery[A, (Chunk[A], LastEvaluatedKey)] = ???  \n\n  def queryAll[A: Schema](\n    tableName: String\n  ): DynamoDBQuery[A, Stream[Throwable, A]] = ???\n\n  def querySome[A: Schema](\n    tableName: String,\n    limit: Int\n  ): DynamoDBQuery[A, (Chunk[A], LastEvaluatedKey)] = ???\n\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);