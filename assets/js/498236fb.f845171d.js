"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[46699],{34166:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ecosystem/community/tofu-zio2-logging","title":"Tofu ZIO 2 Logging","description":"Tofu is a functional toolkit modules providing a comprehensive set of tools adressing","source":"@site/docs/ecosystem/community/tofu-zio2-logging.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/tofu-zio2-logging","permalink":"/ecosystem/community/tofu-zio2-logging","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/tofu-zio2-logging.md","tags":[],"version":"current","frontMatter":{"id":"tofu-zio2-logging","title":"Tofu ZIO 2 Logging"},"sidebar":"ecosystem-sidebar","previous":{"title":"tamer","permalink":"/ecosystem/community/tamer"},"next":{"title":"TranzactIO","permalink":"/ecosystem/community/tranzactio"}}');var l=o(74848),i=o(28453);const s={id:"tofu-zio2-logging",title:"Tofu ZIO 2 Logging"},a=void 0,r={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"ZLogAnnotation and TofuDefaultContext",id:"zlogannotation-and-tofudefaultcontext",level:3},{value:"Loggable",id:"loggable",level:3},{value:"Logback layout",id:"logback-layout",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/",children:"Tofu"})," is a functional toolkit modules providing a comprehensive set of tools adressing\nreal-world problems through the prism of the tagless-final approach and functional programming in general.\nTofu consists of several independent modules, one of them is ",(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/docs/tofu.logging.home",children:"Tofu Logging"}),"\n, which provides first-class ",(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/docs/tofu.logging.recipes.zio2",children:"ZIO support"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Key features of Tofu Logging:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"100% structured logging"}),": you can easily log json-s with nested objects, arrays, numeric and boolean fields."]}),"\n",(0,l.jsxs)(n.li,{children:["logging context: implemented on top of ",(0,l.jsx)(n.code,{children:"FiberRef"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["built upon ",(0,l.jsx)(n.a,{href:"https://logback.qos.ch/",children:"Logback"}),",\nsupports ",(0,l.jsx)(n.a,{href:"https://github.com/logfellow/logstash-logback-encoder",children:"logstash-logback-encoder"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsxs)(n.p,{children:["Add the following lines in your ",(0,l.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "tf.tofu" %% "tofu-zio2-logging" % "version"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["For ",(0,l.jsx)(n.code,{children:"Loggable"})," derivation (see below):"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "tf.tofu" %% "tofu-logging-derivation" % "version"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["And choose a logback layout: Tofu's own implementation or logstash-encoder. See\nthe ",(0,l.jsx)(n.a,{href:"#logback-layout",children:"logback configuration"})," section."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "tf.tofu" %% "tofu-logging-logstash-logback" % "version"\n// OR:\nlibraryDependencies += "tf.tofu" %% "tofu-logging-layout" % "version"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,l.jsxs)(n.p,{children:["To use Tofu with ZIO logging facade just add ",(0,l.jsx)(n.code,{children:"TofuZLogger"})," to your app runtime:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'import tofu.logging.zlogs._\nimport zio._\n\nobject Main extends ZIOAppDefault {\n  val program: UIO[Unit] = ZIO.log("Hello, ZIO logging!")\n\n  override def run = {\n    program.logSpan("full_app") @@ ZIOAspect.annotated("foo", "bar")\n  }.provide(\n    Runtime.removeDefaultLoggers,\n    TofuZLogger.addToRuntime\n  )\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"The log message will be:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "level": "INFO",\n  "logger_name": "my.package.Main",\n  "message": "Hello, ZIO logging!",\n  "zSpans": {\n    "full_app": 534\n  },\n  "zAnnotations": {\n    "foo": "bar"\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"logger_name"})," is parsed from ",(0,l.jsx)(n.code,{children:"zio.Trace"})," which contains the location where log method is called"]}),"\n",(0,l.jsxs)(n.li,{children:["all ",(0,l.jsx)(n.code,{children:"zio.LogSpan"})," are collected in the json object named ",(0,l.jsx)(n.strong,{children:"zSpans"})]}),"\n",(0,l.jsxs)(n.li,{children:["all ",(0,l.jsx)(n.code,{children:"zio.LogAnnotation"})," are collected in the json object named ",(0,l.jsx)(n.strong,{children:"zAnnotations"})," (to avoid conflicts with Tofu\nannotations)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"zlogannotation-and-tofudefaultcontext",children:"ZLogAnnotation and TofuDefaultContext"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ZLogAnnotation"})," allows you to store typed, structured data on the default logging context (implemented on ",(0,l.jsx)(n.code,{children:"FiberRef"}),").\nIt also solves another problem:\nhaving a list of annotations in front of your eyes, you can easily make sure that the same names are not assigned to\ndifferent values (which can lead to an invalid json and corrupt your structured logs).\nThat's why we recommend to group all your log annotations in one place."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"TofuDefaultContext"})," is a service which allows to look up an element from the context added via ",(0,l.jsx)(n.code,{children:"ZLogAnnotation"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"trait TofuDefaultContext {\n  def getValue[A](key: LogAnnotation[A]): UIO[Option[A]]\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"It has two implementations:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"TofuDefaultContext.layerZioContextOff: ULayer[TofuDefaultContext]"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"TofuDefaultContext.layerZioContextOn: ULayer[TofuDefaultContext]"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["It doesn't matter which one to use with ZIO Logging facade. The difference will be only when working\nwith Tofu's own loggers and using ",(0,l.jsx)(n.code,{children:"TofuDefaultContext"})," as\na ",(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/docs/tofu.logging.recipes.zio2#contextprovider",children:"ContextProvider"}),"\n(this feature is Tofu-specific, and we won't cover it here)."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'val httpCode: ZLogAnnotation[Int] = ZLogAnnotation.make("httpCode")\n\nval program: UIO[Unit] = {\n  for {\n    _ <- ZIO.log("Hello, ZIO logging!")\n    maybeCode <- ZIO.serviceWithZIO[TofuDefaultContext](_.getValue(httpCode)) // Some(204)\n  } yield ()\n}.provide(TofuDefaultContext.layerZioContextOn) @@ httpCode(204) @@ ZLogAnnotation.loggerName("MyLogger")\n'})}),"\n",(0,l.jsx)(n.p,{children:"will produce:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "level": "INFO",\n  "logger_name": "MyLogger",\n  "message": "Hello, ZIO logging!",\n  "httpCode": 204\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["You can change the logger name via ",(0,l.jsx)(n.code,{children:"ZLogAnnotation.loggerName"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ZLogAnnotation.make[A](name: String)"})," implicitly requires a ",(0,l.jsx)(n.code,{children:"Loggable[A]"})," instance."]}),"\n",(0,l.jsx)(n.h3,{id:"loggable",children:"Loggable"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Loggable[A]"})," is a typeclass that describes how a value of some type can be logged.\nGiven an instance of ",(0,l.jsx)(n.code,{children:"Loggable"})," for a type, a value of the type can be converted into the final internal representation\ncalled ",(0,l.jsx)(n.code,{children:"LoggedValue"})," and thus logged in a way that you provided.\nThere are multiple predefined ways to create an instance of ",(0,l.jsx)(n.code,{children:"Loggable"}),", many of them can be found\nin ",(0,l.jsx)(n.code,{children:"tofu.logging.Loggable"})," object:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"provided instances for all primitive types, as well as stdlib's collections and collections from Cats"}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Loggable.empty"})," for no-op logging of value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Loggable.either"})," for logging either of A and B"]}),"\n",(0,l.jsxs)(n.li,{children:["provided ",(0,l.jsx)(n.code,{children:"java.time.*"})," instances"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Of course, you can describe your ",(0,l.jsx)(n.code,{children:"Loggable"})," instance yourself:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["by extending trait ",(0,l.jsx)(n.code,{children:"DictLoggable"})," for multi-field objects"]}),"\n",(0,l.jsxs)(n.li,{children:["using ",(0,l.jsx)(n.code,{children:"Loggable[A]#contramap[B](f: B => A)"})," method"]}),"\n",(0,l.jsx)(n.li,{children:"using configurable auto derivation"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Tofu has a macros that allows you to easily derive instances of ",(0,l.jsx)(n.code,{children:"Loggable[YourClass]"})," for case classes or ADTs.\nIn additional, there are several annotations to configure generation of ",(0,l.jsx)(n.code,{children:"Loggable"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@hidden"}),': when applied to the field means "do not log\\write this field"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@masked"}),': when applied to the field means "mask field value with given mode"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@unembed"}),': when applied to the field means "log subfields along with fields of owner"']}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'import tofu.logging.derivation._\nimport tofu.logging.derivation.loggable.generate\nimport tofu.logging.zlogs._\nimport zio._\n\ncase class User(\n  id: Int,\n  @hidden\n  password: String,\n  @masked(MaskMode.ForLength(3))\n  login: String,\n  godMode: Boolean = false\n)\n\nval user = User(100, "secret", "username")\nval userAnnotation: ZLogAnnotation[User] = ZLogAnnotation.make("user")\n\nval program: UIO[Unit] =\n  ZIO.log("Hello, ZIO logging!") @@ userAnnotation(user)\n'})}),"\n",(0,l.jsx)(n.p,{children:"The output of this program will be:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "level": "INFO",\n  "logger_name": "my.package.Main",\n  "message": "Hello, ZIO logging!",\n  "user": {\n    "id": 100,\n    "login": "use*****",\n    "godMode": false\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Read more on ",(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/docs/tofu.logging.loggable",children:"the website"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"logback-layout",children:"Logback layout"}),"\n",(0,l.jsxs)(n.p,{children:["Tofu has a ",(0,l.jsx)(n.a,{href:"https://github.com/logfellow/logstash-logback-encoder",children:"logstash-logback-encoder"})," provider\nnamed ",(0,l.jsx)(n.code,{children:"tofu.logging.TofuLoggingProvider"}),".\nEnter the following content into the ",(0,l.jsx)(n.code,{children:"logback.xml"})," file to get JSON logs:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8" ?>\n<configuration>\n    <appender name="logstash" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">\n            <providers>\n                <pattern>\n                    <pattern>\n                        { "env": "prod" } \x3c!-- optional static fields --\x3e\n                    </pattern>\n                </pattern>\n                <timestamp/>\n                <logLevel/>\n                <loggerName/>\n                <message/>\n                <provider class="tofu.logging.TofuLoggingProvider"/>\n            </providers>\n        </encoder>\n    </appender>\n\n    <root level="info">\n        <appender-ref ref="logstash"/>\n    </root>\n\n</configuration>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Read more about logback layouts configuration on ",(0,l.jsx)(n.a,{href:"https://docs.tofu.tf/docs/tofu.logging.layouts",children:"the website"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(96540);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);