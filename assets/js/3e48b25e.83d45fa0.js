"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[76161],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},95240:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","title":"scanAll","description":"The scanAll operation is used to scan all items in a table, and uses a ZIO stream to return the results.","source":"@site/docs/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all.md","sourceDirName":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations","slug":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all.md","tags":[],"version":"current","frontMatter":{"id":"scan-all","title":"scanAll"},"sidebar":"ecosystem-sidebar","previous":{"title":"Scan and Query Operations","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/"},"next":{"title":"scanSome","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-some"}}');var s=a(74848),i=a(28453);const r={id:"scan-all",title:"scanAll"},o=void 0,l={},c=[{value:"Combinators",id:"combinators",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"  def scanAll[A: Schema](\n    tableName: String\n  ): DynamoDBQuery[A, Stream[Throwable, A]] = ???\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"scanAll"})," operation is used to scan all items in a table, and uses a ZIO stream to return the results."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that scanning all items in a table can be an expensive operation in terms of elapsed time - to speed things up the\nAWS API offers a parallel/segmented scanning mode which can be invoked in the High Level API using the ",(0,s.jsx)(n.code,{children:"parallel"})," combinator -\ninternally it takes care of the details of calling the AWS segmented scan API using a fiber per segment and the results\nare merged back into the results stream in an undetermined order."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'for {\n  _          <- put(tableName, Equipment("1", 2020, "Widget1", 1.0)).execute\n  _          <- put(tableName, Equipment("1", 2021, "Widget1", 2.0)).execute\n  stream     <- scanAll[Equipment](tableName)\n                  .whereKey(Equipment.id.partitionKey === "1")\n                  .execute\n  _ <- stream.tap(equip => ZIO.debug(s"equipment: $equip")).runDrain \n} yield ()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"combinators",children:"Combinators"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"<SCAN_ALL_QUERY>\n  .consistency(<ConsistencyMode>)\n  .filter(<ConditionExpression>) // eg Equipment.price > 1.0 - filtering is done server side AFTER the scan  \n  .parallel(<N>)                 // executes a native DDB parallel scan on the server and merges the results back to the stream\n  .indexName(<IndexName>)        // use a secondary index    \n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);