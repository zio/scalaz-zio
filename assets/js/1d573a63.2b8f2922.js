"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60385],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},54217:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/di/motivation","title":"Motivation","description":"In this section, we are going to study how ZIO supports dependency injection by providing pedagogical examples. Examples provided in these sections are not idiomatic and are not meant to be used as a reference. We will discuss the idiomatic way to use dependency injection in ZIO later.","source":"@site/docs/reference/di/motivation.md","sourceDirName":"reference/di","slug":"/reference/di/motivation","permalink":"/reference/di/motivation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/di/motivation.md","tags":[],"version":"current","frontMatter":{"id":"motivation","title":"Motivation"},"sidebar":"reference-sidebar","previous":{"title":"Introduction to Dependency Injection in ZIO","permalink":"/reference/di/"},"next":{"title":"Constructor as a Value","permalink":"/reference/di/zlayer-constructor-as-a-value"}}');var i=t(74848),o=t(28453);const a={id:"motivation",title:"Motivation"},c=void 0,s={},l=[{value:"Step 1: Inversion of Control",id:"step-1-inversion-of-control",level:2},{value:"Step 2: Decoupling from Implementations",id:"step-2-decoupling-from-implementations",level:2},{value:"Step 3: Binding Interfaces to their Implementations",id:"step-3-binding-interfaces-to-their-implementations",level:2},{value:"Step 4: Effectful Constructors",id:"step-4-effectful-constructors",level:2},{value:"Step 5: Using ZIO Environment To Declare Dependencies",id:"step-5-using-zio-environment-to-declare-dependencies",level:2},{value:"Step 6: Automatic Dependency Graph Generation",id:"step-6-automatic-dependency-graph-generation",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"In this section, we are going to study how ZIO supports dependency injection by providing pedagogical examples. Examples provided in these sections are not idiomatic and are not meant to be used as a reference. We will discuss the idiomatic way to use dependency injection in ZIO later."}),(0,i.jsx)(n.p,{children:"So feel free to skip reading this section if you are not interested to learn the underlying concepts in detail."})]}),"\n",(0,i.jsxs)(n.p,{children:["Assume we have two services called ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," like the below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nclass Formatter {\n  def format(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\nclass Compiler {\n  def compile(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We want to create an editor service, which uses these two services. Hence, we are going to instantiate the required services inside the ",(0,i.jsx)(n.code,{children:"Editor"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"class Editor {\n  private val formatter: Formatter = new Formatter()\n  private val compiler: Compiler   = new Compiler()\n\n  def formatAndCompile(code: String): UIO[String] =\n    formatter.format(code).flatMap(compiler.compile)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"There are some problems with this approach:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Users of the ",(0,i.jsx)(n.code,{children:"Editor"})," service haven't any control over how dependencies will be created."]}),"\n",(0,i.jsxs)(n.li,{children:["Users of the ",(0,i.jsx)(n.code,{children:"Editor"})," service cannot use different implementations of ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," services. For example, we would like to test the ",(0,i.jsx)(n.code,{children:"Editor"})," service with a mock version of ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"}),". With this approach, mocking these dependencies is hard."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Editor"})," service is tightly coupled with ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"}),". This means any change to these services, may introduce a new change in the ",(0,i.jsx)(n.code,{children:"Editor"})," class."]}),"\n",(0,i.jsx)(n.li,{children:"Creating the object graph is a manual process."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's see how we can provide a solution to these problems. In the following sections, we will step by step solve these problems, and finally, we will see how ZIO solves the dependency injection problem."}),"\n",(0,i.jsx)(n.h2,{id:"step-1-inversion-of-control",children:"Step 1: Inversion of Control"}),"\n",(0,i.jsxs)(n.p,{children:["On solution to the first problem is inverting the control to the user of the ",(0,i.jsx)(n.code,{children:"Editor"})," service, which is called ",(0,i.jsx)(n.em,{children:"Inversion of Control"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Now lets instead of instantiating the dependencies inside the ",(0,i.jsx)(n.code,{children:"Editor"})," service, create them outside the ",(0,i.jsx)(n.code,{children:"Editor"})," service and pass them to the ",(0,i.jsx)(n.code,{children:"Editor"})," service:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"class Editor(formatter: Formatter, compiler: Compiler) {\n  def formatAndCompile(code: String): UIO[String] =\n    formatter.format(code).flatMap(compiler.compile)\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now the ",(0,i.jsx)(n.code,{children:"Editor"})," service is decoupled from how the ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," services are created. The client of the ",(0,i.jsx)(n.code,{children:"Editor"})," service can instantiate the ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," services and pass them to the ",(0,i.jsx)(n.code,{children:"Editor"})," service:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val formatter = new Formatter() // creating formatter\nval compiler  = new Compiler()  // creating compiler\nval editor = new Editor(formatter, compiler) // assembling formatter and compiler into editor\n\neditor.formatAndCompile("println(\\"Hello, world!\\")")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-decoupling-from-implementations",children:"Step 2: Decoupling from Implementations"}),"\n",(0,i.jsxs)(n.p,{children:["In the previous step, we delegated the creation of dependencies to the client of the ",(0,i.jsx)(n.code,{children:"Editor"})," service. This decouples the ",(0,i.jsx)(n.code,{children:"Editor"})," service from the creation of the dependencies. But it is not enough. We still coupled to the concrete classes called ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"}),". The user of the ",(0,i.jsx)(n.code,{children:"Editor"})," service cannot use different implementations rather than the ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," services. This is where the object-oriented approach comes into play. By programming to interfaces, we can encapsulate the ",(0,i.jsx)(n.code,{children:"Editor"})," service and make it independent of concrete implementations:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'trait Formatter {\n  def format(code: String): UIO[String]\n}\n\nclass ScalaFormatter extends Formatter {\n  def format(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\ntrait Compiler {\n  def compile(code: String): UIO[String]\n}\n\nclass ScalaCompiler extends Compiler {\n  def compile(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\ntrait Editor {\n  def formatAndCompile(code: String): UIO[String]\n}\n\nclass EditorLive(formatter: Formatter, compiler: Compiler) extends Editor {\n  def formatAndCompile(code: String): UIO[String] =\n    formatter.format(code).flatMap(compiler.compile)\n}\n\nval formatter = new ScalaFormatter() // Creating Formatter\nval compiler  = new ScalaCompiler()  // Creating Compiler\nval editor    = new EditorLive(formatter, compiler) // Assembling formatter and compiler into CodeEditor\n\neditor.formatAndCompile("println(\\"Hello, world!\\")")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now, we can test the ",(0,i.jsx)(n.code,{children:"Editor"})," service easily without having to worry about the implementation of the ",(0,i.jsx)(n.code,{children:"Formatter"})," and ",(0,i.jsx)(n.code,{children:"Compiler"})," services. To test the ",(0,i.jsx)(n.code,{children:"Editor"})," service, we can use a mock implementation of its dependencies:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'class MockFormatter extends Formatter {\n  def format(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\nclass MockCompiler extends Compiler {\n  def compile(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\nval formatter = new MockFormatter() // Creating mock formatter\nval compiler  = new MockCompiler()  // Creating mock compiler\nval editor    = new EditorLive(formatter, compiler) // Assembling formatter and compiler into CodeEditor\n\nimport zio.test._\n\nval expectedOutput = ???\nfor {\n  r <- editor.formatAndCompile("println(\\"Hello, world!\\")") \n} yield assertTrue(r == expectedOutput)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-binding-interfaces-to-their-implementations",children:"Step 3: Binding Interfaces to their Implementations"}),"\n",(0,i.jsxs)(n.p,{children:["In the previous step, we successfully decoupled the ",(0,i.jsx)(n.code,{children:"Editor"})," service from concrete dependencies. However, there is still a problem. When the application grows, the number of dependencies might increase. So, instead of injecting the dependencies manually whenever needed, we would like to maintain a mapping from interfaces to their implementations in a container, and then whenever needed, we can ask for the required dependency from the container."]}),"\n",(0,i.jsxs)(n.p,{children:["So we need a container that maintains this mapping. ZIO has a type-level map, called ",(0,i.jsx)(n.code,{children:"ZEnvironment"}),", which can do that for us:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val scalaFormatter = new ScalaFormatter() // Creating Formatter\nval scalaCompiler  = new ScalaCompiler() // Creating Compiler\nval myEditor       = // Assembling Formatter and Compiler into an Editor\n  new EditorLive(\n    scalaFormatter,\n    scalaCompiler\n  )\n\nval environment = ZEnvironment[Formatter, Compiler, Editor](scalaFormatter, scalaCompiler, myEditor)\n// Map(\n//  Formatter -> scalaFormatter,\n//  Compiler  -> scalaCompiler\n//  Editor    -> myEditor\n//)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, whenever we need an object of type ",(0,i.jsx)(n.code,{children:"Formatter"}),", ",(0,i.jsx)(n.code,{children:"Compiler"}),", or ",(0,i.jsx)(n.code,{children:"Editor"}),", we can ask the ",(0,i.jsx)(n.code,{children:"environment"})," for them."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'object MainApp extends ZIOAppDefault {\n  def run = \n    environment.get[Editor].formatAndCompile("println(\\"Hello, world!\\")")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here is another example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val workflow: ZIO[Any, Nothing, Unit] =\n  for {\n    f <- environment.get[Formatter].format("println(\\"Hello, world!\\")")\n    _ <- environment.get[Compiler].compile(f)\n  } yield ()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-effectful-constructors",children:"Step 4: Effectful Constructors"}),"\n",(0,i.jsxs)(n.p,{children:["Until now, we discussed the creation of services where the creation process was not effectful. But, assume in order to implement the ",(0,i.jsx)(n.code,{children:"Editor"})," service, we need the ",(0,i.jsx)(n.code,{children:"Counter"})," service, and the creation of ",(0,i.jsx)(n.code,{children:"Counter"})," itself is effectful:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait Counter {\n  def inc: UIO[Unit]\n  def dec: UIO[Unit]\n  def get: UIO[Int]\n}\n\ncase class CounterLive(ref: Ref[Int]) extends Counter {\n  def inc: UIO[Unit] = ref.update(_ + 1)\n  def dec: UIO[Unit] = ref.update(_ - 1)\n  def get: UIO[Int]  = ref.get\n}\n\nobject CounterLive {\n  // Effectful constructor\n  def make: UIO[Counter] = Ref.make(0).map(new CounterLive(_))\n}\n\nclass EditorLive(\n    formatter: Formatter,\n    compiler: Compiler,\n    counter: Counter\n) extends Editor {\n  def formatAndCompile(code: String): UIO[String] = ???\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To instantiate ",(0,i.jsx)(n.code,{children:"EditorLive"})," we can't use the same technique as before:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val scalaFormatter = new ScalaFormatter() // Creating Formatter\nval scalaCompiler  = new ScalaCompiler()  // Creating Compiler\nval myEditor       =                      // Assembling Formatter and Compiler into an Editor\n  new EditorLive(\n    scalaFormatter,\n    scalaCompiler,\n    CounterLive.make // Compiler Error: Type mismatch: expected: Counter, found: UIO[Counter]\n  )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can use ",(0,i.jsx)(n.code,{children:"ZIO#flatMap"})," to create the dependency graph but to make it easier, we have a special data type called ",(0,i.jsx)(n.code,{children:"ZLayer"}),". It is effectful, so we can use it to create the dependency graph effectfully:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'trait Formatter {\n  def format(code: String): UIO[String]\n}\n\ncase class ScalaFormatter() extends Formatter {\n  def format(code: String): UIO[String] = \n    ZIO.succeed(code) // dummy implementation\n}\n\nobject ScalaFormatter {\n  val layer: ULayer[Formatter] = ZLayer.succeed(ScalaFormatter())\n}\n\ntrait Compiler {\n  def compile(code: String): UIO[String]\n}\n\ncase class ScalaCompiler() extends Compiler {\n  def compile(code: String): UIO[String] = ZIO.succeed(code)\n}\nobject ScalaCompiler {\n  val layer = ZLayer.succeed(ScalaCompiler())\n}\n\ntrait Editor {\n  def formatAndCompile(code: String): UIO[String]\n}\n\ntrait Counter {\n  def inc: UIO[Unit]\n  def dec: UIO[Unit]\n  def get: UIO[Int]\n}\n\ncase class CounterLive(ref: Ref[Int]) extends Counter {\n  def inc: UIO[Unit] = ref.update(_ + 1)\n  def dec: UIO[Unit] = ref.update(_ - 1)\n  def get: UIO[Int]  = ref.get\n}\n\nobject CounterLive {\n  // Effectful constructor\n  def make: UIO[Counter] = Ref.make(0).map(new CounterLive(_))\n\n  val layer: ULayer[Counter] = ZLayer.fromZIO(CounterLive.make)\n}\n\ncase class EditorLive(\n    formatter: Formatter,\n    compiler: Compiler,\n    counter: Counter\n) extends Editor {\n  def formatAndCompile(code: String): UIO[String] = ???\n}\n\nobject EditorLive {\n  val layer: ZLayer[Counter with Compiler with Formatter, Nothing, Editor] =\n    ZLayer {\n      for {\n        // we will discuss ZIO.service later\n        formatter <- ZIO.service[Formatter] \n        compiler  <- ZIO.service[Compiler]\n        counter   <- ZIO.service[Counter]\n      } yield EditorLive(formatter, compiler, counter)\n    }\n}\n\nobject MainApp extends ZIOAppDefault {\n  val environment =\n    ((ScalaFormatter.layer ++ ScalaCompiler.layer ++ CounterLive.layer) >>> EditorLive.layer).build\n\n  def run =\n    for {\n      editor <- environment.map(_.get[Editor])\n      _      <- editor.formatAndCompile("println(\\"Hello, world!\\")")\n    } yield ()\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ZLayer"})," is not only an effectful constructor, but also it supports concurrency and resource safety when constructing layers."]})}),"\n",(0,i.jsx)(n.h2,{id:"step-5-using-zio-environment-to-declare-dependencies",children:"Step 5: Using ZIO Environment To Declare Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["So far, we learned that the ",(0,i.jsx)(n.code,{children:"ZEnvironment"})," can act as an IoC container. Whenever we need a dependency, we can ask for it from the environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val workflow: ZIO[Scope, Nothing, Unit] =\n  for {\n    env <- (ScalaFormatter.layer ++ ScalaCompiler.layer).build\n    f   <- env.get[Formatter].format("println(\\"Hello, world!\\")")\n    _   <- env.get[Compiler].compile(f)\n  } yield ()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["While this is a pretty good solution, there is a problem with it. Every time we need a dependency, we are asking for that instantly. In a large codebase, this imperative style of asking for dependencies can be tedious. This is an imperative style. It's better to make this declarative. So instead of ",(0,i.jsx)(n.strong,{children:"asking for dependencies"})," it is better to ",(0,i.jsx)(n.strong,{children:"declare dependencies"}),".\nAccordingly, we can use the ",(0,i.jsx)(n.code,{children:"R"})," type-parameter of the ",(0,i.jsx)(n.code,{children:"ZIO"})," data type which supports the declarative style:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val workflow: ZIO[Compiler with Formatter, Nothing, String] =\n for {\n   f  <- ZIO.service[Formatter] \n   r1 <- f.format("println(\\"Hello, world!\\")")\n   c  <- ZIO.service[Compiler]\n   r1 <- c.compile(r1)\n } yield r1\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is a much better solution. We just declare that we need the ",(0,i.jsx)(n.code,{children:"Compiler"})," and the ",(0,i.jsx)(n.code,{children:"Formatter"})," services using ",(0,i.jsx)(n.code,{children:"ZIO.service"})," and then we compose pieces of our program to create the final application. The final workflow has all requirements in its type signature. For example, the ",(0,i.jsx)(n.code,{children:"ZIO[Compiler with Formatter, Nothing, String]"})," type says that I need the ",(0,i.jsx)(n.code,{children:"Compiler"})," and the ",(0,i.jsx)(n.code,{children:"Formatter"})," services to produce the final result as a ",(0,i.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, we can provide all the dependencies through the ",(0,i.jsx)(n.code,{children:"ZIO#provideEnvironment"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"workflow.provideLayer(ScalaCompiler.layer ++ ScalaFormatter.layer)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-6-automatic-dependency-graph-generation",children:"Step 6: Automatic Dependency Graph Generation"}),"\n",(0,i.jsxs)(n.p,{children:["For large applications, it can be tedious to manually create the dependency graph. ZIO has a built-in mechanism empowered by using macros to automatically generate the dependency graph. To use this feature, we can use the ",(0,i.jsx)(n.code,{children:"ZIO#provide"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"workflow.provide(ScalaCompiler.layer, ScalaFormatter.layer)\n"})}),"\n",(0,i.jsx)(n.p,{children:"We should provide all required dependencies and then the ZIO will construct the dependency graph and provide that to our application."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);