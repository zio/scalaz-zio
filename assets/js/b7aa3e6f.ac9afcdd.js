"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[67564],{26379:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-bson/index","title":"Getting Started with ZIO Bson","description":"ZIO Bson is BSON library with tight ZIO integration.","source":"@site/docs/zio-bson/index.md","sourceDirName":"zio-bson","slug":"/zio-bson/","permalink":"/zio-bson/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-bson/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Getting Started with ZIO Bson","sidebar_label":"ZIO Bson"},"sidebar":"ecosystem-sidebar","previous":{"title":"Migration guide","permalink":"/zio-aws/migration-guide"},"next":{"title":"ZIO CLI","permalink":"/zio-cli/"}}');var i=o(74848),r=o(28453);const t={id:"index",title:"Getting Started with ZIO Bson",sidebar_label:"ZIO Bson"},a=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"zio-schema support",id:"zio-schema-support",level:2},{value:"Example",id:"example",level:2},{value:"Declaring codecs",id:"declaring-codecs",level:3},{value:"Converting to BsonValue",id:"converting-to-bsonvalue",level:3},{value:"Creating CodecProvider",id:"creating-codecprovider",level:3},{value:"Parsing BsonValue",id:"parsing-bsonvalue",level:3},{value:"Errors",id:"errors",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-bson",children:"ZIO Bson"})," is BSON library with tight ZIO integration."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"})})," ",(0,i.jsx)(n.img,{src:"https://github.com/zio/zio-bson/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,i.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-bson_2.13/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-bson_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,i.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-bson_2.13/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-bson_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,i.jsx)(n.a,{href:"https://javadoc.io/doc/dev.zio/zio-bson-docs_2.13",children:(0,i.jsx)(n.img,{src:"https://javadoc.io/badge2/dev.zio/zio-bson-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-bson",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/zio/zio-bson?style=social",alt:"ZIO Bson"})})]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The goal of this project is to create the best all-round BSON library for Scala:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Native BSON support"})," to avoid intermediate JSON conversions and support BSON types."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future-Proof"}),", prepared for Scala 3 and next-generation Java."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple"})," small codebase, concise documentation that covers everything."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Helpful errors"})," are readable by humans and machines."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ZIO Integration"})," so nothing more is required."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use this library, we need to add the following lines in our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-bson" % "1.0.7"\nlibraryDependencies += "dev.zio" %% "zio-bson-magnolia" % "1.0.7"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"zio-schema-support",children:"zio-schema support"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"zio-bson-magnolia"})," projects provides typeclass derivation only for ",(0,i.jsx)(n.code,{children:"scala"})," ",(0,i.jsx)(n.code,{children:"2.13"}),".\nYou can use ",(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-schema/",children:"zio-schema-bson"})," instead to get typeclass derivation on ",(0,i.jsx)(n.code,{children:"scala"})," ",(0,i.jsx)(n.code,{children:"2.12"}),", ",(0,i.jsx)(n.code,{children:"2.13"})," and ",(0,i.jsx)(n.code,{children:"3"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"All the following code snippets assume that the following imports have been declared"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.bson._\nimport zio.bson.BsonBuilder._\n"})}),"\n",(0,i.jsx)(n.h3,{id:"declaring-codecs",children:"Declaring codecs"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"DeriveBsonCodec.derive"})," to get a codec for your case class or sealed trait:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.bson.magnolia._\n\ncase class Banana(curvature: Double)\n\nobject Banana {\n  implicit val codec: BsonCodec[Banana] = DeriveBsonCodec.derive\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"converting-to-bsonvalue",children:"Converting to BsonValue"}),"\n",(0,i.jsxs)(n.p,{children:["To use values in ",(0,i.jsx)(n.code,{children:"Filter"})," of ",(0,i.jsx)(n.code,{children:"Update"})," expressions you can convert them to ",(0,i.jsx)(n.code,{children:"BsonValue"})," this way:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"str".toBsonValue\n\nBanana(0.2).toBsonValue\n\nimport org.bson._\n\ndef method[T: BsonEncoder](value: T): BsonDocument = doc("key" -> value.toBsonValue)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-codecprovider",children:"Creating CodecProvider"}),"\n",(0,i.jsxs)(n.p,{children:["To get ",(0,i.jsx)(n.code,{children:"CodecProvider"})," for your ",(0,i.jsx)(n.code,{children:"BsonCodec"})," use ",(0,i.jsx)(n.code,{children:"zioBsonCodecProvider"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val codecProvider = zioBsonCodecProvider[Banana]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parsing-bsonvalue",children:"Parsing BsonValue"}),"\n",(0,i.jsxs)(n.p,{children:["In general ",(0,i.jsx)(n.code,{children:"CodecProvider"})," should parse your case class without intermediate ",(0,i.jsx)(n.code,{children:"BsonValue"})," representation.\nBut you can parse ",(0,i.jsx)(n.code,{children:"BsonValue"})," any way:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import BsonBuilder._\n\nval bsonVal: BsonValue = doc("curvature" -> double(0.2))\n\nbsonVal.as[Banana]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,i.jsx)(n.p,{children:"Bad BSON will produce an error with path and contextual information"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'scala> doc("curvature" -> Array[Byte](1, 2, 3).toBsonValue).as[Banana]\nval res: Either[String,Banana] = Left(.curvature: Expected BSON type Double, but got BINARY.)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"You can configure typeclass derivation with annotations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.bson._\nimport zio.bson.BsonBuilder._\nimport zio.bson.magnolia._\n\nsealed trait Fruit\n\nobject Fruit {\n  case class Banana(curvature: Double) extends Fruit\n  case class Apple(poison: Boolean) extends Fruit\n  \n  implicit val codec: BsonCodec[Fruit] = DeriveBsonCodec.derive\n}\n\nval bsonFruit = doc( "Banana" -> doc( "curvature" -> double(0.5) ))\n\nbsonFruit.as[Fruit]\n//Right(Banana(0.5))\n\n@bsonDiscriminator("$type")\nsealed trait FruitConfigured\n\nobject FruitConfigured {\n  case class Banana(curvature: Double) extends FruitConfigured\n  @bsonHint("custom_type_name")\n  case class Apple(@bsonField("is_poisoned") poison: Boolean) extends FruitConfigured\n\n  implicit val codec: BsonCodec[FruitConfigured] = DeriveBsonCodec.derive\n}\n\nval bsonFruitConfigured = doc(\n  "$type" -> str("custom_type_name"),\n  "is_poisoned" -> bool(true)\n)\n\nbsonFruitConfigured.as[FruitConfigured]\n//Right(Apple(true))\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var s=o(96540);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);