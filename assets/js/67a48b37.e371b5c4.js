"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[42301],{28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var o=n(96540);const t={},r=o.createContext(t);function s(e){const i=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(r.Provider,{value:i},e.children)}},48260:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"guides/tutorials/deploy-a-zio-application-using-docker","title":"Tutorial: How to Deploy a ZIO Application Using Docker?","description":"Introduction","source":"@site/docs/guides/tutorials/deploy-a-zio-application-using-docker.md","sourceDirName":"guides/tutorials","slug":"/guides/tutorials/deploy-a-zio-application-using-docker","permalink":"/guides/tutorials/deploy-a-zio-application-using-docker","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/tutorials/deploy-a-zio-application-using-docker.md","tags":[],"version":"current","frontMatter":{"id":"deploy-a-zio-application-using-docker","title":"Tutorial: How to Deploy a ZIO Application Using Docker?","sidebar_label":"Deploying a ZIO Application Using Docker"},"sidebar":"guides-sidebar","previous":{"title":"Running Our First ZIO Project With IntelliJ IDEA","permalink":"/guides/tutorials/run-our-first-zio-project-with-intellij-idea"},"next":{"title":"Producing/Consuming Data To/From Kafka Topics","permalink":"/guides/tutorials/producing-consuming-data-from-kafka-topics"}}');var t=n(74848),r=n(28453);const s={id:"deploy-a-zio-application-using-docker",title:"Tutorial: How to Deploy a ZIO Application Using Docker?",sidebar_label:"Deploying a ZIO Application Using Docker"},a=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Running The Examples",id:"running-the-examples",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Adding SBT Native Packager Plugin",id:"adding-sbt-native-packager-plugin",level:2},{value:"Building The Docker Image",id:"building-the-docker-image",level:2},{value:"Deploying The Docker Image",id:"deploying-the-docker-image",level:2},{value:"Configuring The Docker Image",id:"configuring-the-docker-image",level:2},{value:"Exposing Container Ports",id:"exposing-container-ports",level:3},{value:"Publishing The Docker Image to a Remote Registry",id:"publishing-the-docker-image-to-a-remote-registry",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(i.p,{children:"Docker is a tool that allows us to package, ship, and run our applications in an isolated environment called a container. Using Docker, we can simplify the deployment process by isolating our applications in their own container and abstracting them from the host environment."}),"\n",(0,t.jsxs)(i.p,{children:["In this tutorial, we are going to learn how to build a Docker image for our ZIO application and then how to deploy it. Instead of writing the ",(0,t.jsx)(i.code,{children:"Dockerfile"})," from scratch, we will use the ",(0,t.jsx)(i.em,{children:(0,t.jsx)(i.a,{href:"https://github.com/sbt/sbt-native-packager",children:"sbt-native-packager"})})," to build our Docker image."]}),"\n",(0,t.jsx)(i.h2,{id:"running-the-examples",children:"Running The Examples"}),"\n",(0,t.jsxs)(i.p,{children:["In ",(0,t.jsx)(i.a,{href:"/guides/quickstarts/restful-webservice",children:"this quickstart"}),", we developed a web service containing 4 different HTTP Applications. Now in this article, we want to dockerize this web application."]}),"\n",(0,t.jsxs)(i.p,{children:["To access the code examples, you can clone the ",(0,t.jsx)(i.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstarts"})," project:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-restful-webservice-dockerize\n"})}),"\n",(0,t.jsx)(i.p,{children:"Once you are inside the project directory, run the application:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"sbt run\n"})}),"\n",(0,t.jsx)(i.p,{children:"Alternatively, to enable hot-reloading and prevent port binding issues, you can use:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"sbt reStart\n"})}),"\n",(0,t.jsxs)(i.admonition,{type:"note",children:[(0,t.jsxs)(i.p,{children:['If you encounter a "port already in use" error, you can use ',(0,t.jsx)(i.code,{children:"sbt-revolver"})," to manage server restarts more effectively. The ",(0,t.jsx)(i.code,{children:"reStart"})," command will start your server and ",(0,t.jsx)(i.code,{children:"reStop"})," will properly stop it, releasing the port."]}),(0,t.jsxs)(i.p,{children:["To enable this feature, we have included ",(0,t.jsx)(i.code,{children:"sbt-revolver"})," in the project. For more details on this, refer to the ",(0,t.jsx)(i.a,{href:"https://zio.dev/zio-http/installation#hot-reload-changes-watch-mode",children:"ZIO HTTP documentation on hot-reloading"}),"."]})]}),"\n",(0,t.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(i.p,{children:["Before we can dockerize our web service, we need to ",(0,t.jsx)(i.a,{href:"https://docs.docker.com/get-docker/",children:"download and install Docker"}),". So we assume that the reader has already installed Docker."]}),"\n",(0,t.jsx)(i.h2,{id:"adding-sbt-native-packager-plugin",children:"Adding SBT Native Packager Plugin"}),"\n",(0,t.jsx)(i.p,{children:"The sbt-native-packager is an sbt plugin that enables us an easy way to package the application as a docker image and deploy that as a docker container."}),"\n",(0,t.jsxs)(i.p,{children:["First, we need to add the plugin to our ",(0,t.jsx)(i.code,{children:"project/plugins.sbt"})," file:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'addSbtPlugin("com.github.sbt" % "sbt-native-packager" % "1.9.9")\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Now it's time to enable the ",(0,t.jsx)(i.code,{children:"JavaAppPackaging"})," and ",(0,t.jsx)(i.code,{children:"DockerPlugin"})," plugins. So we need to add the following lines in the ",(0,t.jsx)(i.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"enablePlugins(JavaAppPackaging)\nenablePlugins(DockerPlugin)\n"})}),"\n",(0,t.jsx)(i.h2,{id:"building-the-docker-image",children:"Building The Docker Image"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"DockerPlugin"})," plugin of ",(0,t.jsx)(i.em,{children:"sbt-native-packager"})," is responsible for configuring and building the docker image. We can run the following command to build the docker image:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ sbt docker:publishLocal\n"})}),"\n",(0,t.jsxs)(i.p,{children:["After the docker image is built, we can run the ",(0,t.jsx)(i.code,{children:"docker images"})," command to see the list of images that are currently available in the local docker registry:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ docker images\nREPOSITORY                          TAG     IMAGE ID       CREATED        SIZE\nzio-quickstart-restful-webservice   0.1.0   c9ae81ee8fa6   17 hours ago   558MB\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Note that, to see the generated ",(0,t.jsx)(i.code,{children:"Dockerfile"})," we can use the ",(0,t.jsx)(i.code,{children:"docker:stage"})," command:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ sbt docker:stage\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Dockerfile"})," will be generated in the ",(0,t.jsx)(i.code,{children:"target/docker/stage"})," directory."]}),"\n",(0,t.jsx)(i.h2,{id:"deploying-the-docker-image",children:"Deploying The Docker Image"}),"\n",(0,t.jsxs)(i.p,{children:["Now we can create a new container from this image by using the ",(0,t.jsx)(i.code,{children:"docker run"})," command:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ docker run -p 80:800 zio-quickstart-restful-webservice:0.1.0\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Using the ",(0,t.jsx)(i.code,{children:"-p"})," flag, we can specify the port that the container will listen to. As the web service is running on port ",(0,t.jsx)(i.code,{children:"8080"}),", we bind this port to the host port ",(0,t.jsx)(i.code,{children:"80"}),". Therefore, we can access the web service from the host machine through the port ",(0,t.jsx)(i.code,{children:"80"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'$ curl -i "http://localhost/greet?name=Jane&name=John"\nHTTP/1.1 200 OK\ncontent-type: text/plain\ncontent-length: 20\n\nHello Jane and John!\n'})}),"\n",(0,t.jsx)(i.h2,{id:"configuring-the-docker-image",children:"Configuring The Docker Image"}),"\n",(0,t.jsxs)(i.p,{children:["By default, the ",(0,t.jsx)(i.code,{children:"sbt-native-packager"})," plugin will build the docker image using some predefined settings. So without any configuration we can use the ",(0,t.jsx)(i.code,{children:"sbt docker:publish"})," or ",(0,t.jsx)(i.code,{children:"sbt docker:publishLocal"})," commands to build and publish the docker image to the remote or local docker registry."]}),"\n",(0,t.jsxs)(i.p,{children:["However, it is possible to configure the docker image, and it has lots of options to configure. We can find the list of available options in the ",(0,t.jsx)(i.a,{href:"https://www.scala-sbt.org/sbt-native-packager/formats/docker.html#configuration",children:"sbt-native-packager documentation"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"exposing-container-ports",children:"Exposing Container Ports"}),"\n",(0,t.jsxs)(i.p,{children:["For example, when we build a docker image, we can specify which ports the container will listen to, by using the ",(0,t.jsx)(i.code,{children:"EXPOSE"})," instruction in the ",(0,t.jsx)(i.code,{children:"Dockerfile"}),". In the similar way, we can expose the ports using ",(0,t.jsx)(i.em,{children:"sbt-native-packager"}),", by using the ",(0,t.jsx)(i.code,{children:"dockerExposedPorts"})," setting in the ",(0,t.jsx)(i.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:"dockerExposedPorts := Seq(8080)\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Now, when we build the docker image and create a container from it, the new container has the port ",(0,t.jsx)(i.code,{children:"8080"})," exposed. So when we run the ",(0,t.jsx)(i.code,{children:"docker ps"})," command, we can see that the new container has the port ",(0,t.jsx)(i.code,{children:"8080"})," exposed under the ",(0,t.jsx)(i.code,{children:"PORTS"})," column:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'$ docker ps\nCONTAINER ID   IMAGE                                     COMMAND                  CREATED         STATUS         PORTS      NAMES\n29982b053379   zio-quickstart-restful-webservice:0.1.0   "/opt/docker/bin/zio\u2026"   3 seconds ago   Up 2 seconds   8080/tcp   bold_liskov\n'})}),"\n",(0,t.jsx)(i.h3,{id:"publishing-the-docker-image-to-a-remote-registry",children:"Publishing The Docker Image to a Remote Registry"}),"\n",(0,t.jsxs)(i.p,{children:["In a CI/CD pipeline, we might want to publish the docker image to a remote registry other than the local registry. We can do this by configuring the ",(0,t.jsx)(i.code,{children:"dockerUsername"})," and ",(0,t.jsx)(i.code,{children:"dockerRepository"})," settings in the ",(0,t.jsx)(i.code,{children:"build.sbt"})," file:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'dockerUsername := sys.props.get("docker.username")\ndockerRepository := sys.props.get("docker.registry")\n'})}),"\n",(0,t.jsx)(i.p,{children:"Now, we can use the following command to publish the docker image to the remote registry:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"$ export DOCKER_USERNAME=<username>  // e.g: johndoe\n$ export DOCKER_REGISTRY=<registry>  // e.g: docker.io\n$ sbt -Ddocker.username=$NAMESPACE -Ddocker.registry=$DOCKER_REGISTRY docker:publish\n"})}),"\n",(0,t.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(i.p,{children:["In this tutorial, we learned how to build a docker image using ",(0,t.jsx)(i.em,{children:"sbt-native-packager"}),", and how to deploy the docker image to the local or remote Docker registry."]}),"\n",(0,t.jsxs)(i.p,{children:["All the source code associated with this article is available on the ",(0,t.jsx)(i.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstart"})," on Github."]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);