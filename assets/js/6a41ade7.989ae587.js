"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[14474],{850:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-connect/couchbase-connector","title":"Couchbase Connector","description":"Setup","source":"@site/docs/zio-connect/couchbase-connector.md","sourceDirName":"zio-connect","slug":"/zio-connect/couchbase-connector","permalink":"/zio-connect/couchbase-connector","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-connect/couchbase-connector.md","tags":[],"version":"current","frontMatter":{"id":"couchbase-connector","title":"Couchbase Connector"},"sidebar":"ecosystem-sidebar","previous":{"title":"Introduction","permalink":"/zio-connect/"},"next":{"title":"DynamoDB Connector","permalink":"/zio-connect/dynamodb-connector"}}');var t=c(74848),s=c(28453);const i={id:"couchbase-connector",title:"Couchbase Connector"},a=void 0,r={},l=[{value:"Setup",id:"setup",level:2},{value:"How to use it?",id:"how-to-use-it",level:2},{value:"Operators",id:"operators",level:2},{value:"<code>exists</code>",id:"exists",level:2},{value:"<code>get</code>",id:"get",level:2},{value:"<code>insert</code>",id:"insert",level:2},{value:"<code>remove</code>",id:"remove",level:2},{value:"<code>replace</code>",id:"replace",level:2},{value:"<code>upsert</code>",id:"upsert",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-connect-couchbase" % "0.4.4"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use-it",children:"How to use it?"}),"\n",(0,t.jsxs)(n.p,{children:["All available CouchbaseConnector combinators and operations are available in the package object ",(0,t.jsx)(n.code,{children:"zio.connect.couchbase"}),", you only\nneed to import ",(0,t.jsx)(n.code,{children:"zio.connect.couchbase._"})," to get started."]}),"\n",(0,t.jsxs)(n.p,{children:["The couchbase connector presumes you already have a couchbase cluster to connect to, and uses the official java client under the hood.\nYou can provide a cluster connection in the usual way and wrap it in a ",(0,t.jsx)(n.code,{children:"ZLayer"}),", typically something like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import com.couchbase.client.java.Cluster\nimport zio._\n\n  val cluster = ZLayer.scoped(\n    ZIO.acquireRelease(\n      ZIO.attempt(\n        Cluster\n          .connect("127.0.0.1", "admin", "admin22")\n      )\n    )(c => ZIO.attempt(c.disconnect()).orDie)\n  )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The connector provides a number of operations that can be used to interact with the cluster, most of the operations require\na ",(0,t.jsx)(n.code,{children:"QueryObject"})," or ",(0,t.jsx)(n.code,{children:"ContentQueryObject"})," which are case classes. The couchbase primitives that are used: ",(0,t.jsx)(n.code,{children:"BucketName"}),", ",(0,t.jsx)(n.code,{children:"CollectionName"}),",\n",(0,t.jsx)(n.code,{children:"ScopeName"})," and ",(0,t.jsx)(n.code,{children:"DocumentId"})," are all defined as zio-prelude newtypes of ",(0,t.jsx)(n.code,{children:"String"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.connect.couchbase.CouchbaseConnector._\n\nval bucket     = BucketName("gamesim-sample")\nval collection = CollectionName("_default")\nval scope      = ScopeName("_default")\nval newKey     = DocumentKey("zio-connect-doc")\n\nval queryObject = QueryObject(bucket, scope, collection, newKey)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now let's do something, and by do, we mean let's describe an action, like checking to see that a document exists by key/id:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val checkExists: ZIO[CouchbaseConnector, CouchbaseException, Boolean] = ZStream(queryObject) >>> exists\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Some important points to note here, the ",(0,t.jsx)(n.code,{children:"exists"})," operation is a ",(0,t.jsx)(n.code,{children:"ZSink"})," that expects elements of type ",(0,t.jsx)(n.code,{children:"QueryObject"})," as its streamed input.\nYou can access the underlying ",(0,t.jsx)(n.code,{children:"Throwable"})," from the ",(0,t.jsx)(n.code,{children:"CouchbaseException"})," by using the ",(0,t.jsx)(n.code,{children:"reason"})," property"]}),"\n",(0,t.jsx)(n.p,{children:"Here's what inserting a document looks like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val key                = DocumentKey(UUID.randomUUID().toString)\nval content            = Chunk[Byte](1, 2, 3)\nval contentQueryObject = ContentQueryObject(bucketName, scopeName, collectionName, key, content)\n\nval insertAction: ZIO[CouchbaseConnector, CouchbaseException, Unit] = ZStream(contentQueryObject) >>> insert\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"insert"})," is a ",(0,t.jsx)(n.code,{children:"ZSink"})," that expects elements of type ",(0,t.jsx)(n.code,{children:"ContentQueryObject"}),", which is a query object with an additional\n",(0,t.jsx)(n.code,{children:"content"})," property, as its streamed input and returns ",(0,t.jsx)(n.code,{children:"Unit"})," as its output."]}),"\n",(0,t.jsx)(n.p,{children:"To get a document by key/id:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val getAction: ZIO[CouchbaseConnector, CouchbaseException, Chunk[Byte]] = get(queryObject).runCollect\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"get"})," is a ",(0,t.jsx)(n.code,{children:"ZStream"})," that takes a query object as an argument and returns a ",(0,t.jsx)(n.code,{children:"ZStream"})," of ",(0,t.jsx)(n.code,{children:"Chunk[Byte]"})," as its output. There are\nother ways to process the chunk of bytes which get returned, but of course this depends on your domain."]}),"\n",(0,t.jsxs)(n.p,{children:["In order to run a program involving the couchbase connector, you need to provide the ",(0,t.jsx)(n.code,{children:"CouchbaseConnector"})," layer, and the cluster connection layer we created earlier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"def run = getAction.provide(couchbaseConnectorLiveLayer, cluster)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"couchbaseConnectorLiveLayer"})," is a ",(0,t.jsx)(n.code,{children:"ZLayer"})," that provides the ",(0,t.jsx)(n.code,{children:"LiveCouchbaseConnector"})," service, and is defined in the ",(0,t.jsx)(n.code,{children:"CouchbaseConnector"})," companion object."]}),"\n",(0,t.jsx)(n.h2,{id:"operators",children:"Operators"}),"\n",(0,t.jsx)(n.p,{children:"The following operators are available:"}),"\n",(0,t.jsx)(n.h2,{id:"exists",children:(0,t.jsx)(n.code,{children:"exists"})}),"\n",(0,t.jsxs)(n.p,{children:["Checks if a document exists by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),"\ncomplaining about privileges."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val existsAction: ZIO[CouchbaseConnector, CouchbaseException, Boolean] = ZStream(queryObject) >>> exists\n"})}),"\n",(0,t.jsx)(n.h2,{id:"get",children:(0,t.jsx)(n.code,{children:"get"})}),"\n",(0,t.jsxs)(n.p,{children:["Gets a document by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),".\nIf the document does not exist you will get a ",(0,t.jsx)(n.code,{children:"DocumentNotFoundException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val getAction: ZIO[CouchbaseConnector, CouchbaseException, Chunk[Byte]] = get(queryObject).runCollect\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert",children:(0,t.jsx)(n.code,{children:"insert"})}),"\n",(0,t.jsxs)(n.p,{children:["Inserts a document by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),".\nIf the document already exists you will get a ",(0,t.jsx)(n.code,{children:"DocumentExistsException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val insertAction: ZIO[CouchbaseConnector, CouchbaseException, Unit] = ZStream(contentQueryObject) >>> insert\n"})}),"\n",(0,t.jsx)(n.h2,{id:"remove",children:(0,t.jsx)(n.code,{children:"remove"})}),"\n",(0,t.jsxs)(n.p,{children:["Removes a document by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),".\nIf the document does not exist you will get a ",(0,t.jsx)(n.code,{children:"DocumentNotFoundException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val removeAction: ZIO[CouchbaseConnector, CouchbaseException, Unit] = ZStream(queryObject) >>> remove\n"})}),"\n",(0,t.jsx)(n.h2,{id:"replace",children:(0,t.jsx)(n.code,{children:"replace"})}),"\n",(0,t.jsxs)(n.p,{children:["Replaces a document by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),".\nIf the document does not exist you will get a ",(0,t.jsx)(n.code,{children:"DocumentNotFoundException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val replaceAction: ZIO[CouchbaseConnector, CouchbaseException, Unit] = ZStream(contentQueryObject) >>> replace\n"})}),"\n",(0,t.jsx)(n.h2,{id:"upsert",children:(0,t.jsx)(n.code,{children:"upsert"})}),"\n",(0,t.jsxs)(n.p,{children:["Updates or inserts a document by key/id, if the bucket, collection or scope do not exist you will get an ",(0,t.jsx)(n.code,{children:"AuthenticationFailureException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val upsertAction: ZIO[CouchbaseConnector, CouchbaseException, Unit] = ZStream(contentQueryObject) >>> upsert\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,c)=>{c.d(n,{R:()=>i,x:()=>a});var o=c(96540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);