"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[77508],{34063:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>f,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/concurrency/refm","title":"RefM","description":"RefM[A] models a mutable reference to a value of type A in which we can store immutable data, and update it atomically and effectfully.","source":"@site/versioned_docs/version-1.0.18/reference/concurrency/refm.md","sourceDirName":"reference/concurrency","slug":"/reference/concurrency/refm","permalink":"/1.0.18/reference/concurrency/refm","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/concurrency/refm.md","tags":[],"version":"1.0.18","frontMatter":{"id":"refm","title":"RefM"},"sidebar":"overview_sidebar","previous":{"title":"ZRefM","permalink":"/1.0.18/reference/concurrency/zrefm"},"next":{"title":"Promise","permalink":"/1.0.18/reference/concurrency/promise"}}');var s=t(74848),a=t(28453);const c={id:"refm",title:"RefM"},o=void 0,i={},d=[];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"RefM[A]"})," models a ",(0,s.jsx)(n.strong,{children:"mutable reference"})," to a value of type ",(0,s.jsx)(n.code,{children:"A"})," in which we can store ",(0,s.jsx)(n.strong,{children:"immutable"})," data, and update it atomically ",(0,s.jsx)(n.strong,{children:"and"})," effectfully."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Note:"})})}),"\n",(0,s.jsxs)(n.p,{children:["Almost all of ",(0,s.jsx)(n.code,{children:"RefM"})," operations are the same as ",(0,s.jsx)(n.code,{children:"Ref"}),". We suggest reading ",(0,s.jsx)(n.a,{href:"/1.0.18/reference/concurrency/ref",children:(0,s.jsx)(n.code,{children:"Ref"})})," at first if you are not familiar with ",(0,s.jsx)(n.code,{children:"Ref"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Let's explain how we can update a shared state effectfully with ",(0,s.jsx)(n.code,{children:"RefM"}),". The ",(0,s.jsx)(n.code,{children:"update"})," method and all other related methods get an effectful operation and then run they run these effects to change the shared state. This is the main difference between ",(0,s.jsx)(n.code,{children:"RefM"})," and ",(0,s.jsx)(n.code,{children:"Ref"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, we should pass in ",(0,s.jsx)(n.code,{children:"updateEffect"})," to it which is the description of an update operation. So ",(0,s.jsx)(n.code,{children:"RefM"})," is going to update the ",(0,s.jsx)(n.code,{children:"refM"})," by running the ",(0,s.jsx)(n.code,{children:"updateEffect"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nfor {\n  refM   <- RefM.make("current")\n  updateEffect = IO.effectTotal("update")\n  _ <- refM.update(_ => updateEffect)\n  value <- refM.get\n} yield assert(value == "update")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In real-world applications, there are cases where we want to run an effect, e.g. query a database, and then update the shared state. This is where ",(0,s.jsx)(n.code,{children:"RefM"})," can help us to update the shared state in a more actor model fashion. We have a shared mutable state but for every different command or message, and we want execute our effect and update the state."]}),"\n",(0,s.jsx)(n.p,{children:"We can pass in an effectful program into every single update. All of them will be done parallel, but the result will be sequenced in such a fashion that they only touched the state at different times, and we end up with a consistent state at the end."}),"\n",(0,s.jsxs)(n.p,{children:["In the following example, we are going to send ",(0,s.jsx)(n.code,{children:"getAge"})," request to usersApi for each user and updating the state respectively:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val meanAge =\n  for {\n    ref <- RefM.make(0)\n    _ <- IO.foreachPar(users) { user =>\n      ref.update(sumOfAges =>\n        api.getAge(user).map(_ + sumOfAges)\n      )\n    }\n    v <- ref.get\n  } yield (v / users.length)\n"})})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function c(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);