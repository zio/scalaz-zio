"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[55729],{10096:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"reference/core/uio","title":"UIO","description":"UIO[A] is a type alias for ZIO[Any, Nothing, A], which represents an Unexceptional effect that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","source":"@site/versioned_docs/version-1.0.18/reference/core/uio.md","sourceDirName":"reference/core","slug":"/reference/core/uio","permalink":"/1.0.18/reference/core/uio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/core/uio.md","tags":[],"version":"1.0.18","frontMatter":{"id":"uio","title":"UIO"},"sidebar":"overview_sidebar","previous":{"title":"ZIO","permalink":"/1.0.18/reference/core/zio"},"next":{"title":"URIO","permalink":"/1.0.18/reference/core/urio"}}');var o=t(74848),r=t(28453);const s={id:"uio",title:"UIO"},c=void 0,a={},l=[];function d(e){const n={blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"UIO[A]"})," is a type alias for ",(0,o.jsx)(n.code,{children:"ZIO[Any, Nothing, A]"}),", which represents an ",(0,o.jsx)(n.strong,{children:"Unexceptional"})," effect that doesn't require any specific environment, and cannot fail, but can succeed with an ",(0,o.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.em,{children:"Note:"})})}),"\n",(0,o.jsxs)(n.p,{children:["In Scala, the ",(0,o.jsx)(n.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's see how the ",(0,o.jsx)(n.code,{children:"UIO"})," type alias is defined:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"type UIO[+A] = ZIO[Any, Nothing, A]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["So the ",(0,o.jsx)(n.code,{children:"UIO"})," just equal to ",(0,o.jsx)(n.code,{children:"ZIO"})," which doesn't need any requirement and cannot fail because in the Scala the ",(0,o.jsx)(n.code,{children:"Nothing"})," type has no inhabitant, we can't create an instance of type ",(0,o.jsx)(n.code,{children:"Nothing"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ZIO"})," values of type ",(0,o.jsx)(n.code,{children:"UIO[A]"})," (where the error type is ",(0,o.jsx)(n.code,{children:"Nothing"}),") are considered ",(0,o.jsx)(n.em,{children:"infallible"}),",\nbecause the ",(0,o.jsx)(n.code,{children:"Nothing"})," type is ",(0,o.jsx)(n.em,{children:"uninhabitable"}),", i.e. there can be no actual values of type ",(0,o.jsx)(n.code,{children:"Nothing"}),". Values of this type may produce an ",(0,o.jsx)(n.code,{children:"A"}),", but will never fail with an ",(0,o.jsx)(n.code,{children:"E"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Let's write a fibonacci function. As we don't expect any failure, it is an unexceptional effect:"}),"\n",(0,o.jsxs)(n.p,{children:["In the following example, the ",(0,o.jsx)(n.code,{children:"fib"}),", doesn't have any requirement, as it is an unexceptional effect, we don't except any failure, and it succeeds with value of type ",(0,o.jsx)(n.code,{children:"Int"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.UIO\ndef fib(n: Int): UIO[Int] =\n  if (n <= 1) {\n    UIO.succeed(1)\n  } else {\n    for {\n      fiber1 <- fib(n - 2).fork\n      fiber2 <- fib(n - 1).fork\n      v2     <- fiber2.join\n      v1     <- fiber1.join\n    } yield v1 + v2\n  }\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," ",(0,o.jsx)(n.em,{children:"Principle of The Least Power"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the ",(0,o.jsx)(n.code,{children:"ZIO"})," type, specific for a less powerful workflow."]}),"\n",(0,o.jsx)(n.p,{children:"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias."}),"\n",(0,o.jsxs)(n.p,{children:["So there is no need to convert type aliases to the ",(0,o.jsx)(n.code,{children:"ZIO"})," data type, whenever the ",(0,o.jsx)(n.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);