"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[4148],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(96540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}},86610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"zio-cli/auth","title":"Authorization with OAuth2","description":"A command-line application interacting with an external API might require some form of authentication, so that access is restricted for unauthorized users. One widely employed authorization and authentication protocol is OAuth2. ZIO CLI can perform interactions with APIs requiring OAuth2. Although it is possible to construct a custom OAuth2 provider easily, there are already tailored OAuth2 providers for GitHub, Google and Facebook within ZIO CLI. We will see how we can add OAuth2 to our CLI application and how we can construct a custom OAuth2 provider to interact with other APIs.","source":"@site/docs/zio-cli/auth.md","sourceDirName":"zio-cli","slug":"/zio-cli/auth","permalink":"/zio-cli/auth","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/auth.md","tags":[],"version":"current","frontMatter":{"id":"auth","title":"Authorization with OAuth2","sidebar_label":"OAuth2"},"sidebar":"ecosystem-sidebar","previous":{"title":"Cli Configuration","permalink":"/zio-cli/cli-config"},"next":{"title":"Bash and Zsh Completion","permalink":"/zio-cli/bash-and-zsh-completion"}}');var o=n(74848),r=n(28453);const s={id:"auth",title:"Authorization with OAuth2",sidebar_label:"OAuth2"},a=void 0,c={},d=[{value:"Using OAuth2",id:"using-oauth2",level:2},{value:"ZIO Sample providers",id:"zio-sample-providers",level:2},{value:"Github",id:"github",level:3},{value:"Google",id:"google",level:3},{value:"Facebook",id:"facebook",level:3},{value:"Construction of custom OAuth2 provider",id:"construction-of-custom-oauth2-provider",level:2},{value:"Description of methods",id:"description-of-methods",level:3},{value:"Construction of GitHub OAuth2 provider",id:"construction-of-github-oauth2-provider",level:3},{value:"Integrating OAuth2",id:"integrating-oauth2",level:2}];function l(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["A command-line application interacting with an external API might require some form of authentication, so that access is restricted for unauthorized users. One widely employed authorization and authentication protocol is OAuth2. ",(0,o.jsx)(t.strong,{children:"ZIO CLI"})," can perform interactions with APIs requiring OAuth2. Although it is possible to construct a custom OAuth2 provider easily, there are already tailored OAuth2 providers for GitHub, Google and Facebook within ",(0,o.jsx)(t.strong,{children:"ZIO CLI"}),". We will see how we can add ",(0,o.jsx)(t.code,{children:"OAuth2"})," to our CLI application and how we can construct a custom OAuth2 provider to interact with other APIs."]}),"\n",(0,o.jsx)(t.h2,{id:"using-oauth2",children:"Using OAuth2"}),"\n",(0,o.jsxs)(t.p,{children:["OAuth2 is added to a CLI App as an ",(0,o.jsx)(t.code,{children:"Options[OAuth2Token]"}),". The token can be stored and the user can specify the path, so it is not necessary to repeat authentication. We can create it as with other options:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio.cli._\nimport zio.cli.oauth2.OAuth2Provider\nimport zio.cli.oauth2.OAuth2Provider._\n\nval clientId = "clientId"\n\nval provider: OAuth2Provider = OAuth2Provider.Github(clientId)\nval scope: List[String] = List("repo")\nval oauth2 = Options.oauth2(provider, scope)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"zio-sample-providers",children:"ZIO Sample providers"}),"\n",(0,o.jsx)(t.p,{children:"Currently the supported OAuth2 providers are GitHub, Google and Facebook."}),"\n",(0,o.jsx)(t.h3,{id:"github",children:"Github"}),"\n",(0,o.jsxs)(t.p,{children:["To create a GitHub provider, you must specify the ",(0,o.jsx)(t.code,{children:"clientId"})," and the scope of the authorization in a list. The ClientId is the client ID received from GitHub during registering."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'val githubOAuth = Options.oauth2(OAuth2Provider.Github(clientId), List("repo"))\n'})}),"\n",(0,o.jsx)(t.h3,{id:"google",children:"Google"}),"\n",(0,o.jsx)(t.p,{children:"Google requires Client ID and a Client Secret generated by Google API Console. They are known both to Google and your application."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'\nval clientSecret = "clientSecret"\n\nval googleOAuth = Options.oauth2(OAuth2Provider.Google(clientId, clientSecret), Nil)\n\n'})}),"\n",(0,o.jsx)(t.h3,{id:"facebook",children:"Facebook"}),"\n",(0,o.jsx)(t.p,{children:"Facebook requires an App Id and Client Token. They can be obtained through a Facebook developer account."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'\nval appId = "appId"\nval clientToken = "clientToken"\n\nval facebookOAuth = Options.oauth2(OAuth2Provider.Facebook(appId, clientToken), Nil)\n\n'})}),"\n",(0,o.jsx)(t.h2,{id:"construction-of-custom-oauth2-provider",children:"Construction of custom OAuth2 provider"}),"\n",(0,o.jsxs)(t.p,{children:["To create a custom OAuth2 provider, it suffices to extend the trait ",(0,o.jsx)(t.code,{children:"OAuth2Provider"}),".\nThe methods that need to be overrided are the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"import zio.cli.oauth2.AuthorizationResponse\nimport java.net.http.HttpRequest\n\ntrait OAuth2Provider {\n  \n  def name: String\n\n  def clientIdentifier: String\n\n  def authorizationRequest(scope: List[String]): HttpRequest\n\n  def accessTokenRequest(authorization: AuthorizationResponse): HttpRequest\n\n  def refreshTokenRequest(refreshToken: String): Option[HttpRequest]\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"Two other methods that might need to be overrided depending on the particular provider are"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"import java.net.http.HttpRequest\nimport zio.cli.oauth2._\n\ntrait OAuth2Provider {\n  \n  def decodeAuthorizationResponse(body: String): Either[String, AuthorizationResponse]\n\n  def decodeAccessTokenResponse(body: String): Either[String, AccessTokenResponse]\n\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"description-of-methods",children:"Description of methods"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"name"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"It is the name of the provider."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"clientIdentifier"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"It is a public client identifier as provided after registration on authorization\nserver. It is used for generating default file name, which holds access token."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"authorizationRequest"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"It generates the HTTP request for authorization request."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"accessTokenRequest"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"It generates the HTTP request for access token request."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"refreshTokenRequest"})]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["It generates the HTTP request for refresh token request. It must return ",(0,o.jsx)(t.code,{children:"None"})," if this operation is not supported by the provider."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"decodeAuthorizationResponse"})]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["It converts textual response of authorization request into ",(0,o.jsx)(t.code,{children:"AuthorizationResponse"}),". It defaults to decoding from standard JSON format."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Method ",(0,o.jsx)(t.code,{children:"decodeAccessTokenResponse"})]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["It converts textual response of access token request into ",(0,o.jsx)(t.code,{children:"AccessTokenResponse"}),".\nIt defaults to decoding from standard JSON format."]}),"\n",(0,o.jsx)(t.h3,{id:"construction-of-github-oauth2-provider",children:"Construction of GitHub OAuth2 provider"}),"\n",(0,o.jsxs)(t.p,{children:["The construction of an OAuth2 provider will be dependent on the particular API that we would like to access. The first step is to define ",(0,o.jsx)(t.code,{children:"name"})," and ",(0,o.jsx)(t.code,{children:"clientIdentifier"}),". The value ",(0,o.jsx)(t.code,{children:"clientIdentifier"})," can be obtained as a field of the case class representing our Provider. Then we construct the core of the Provider. Observe that the methods ",(0,o.jsx)(t.code,{children:"authorizationRequest"})," and ",(0,o.jsx)(t.code,{children:"accessTokenRequest"})," construct an ",(0,o.jsx)(t.code,{children:"HttpRequest"})," from the library ",(0,o.jsx)(t.strong,{children:"ZIO Http"}),". They represent a POST request to GitHub API."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio.cli.oauth2._\nimport java.net.http.HttpRequest\nimport java.net.URI\n\nfinal case class GithubExample(clientId: String) extends OAuth2Provider {\n    override val name = "Github"\n\n    override val clientIdentifier = clientId\n\n    // Core logic of Provider\n    override def authorizationRequest(scope: List[String]): HttpRequest =\n      HttpRequest\n        .newBuilder()\n        .uri(URI.create(s"https://github.com/login/device/code?client_id=$clientId&scope=${scope.mkString(",")}"))\n        .header("Accept", "application/json")\n        .POST(HttpRequest.BodyPublishers.noBody())\n        .build()\n\n    override def accessTokenRequest(authorization: AuthorizationResponse): HttpRequest =\n      HttpRequest\n        .newBuilder()\n        .uri(\n          URI.create(\n            s"https://github.com/login/oauth/access_token?client_id=$clientId&device_code=${authorization.deviceCode}&grant_type=urn:ietf:params:oauth:grant-type:device_code"\n          )\n        )\n        .header("Accept", "application/json")\n        .POST(HttpRequest.BodyPublishers.noBody())\n        .build()\n\n    override def refreshTokenRequest(refreshToken: String): Option[HttpRequest] = None\n  }\n'})}),"\n",(0,o.jsx)(t.h2,{id:"integrating-oauth2",children:"Integrating OAuth2"}),"\n",(0,o.jsxs)(t.p,{children:["This example shows how to integrate OAuth2 in a ZIO ",(0,o.jsx)(t.code,{children:"CliApp"}),". We are going to make a CLI App that interacts with Github and uploads a file to GitHub (This needs OAuth2)."]}),"\n",(0,o.jsxs)(t.p,{children:["The first step is to define the ",(0,o.jsx)(t.code,{children:"Options"})," that provides an `OAuth2Token"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio.Console.printLine\nimport zio.cli.HelpDoc.Span.text\nimport zio.cli.oauth2.OAuth2Provider\nimport zio.cli.oauth2._\nimport zio.cli._\n\nval githubOAuth: Options[OAuth2Token] = Options.oauth2(OAuth2Provider.Github("sampleId"), List("repo"))\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Then, we add the token to an ",(0,o.jsx)(t.code,{children:"Options"})," providing the path of a file. We construct a command ",(0,o.jsx)(t.code,{children:"upload"})," usign this ",(0,o.jsx)(t.code,{children:"Options"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'val options = Options.file("path") ++ githubOAuth\nval upload = Command("upload", options)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Finally, a ",(0,o.jsx)(t.code,{children:"CliApp"})," is specified using ",(0,o.jsx)(t.code,{children:"upload"})," command."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'val cliApp = CliApp.make(\n    name = "OAuth2 Example",\n    version = "0.0.1",\n    summary = text("Example of CliApp with OAuth2"),\n    command = upload) {\n    // Implement logic of CliApp\n      case file => printLine("Upload file to GitHub")\n    }\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);