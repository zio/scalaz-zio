"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6004],{52823:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"reference/error-management/operations/tapping-errors","title":"Tapping Errors","description":"Like tapping for success values ZIO has several operators for tapping error values. So we can peek into failures or underlying defects or causes:","source":"@site/docs/reference/error-management/operations/tapping-errors.md","sourceDirName":"reference/error-management/operations","slug":"/reference/error-management/operations/tapping-errors","permalink":"/reference/error-management/operations/tapping-errors","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/tapping-errors.md","tags":[],"version":"current","frontMatter":{"id":"tapping-errors","title":"Tapping Errors"},"sidebar":"reference-sidebar","previous":{"title":"Filtering the Success Channel","permalink":"/reference/error-management/operations/filtering-the-success-channel"},"next":{"title":"Exposing Errors in The Success Channel","permalink":"/reference/error-management/operations/exposing-errors-in-the-success-channel"}}');var o=n(74848),a=n(28453);const s={id:"tapping-errors",title:"Tapping Errors"},i=void 0,p={},c=[];function l(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["Like ",(0,o.jsx)(r.a,{href:"/reference/core/zio/#tapping",children:"tapping for success values"})," ZIO has several operators for tapping error values. So we can peek into failures or underlying defects or causes:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def tapError[R1 <: R, E1 >: E](f: E => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n  def tapErrorCause[R1 <: R, E1 >: E](f: Cause[E] => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n  def tapErrorTrace[R1 <: R, E1 >: E](f: ((E, Trace)) => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n  def tapDefect[R1 <: R, E1 >: E](f: Cause[Nothing] => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n  def tapBoth[R1 <: R, E1 >: E](f: E => ZIO[R1, E1, Any], g: A => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n  def tapEither[R1 <: R, E1 >: E](f: Either[E, A] => ZIO[R1, E1, Any]): ZIO[R1, E1, A]\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:"Let's try an example:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val myApp: ZIO[Any, NumberFormatException, Int] =\n    Console.readLine\n      .mapAttempt(_.toInt)\n      .refineToOrDie[NumberFormatException]\n      .tapError { e =>\n        ZIO.debug(s"user entered an invalid input: ${e}").when(e.isInstanceOf[NumberFormatException])\n      }\n\n  def run = myApp\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(96540);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);