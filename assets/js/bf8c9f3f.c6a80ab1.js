"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9066],{28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>t});var s=n(96540);const i={},c=s.createContext(i);function a(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(c.Provider,{value:r},e.children)}},41075:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"reference/index","title":"Introduction","description":"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:","source":"@site/versioned_docs/version-1.0.18/reference/index.md","sourceDirName":"reference","slug":"/reference/","permalink":"/1.0.18/reference/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/index.md","tags":[],"version":"1.0.18","frontMatter":{"id":"index","title":"Introduction"},"sidebar":"overview_sidebar","previous":{"title":"Platforms","permalink":"/1.0.18/overview/overview_platforms"},"next":{"title":"Summary","permalink":"/1.0.18/reference/core/"}}');var i=n(74848),c=n(28453);const a={id:"index",title:"Introduction"},t=void 0,l={},o=[{value:"Core Data Types",id:"core-data-types",level:2},{value:"Contextual Data Types",id:"contextual-data-types",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Fiber Primitives",id:"fiber-primitives",level:3},{value:"Concurrency Primitives",id:"concurrency-primitives",level:3},{value:"Synchronization aids",id:"synchronization-aids",level:3},{value:"STM",id:"stm",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#core-data-types",children:"Core Data Types"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#contextual-data-types",children:"Contextual Data Types"})}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"#concurrency",children:"Concurrency"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#fiber-primitives",children:"Fiber Primitives"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#concurrency-primitives",children:"Concurrency Primitives"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#synchronization-aids",children:"Synchronization Aids"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#stm",children:"STM"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#resource-management",children:"Resource Management"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#streaming",children:"Streaming"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#miscellaneous",children:"Miscellaneous"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"core-data-types",children:"Core Data Types"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/zio",children:"ZIO"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"ZIO"})," is a value that models an effectful program, which might fail or succeed.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/uio",children:"UIO"})})," \u2014 An ",(0,i.jsx)(r.code,{children:"UIO[A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, Nothing, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/urio",children:"URIO"})})," \u2014 An ",(0,i.jsx)(r.code,{children:"URIO[R, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[R, Nothing, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/task",children:"Task"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Task[A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, Throwable, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/rio",children:"RIO"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"RIO[R, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[R, Throwable, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/io",children:"IO"})})," \u2014 An ",(0,i.jsx)(r.code,{children:"IO[E, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, E, A]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/exit",children:"Exit"})})," \u2014 An ",(0,i.jsx)(r.code,{children:"Exit[E, A]"})," describes the result of executing an ",(0,i.jsx)(r.code,{children:"IO"})," value."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/cause",children:"Cause"})})," - ",(0,i.jsx)(r.code,{children:"Cause[E]"})," is a description of a full story of a fiber failure."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/core/runtime",children:"Runtime"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Runtime[R]"})," is capable of executing tasks within an environment ",(0,i.jsx)(r.code,{children:"R"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"contextual-data-types",children:"Contextual Data Types"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/has",children:"Has"})})," \u2014 The trait ",(0,i.jsx)(r.code,{children:"Has[A]"})," is used with the ",(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/#zio-environment",children:"ZIO environment"})," to express an effect's dependency on a service of type ",(0,i.jsx)(r.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/zlayer",children:"ZLayer"})})," \u2014 The ",(0,i.jsx)(r.code,{children:"ZIO[-R, +E, +A]"})," data type describes an effect that requires an input type of ",(0,i.jsx)(r.code,{children:"R"}),", as an environment, may fail with an error of type ",(0,i.jsx)(r.code,{children:"E"})," or succeed and produces a value of type ",(0,i.jsx)(r.code,{children:"A"}),".","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/rlayer",children:"RLayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"RLayer[-RIn, +ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[RIn, Throwable, ROut]"}),", which represents a layer that requires ",(0,i.jsx)(r.code,{children:"RIn"})," as its input, it may fail with ",(0,i.jsx)(r.code,{children:"Throwable"})," value, or returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/ulayer",children:"ULayer"})})," \u2014 ULayer[+ROut] is a type alias for ZLayer[Any, Nothing, ROut], which represents a layer that doesn't require any services as its input, it can't fail, and returns ROut as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/layer",children:"Layer"})})," \u2014 Layer[+E, +ROut] is a type alias for ZLayer[Any, E, ROut], which represents a layer that doesn't require any services, it may fail with an error type of E, and returns ROut as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/urlayer",children:"URLayer"})})," \u2014 URLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Nothing, ROut], which represents a layer that requires RIn as its input, it can't fail, and returns ROut as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/contextual/tasklayer",children:"TaskLayer"})})," \u2014 TaskLayer[+ROut] is a type alias for ZLayer[Any, Throwable, ROut], which represents a layer that doesn't require any services as its input, it may fail with Throwable value, and returns ROut as its output."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"concurrency",children:"Concurrency"}),"\n",(0,i.jsx)(r.h3,{id:"fiber-primitives",children:"Fiber Primitives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/fiber/",children:"Fiber"})})," \u2014 A fiber value models an ",(0,i.jsx)(r.code,{children:"IO"})," value that has started running, and is the moral equivalent of a green thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/fiber/fiberref",children:"FiberRef"})})," \u2014 ",(0,i.jsx)(r.code,{children:"FiberRef[A]"})," models a mutable reference to a value of type ",(0,i.jsx)(r.code,{children:"A"}),". As opposed to ",(0,i.jsx)(r.code,{children:"Ref[A]"}),", a value is bound to an executing ",(0,i.jsx)(r.code,{children:"Fiber"})," only.  You can think of it as Java's ",(0,i.jsx)(r.code,{children:"ThreadLocal"})," on steroids."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/fiber/fiberstatus",children:"Fiber.Status"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Fiber.Status"})," describe the current status of a Fiber."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/fiber/fiberid",children:"Fiber.Id"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Fiber.Id"})," describe the unique identity of a Fiber."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"concurrency-primitives",children:"Concurrency Primitives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/hub",children:"Hub"})})," - A ",(0,i.jsx)(r.code,{children:"Hub"})," is an asynchronous message hub that allows publishers to efficiently broadcast values to many subscribers."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/promise",children:"Promise"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Promise"})," is a model of a variable that may be set a single time, and awaited on by many fibers."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/semaphore",children:"Semaphore"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Semaphore"})," is an asynchronous (non-blocking) semaphore that plays well with ZIO's interruption."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/zref",children:"ZRef"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"ZRef[EA, EB, A, B]"})," is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ",(0,i.jsx)(r.code,{children:"ZRef"})," are ",(0,i.jsx)(r.code,{children:"set"})," and ",(0,i.jsx)(r.code,{children:"get"}),".","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/ref",children:"Ref"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Ref[A]"})," models a mutable reference to a value of type ",(0,i.jsx)(r.code,{children:"A"}),". The two basic operations are ",(0,i.jsx)(r.code,{children:"set"}),", which fills the ",(0,i.jsx)(r.code,{children:"Ref"})," with a new value, and ",(0,i.jsx)(r.code,{children:"get"}),", which retrieves its current content. All operations on a ",(0,i.jsx)(r.code,{children:"Ref"})," are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/zrefm",children:"ZRefM"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"ZRefM[RA, RB, EA, EB, A, B]"})," is a polymorphic, purely functional description of a mutable reference.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/refm",children:"RefM"})})," \u2014 ",(0,i.jsx)(r.code,{children:"RefM[A]"})," models a ",(0,i.jsx)(r.strong,{children:"mutable reference"})," to a value of type ",(0,i.jsx)(r.code,{children:"A"})," in which we can store ",(0,i.jsx)(r.strong,{children:"immutable"})," data, and update it atomically ",(0,i.jsx)(r.strong,{children:"and"})," effectfully."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/concurrency/queue",children:"Queue"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Queue"})," is an asynchronous queue that never blocks, which is safe for multiple concurrent producers and consumers."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"synchronization-aids",children:"Synchronization aids"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/sync/concurrentmap",children:"ConcurrentMap"})})," \u2014 A Map wrapper over ",(0,i.jsx)(r.code,{children:"java.util.concurrent.ConcurrentHashMap"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/sync/concurrentSet",children:"ConcurrentSet"})})," \u2014 A Set implementation over ",(0,i.jsx)(r.code,{children:"java.util.concurrent.ConcurrentHashMap"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/sync/countdownlatch",children:"CountdownLatch"})})," \u2014 A synchronization aid that allows one or more fibers to wait until a\nset of operations being performed in other fibers completes."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/sync/cyclicbarrier",children:"CyclicBarrier"})})," \u2014 A synchronization aid that allows a set of fibers to all wait for each\nother to reach a common barrier point."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"stm",children:"STM"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/",children:"STM"})})," - An ",(0,i.jsx)(r.code,{children:"STM"})," represents an effect that can be performed transactionally resulting in a failure or success."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tarray",children:"TArray"})})," - A ",(0,i.jsx)(r.code,{children:"TArray"})," is an array of mutable references that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tset",children:"TSet"})})," - A ",(0,i.jsx)(r.code,{children:"TSet"})," is a mutable set that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tmap",children:"TMap"})})," - A ",(0,i.jsx)(r.code,{children:"TMap"})," is a mutable map that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tref",children:"TRef"})})," - A ",(0,i.jsx)(r.code,{children:"TRef"})," is a mutable reference to an immutable value that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tpriorityqueue",children:"TPriorityQueue"})})," - A ",(0,i.jsx)(r.code,{children:"TPriorityQueue"})," is a mutable priority queue that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tpromise",children:"TPromise"})})," - A ",(0,i.jsx)(r.code,{children:"TPromise"})," is a mutable reference that can be set exactly once and can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tqueue",children:"TQueue"})})," - A ",(0,i.jsx)(r.code,{children:"TQueue"})," is a mutable queue that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/treentrantlock",children:"TReentrantLock"})})," - A ",(0,i.jsx)(r.code,{children:"TReentrantLock"})," is a reentrant read / write lock that can be composed."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stm/tsemaphore",children:"TSemaphore"})})," - A ",(0,i.jsx)(r.code,{children:"TSemaphore"})," is a semaphore that can participate in transactions."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/resource/managed",children:"Managed"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Managed"})," is a value that describes a perishable resource that may be consumed only once inside a given scope."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"streaming",children:"Streaming"}),"\n",(0,i.jsx)(r.p,{children:"The following datatypes can be found in ZIO streams library:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stream/zstream",children:"ZStream"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"ZStream"})," is a lazy, concurrent, asynchronous source of values."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/stream/zsink",children:"ZSink"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"ZSink"})," is a consumer of values from a ",(0,i.jsx)(r.code,{children:"ZStream"}),", which may produces a value when it has consumed enough."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/misc/chunk",children:"Chunk"})})," \u2014 ZIO ",(0,i.jsx)(r.code,{children:"Chunk"}),": Fast, Pure Alternative to Arrays"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/1.0.18/reference/misc/schedule",children:"Schedule"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Schedule"})," is a model of a recurring schedule, which can be used for repeating successful ",(0,i.jsx)(r.code,{children:"IO"})," values, or retrying failed ",(0,i.jsx)(r.code,{children:"IO"})," values."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"To learn more about these data types, please explore the pages above, or check out the Scaladoc documentation."})]})}function h(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);