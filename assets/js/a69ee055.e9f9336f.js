"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60245],{37120:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/test/zio-test-diff","title":"zio.test.diff.Diff","description":"When asserting two things are the same it\'s sometimes difficult to see the difference. Luckily there is a zio.test.Diff type-class. The purpose this type class is to output the difference between two things.","source":"@site/docs/reference/test/difference.md","sourceDirName":"reference/test","slug":"/reference/test/zio-test-diff","permalink":"/reference/test/zio-test-diff","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/difference.md","tags":[],"version":"current","frontMatter":{"id":"zio-test-diff","title":"zio.test.diff.Diff","sidebar_label":"zio.test.diff.Diff"}}');var o=i(74848),s=i(28453);const a={id:"zio-test-diff",title:"zio.test.diff.Diff",sidebar_label:"zio.test.diff.Diff"},r=void 0,c={},d=[{value:"Derive for case classes and algebraic data types",id:"derive-for-case-classes-and-algebraic-data-types",level:3},{value:"Custom types",id:"custom-types",level:3},{value:"Be wary of <code>LowPriDiff</code>",id:"be-wary-of-lowpridiff",level:3}];function f(e){const n={code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["When asserting two things are the same it's sometimes difficult to see the difference. Luckily there is a ",(0,o.jsx)(n.code,{children:"zio.test.Diff"})," type-class. The purpose this type class is to output the difference between two things."]}),"\n",(0,o.jsxs)(n.p,{children:["This can be one of the primitives types like ",(0,o.jsx)(n.code,{children:"String"}),", ",(0,o.jsx)(n.code,{children:"Int"}),", ",(0,o.jsx)(n.code,{children:"Double"}),", etc. But also more complex structures like a ",(0,o.jsx)(n.code,{children:"Map"}),", ",(0,o.jsx)(n.code,{children:"List"})," and so-forth."]}),"\n",(0,o.jsx)(n.h3,{id:"derive-for-case-classes-and-algebraic-data-types",children:"Derive for case classes and algebraic data types"}),"\n",(0,o.jsxs)(n.p,{children:["To ",(0,o.jsx)(n.em,{children:"derive"})," a type-class for a case class or a algebraic data type you can include the module ",(0,o.jsx)(n.code,{children:"zio-test-magnolia"})," if it's not included already. Which includes ",(0,o.jsx)(n.code,{children:"DeriveDiff"})," and ",(0,o.jsx)(n.code,{children:"DeriveGen"})," as well."]}),"\n",(0,o.jsxs)(n.p,{children:["To make it work you need to import the ",(0,o.jsx)(n.code,{children:"DeriveDiff"})," object/trait:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.test.magnolia.DeriveDiff._\n"})}),"\n",(0,o.jsx)(n.p,{children:"An example of a difference output inside a test may look like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'     \u2717 There was a difference\n        Expected\n        Person(\n          name = "Bibi",\n          nickname = Some("""Bibbo\n          The\n          Bibber\n          Bobber"""),\n          age = 300,\n          pet = Pet(\n            name = "The Beautiful Destroyer",\n            hasBone = false,\n            favoriteFoods = List("Alpha", "This is a wonderful way to live and die", "Potato", "Brucee Lee", "Potato", "Ziverge"),\n            birthday = 2023-08-20T17:32:33.479852Z\n          ),\n          person = Some(Person(\n            name = "Bibi",\n            nickname = Some("""Bibbo\n            The\n            Bibber\n            Bobber"""),\n            age = 300,\n            pet = Pet(\n              name = "The Beautiful Destroyer",\n              hasBone = false,\n              favoriteFoods = List("Alpha", "This is a wonderful way to live and die", "Potato", "Brucee Lee", "Potato", "Ziverge"),\n              birthday = 2023-08-20T17:32:33.479855Z\n            ),\n            person = None\n          ))\n        )\n        Diff -expected +obtained\n        Person(\n          name = "Bibi" \u2192 "Boboo",\n          nickname = Some(\n            """Bibbo\n            The\n            Bibber\n            Bobber""" \u2192 """Babbo\n            The\n            Bibber"""\n          ),\n          pet = Pet(\n            name = "The Beautiful Destroyer" \u2192 "The Beautiful Crumb",\n            favoriteFoods = List(\n              1 = "This is a wonderful way to live and die" \u2192 "This is a wonderful \\"way\\" to dance and party",\n              3 = "Brucee Lee",\n              4 = "Potato",\n              5 = "Ziverge"\n            ),\n            birthday = 2023-08-20T17:32:33.479852Z \u2192 -1000000000-01-01T00:00:00Z\n          ),\n          person = Some(\n            Person(\n              name = "Bibi" \u2192 "Boboo",\n              nickname = Some(\n                """Bibbo\n                The\n                Bibber\n                Bobber""" \u2192 """Babbo\n                The\n                Bibber"""\n              ),\n              pet = Pet(\n                name = "The Beautiful Destroyer" \u2192 "The Beautiful Crumb",\n                favoriteFoods = List(\n                  1 = "This is a wonderful way to live and die" \u2192 "This is a wonderful \\"way\\" to dance and party",\n                  3 = "Brucee Lee",\n                  4 = "Potato",\n                  5 = "Ziverge"\n                ),\n                birthday = 2023-08-20T17:32:33.479855Z \u2192 -1000000000-01-01T00:00:00Z\n              )\n            )\n          )\n        )\n      p1 == p2\n      p1 = Person(\n        name = "Boboo",\n        nickname = Some("""Babbo\n        The\n        Bibber"""),\n        age = 300,\n        pet = Pet(\n          name = "The Beautiful Crumb",\n          hasBone = false,\n          favoriteFoods = List("Alpha", "This is a wonderful \\"way\\" to dance and party", "Potato"),\n          birthday = -1000000000-01-01T00:00:00Z\n        ),\n        person = Some(Person(\n          name = "Boboo",\n          nickname = Some("""Babbo\n          The\n          Bibber"""),\n          age = 300,\n          pet = Pet(\n            name = "The Beautiful Crumb",\n            hasBone = false,\n            favoriteFoods = List("Alpha", "This is a wonderful \\"way\\" to dance and party", "Potato"),\n            birthday = -1000000000-01-01T00:00:00Z\n          ),\n          person = None\n        ))\n      )\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-types",children:"Custom types"}),"\n",(0,o.jsxs)(n.p,{children:["For more custom types you could provide type-class instances your self by implementing the ",(0,o.jsx)(n.code,{children:"zio.test.diff.Diff"})," type-class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"// somewhere defined in your domain package\ncase class Percentage(repr: Int)\n\nimplicit val diffPercentage: Diff[Percentage] = Diff[Double].contramap(_.repr)\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"be-wary-of-lowpridiff",children:["Be wary of ",(0,o.jsx)(n.code,{children:"LowPriDiff"})]}),"\n",(0,o.jsxs)(n.p,{children:["One thing to note that there is a trait ",(0,o.jsx)(n.code,{children:"LowPriDiff"})," which is stacked on the companion object of ",(0,o.jsx)(n.code,{children:"zio.test.diff.Diff"}),". There is lower priority type-class instance defined at ",(0,o.jsx)(n.code,{children:"LowerPriDiff"})," which is a fallback for ",(0,o.jsx)(n.code,{children:"AnyVal"}),". It's defined as ",(0,o.jsx)(n.code,{children:"implicit def anyValDiff[A <: AnyVal]: Diff[A] = anyDiff[A]"}),", so if some custom types mess up your diff, you might want to check on this topic."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(96540);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);