"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[64936],{27485:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/observability/metrics/counter","title":"Counter","description":"A Counter is a metric representing a single numerical value that may be incremented over time. A typical use of this metric would be to track the number of a certain type of request received.","source":"@site/docs/reference/observability/metrics/counter.md","sourceDirName":"reference/observability/metrics","slug":"/reference/observability/metrics/counter","permalink":"/reference/observability/metrics/counter","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/observability/metrics/counter.md","tags":[],"version":"current","frontMatter":{"id":"counter","title":"Counter"},"sidebar":"reference-sidebar","previous":{"title":"Introduction to ZIO Metrics","permalink":"/reference/observability/metrics/"},"next":{"title":"Gauge","permalink":"/reference/observability/metrics/gauge"}}');var s=t(74848),i=t(28453);const c={id:"counter",title:"Counter"},o=void 0,a={},l=[{value:"API",id:"api",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Examples",id:"examples",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"Counter"})," is a metric representing a single numerical value that may be incremented over time. A typical use of this metric would be to track the number of a certain type of request received."]}),"\n",(0,s.jsxs)(n.p,{children:["With a counter, the quantity of interest is the cumulative value over time, as opposed to a ",(0,s.jsx)(n.a,{href:"/reference/observability/metrics/gauge",children:"gauge"})," where the quantity of interest is the value as of a specific point in time."]}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsxs)(n.p,{children:["With one of the following constructors, we can create a counter of ",(0,s.jsx)(n.code,{children:"Long"}),", ",(0,s.jsx)(n.code,{children:"Double"})," or ",(0,s.jsx)(n.code,{children:"Int"})," type:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"object Metric {\n  def counter(name: String): Counter[Long] = ???\n  def counterDouble(name: String): Counter[Double] = ???\n  def counterInt(name: String): Counter[Int] = ???\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"We use the counter metric type for any value that increases, such as request counts. Note that we should never use the counter for a value that can decrease."}),"\n",(0,s.jsx)(n.p,{children:"So when we should use counters?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When we want to track a value over time, that only goes up"}),"\n",(0,s.jsx)(n.li,{children:"When we want to measure the increasing rate of something, how fast something is growing, such as request rates."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here are some of the use cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Request Counts"}),"\n",(0,s.jsx)(n.li,{children:"Completed Tasks"}),"\n",(0,s.jsx)(n.li,{children:"Error Counts"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Create a counter named ",(0,s.jsx)(n.code,{children:"countAll"})," which is incremented by ",(0,s.jsx)(n.code,{children:"1"})," every time it is invoked:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.metrics._\nval countAll = Metric.counter("countAll").fromConst(1)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now the counter can be applied to any effect. Note, that the same aspect can be applied to more than one effect. In the example we would count the sum of executions of both effects in the for comprehension:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val myApp = for {\n  _ <- ZIO.unit @@ countAll\n  _ <- ZIO.unit @@ countAll\n} yield ()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or we can apply them in recurrence situations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'(zio.Random.nextLongBounded(10) @@ Metric.counter("request_counts")).repeatUntil(_ == 7)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create a counter named ",(0,s.jsx)(n.code,{children:"countBytes"})," that can be applied to effects having the output type ",(0,s.jsx)(n.code,{children:"Double"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'val countBytes = Metric.counter("countBytes")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now we can apply it to effects producing ",(0,s.jsx)(n.code,{children:"Double"})," (in a real application the value might be the number of bytes read from a stream or something similar):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val myApp = Random.nextLongBetween(0, 100) @@ countBytes\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);