"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[84482],{34548:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/observability/metrics/jvm","title":"JVM Metrics","description":"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the Prometheus Java Hotspot library and compatible with that library.","source":"@site/docs/reference/observability/metrics/jvm.md","sourceDirName":"reference/observability/metrics","slug":"/reference/observability/metrics/jvm","permalink":"/reference/observability/metrics/jvm","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/observability/metrics/jvm.md","tags":[],"version":"current","frontMatter":{"id":"jvm","title":"JVM Metrics"},"sidebar":"reference-sidebar","previous":{"title":"MetricLabel","permalink":"/reference/observability/metrics/metriclabel"},"next":{"title":"Tracing","permalink":"/reference/observability/tracing"}}');var r=n(74848),t=n(28453);const o={id:"jvm",title:"JVM Metrics"},l=void 0,c={},a=[{value:"Collecting Metrics",id:"collecting-metrics",level:2},{value:"Collecting Inside a ZIO Application",id:"collecting-inside-a-zio-application",level:3},{value:"Collecting as a Sidecar to a ZIO Application",id:"collecting-as-a-sidecar-to-a-zio-application",level:3}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the ",(0,r.jsx)(i.a,{href:"https://github.com/prometheus/client_java/tree/master/simpleclient_hotspot",children:"Prometheus Java Hotspot library"})," and compatible with that library."]}),"\n",(0,r.jsx)(i.p,{children:"There are five categories of JVM metrics. Let's look at them one by one:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Buffer Pools","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_buffer_pool_used_bytes"})," \u2014 Used bytes of a given JVM buffer pool."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_buffer_pool_capacity_bytes"})," \u2014 Bytes capacity of a given JVM buffer pool."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_buffer_pool_used_buffers"})," \u2014 Used buffers of a given JVM buffer pool."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Class Loading","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_classes_loaded"})," \u2014 The number of classes that are currently loaded in the JVM"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_classes_loaded_total"})," \u2014 The total number of classes that have been loaded since the JVM has started execution"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_classes_unloaded_total"})," \u2014 The total number of classes that have been unloaded since the JVM has started\nexecution"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Garbage Collector","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_gc_collection_seconds_sum"})," \u2014 Time spent in a given JVM garbage collector in seconds."]}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"jvm_gc_collection_seconds_count"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Memory Allocation","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_pool_allocated_bytes_total"})," \u2014 Total bytes allocated in a given JVM memory pool. Only updated after GC, not continuously."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Memory Pools","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_bytes_used"})," \u2014 Used bytes of a given JVM memory area."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_bytes_committed"})," \u2014 Committed (bytes) of a given JVM memory area."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_bytes_max"})," \u2014 Max (bytes) of a given JVM memory area."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_bytes_init"})," \u2014 Initial bytes of a given JVM memory area."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_pool_bytes_used"})," \u2014 Used bytes of a given JVM memory pool."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_pool_bytes_committed"})," \u2014 Committed bytes of a given JVM memory pool."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_pool_bytes_max"})," \u2014 Max bytes of a given JVM memory pool."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_memory_pool_bytes_init"})," \u2014 Initial bytes of a given JVM memory pool."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Standard","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_cpu_seconds_total"})," \u2014 Total user and system CPU time spent in seconds."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_start_time_seconds"})," \u2014 Start time of the process since unix epoch in seconds."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_open_fds"})," \u2014 Number of open file descriptors."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_max_fds"})," \u2014 Maximum number of open file descriptors."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_virtual_memory_bytes"})," \u2014 Virtual memory size in bytes."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"process_resident_memory_bytes"})," \u2014 Resident memory size in bytes."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Thread","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_current"})," \u2014 Current thread count of a JVM."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_daemon"})," \u2014 Daemon thread count of a JVM."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_peak"})," \u2014 Peak thread count of a JVM."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_started_total"})," \u2014 Started thread count of a JVM."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_deadlocked"})," \u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors or ownable synchronizers."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_deadlocked_monitor"})," \u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_threads_state"})," \u2014 Current count of threads by state."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Version Info","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"jvm_info"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"version"})," \u2014 java.runtime.version"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"vendor"})," \u2014 java.vm.vendor"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"runtime"})," \u2014 java.runtime.name"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"collecting-metrics",children:"Collecting Metrics"}),"\n",(0,r.jsx)(i.h3,{id:"collecting-inside-a-zio-application",children:"Collecting Inside a ZIO Application"}),"\n",(0,r.jsx)(i.p,{children:"JVM Metrics are collection of the following ZIO services:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"BufferPools"}),"\n",(0,r.jsx)(i.li,{children:"ClassLoading"}),"\n",(0,r.jsx)(i.li,{children:"GarbageCollector"}),"\n",(0,r.jsx)(i.li,{children:"MemoryAllocation"}),"\n",(0,r.jsx)(i.li,{children:"MemoryPools"}),"\n",(0,r.jsx)(i.li,{children:"Standard"}),"\n",(0,r.jsx)(i.li,{children:"Thread"}),"\n",(0,r.jsx)(i.li,{children:"VersionInfo"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["All of these services are available in the ",(0,r.jsx)(i.code,{children:"zio.metrics.jvm"})," package. Each service has a ",(0,r.jsx)(i.code,{children:"live"})," implementation that can be used to collect metrics, or we can use all of them at once with by providing ",(0,r.jsx)(i.code,{children:"DefaultJvmMetrics.live"})," layer to our application."]}),"\n",(0,r.jsx)(i.h3,{id:"collecting-as-a-sidecar-to-a-zio-application",children:"Collecting as a Sidecar to a ZIO Application"}),"\n",(0,r.jsxs)(i.p,{children:["ZIO JVM metrics have built-in applications that collect the JVM metrics. They can be composed with other ZIO applications as a ",(0,r.jsx)(i.em,{children:"sidecar"}),". By doing so, we are able to collect JVM metrics without modifying our main ZIO application. They will be executed as a daemon alongside the main app:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-scala",metastring:'title="examples/jvm/src/main/scala/zio/examples/metrics/JvmMetricAppExample.scala" ',children:'package zio.examples.metrics\n\nimport zio._\nimport zio.http._\nimport zio.metrics.connectors.prometheus.PrometheusPublisher\nimport zio.metrics.connectors.{MetricsConfig, prometheus}\nimport zio.metrics.jvm.DefaultJvmMetrics\n\nobject JvmMetricAppExample extends ZIOAppDefault {\n  private val httpApp =\n    Routes(\n      Method.GET / "metrics" ->\n        handler(ZIO.serviceWithZIO[PrometheusPublisher](_.get.map(Response.text)))\n    )\n\n  override def run = Server\n    .serve(httpApp)\n    .provide(\n      // ZIO Http default server layer, default port: 8080\n      Server.default,\n\n      // The prometheus reporting layer\n      prometheus.prometheusLayer,\n      prometheus.publisherLayer,\n      // Interval for polling metrics\n      ZLayer.succeed(MetricsConfig(5.seconds)),\n\n      // Default JVM Metrics\n      DefaultJvmMetrics.live.unit\n    )\n}\n'})})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>l});var s=n(96540);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);