"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[87359],{25636:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>a,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-ftp/environment","title":"Environment","description":"FtpClient & Blocking","source":"@site/docs/zio-ftp/environment.md","sourceDirName":"zio-ftp","slug":"/zio-ftp/environment","permalink":"/zio-ftp/environment","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-ftp/environment.md","tags":[],"version":"current","frontMatter":{"id":"environment","title":"Environment"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO FTP","permalink":"/zio-ftp/"},"next":{"title":"ZIO Flow","permalink":"/zio-flow/"}}');var t=i(74848),r=i(28453);const c={id:"environment",title:"Environment"},s=void 0,l={},d=[{value:"FtpClient &amp; Blocking",id:"ftpclient--blocking",level:2},{value:"How to provide Blocking Environment ?",id:"how-to-provide-blocking-environment-",level:2},{value:"Resources",id:"resources",level:2}];function p(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"ftpclient--blocking",children:"FtpClient & Blocking"}),"\n",(0,t.jsxs)(e.p,{children:["ZIO Ftp use Environment type parameter to required a blocking context. Since (s)ftp java client don't provide any async client,\nwe are lifting all blocking (effectful) functions into a blocking execution context by using ",(0,t.jsx)(e.code,{children:"zio.blocking.effectBlocking()"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["Since we never expose the underlying ftp client, you can only use a ZIO wrapper ",(0,t.jsx)(e.code,{children:"FtpAccessors[_]"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"trait FtpAccessors[+A] {\n def stat(path: String): ZIO[Blocking, IOException, Option[FtpResource]]\n def ls(path: String): ZStream[Blocking, IOException, FtpResource]\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["All provided functions require a ",(0,t.jsx)(e.code,{children:"Blocking"})," context."]}),"\n",(0,t.jsxs)(e.p,{children:["There is already predefined Blocking context defined in ZIO ",(0,t.jsx)(e.code,{children:"zio.blocking.Blocking.live"})]}),"\n",(0,t.jsx)(e.h2,{id:"how-to-provide-blocking-environment-",children:"How to provide Blocking Environment ?"}),"\n",(0,t.jsxs)(e.p,{children:["Your main entrypoint should extend ",(0,t.jsx)(e.code,{children:"zio.App"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"import zio.App\nimport zio.ZIO\nimport zio.blocking.Blocking\nimport java.io.IOException\n\n// Provide default environment(s) context such as (Blocking, Clock, Console,...) since it is provided by zio.App which extend zio.DefaultRuntime\nobject MyApp extends App {\n    val program: ZIO[Blocking, IOException, Unit] = ???\n    \n    final def run(args: List[String]): ZIO[ZEnv, Nothing, Int] = program\n  }\n"})}),"\n",(0,t.jsx)(e.p,{children:"or you can simply provide your own blocking context"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"import zio.ZIO\nimport zio.blocking.Blocking\nimport java.io.IOException\n\nval program: ZIO[Blocking, IOException, Unit] = ???\n// Blocking environment is not anymore required\nval run: ZIO[Any, IOException, Unit] = program.provideLayer(Blocking.live)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://zio.dev/docs/overview/overview_creating_effects#blocking-synchronous-side-effects",children:"ZIO Effect Blocking"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"http://degoes.net/articles/zio-environment",children:"ZIO environment by John de goes"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://blog.softwaremill.com/zio-environment-meets-constructor-based-dependency-injection-6a13de6e000",children:"ZIO environment meets constructor based-dependency injection"})}),"\n"]}),"\n"]})]})}function a(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>s});var o=i(96540);const t={},r=o.createContext(t);function c(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:c(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);