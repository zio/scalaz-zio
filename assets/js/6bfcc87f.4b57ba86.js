"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2468],{9913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"zio-http/examples/streaming","title":"Streaming Examples","description":"Streaming Request","source":"@site/docs/zio-http/examples/streaming.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/streaming","permalink":"/zio-http/examples/streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/streaming.md","tags":[],"version":"current","frontMatter":{"id":"streaming","title":"Streaming Examples","sidebar_label":"Streaming"},"sidebar":"ecosystem-sidebar","previous":{"title":"WebSocket Server & Client","permalink":"/zio-http/examples/websocket"},"next":{"title":"Endpoint","permalink":"/zio-http/examples/endpoint"}}');var r=n(74848),s=n(28453);const i={id:"streaming",title:"Streaming Examples",sidebar_label:"Streaming"},o=void 0,l={},m=[{value:"Streaming Request",id:"streaming-request",level:2},{value:"Streaming Response",id:"streaming-response",level:2},{value:"Streaming File",id:"streaming-file",level:2}];function p(e){const t={code:"code",h2:"h2",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"streaming-request",children:"Streaming Request"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/RequestStreaming.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject RequestStreaming extends ZIOAppDefault {\n\n  // Create HTTP route which echos back the request body\n  val app = Routes(Method.POST / "echo" -> handler { (req: Request) =>\n    // Returns a stream of bytes from the request\n    // The stream supports back-pressure\n    val stream = req.body.asStream\n\n    // Creating HttpData from the stream\n    // This works for file of any size\n    val data = Body.fromStreamChunked(stream)\n\n    Response(body = data)\n  })\n\n  // Run it like any simple app\n  val run: UIO[ExitCode] =\n    Server.serve(app).provide(Server.default).exitCode\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"streaming-response",children:"Streaming Response"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StreamingResponse.scala" ',children:'package example\n\nimport zio.{http, _}\n\nimport zio.stream.ZStream\n\nimport zio.http._\n\n/**\n * Example to encode content using a ZStream\n */\nobject StreamingResponse extends ZIOAppDefault {\n  // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n  def run = Server.serve(routes).provide(Server.default)\n\n  // Create a message as a Chunk[Byte]\n  def message = Chunk.fromArray("Hello world !\\r\\n".getBytes(Charsets.Http))\n\n  def routes: Routes[Any, Response] = Routes(\n    // Simple (non-stream) based route\n    Method.GET / "health" -> handler(Response.ok),\n\n    // ZStream powered response\n    Method.GET / "stream" ->\n      handler(\n        http.Response(\n          status = Status.Ok,\n          body = Body.fromStream(ZStream.fromChunk(message), message.length.toLong), // Encoding content using a ZStream\n        ),\n      ),\n  )\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"streaming-file",children:"Streaming File"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/FileStreaming.scala" ',children:'package example\n\nimport java.io.File\nimport java.nio.file.Paths\n\nimport zio._\n\nimport zio.stream.ZStream\n\nimport zio.http._\n\nobject FileStreaming extends ZIOAppDefault {\n\n  // Create HTTP route\n  val app = Routes(\n    Method.GET / "health" -> Handler.ok,\n\n    // Read the file as ZStream\n    // Uses the blocking version of ZStream.fromFile\n    Method.GET / "blocking" -> Handler.fromStreamChunked(ZStream.fromPath(Paths.get("README.md"))),\n\n    // Uses netty\'s capability to write file content to the Channel\n    // Content-type response headers are automatically identified and added\n    // Adds content-length header and does not use Chunked transfer encoding\n    Method.GET / "video" -> Handler.fromFile(new File("src/main/resources/TestVideoFile.mp4")),\n    Method.GET / "text"  -> Handler.fromFile(new File("src/main/resources/TestFile.txt")),\n  ).sandbox\n\n  // Run it like any simple app\n  val run =\n    Server.serve(app).provide(Server.default)\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(96540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);