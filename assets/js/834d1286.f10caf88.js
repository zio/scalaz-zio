"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59027],{56292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zio-http/examples/https-client-server","title":"HTTPS Client and Server Example","description":"Client Example","source":"@site/docs/zio-http/examples/https-client-server.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/https-client-server","permalink":"/zio-http/examples/https-client-server","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/https-client-server.md","tags":[],"version":"current","frontMatter":{"id":"https-client-server","title":"HTTPS Client and Server Example","sidebar_label":"Https Client and Server"},"sidebar":"ecosystem-sidebar","previous":{"title":"HTTP Client-Server","permalink":"/zio-http/examples/http-client-server"},"next":{"title":"Serving Static Files","permalink":"/zio-http/examples/serving-static-files"}}');var s=n(74848),i=n(28453);const a={id:"https-client-server",title:"HTTPS Client and Server Example",sidebar_label:"Https Client and Server"},l=void 0,o={},c=[{value:"Client Example",id:"client-example",level:2},{value:"Server Example",id:"server-example",level:2}];function p(e){const t={code:"code",h2:"h2",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"client-example",children:"Client Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HttpsClient.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.client.NettyClientDriver\n\nobject HttpsClient extends ZIOAppDefault {\n  val url     = URL.decode("https://jsonplaceholder.typicode.com/todos/1").toOption.get\n  val headers = Headers(Header.Host("jsonplaceholder.typicode.com"))\n\n  val sslConfig = ClientSSLConfig.FromTrustStoreResource(\n    trustStorePath = "truststore.jks",\n    trustStorePassword = "changeit",\n  )\n\n  val clientConfig = ZClient.Config.default.ssl(sslConfig)\n\n  val program = for {\n    data <- ZClient.batched(Request.get(url).addHeaders(headers))\n    _    <- Console.printLine(data)\n  } yield ()\n\n  val run =\n    program.provide(\n      ZLayer.succeed(clientConfig),\n      Client.customized,\n      NettyClientDriver.live,\n      DnsResolver.default,\n      ZLayer.succeed(NettyConfig.default),\n    )\n\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"server-example",children:"Server Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HttpsHelloWorld.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject HttpsHelloWorld extends ZIOAppDefault {\n  // Create HTTP route\n  val routes: Routes[Any, Response] = Routes(\n    Method.GET / "text" -> handler(Response.text("Hello World!")),\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}""")),\n  )\n\n  /**\n   * In this example, a private key and certificate are loaded from resources.\n   * For testing this example with curl, make sure the private key "server.key",\n   * and the certificate "server.crt" are inside the resources directory, which\n   * is by default "src/main/resources".\n   *\n   * You can use the following command to create a self-signed TLS certificate.\n   * This command will create two files: "server.key" and "server.crt".\n   *\n   * openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \\ -keyout\n   * server.key -out server.crt \\ -subj "/CN=example.com/OU=?/O=?/L=?/ST=?/C=??"\n   * \\ -addext "subjectAltName=DNS:example.com,DNS:www.example.com,IP:10.0.0.1"\n   *\n   * Alternatively you can create the keystore and certificate using the\n   * following link\n   * https://medium.com/@maanadev/netty-with-https-tls-9bf699e07f01\n   */\n\n  val sslConfig = SSLConfig.fromResource(\n    behaviour = SSLConfig.HttpBehaviour.Accept,\n    certPath = "server.crt",\n    keyPath = "server.key",\n  )\n\n  private val config = Server.Config.default\n    .port(8090)\n    .ssl(sslConfig)\n\n  private val configLayer = ZLayer.succeed(config)\n\n  override val run =\n    Server.serve(routes).provide(configLayer, Server.live)\n\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);