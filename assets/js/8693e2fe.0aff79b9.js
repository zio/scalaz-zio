"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[29971],{18419:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zio-http/reference/body/body","title":"Body","description":"Body is a domain to model content for Request and Response. The body can be a fixed chunk of bytes, a stream of bytes, or form data, or any type that can be encoded into such representations (such as textual data using some character encoding, the contents of files, JSON, etc.).","source":"@site/docs/zio-http/reference/body/body.md","sourceDirName":"zio-http/reference/body","slug":"/zio-http/reference/body/","permalink":"/zio-http/reference/body/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/body/body.md","tags":[],"version":"current","frontMatter":{"id":"body","title":"Body"},"sidebar":"ecosystem-sidebar","previous":{"title":"Flash","permalink":"/zio-http/reference/headers/session/flash"},"next":{"title":"Form Data","permalink":"/zio-http/reference/body/form"}}');var a=o(74848),t=o(28453);const s={id:"body",title:"Body"},d=void 0,i={},c=[{value:"Usages",id:"usages",level:2},{value:"Server-side",id:"server-side",level:3},{value:"Client-side",id:"client-side",level:3},{value:"Creating a Body",id:"creating-a-body",level:2},{value:"Empty Body",id:"empty-body",level:3},{value:"From a String and CharSequence",id:"from-a-string-and-charsequence",level:3},{value:"From Array/Chunk of Bytes",id:"from-arraychunk-of-bytes",level:3},{value:"From a Value with ZIO Schema Binary Codec",id:"from-a-value-with-zio-schema-binary-codec",level:3},{value:"From ZIO Streams",id:"from-zio-streams",level:3},{value:"From Stream of Bytes",id:"from-stream-of-bytes",level:4},{value:"From Stream of Values with ZIO Schema Binary Codec",id:"from-stream-of-values-with-zio-schema-binary-codec",level:4},{value:"From Stream of CharSequence",id:"from-stream-of-charsequence",level:4},{value:"From a File",id:"from-a-file",level:3},{value:"From WebSocketApp",id:"from-websocketapp",level:3},{value:"From a Multipart Form",id:"from-a-multipart-form",level:3},{value:"Structure of a Multipart Form",id:"structure-of-a-multipart-form",level:4},{value:"Creating Response Body from Multipart Form",id:"creating-response-body-from-multipart-form",level:4},{value:"From a URL-encoded Form",id:"from-a-url-encoded-form",level:3},{value:"Body Operations",id:"body-operations",level:2},{value:"Decoding Body Content as a String",id:"decoding-body-content-as-a-string",level:3},{value:"Decoding Body Content",id:"decoding-body-content",level:3},{value:"Retrieving Raw Body Content",id:"retrieving-raw-body-content",level:3},{value:"Retrieving Body Content as a ZIO Stream",id:"retrieving-body-content-as-a-zio-stream",level:3},{value:"Decoding Multipart Form Data",id:"decoding-multipart-form-data",level:3}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Body"})," is a domain to model content for ",(0,a.jsx)(n.code,{children:"Request"})," and ",(0,a.jsx)(n.code,{children:"Response"}),". The body can be a fixed chunk of bytes, a stream of bytes, or form data, or any type that can be encoded into such representations (such as textual data using some character encoding, the contents of files, JSON, etc.)."]}),"\n",(0,a.jsxs)(n.p,{children:["ZIO HTTP uses Netty at its core and Netty handles content as ",(0,a.jsx)(n.code,{children:"ByteBuf"}),". ",(0,a.jsx)(n.code,{children:"Body"})," helps you decode and encode this content into simpler, easier-to-use data types while creating a ",(0,a.jsx)(n.code,{children:"Request"})," or ",(0,a.jsx)(n.code,{children:"Response"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"usages",children:"Usages"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Body"})," is used on both the server and client side."]}),"\n",(0,a.jsx)(n.h3,{id:"server-side",children:"Server-side"}),"\n",(0,a.jsxs)(n.p,{children:["On the server side, ",(0,a.jsx)(n.code,{children:"ZIO-HTTP"})," models content in ",(0,a.jsx)(n.code,{children:"Request"})," and ",(0,a.jsx)(n.code,{children:"Response"})," as ",(0,a.jsx)(n.code,{children:"Body"})," with ",(0,a.jsx)(n.code,{children:"Body.empty"})," as the default value. To add content while creating a ",(0,a.jsx)(n.code,{children:"Response"})," you can use the ",(0,a.jsx)(n.code,{children:"Response"})," constructor:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject HelloExample extends ZIOAppDefault {\n  val routes: Routes[Any, Response] =\n    Routes(\n      Method.GET / "hello" ->\n        handler { req: Request =>\n          for {\n            name <- req.body.asString\n          } yield Response(body = Body.fromString(s"Hello $name!"))\n        }.sandbox,\n    )\n\n  override val run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"client-side",children:"Client-side"}),"\n",(0,a.jsxs)(n.p,{children:["On the client side, ",(0,a.jsx)(n.code,{children:"ZIO-HTTP"})," models content in ",(0,a.jsx)(n.code,{children:"Client"})," as ",(0,a.jsx)(n.code,{children:"Body"})," with ",(0,a.jsx)(n.code,{children:"Body.Empty"})," as the default value."]}),"\n",(0,a.jsxs)(n.p,{children:["To add content while making a request using ZIO HTTP you can use the ",(0,a.jsx)(n.code,{children:"Client.batched"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\nimport zio.http._\n\nobject HelloClientExample extends ZIOAppDefault {\n  val routes: ZIO[Client, Throwable, Unit] =\n    for {\n      name <- Console.readLine("What is your name? ")\n      resp <- Client.batched(Request.post("http://localhost:8080/hello", Body.fromString(name)))\n      body <- resp.body.asString\n      _    <- Console.printLine(s"Response: $body")\n    } yield ()\n\n  def run = routes.provide(Client.default)\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the above example, we are making a ",(0,a.jsx)(n.code,{children:"POST"})," request to the ",(0,a.jsx)(n.code,{children:"/hello"})," endpoint with a ",(0,a.jsx)(n.code,{children:"Body"})," containing the name of the user. Then we read the response body as a ",(0,a.jsx)(n.code,{children:"String"})," and printed it:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"What is your name? John\nResponse: Hello John!\n"})}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-body",children:"Creating a Body"}),"\n",(0,a.jsx)(n.h3,{id:"empty-body",children:"Empty Body"}),"\n",(0,a.jsx)(n.p,{children:"To create an empty body:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val emptyBody: Body = Body.empty\n"})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-string-and-charsequence",children:"From a String and CharSequence"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a ",(0,a.jsx)(n.code,{children:"String"})," or ",(0,a.jsx)(n.code,{children:"CharSequence"})," we can use ",(0,a.jsx)(n.code,{children:"Body.fromString"})," or ",(0,a.jsx)(n.code,{children:"Body.fromCharSequence"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'Body.fromString("any string", Charsets.Http)\nBody.fromCharSequence("any string", Charsets.Http)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-arraychunk-of-bytes",children:"From Array/Chunk of Bytes"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a chunk of bytes you can use ",(0,a.jsx)(n.code,{children:"Body.fromChunk"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val chunkHttpData: Body = Body.fromChunk(Chunk.fromArray("Some String".getBytes(Charsets.Http)))\nval byteArrayHttpData: Body = Body.fromArray("Some String".getBytes(Charsets.Http))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-value-with-zio-schema-binary-codec",children:"From a Value with ZIO Schema Binary Codec"}),"\n",(0,a.jsx)(n.p,{children:"We can construct a body from an arbitrary value using zio-schema's binary codec:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object Body {\n  def from[A](a: A)(implicit codec: BinaryCodec[A], trace: Trace): Body =\n    fromChunk(codec.encode(a))\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"For example, if you have a case class Person:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.schema.DeriveSchema\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\ncase class Person(name: String, age: Int)\nimplicit val schema = DeriveSchema.gen[Person]\n\nval person = Person("John", 42)\nval body = Body.from(person)\n'})}),"\n",(0,a.jsx)(n.p,{children:"In the above example, we used a JSON codec to encode the person object into a body. Similarly, we can use other codecs like Avro, Protobuf, etc."}),"\n",(0,a.jsx)(n.h3,{id:"from-zio-streams",children:"From ZIO Streams"}),"\n",(0,a.jsxs)(n.p,{children:["There are several ways to create a ",(0,a.jsx)(n.code,{children:"Body"})," from a ZIO Stream:"]}),"\n",(0,a.jsx)(n.h4,{id:"from-stream-of-bytes",children:"From Stream of Bytes"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a stream of bytes, we can utilize the ",(0,a.jsx)(n.code,{children:"Body.fromStream"})," and ",(0,a.jsx)(n.code,{children:"Body.fromStreamChunked"})," constructors:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object Body {\n  def fromStream(\n    stream: ZStream[Any, Throwable, Byte],\n    contentLength: Long\n  ): Body = ???\n\n  def fromStreamChunked(\n    stream: ZStream[Any, Throwable, Byte]\n  ): Body = ???\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If we know the content length of the stream, we can use ",(0,a.jsx)(n.code,{children:"Body.fromStream"}),". It will set the ",(0,a.jsx)(n.code,{children:"content-length"})," header in the response to the given value:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val chunk = Chunk.fromArray("Some String".getBytes(Charsets.Http))\nval streamHttpData1: Body = Body.fromStream(ZStream.fromChunk(chunk), contentLength = chunk.length)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Otherwise, we can use ",(0,a.jsx)(n.code,{children:"Body.fromStreamChunked"}),", which is useful for streams with an unknown content length. Assume we have a service that generates a response to a request in chunks; we can stream the response to the client while we don't know the exact length of the response. Therefore, the ",(0,a.jsx)(n.code,{children:"transfer-encoding"})," header will be set to ",(0,a.jsx)(n.code,{children:"chunked"})," in the response:"]}),"\n",(0,a.jsx)(n.h4,{id:"from-stream-of-values-with-zio-schema-binary-codec",children:"From Stream of Values with ZIO Schema Binary Codec"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a stream of values of type ",(0,a.jsx)(n.code,{children:"A"}),", we can use ",(0,a.jsx)(n.code,{children:"Body.fromStream"})," with a ",(0,a.jsx)(n.code,{children:"BinaryCodec"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object Body {\n  def fromStream[A](stream: ZStream[Any, Throwable, A])(implicit codec: BinaryCodec[A], trace: Trace): Body = ???\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Let's create a ",(0,a.jsx)(n.code,{children:"Body"})," from a stream of ",(0,a.jsx)(n.code,{children:"Person"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.schema.DeriveSchema\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\ncase class Person(name: String, age: Int)\nimplicit val schema = DeriveSchema.gen[Person]\n\nval persons: ZStream[Any, Nothing, Person] =\n  ZStream.fromChunk(Chunk(Person("John", 42), Person("Jane", 40)))\n\nval body = Body.fromStream(persons)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The header ",(0,a.jsx)(n.code,{children:"transfer-encoding"})," will be set to ",(0,a.jsx)(n.code,{children:"chunked"})," in the response."]}),"\n",(0,a.jsx)(n.h4,{id:"from-stream-of-charsequence",children:"From Stream of CharSequence"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a stream of ",(0,a.jsx)(n.code,{children:"CharSequence"}),", we can use ",(0,a.jsx)(n.code,{children:"Body.fromCharSequenceStream"})," and ",(0,a.jsx)(n.code,{children:"Body.fromCharSequenceStreamChunked"})," constructors."]}),"\n",(0,a.jsxs)(n.p,{children:["If we know the content length of the stream, we can use ",(0,a.jsx)(n.code,{children:"Body.fromCharSequenceStream"}),", which will set the ",(0,a.jsx)(n.code,{children:"content-length"})," header in the response to the given value. Otherwise, we can use ",(0,a.jsx)(n.code,{children:"Body.fromCharSequenceStreamChunked"}),", which is useful for streams with an unknown content length. In this case, the ",(0,a.jsx)(n.code,{children:"transfer-encoding"})," header will be set to ",(0,a.jsx)(n.code,{children:"chunked"})," in the response."]}),"\n",(0,a.jsx)(n.h3,{id:"from-a-file",children:"From a File"}),"\n",(0,a.jsxs)(n.p,{children:["To create an ",(0,a.jsx)(n.code,{children:"Body"})," that encodes a ",(0,a.jsx)(n.code,{children:"File"})," we can use ",(0,a.jsx)(n.code,{children:"Body.fromFile"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val fileHttpData: ZIO[Any, Nothing, Body] = \n  Body.fromFile(new java.io.File(getClass.getResource("/fileName.txt").getPath))\n// java.lang.NullPointerException: Cannot invoke "java.net.URL.getPath()" because the return value of "java.lang.Class.getResource(String)" is null\n// \tat repl.MdocSession$MdocApp$$anonfun$20.apply$mcV$sp(body.md:169)\n// \tat repl.MdocSession$MdocApp$$anonfun$20.apply(body.md:167)\n// \tat repl.MdocSession$MdocApp$$anonfun$20.apply(body.md:167)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-websocketapp",children:"From WebSocketApp"}),"\n",(0,a.jsxs)(n.p,{children:["Any ",(0,a.jsx)(n.code,{children:"WebSocketApp[Any]"})," can be converted to a ",(0,a.jsx)(n.code,{children:"Body"})," using ",(0,a.jsx)(n.code,{children:"Body.fromWebSocketApp"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object Body {\n  def fromSocketApp(app: WebSocketApp[Any]): WebsocketBody = ???\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-multipart-form",children:"From a Multipart Form"}),"\n",(0,a.jsx)(n.p,{children:"Multipart form data is a method for encoding form data within an HTTP request. It allows for the transmission of multiple types of data, including text, files, and binary data, in a single request."}),"\n",(0,a.jsx)(n.p,{children:"This makes it ideal for scenarios where form submissions require complex data structures, such as file uploads or rich form inputs."}),"\n",(0,a.jsx)(n.h4,{id:"structure-of-a-multipart-form",children:"Structure of a Multipart Form"}),"\n",(0,a.jsx)(n.p,{children:"A multipart form consists of multiple parts, each representing a different field or file to be transmitted. These parts are separated by a unique boundary string. Each part typically includes headers specifying metadata about the data being transmitted, such as content type and content disposition, followed by the actual data."}),"\n",(0,a.jsxs)(n.p,{children:["In ZIO HTTP, the ",(0,a.jsx)(n.code,{children:"Form"})," data type is used to represent a form that can be either multipart or URL-encoded. It is a wrapper around ",(0,a.jsx)(n.code,{children:"Chunk[FormField]"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"creating-response-body-from-multipart-form",children:"Creating Response Body from Multipart Form"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Body.fromMultipartForm"})," is used to create a ",(0,a.jsx)(n.code,{children:"Body"})," from a multipart form:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object Body {\n  def fromMultipartForm(form: Form, specificBoundary: Boundary): Body = ???\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let say we create a body from a multipart form:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val body = \n  Body.fromMultipartForm(\n    Form(\n      FormField.simpleField("key1", "value1"),\n      FormField.binaryField(\n        "file1",\n        Chunk.fromArray("Hello, world!".getBytes),\n        MediaType.text.`plain`,\n        filename = Some("hello.txt"),\n      ),\n      FormField.binaryField(\n        "file2",\n        Chunk.fromArray("## Hello, world!".getBytes),\n        MediaType.text.`markdown`,\n        filename = Some("hello.md"),\n      ),\n    ),\n    Boundary("boundary123"),\n  )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This will create a ",(0,a.jsx)(n.code,{children:"Body"})," which can be rendered as:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'--boundary123\r\nContent-Disposition: form-data; name="key1"\r\nContent-Type: text/plain\r\n\r\nvalue1\r\n--boundary123\r\nContent-Disposition: form-data; name="file1"; filename="hello.txt"\r\nContent-Type: text/plain\r\n\r\nHello, world!\r\n--boundary123\r\nContent-Disposition: form-data; name="file2"; filename="hello.md"\r\nContent-Type: text/markdown\r\n\r\n## Hello, world!\r\n--boundary123--\r\n\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["When utilizing MultipartForm for the response body, ensure the correct Content-Type header is included in the response, such as ",(0,a.jsx)(n.code,{children:"Content-Type: multipart/<proper-subtype>; boundary=boundary123"}),"."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Please be aware that utilizing a multipart form for the response body is uncommon and may not be supported by all clients. If you intend to use this method, ensure comprehensive support across various browsers."})}),"\n",(0,a.jsx)(n.h3,{id:"from-a-url-encoded-form",children:"From a URL-encoded Form"}),"\n",(0,a.jsx)(n.p,{children:'URL encoding is a technique used to convert data into a format that can be transmitted over the internet. This is necessary because URLs have certain restrictions on the characters they can contain. URL encoding replaces unsafe characters with a "%" followed by two hexadecimal digits. For example, a space is encoded as "%20", and special characters like "&" become "%26".'}),"\n",(0,a.jsx)(n.p,{children:'A URL-encoded form consists of key-value pairs, where each pair represents a form field and its corresponding value. These pairs are concatenated together into a query string, separated by "&" symbols.'}),"\n",(0,a.jsx)(n.p,{children:'For instance, consider a simple form with fields for "username" and "password". The URL-encoded form data looks like this:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"username=john&password=secretpassword\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Similar to ",(0,a.jsx)(n.code,{children:"Body.fromMultipartForm"}),", the ",(0,a.jsx)(n.code,{children:"Body.fromURLEncodedForm"})," is used to create a ",(0,a.jsx)(n.code,{children:"Body"})," from a URL-encoded form:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val body = \n  Body.fromURLEncodedForm(\n    Form(\n      FormField.simpleField("username", "john"),\n      FormField.simpleField("password", "secretpassword"),\n    )\n  )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This will create a ",(0,a.jsx)(n.code,{children:"Body"})," which can be rendered as:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"username=john&password=secretpassword\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"URL encoding is primarily useful for encoding data in the query string of a URL or for encoding form data in HTTP requests. It is not typically used for the response body."})}),"\n",(0,a.jsx)(n.h2,{id:"body-operations",children:"Body Operations"}),"\n",(0,a.jsx)(n.h3,{id:"decoding-body-content-as-a-string",children:"Decoding Body Content as a String"}),"\n",(0,a.jsxs)(n.p,{children:["We can decode the content of the body into a ",(0,a.jsx)(n.code,{children:"String"})," using the ",(0,a.jsx)(n.code,{children:"Body#asString"})," method. It allows decoding with both default and custom charsets:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import java.nio.charset.Charset\n\nval defaultCharsetString = body.asString\nval customCharsetString = body.asString(Charset.forName("UTF-8"))\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These methods return a ",(0,a.jsx)(n.code,{children:"Task"})," representing the decoded string content of the body."]}),"\n",(0,a.jsx)(n.h3,{id:"decoding-body-content",children:"Decoding Body Content"}),"\n",(0,a.jsxs)(n.p,{children:["By providing a ",(0,a.jsx)(n.code,{children:"BinaryCodec[A]"})," we can decode the body content to a value of type ",(0,a.jsx)(n.code,{children:"A"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.schema._\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\ncase class Person(name: String, age: Int)\n\nimplicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n\nval person        = Person("John", 42)\nval body          = Body.from(person)\nval decodedPerson = body.to[Person]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retrieving-raw-body-content",children:"Retrieving Raw Body Content"}),"\n",(0,a.jsx)(n.p,{children:"We can access the content of the body as an array of bytes or a chunk of bytes. This is useful when dealing with binary data. Here's how you can do it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val byteArray: Task[Array[Byte]] = body.asArray\nval byteChunk: Task[Chunk[Byte]] = body.asChunk\n"})}),"\n",(0,a.jsx)(n.p,{children:"These methods return the body content as an array of bytes or a ZIO chunk of bytes, respectively."}),"\n",(0,a.jsx)(n.h3,{id:"retrieving-body-content-as-a-zio-stream",children:"Retrieving Body Content as a ZIO Stream"}),"\n",(0,a.jsx)(n.p,{children:"We can access the content of the body as a ZIO stream of bytes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val byteStream = body.asStream\n// byteStream: ZStream[Any, Throwable, Byte] = zio.stream.ZStream@7905570a\n"})}),"\n",(0,a.jsx)(n.h3,{id:"decoding-multipart-form-data",children:"Decoding Multipart Form Data"}),"\n",(0,a.jsx)(n.p,{children:"We can decode the content of the body as multipart form data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val multipartFormData: Task[Form] = body.asMultipartForm\n"})}),"\n",(0,a.jsxs)(n.p,{children:["ZIO HTTP supports streaming, allowing us to handle large files using ",(0,a.jsx)(n.strong,{children:"multipart/form-data"}),". By utilizing ",(0,a.jsx)(n.code,{children:"Body#asMultipartFormStream"}),", which gives us a ",(0,a.jsx)(n.code,{children:"Task"})," of ",(0,a.jsx)(n.code,{children:"StreamingForm"}),". Using the ",(0,a.jsx)(n.code,{children:"StreamingForm#fields"})," method we can access a stream of ",(0,a.jsx)(n.code,{children:"FormField"})," representing the form's parts:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"for {\n  form  <- body.asMultipartFormStream\n  count <- form.fields.flatMap {\n    case FormField.Binary(name, data, contentType, transferEncoding, filename) => ???\n    case FormField.StreamingBinary(name, contentType, transferEncoding, filename, data) => ???\n    case FormField.Text(name, value, contentType, filename) => ???\n    case FormField.Simple(name, value) => ???\n  }.run(???)\n} yield ()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Also, if there's sufficient memory available, we can execute ",(0,a.jsx)(n.code,{children:"StreamingForm#collectAll"})," method gather all its parts into memory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val streamingForm: Task[StreamingForm] = body.asMultipartFormStream\nval collectedForm: Task[Form] = streamingForm.flatMap(_.collectAll)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var r=o(96540);const a={},t=r.createContext(a);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);