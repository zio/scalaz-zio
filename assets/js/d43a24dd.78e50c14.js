"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[58077],{16001:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"zio-json/index","title":"Getting Started with ZIO Json","description":"ZIO Json is a fast and secure JSON library with tight ZIO integration.","source":"@site/docs/zio-json/index.md","sourceDirName":"zio-json","slug":"/zio-json/","permalink":"/zio-json/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-json/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Getting Started with ZIO Json","sidebar_label":"Getting Started"},"sidebar":"ecosystem-sidebar","previous":{"title":"FAQ","permalink":"/zio-http/faq"},"next":{"title":"Decoding","permalink":"/zio-json/decoding"}}');var i=s(74848),o=s(28453);const t={id:"index",title:"Getting Started with ZIO Json",sidebar_label:"Getting Started"},r=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-json",children:"ZIO Json"})," is a fast and secure JSON library with tight ZIO integration."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg",alt:"Production Ready"})})," ",(0,i.jsx)(n.img,{src:"https://github.com/zio/zio-json/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,i.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-json_2.13/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-json_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,i.jsx)(n.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-json_2.13/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-json_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,i.jsx)(n.a,{href:"https://javadoc.io/doc/dev.zio/zio-json-docs_2.13",children:(0,i.jsx)(n.img,{src:"https://javadoc.io/badge2/dev.zio/zio-json-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-json",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/github/stars/zio/zio-json?style=social",alt:"ZIO JSON"})})]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The goal of this project is to create the best all-round JSON library for Scala:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"})," to handle more requests per second than the incumbents, i.e. reduced operational costs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"})," to mitigate against adversarial JSON payloads that threaten the capacity of the server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Compilation"})," no shapeless, no type astronautics."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future-Proof"}),", prepared for Scala 3 and next-generation Java."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple"})," small codebase, concise documentation that covers everything."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Helpful errors"})," are readable by humans and machines."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ZIO Integration"})," so nothing more is required."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-json" % "0.7.33"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For cross-platform projects with Scala.js and Scala Native need to replace ",(0,i.jsx)(n.code,{children:"%%"})," operator by ",(0,i.jsx)(n.code,{children:"%%%"}),",\nand optionally when using ",(0,i.jsx)(n.code,{children:"java.time.ZoneId"})," and ",(0,i.jsx)(n.code,{children:"java.time.ZonedDateTime"})," types need to add\nthe dependency on the latest version of Timezone DB:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.cquiroz" %%% "scala-java-time-tzdb" % "latest.integration"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Let's try a simple example of encoding and decoding JSON using ZIO JSON."}),"\n",(0,i.jsx)(n.p,{children:"All the following code snippets assume that the following imports have been declared"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.json._\n"})}),"\n",(0,i.jsx)(n.p,{children:"Say we want to be able to read some JSON like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"curvature":0.5}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["into a Scala ",(0,i.jsx)(n.code,{children:"case class"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"case class Banana(curvature: Double)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To do this, we create an ",(0,i.jsx)(n.em,{children:"instance"})," of the ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," typeclass for ",(0,i.jsx)(n.code,{children:"Banana"})," using the ",(0,i.jsx)(n.code,{children:"zio-json"})," code generator. It is best practice to put it on the companion of ",(0,i.jsx)(n.code,{children:"Banana"}),", like so"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object Banana {\n  implicit val decoder: JsonDecoder[Banana] = DeriveJsonDecoder.gen[Banana]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Note: If you\u2019re using Scala 3 and your case class is defining default parameters, ",(0,i.jsx)(n.code,{children:"-Yretain-trees"})," needs to be added to ",(0,i.jsx)(n.code,{children:"scalacOptions"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"Now we can parse JSON into our object"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'scala> """{"curvature":0.5}""".fromJson[Banana]\nval res: Either[String, Banana] = Right(Banana(0.5))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Likewise, to produce JSON from our data we define a ",(0,i.jsx)(n.code,{children:"JsonEncoder"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'object Banana {\n  ...\n  implicit val encoder: JsonEncoder[Banana] = DeriveJsonEncoder.gen[Banana]\n}\n\nscala> Banana(0.5).toJson\nval res: String = {"curvature":0.5}\n\nscala> Banana(0.5).toJsonPretty\nval res: String =\n{\n  "curvature" : 0.5\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["And bad JSON will produce an error in ",(0,i.jsx)(n.code,{children:"jq"})," syntax with an additional piece of contextual information (in parentheses)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'scala> """{"curvature": womp}""".fromJson[Banana]\nval res: Either[String, Banana] = Left(.curvature(expected a Double))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Say we extend our data model to include more data types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"sealed trait Fruit\ncase class Banana(curvature: Double) extends Fruit\ncase class Apple (poison: Boolean)   extends Fruit\n"})}),"\n",(0,i.jsxs)(n.p,{children:["we can generate the encoder and decoder for the entire ",(0,i.jsx)(n.code,{children:"sealed"})," family"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object Fruit {\n  implicit val decoder: JsonDecoder[Fruit] = DeriveJsonDecoder.gen[Fruit]\n  implicit val encoder: JsonEncoder[Fruit] = DeriveJsonEncoder.gen[Fruit]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"allowing us to load the fruit based on a single field type tag in the JSON"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'scala> """{"Banana":{"curvature":0.5}}""".fromJson[Fruit]\nval res: Either[String, Fruit] = Right(Banana(0.5))\n\nscala> """{"Apple":{"poison":false}}""".fromJson[Fruit]\nval res: Either[String, Fruit] = Right(Apple(false))\n'})}),"\n",(0,i.jsx)(n.p,{children:"Almost all of the standard library data types are supported as fields on the case class, and it is easy to add support if one is missing."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.json._\n\nsealed trait Fruit                   extends Product with Serializable\ncase class Banana(curvature: Double) extends Fruit\ncase class Apple(poison: Boolean)    extends Fruit\n\nobject Fruit {\n  implicit val decoder: JsonDecoder[Fruit] =\n    DeriveJsonDecoder.gen[Fruit]\n\n  implicit val encoder: JsonEncoder[Fruit] =\n    DeriveJsonEncoder.gen[Fruit]\n}\n\nval json1         = """{ "Banana":{ "curvature":0.5 }}"""\nval json2         = """{ "Apple": { "poison": false }}"""\nval malformedJson = """{ "Banana":{ "curvature": true }}"""\n\njson1.fromJson[Fruit]\njson2.fromJson[Fruit]\nmalformedJson.fromJson[Fruit]\n\nList(Apple(false), Banana(0.4)).toJsonPretty\n'})}),"\n",(0,i.jsx)(n.h1,{id:"how",children:"How"}),"\n",(0,i.jsxs)(n.p,{children:["Extreme ",(0,i.jsx)(n.strong,{children:"performance"})," is achieved by decoding JSON directly from the input source into business objects (inspired by ",(0,i.jsx)(n.a,{href:"https://github.com/plokhotnyuk/jsoniter-scala",children:"plokhotnyuk"}),"). Although not a requirement, the latest advances in ",(0,i.jsx)(n.a,{href:"https://wiki.openjdk.java.net/display/loom/Main",children:"Java Loom"})," can be used to support arbitrarily large payloads with near-zero overhead."]}),"\n",(0,i.jsxs)(n.p,{children:["Best in class ",(0,i.jsx)(n.strong,{children:"security"})," is achieved with an aggressive ",(0,i.jsx)(n.em,{children:"early exit"})," strategy that avoids costly stack traces, even when parsing malformed numbers. Malicious (and badly formed) payloads are rejected before finishing reading."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Fast compilation"})," and ",(0,i.jsx)(n.strong,{children:"future-proofing"})," is possible thanks to ",(0,i.jsx)(n.a,{href:"https://propensive.com/opensource/magnolia/",children:"Magnolia"})," which allows us to generate boilerplate in a way that will survive the exodus to Scala 3. ",(0,i.jsx)(n.code,{children:"zio-json"})," is internally implemented using a ",(0,i.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Reader.html",children:(0,i.jsx)(n.code,{children:"java.io.Reader"})})," / ",(0,i.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Writer.html",children:(0,i.jsx)(n.code,{children:"java.io.Writer"})}),"-like interface, which is making a comeback to center stage in Loom."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Simplicity"})," is achieved by using well-known software patterns and avoiding bloat. The only requirement to use this library is to know about Scala's encoding of typeclasses, described in ",(0,i.jsx)(n.a,{href:"https://leanpub.com/fpmortals/read#leanpub-auto-functionality",children:"Functional Programming for Mortals"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Helpful errors"})," are produced in the form of a ",(0,i.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:(0,i.jsx)(n.code,{children:"jq"})})," query, with a note about what went wrong, pointing to the exact part of the payload that failed to parse."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var a=s(96540);const i={},o=a.createContext(i);function t(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);