"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6641],{14106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/core/io","title":"IO","description":"IO[E, A] is a type alias for ZIO[Any, E, A], which represents an effect that has no requirements, and may fail with an E, or succeed with an A.","source":"@site/versioned_docs/version-1.0.18/reference/core/io.md","sourceDirName":"reference/core","slug":"/reference/core/io","permalink":"/1.0.18/reference/core/io","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/core/io.md","tags":[],"version":"1.0.18","frontMatter":{"id":"io","title":"IO"},"sidebar":"overview_sidebar","previous":{"title":"RIO","permalink":"/1.0.18/reference/core/rio"},"next":{"title":"Exit","permalink":"/1.0.18/reference/core/exit"}}');var s=n(74848),i=n(28453);const o={id:"io",title:"IO"},c=void 0,a={},d=[];function l(e){const t={blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"IO[E, A]"})," is a type alias for ",(0,s.jsx)(t.code,{children:"ZIO[Any, E, A]"}),", which represents an effect that has no requirements, and may fail with an ",(0,s.jsx)(t.code,{children:"E"}),", or succeed with an ",(0,s.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Note:"})}),"\n",(0,s.jsxs)(t.p,{children:["In Scala, the ",(0,s.jsx)(t.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Let's see how the ",(0,s.jsx)(t.code,{children:"IO"})," type alias is defined:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"type IO[+E, +A] = ZIO[Any, E, A]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["So the ",(0,s.jsx)(t.code,{children:"IO"})," just equal to ",(0,s.jsx)(t.code,{children:"ZIO"})," which doesn't need any requirement."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ZIO"})," values of type ",(0,s.jsx)(t.code,{children:"IO[E, Nothing]"})," (where the value type is ",(0,s.jsx)(t.code,{children:"Nothing"}),") are considered ",(0,s.jsx)(t.em,{children:"unproductive"}),", because the ",(0,s.jsx)(t.code,{children:"Nothing"})," type is ",(0,s.jsx)(t.em,{children:"uninhabitable"}),", i.e. there can be no actual values of type ",(0,s.jsx)(t.code,{children:"Nothing"}),". Values of this type may fail with an ",(0,s.jsx)(t.code,{children:"E"}),", but will never produce a value."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note:"})," ",(0,s.jsx)(t.em,{children:"Principle of The Least Power"})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the ",(0,s.jsx)(t.code,{children:"ZIO"})," type, specific for a less powerful workflow."]}),"\n",(0,s.jsx)(t.p,{children:"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias."}),"\n",(0,s.jsxs)(t.p,{children:["So there is no need to convert type aliases to the ",(0,s.jsx)(t.code,{children:"ZIO"})," data type, whenever the ",(0,s.jsx)(t.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);