"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23352],{35812:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"reference/test/why-zio-test","title":"Why ZIO Test?","description":"In this section, we will discuss important features of the ZIO Test which help us to test our effectual code easily.","source":"@site/docs/reference/test/why-zio-test.md","sourceDirName":"reference/test","slug":"/reference/test/why-zio-test","permalink":"/reference/test/why-zio-test","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/why-zio-test.md","tags":[],"version":"current","frontMatter":{"id":"why-zio-test","title":"Why ZIO Test?"},"sidebar":"reference-sidebar","previous":{"title":"Introduction to ZIO Test","permalink":"/reference/test/"},"next":{"title":"Installation","permalink":"/reference/test/installation"}}');var i=s(74848),o=s(28453);const r={id:"why-zio-test",title:"Why ZIO Test?"},a=void 0,c={},l=[{value:"Test Environment",id:"test-environment",level:2},{value:"Resource Management",id:"resource-management",level:2},{value:"Property Based Testing",id:"property-based-testing",level:2},{value:"Test Reporting",id:"test-reporting",level:2},{value:"Test Aspects",id:"test-aspects",level:2},{value:"Zero Dependencies",id:"zero-dependencies",level:2}];function d(e){const t={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this section, we will discuss important features of the ZIO Test which help us to test our effectual code easily."}),"\n",(0,i.jsx)(t.h2,{id:"test-environment",children:"Test Environment"}),"\n",(0,i.jsxs)(t.p,{children:["The library includes built-in ",(0,i.jsx)(t.em,{children:"testable versions"})," of all the standard ZIO services (",(0,i.jsx)(t.code,{children:"Clock"}),", ",(0,i.jsx)(t.code,{children:"Console"}),", ",(0,i.jsx)(t.code,{children:"System"}),", and ",(0,i.jsx)(t.code,{children:"Random"}),"). For example, the ",(0,i.jsx)(t.code,{children:"TestClock"})," has some timing actions that enables us to control the passage of time. So instead of waiting for timeouts and passage of time, we can adjust the time in our test:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\nimport zio.test.Assertion._\n\ntest("timeout") {\n  for {\n    fiber  <- ZIO.sleep(5.minutes).timeout(1.minute).fork\n    _      <- TestClock.adjust(1.minute)\n    result <- fiber.join\n  } yield assertTrue(result.isEmpty)\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In this example, to test the timeout function without waiting for one minute, we passed the time for one minute using the ",(0,i.jsx)(t.code,{children:"adjust"})," operation. Sometimes, we may want to run these kinds of tests with the ",(0,i.jsx)(t.code,{children:"nonFlaky"})," operator, which runs the test one hundred different times."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"TestRandom"})," service has some extra functionality that enables us to test those functionalities with randomness. We can provide seed number to the ",(0,i.jsx)(t.code,{children:"TestRandom"}),", and then we can have an exact expectation of the random function results."]}),"\n",(0,i.jsx)(t.p,{children:"Each of these services, comes with a bunch of functionality that makes it very easy to test effects."}),"\n",(0,i.jsxs)(t.p,{children:["Whenever we need to access the ",(0,i.jsx)(t.em,{children:"live"})," environment, we can use the ",(0,i.jsx)(t.code,{children:"live"})," method in the ",(0,i.jsx)(t.code,{children:"test"})," package or test annotations like ",(0,i.jsx)(t.code,{children:"withLiveConsole"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,i.jsxs)(t.p,{children:["We may need to set up and tear down some fixtures in our test code before and after running tests. ZIO Test manages this seamlessly for us. So, instead of providing ",(0,i.jsx)(t.code,{children:"before"}),"/",(0,i.jsx)(t.code,{children:"after"}),", ",(0,i.jsx)(t.code,{children:"beforeAll"}),"/",(0,i.jsx)(t.code,{children:"afterAll"})," hooks which are not composable, we can provide a ",(0,i.jsx)(t.code,{children:"ZLayer"})," to each test or a test suite. The ZIO test takes care of acquiring, utilizing, and releasing that layer."]}),"\n",(0,i.jsx)(t.p,{children:"For example, if we have a Kafka layer, we can provide it to one test, or we can provide it to an entire suite of tests, just like the example below:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'suite("a test suite with shared kafka layer")(test1, test2, test3)\n  .provideCustomLayerShared(kafkaLayer)\n'})}),"\n",(0,i.jsx)(t.p,{children:"This layer going to get acquired once, then we have access to that service within all these three tests within the suite and then it is guaranteed to be released at the end of our tests."}),"\n",(0,i.jsx)(t.p,{children:"So in ZIO Test, we have nice resource management which enables us to have tests where:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"They are resource safe"}),"\n",(0,i.jsx)(t.li,{children:"Resources can be acquired and released per test or across a suite of tests"}),"\n",(0,i.jsx)(t.li,{children:"Fully composable"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"property-based-testing",children:"Property Based Testing"}),"\n",(0,i.jsxs)(t.p,{children:["Support for property based testing is included out-of-the-box through the ",(0,i.jsx)(t.code,{children:"check"})," method and its variants and the ",(0,i.jsx)(t.code,{children:"Gen"})," and ",(0,i.jsx)(t.code,{children:"Sample"})," classes. For example, here is how we could write a property to test that integer addition is associative."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"import zio.test._\n\nval associativity =\n  check(Gen.int, Gen.int, Gen.int) { (x, y, z) =>\n    assertTrue(((x + y) + z) == (x + (y + z)))\n  }\n"})}),"\n",(0,i.jsx)(t.p,{children:"If a property fails, the failure will be automatically shrunk to the smallest failing cases to make it easier for us to diagnose the problem. And shrinking is integrated with the generation of random variables, so we are guaranteed that any shrunk counter example will meet the conditions of our original generator."}),"\n",(0,i.jsx)(t.p,{children:"ZIO Test also supports automatic derivation of generators using the ZIO Test Magnolia module:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"import zio._\nimport zio.test._\nimport zio.test.magnolia._\n\ncase class Point(x: Double, y: Double)\n\nval genPoint: Gen[Any, Point] = DeriveGen[Point]\n \nsealed trait Color\ncase object Red   extends Color\ncase object Green extends Color\ncase object Blue  extends Color\n \nval genColor: Gen[Any, Color] = DeriveGen[Color]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-reporting",children:"Test Reporting"}),"\n",(0,i.jsxs)(t.p,{children:["When tests do fail, it is easy to see what went wrong because the test reporter will show us the entire assertion that failed and the specific part of the assertion that failed. To facilitate this, a variety of assertion combinators are included in the ",(0,i.jsx)(t.code,{children:"Assertion"})," class."]}),"\n",(0,i.jsx)(t.h2,{id:"test-aspects",children:"Test Aspects"}),"\n",(0,i.jsxs)(t.p,{children:["Test aspects are powerful tools for modifying behavior of individual tests or even entire suites that we have already written. Convenient syntax ",(0,i.jsx)(t.code,{children:"@@"})," is provided for applying test aspects."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, we can apply a timeout to a test by using ",(0,i.jsx)(t.code,{children:"test @@ timeout(60.seconds)"})," or only run a test on JavaScript by using ",(0,i.jsx)(t.code,{children:"test @@ jsOnly"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Test aspects are ",(0,i.jsx)(t.em,{children:"highly composable"}),", so we can combine multiple test aspects together:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio.test._\nimport zio.test.TestAspect._\n\ntest("another zio test")(???) @@ timeout(60.seconds) @@ jvmOnly\n'})}),"\n",(0,i.jsx)(t.h2,{id:"zero-dependencies",children:"Zero Dependencies"}),"\n",(0,i.jsx)(t.p,{children:"As a library with zero third party dependencies, this project is available on the JVM, ScalaJS, Dotty, and will be available on Scala Native in the near future. So we can write our tests once and make sure that our code works correctly across all platforms that we support."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(96540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);