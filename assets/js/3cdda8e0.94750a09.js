"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[86773],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},83735:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ecosystem/community/zio-amqp","title":"ZIO AMQP","description":"ZIO AMQP is a ZIO-based AMQP client for Scala.","source":"@site/docs/ecosystem/community/zio-amqp.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-amqp","permalink":"/ecosystem/community/zio-amqp","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-amqp.md","tags":[],"version":"current","frontMatter":{"id":"zio-amqp","title":"ZIO AMQP"},"sidebar":"ecosystem-sidebar","previous":{"title":"TranzactIO","permalink":"/ecosystem/community/tranzactio"},"next":{"title":"ZIO Apache Parquet","permalink":"/ecosystem/community/zio-apache-parquet"}}');var a=t(74848),i=t(28453);const r={id:"zio-amqp",title:"ZIO AMQP"},c=void 0,s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/svroonland/zio-amqp",children:"ZIO AMQP"})," is a ZIO-based AMQP client for Scala."]}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"ZIO AMQP is a ZIO-based wrapper around the RabbitMQ client. It provides a streaming interface to AMQP queues and helps to prevent us from shooting ourselves in the foot with thread-safety issues."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,a.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "nl.vroste" %% "zio-amqp" % "0.3.0"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"First, let's create an instance of RabbitMQ:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"docker run -d --name some-rabbit -p 5672:5672 -p 5673:5673 -p 15672:15672 rabbitmq:3-management\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then we need to create ",(0,a.jsx)(n.code,{children:"my_exchange"})," and ",(0,a.jsx)(n.code,{children:"my_queue"})," and bind the queue to the exchange via the RabbitMQ management dashboard (",(0,a.jsx)(n.code,{children:"localhost:15672"}),")."]}),"\n",(0,a.jsx)(n.p,{children:"Now we can run the example below:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import nl.vroste.zio.amqp._\nimport nl.vroste.zio.amqp.model._\nimport zio._\n\nimport java.net.URI\n\nobject ZIOAMQPExample extends ZIOAppDefault {\n\n  val channel: ZIO[Scope, Throwable, Channel] = for {\n    connection <- Amqp.connect(URI.create("amqp://localhost:5672"))\n    channel    <- Amqp.createChannel(connection)\n  } yield channel\n\n  val myApp: ZIO[Any, Throwable, Unit] =\n    ZIO.scoped {\n      for {\n        channel                            <- channel\n        producer: ZIO[Any, Throwable, Long] =\n          Random.nextUUID\n            .flatMap(uuid => channel.publish(ExchangeName("my_exchange"), uuid.toString.getBytes).unit)\n            .schedule(Schedule.spaced(1.seconds))\n\n        consumer: ZIO[Any, Throwable, Unit] =\n          channel\n            .consume(queue = QueueName("my_queue"), consumerTag = ConsumerTag("my_consumer"))\n            .mapZIO { record =>\n              val deliveryTag = record.getEnvelope.getDeliveryTag\n              Console.printLine(s"Received $deliveryTag: ${new String(record.getBody)}") *>\n                channel.ack(DeliveryTag(deliveryTag))\n            }\n            .runDrain\n        p                                  <- producer.fork\n        c                                  <- consumer.fork\n        _                                  <- p.zip(c).join\n      } yield ()\n    }\n\n  override def run: ZIO[Environment with ZIOAppArgs with Scope, Any, Any] = myApp\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);