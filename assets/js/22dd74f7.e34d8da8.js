"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[11567],{55226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"2.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"overview_sidebar":[{"type":"link","label":"Getting Started","href":"/overview/getting-started","docId":"overview/getting-started","unlisted":false},{"type":"link","label":"Summary","href":"/overview/summary","docId":"overview/summary","unlisted":false},{"type":"link","label":"Creating Effects","href":"/overview/creating-effects","docId":"overview/creating-effects","unlisted":false},{"type":"link","label":"Basic Operations","href":"/overview/basic-operations","docId":"overview/basic-operations","unlisted":false},{"type":"link","label":"Handling Errors","href":"/overview/handling-errors","docId":"overview/handling-errors","unlisted":false},{"type":"link","label":"Handling Resources","href":"/overview/handling-resources","docId":"overview/handling-resources","unlisted":false},{"type":"link","label":"Basic Concurrency","href":"/overview/basic-concurrency","docId":"overview/basic-concurrency","unlisted":false},{"type":"link","label":"Running Effects","href":"/overview/running-effects","docId":"overview/running-effects","unlisted":false},{"type":"link","label":"Performance","href":"/overview/performance","docId":"overview/performance","unlisted":false},{"type":"link","label":"Platforms","href":"/overview/platforms","docId":"overview/platforms","unlisted":false}],"reference-sidebar":[{"type":"link","label":"Introduction","href":"/reference/","docId":"reference/index","unlisted":false},{"type":"category","label":"Core","collapsed":false,"items":[{"type":"link","label":"ZIO","href":"/reference/core/zio/","docId":"reference/core/zio/zio","unlisted":false},{"type":"category","collapsed":true,"label":"ZIO Type Aliases","items":[{"type":"link","label":"UIO","href":"/reference/core/zio/uio","docId":"reference/core/zio/uio","unlisted":false},{"type":"link","label":"URIO","href":"/reference/core/zio/urio","docId":"reference/core/zio/urio","unlisted":false},{"type":"link","label":"Task","href":"/reference/core/zio/task","docId":"reference/core/zio/task","unlisted":false},{"type":"link","label":"RIO","href":"/reference/core/zio/rio","docId":"reference/core/zio/rio","unlisted":false},{"type":"link","label":"IO","href":"/reference/core/zio/io","docId":"reference/core/zio/io","unlisted":false}],"collapsible":true},{"type":"link","label":"ZIOApp","href":"/reference/core/zioapp","docId":"reference/core/zioapp","unlisted":false},{"type":"link","label":"Runtime","href":"/reference/core/runtime","docId":"reference/core/runtime","unlisted":false},{"type":"link","label":"Exit","href":"/reference/core/exit","docId":"reference/core/exit","unlisted":false},{"type":"link","label":"Cause","href":"/reference/core/cause","docId":"reference/core/cause","unlisted":false}],"collapsible":true},{"type":"link","label":"Control Flow","href":"/reference/control-flow/","docId":"reference/control-flow/index","unlisted":false},{"type":"category","label":"Error Management","items":[{"type":"category","label":"Three Types of Errors in ZIO","items":[{"type":"link","label":"Failures","href":"/reference/error-management/types/failures","docId":"reference/error-management/types/failures","unlisted":false},{"type":"link","label":"Defects","href":"/reference/error-management/types/defects","docId":"reference/error-management/types/defects","unlisted":false},{"type":"link","label":"Fatal Errors","href":"/reference/error-management/types/fatals","docId":"reference/error-management/types/fatals","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/error-management/types/"},{"type":"link","label":"Imperative vs. Declarative","href":"/reference/error-management/imperative-vs-declarative","docId":"reference/error-management/imperative-vs-declarative","unlisted":false},{"type":"link","label":"Expected and Unexpected Errors","href":"/reference/error-management/expected-and-unexpected-errors","docId":"reference/error-management/expected-and-unexpected-errors","unlisted":false},{"type":"link","label":"Exceptional and Unexceptional Effects","href":"/reference/error-management/exceptional-and-unexceptional-effects","docId":"reference/error-management/exceptional-and-unexceptional-effects","unlisted":false},{"type":"link","label":"Typed Errors Guarantees","href":"/reference/error-management/typed-errors-guarantees","docId":"reference/error-management/typed-errors-guarantees","unlisted":false},{"type":"link","label":"Sequential and Parallel Errors","href":"/reference/error-management/sequential-and-parallel-errors","docId":"reference/error-management/sequential-and-parallel-errors","unlisted":false},{"type":"category","label":"Recovering From Errors","items":[{"type":"link","label":"1. Catching","href":"/reference/error-management/recovering/catching","docId":"reference/error-management/recovering/catching","unlisted":false},{"type":"link","label":"2. Fallback","href":"/reference/error-management/recovering/fallback","docId":"reference/error-management/recovering/fallback","unlisted":false},{"type":"link","label":"3. Folding","href":"/reference/error-management/recovering/folding","docId":"reference/error-management/recovering/folding","unlisted":false},{"type":"link","label":"4. Retrying","href":"/reference/error-management/recovering/retrying","docId":"reference/error-management/recovering/retrying","unlisted":false},{"type":"link","label":"5. Timing out","href":"/reference/error-management/recovering/timing-out","docId":"reference/error-management/recovering/timing-out","unlisted":false},{"type":"link","label":"6. Sandboxing","href":"/reference/error-management/recovering/sandboxing","docId":"reference/error-management/recovering/sandboxing","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Error Accumulation","href":"/reference/error-management/error-accumulation","docId":"reference/error-management/error-accumulation","unlisted":false},{"type":"category","label":"Error Channel Operations","items":[{"type":"link","label":"Map Operations","href":"/reference/error-management/operations/map-operations","docId":"reference/error-management/operations/map-operations","unlisted":false},{"type":"link","label":"Chaining Effects Based on Errors","href":"/reference/error-management/operations/chaining-effects-based-on-errors","docId":"reference/error-management/operations/chaining-effects-based-on-errors","unlisted":false},{"type":"link","label":"Filtering the Success Channel","href":"/reference/error-management/operations/filtering-the-success-channel","docId":"reference/error-management/operations/filtering-the-success-channel","unlisted":false},{"type":"link","label":"Tapping Errors","href":"/reference/error-management/operations/tapping-errors","docId":"reference/error-management/operations/tapping-errors","unlisted":false},{"type":"link","label":"Exposing Errors in The Success Channel","href":"/reference/error-management/operations/exposing-errors-in-the-success-channel","docId":"reference/error-management/operations/exposing-errors-in-the-success-channel","unlisted":false},{"type":"link","label":"Exposing the Cause in The Success Channel","href":"/reference/error-management/operations/exposing-the-cause-in-the-success-channel","docId":"reference/error-management/operations/exposing-the-cause-in-the-success-channel","unlisted":false},{"type":"link","label":"Converting Defects to Failures","href":"/reference/error-management/operations/converting-defects-to-failures","docId":"reference/error-management/operations/converting-defects-to-failures","unlisted":false},{"type":"link","label":"Error Refinement","href":"/reference/error-management/operations/error-refinement","docId":"reference/error-management/operations/error-refinement","unlisted":false},{"type":"link","label":"Flattening Optional Error Types","href":"/reference/error-management/operations/flattening-optional-error-types","docId":"reference/error-management/operations/flattening-optional-error-types","unlisted":false},{"type":"link","label":"Merging the Error Channel into the Success Channel","href":"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel","docId":"reference/error-management/operations/merging-the-error-channel-into-the-success-channel","unlisted":false},{"type":"link","label":"Flipping Error and Success Channels","href":"/reference/error-management/operations/flipping-error-and-success-channels","docId":"reference/error-management/operations/flipping-error-and-success-channels","unlisted":false},{"type":"link","label":"Rejecting Some Success Values","href":"/reference/error-management/operations/rejecting-some-success-values","docId":"reference/error-management/operations/rejecting-some-success-values","unlisted":false},{"type":"link","label":"Zooming In on Nested Values","href":"/reference/error-management/operations/zooming-in-on-nested-values","docId":"reference/error-management/operations/zooming-in-on-nested-values","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Best Practices","items":[{"type":"link","label":"Algebraic Data Types","href":"/reference/error-management/best-practices/algebraic-data-types","docId":"reference/error-management/best-practices/algebraic-data-types","unlisted":false},{"type":"link","label":"Union Types","href":"/reference/error-management/best-practices/union-types","docId":"reference/error-management/best-practices/union-types","unlisted":false},{"type":"link","label":"Don\'t Type Unexpected Errors","href":"/reference/error-management/best-practices/unexpected-errors","docId":"reference/error-management/best-practices/unexpected-errors","unlisted":false},{"type":"link","label":"Don\'t Reflexively Log Errors","href":"/reference/error-management/best-practices/logging-errors","docId":"reference/error-management/best-practices/logging-errors","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Examples","href":"/reference/error-management/examples","docId":"reference/error-management/examples","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/error-management/"},{"type":"link","label":"Interruption Model","href":"/reference/interruption/","docId":"reference/interruption/index","unlisted":false},{"type":"category","label":"Built-in Services","items":[{"type":"link","label":"Console","href":"/reference/services/console","docId":"reference/services/console","unlisted":false},{"type":"link","label":"Clock","href":"/reference/services/clock","docId":"reference/services/clock","unlisted":false},{"type":"link","label":"Random","href":"/reference/services/random","docId":"reference/services/random","unlisted":false},{"type":"link","label":"System","href":"/reference/services/system","docId":"reference/services/system","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/services/"},{"type":"category","label":"Application Architecture","items":[{"type":"link","label":"Programming Paradigms in ZIO","href":"/reference/architecture/programming-paradigms-in-zio","docId":"reference/architecture/programming-paradigms-in-zio","unlisted":false},{"type":"link","label":"Non-functional Requirements","href":"/reference/architecture/non-functional-requirements","docId":"reference/architecture/non-functional-requirements","unlisted":false},{"type":"link","label":"Architectural Patterns","href":"/reference/architecture/architectural-patterns","docId":"reference/architecture/architectural-patterns","unlisted":false},{"type":"link","label":"Functional Design Patterns","href":"/reference/architecture/functional-design-patterns","docId":"reference/architecture/functional-design-patterns","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Writing ZIO Services","items":[{"type":"link","label":"Service Pattern","href":"/reference/service-pattern/","docId":"reference/service-pattern/service-pattern","unlisted":false},{"type":"link","label":"Polymorphic Services","href":"/reference/service-pattern/defining-polymorphic-services-in-zio","docId":"reference/service-pattern/defining-polymorphic-services-in-zio","unlisted":false},{"type":"link","label":"Generating Accessor Methods","href":"/reference/service-pattern/generating-accessor-methods-using-macros","docId":"reference/service-pattern/generating-accessor-methods-using-macros","unlisted":false},{"type":"link","label":"Three Laws of ZIO Environment","href":"/reference/service-pattern/the-three-laws-of-zio-environment","docId":"reference/service-pattern/the-three-laws-of-zio-environment","unlisted":false},{"type":"link","label":"Reloadable Services","href":"/reference/service-pattern/reloadable-services","docId":"reference/service-pattern/reloadable-services","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/service-pattern/introduction"},{"type":"category","label":"Dependency Injection","items":[{"type":"link","label":"Motivation","href":"/reference/di/motivation","docId":"reference/di/motivation","unlisted":false},{"type":"link","label":"Constructor as a Value","href":"/reference/di/zlayer-constructor-as-a-value","docId":"reference/di/zlayer-constructor-as-a-value","unlisted":false},{"type":"link","label":"Getting Started","href":"/reference/di/dependency-injection-in-zio","docId":"reference/di/dependency-injection-in-zio","unlisted":false},{"type":"category","label":"Building Dependency Graph","items":[{"type":"link","label":"Manual Layer Construction","href":"/reference/di/manual-layer-construction","docId":"reference/di/manual-layer-construction","unlisted":false},{"type":"link","label":"Automatic Layer Construction","href":"/reference/di/automatic-layer-construction","docId":"reference/di/automatic-layer-construction","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/di/building-dependency-graph"},{"type":"link","label":"Dependency Propagation","href":"/reference/di/dependency-propagation","docId":"reference/di/dependency-propagation","unlisted":false},{"type":"link","label":"Multiple Implementations","href":"/reference/di/providing-different-implementation-of-a-service","docId":"reference/di/providing-different-implementation-of-a-service","unlisted":false},{"type":"link","label":"Dependency Memoization","href":"/reference/di/dependency-memoization","docId":"reference/di/dependency-memoization","unlisted":false},{"type":"link","label":"Overriding Dependency Graph","href":"/reference/di/overriding-dependency-graph","docId":"reference/di/overriding-dependency-graph","unlisted":false},{"type":"link","label":"Examples","href":"/reference/di/examples","docId":"reference/di/examples","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/di/"},{"type":"category","label":"Contextual Types","items":[{"type":"link","label":"ZEnvironment","href":"/reference/contextual/zenvironment","docId":"reference/contextual/zenvironment","unlisted":false},{"type":"link","label":"ZIO Environment Use-cases","href":"/reference/contextual/zio-environment-use-cases","docId":"reference/contextual/zio-environment-use-cases","unlisted":false},{"type":"category","label":"ZIO Layers","items":[{"type":"link","label":"ZLayer","href":"/reference/contextual/zlayer","docId":"reference/contextual/zlayer","unlisted":false},{"type":"link","label":"Automatic ZLayer Derivation","href":"/reference/contextual/automatic-zlayer-derivation","docId":"reference/contextual/automatic-zlayer-derivation","unlisted":false},{"type":"category","collapsed":true,"label":"Type Aliases","items":[{"type":"link","label":"RLayer","href":"/reference/contextual/rlayer","docId":"reference/contextual/rlayer","unlisted":false},{"type":"link","label":"ULayer","href":"/reference/contextual/ulayer","docId":"reference/contextual/ulayer","unlisted":false},{"type":"link","label":"Layer","href":"/reference/contextual/layer","docId":"reference/contextual/layer","unlisted":false},{"type":"link","label":"URLayer","href":"/reference/contextual/urlayer","docId":"reference/contextual/urlayer","unlisted":false},{"type":"link","label":"TaskLayer","href":"/reference/contextual/tasklayer","docId":"reference/contextual/tasklayer","unlisted":false}],"collapsible":true}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true,"href":"/reference/contextual/"},{"type":"category","label":"Scheduling","items":[{"type":"link","label":"Repetition","href":"/reference/schedule/repetition","docId":"reference/schedule/repetition","unlisted":false},{"type":"link","label":"Retrying","href":"/reference/schedule/retrying","docId":"reference/schedule/retrying","unlisted":false},{"type":"link","label":"Built-in Schedules","href":"/reference/schedule/built-in-schedules","docId":"reference/schedule/built-in-schedules","unlisted":false},{"type":"link","label":"Schedule Combinators","href":"/reference/schedule/combinators","docId":"reference/schedule/combinators","unlisted":false},{"type":"link","label":"Examples","href":"/reference/schedule/examples","docId":"reference/schedule/examples","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/schedule/"},{"type":"category","label":"State Management","collapsed":true,"items":[{"type":"link","label":"Recursion","href":"/reference/state-management/recursion","docId":"reference/state-management/recursion","unlisted":false},{"type":"link","label":"Global Shared State","href":"/reference/state-management/global-shared-state","docId":"reference/state-management/global-shared-state","unlisted":false},{"type":"category","label":"Fiber-local State","collapsed":true,"items":[{"type":"link","label":"FiberRef","href":"/reference/state-management/fiberref","docId":"reference/state-management/fiberref","unlisted":false},{"type":"link","label":"ZState","href":"/reference/state-management/zstate","docId":"reference/state-management/zstate","unlisted":false}],"collapsible":true,"href":"/reference/state-management/fiber-local-state"}],"collapsible":true,"href":"/reference/state-management/"},{"type":"category","label":"Concurrency","items":[{"type":"category","label":"ZIO Fibers","items":[{"type":"link","label":"Fiber","href":"/reference/fiber/fiber.md","docId":"reference/fiber/fiber","unlisted":false},{"type":"link","label":"FiberId","href":"/reference/fiber/fiberid","docId":"reference/fiber/fiberid","unlisted":false},{"type":"link","label":"Fiber.Status","href":"/reference/fiber/fiberstatus","docId":"reference/fiber/fiberstatus","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/fiber/"},{"type":"category","label":"Synchronization","items":[{"type":"link","label":"ReentrantLock","href":"/reference/sync/reentrantlock","docId":"reference/sync/reentrantlock","unlisted":false},{"type":"link","label":"CountdownLatch","href":"/reference/sync/countdownlatch","docId":"reference/sync/countdownlatch","unlisted":false},{"type":"link","label":"CyclicBarrier","href":"/reference/sync/cyclicbarrier","docId":"reference/sync/cyclicbarrier","unlisted":false},{"type":"link","label":"ConcurrentMap","href":"/reference/sync/concurrentmap","docId":"reference/sync/concurrentmap","unlisted":false},{"type":"link","label":"ConcurrentSet","href":"/reference/sync/concurrentset","docId":"reference/sync/concurrentset","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/sync/"},{"type":"category","label":"Concurrency Primitives","items":[{"type":"category","label":"Mutable Reference","items":[{"type":"link","label":"Ref","href":"/reference/concurrency/ref","docId":"reference/concurrency/ref","unlisted":false},{"type":"link","label":"Ref.Synchronized","href":"/reference/concurrency/refsynchronized","docId":"reference/concurrency/refsynchronized","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Promise","href":"/reference/concurrency/promise","docId":"reference/concurrency/promise","unlisted":false},{"type":"link","label":"Queue","href":"/reference/concurrency/queue","docId":"reference/concurrency/queue","unlisted":false},{"type":"link","label":"Hub","href":"/reference/concurrency/hub","docId":"reference/concurrency/hub","unlisted":false},{"type":"link","label":"Semaphore","href":"/reference/concurrency/semaphore","docId":"reference/concurrency/semaphore","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/concurrency/"},{"type":"category","label":"STM","items":[{"type":"link","label":"STM","href":"/reference/stm/stm.md","docId":"reference/stm/stm","unlisted":false},{"type":"link","label":"TArray","href":"/reference/stm/tarray","docId":"reference/stm/tarray","unlisted":false},{"type":"link","label":"TRandom","href":"/reference/stm/trandom","docId":"reference/stm/trandom","unlisted":false},{"type":"link","label":"TSet","href":"/reference/stm/tset","docId":"reference/stm/tset","unlisted":false},{"type":"link","label":"TMap","href":"/reference/stm/tmap","docId":"reference/stm/tmap","unlisted":false},{"type":"link","label":"TRef","href":"/reference/stm/tref","docId":"reference/stm/tref","unlisted":false},{"type":"link","label":"TPriorityQueue","href":"/reference/stm/tpriorityqueue","docId":"reference/stm/tpriorityqueue","unlisted":false},{"type":"link","label":"TPromise","href":"/reference/stm/tpromise","docId":"reference/stm/tpromise","unlisted":false},{"type":"link","label":"TQueue","href":"/reference/stm/tqueue","docId":"reference/stm/tqueue","unlisted":false},{"type":"link","label":"TReentrantLock","href":"/reference/stm/treentrantlock","docId":"reference/stm/treentrantlock","unlisted":false},{"type":"link","label":"TSemaphore","href":"/reference/stm/tsemaphore","docId":"reference/stm/tsemaphore","unlisted":false},{"type":"link","label":"THub","href":"/reference/stm/thub","docId":"reference/stm/thub","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/stm/"}],"collapsed":true,"collapsible":true,"href":"/reference/concurrency/"},{"type":"category","label":"Resource Management","items":[{"type":"link","label":"Scope","href":"/reference/resource/scope","docId":"reference/resource/scope","unlisted":false},{"type":"link","label":"ZPool","href":"/reference/resource/zpool","docId":"reference/resource/zpool","unlisted":false},{"type":"link","label":"ZKeyedPool","href":"/reference/resource/zkeyedpool","docId":"reference/resource/zkeyedpool","unlisted":false},{"type":"link","label":"ScopedRef","href":"/reference/resource/scopedref","docId":"reference/resource/scopedref","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/resource/"},{"type":"category","label":"Streaming","items":[{"type":"link","label":"Installation","href":"/reference/stream/installation","docId":"reference/stream/installation","unlisted":false},{"type":"link","label":"Chunk","href":"/reference/stream/chunk","docId":"reference/stream/chunk","unlisted":false},{"type":"category","label":"ZStream","items":[{"type":"link","label":"Type Aliases","href":"/reference/stream/zstream/type-aliases","docId":"reference/stream/zstream/type-aliases","unlisted":false},{"type":"link","label":"Chunked Streams","href":"/reference/stream/zstream/streams-are-chunked-by-default","docId":"reference/stream/zstream/streams-are-chunked-by-default","unlisted":false},{"type":"link","label":"Creating ZIO Streams","href":"/reference/stream/zstream/creating-zio-streams","docId":"reference/stream/zstream/creating-zio-streams","unlisted":false},{"type":"link","label":"Resourceful Streams","href":"/reference/stream/zstream/resourceful-streams","docId":"reference/stream/zstream/resourceful-streams","unlisted":false},{"type":"link","label":"Operations","href":"/reference/stream/zstream/operations","docId":"reference/stream/zstream/operations","unlisted":false},{"type":"link","label":"Consuming Streams","href":"/reference/stream/zstream/consuming-streams","docId":"reference/stream/zstream/consuming-streams","unlisted":false},{"type":"link","label":"Error Handling","href":"/reference/stream/zstream/error-handling","docId":"reference/stream/zstream/error-handling","unlisted":false},{"type":"link","label":"Scheduling","href":"/reference/stream/zstream/scheduling","docId":"reference/stream/zstream/scheduling","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/stream/zstream/"},{"type":"link","label":"ZPipeline","href":"/reference/stream/zpipeline","docId":"reference/stream/zpipeline","unlisted":false},{"type":"category","label":"ZSink","items":[{"type":"link","label":"Creating Sinks","href":"/reference/stream/zsink/creating-sinks","docId":"reference/stream/zsink/creating-sinks","unlisted":false},{"type":"link","label":"Sink Operations","href":"/reference/stream/zsink/operations","docId":"reference/stream/zsink/operations","unlisted":false},{"type":"link","label":"Parallel Operators","href":"/reference/stream/zsink/parallel-operators","docId":"reference/stream/zsink/parallel-operators","unlisted":false},{"type":"link","label":"Leftovers","href":"/reference/stream/zsink/leftovers","docId":"reference/stream/zsink/leftovers","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/stream/zsink/"},{"type":"category","label":"ZChannel","items":[{"type":"link","label":"Creating Channels","href":"/reference/stream/zchannel/creating-channels","docId":"reference/stream/zchannel/creating-channels","unlisted":false},{"type":"link","label":"Composing Channels","href":"/reference/stream/zchannel/composing-channels","docId":"reference/stream/zchannel/composing-channels","unlisted":false},{"type":"link","label":"Running a Channel","href":"/reference/stream/zchannel/running-a-channel","docId":"reference/stream/zchannel/running-a-channel","unlisted":false},{"type":"link","label":"Channel Operations","href":"/reference/stream/zchannel/channel-operations","docId":"reference/stream/zchannel/channel-operations","unlisted":false},{"type":"link","label":"Channel Interruption","href":"/reference/stream/zchannel/channel-interruption","docId":"reference/stream/zchannel/channel-interruption","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/stream/zchannel/"},{"type":"link","label":"SubscriptionRef","href":"/reference/stream/subscription-ref","docId":"reference/stream/subscription-ref","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/stream/"},{"type":"category","label":"Observability","items":[{"type":"link","label":"Logging","href":"/reference/observability/logging","docId":"reference/observability/logging","unlisted":false},{"type":"category","label":"Metrics","items":[{"type":"category","label":"Metric Types","items":[{"type":"link","label":"Counter","href":"/reference/observability/metrics/counter","docId":"reference/observability/metrics/counter","unlisted":false},{"type":"link","label":"Gauge","href":"/reference/observability/metrics/gauge","docId":"reference/observability/metrics/gauge","unlisted":false},{"type":"link","label":"Histogram","href":"/reference/observability/metrics/histogram","docId":"reference/observability/metrics/histogram","unlisted":false},{"type":"link","label":"Summary","href":"/reference/observability/metrics/summary","docId":"reference/observability/metrics/summary","unlisted":false},{"type":"link","label":"Frequency","href":"/reference/observability/metrics/frequency","docId":"reference/observability/metrics/frequency","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"MetricLabel","href":"/reference/observability/metrics/metriclabel","docId":"reference/observability/metrics/metriclabel","unlisted":false},{"type":"link","label":"JVM Metrics","href":"/reference/observability/metrics/jvm","docId":"reference/observability/metrics/jvm","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/observability/metrics/"},{"type":"link","label":"Tracing","href":"/reference/observability/tracing","docId":"reference/observability/tracing","unlisted":false},{"type":"link","label":"Supervisor","href":"/reference/observability/supervisor","docId":"reference/observability/supervisor","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Configuration","href":"/reference/configuration/","docId":"reference/configuration/index","unlisted":false},{"type":"category","label":"Testing","items":[{"type":"link","label":"Why ZIO Test?","href":"/reference/test/why-zio-test","docId":"reference/test/why-zio-test","unlisted":false},{"type":"link","label":"Installation","href":"/reference/test/installation","docId":"reference/test/installation","unlisted":false},{"type":"link","label":"Writing Our First Test","href":"/reference/test/writing-our-first-test","docId":"reference/test/writing-our-first-test","unlisted":false},{"type":"link","label":"Running Tests","href":"/reference/test/running-tests","docId":"reference/test/running-tests","unlisted":false},{"type":"link","label":"JUnit Integration","href":"/reference/test/junit-integration","docId":"reference/test/junit-integration","unlisted":false},{"type":"category","label":"Assertions","items":[{"type":"link","label":"Classic Assertions","href":"/reference/test/assertions/classic-assertions","docId":"reference/test/assertions/classic-assertions","unlisted":false},{"type":"link","label":"Smart Assertions","href":"/reference/test/assertions/smart-assertions","docId":"reference/test/assertions/smart-assertions","unlisted":false},{"type":"link","label":"Built-in Assertions","href":"/reference/test/assertions/built-in-assertions","docId":"reference/test/assertions/built-in-assertions","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/test/assertions/"},{"type":"link","label":"Test Hierarchies and Organization","href":"/reference/test/test-hierarchies-and-organization","docId":"reference/test/test-hierarchies-and-organization","unlisted":false},{"type":"link","label":"Sharing Layers within the Same File","href":"/reference/test/sharing-layers-within-the-same-file","docId":"reference/test/sharing-layers-within-the-same-file","unlisted":false},{"type":"link","label":"Sharing Layers Between Multiple Files","href":"/reference/test/sharing-layers-between-multiple-files","docId":"reference/test/sharing-layers-between-multiple-files","unlisted":false},{"type":"link","label":"Spec","href":"/reference/test/spec","docId":"reference/test/spec","unlisted":false},{"type":"category","label":"Test Services","items":[{"type":"link","label":"TestConsole","href":"/reference/test/services/console","docId":"reference/test/services/console","unlisted":false},{"type":"link","label":"TestClock","href":"/reference/test/services/clock","docId":"reference/test/services/clock","unlisted":false},{"type":"link","label":"TestRandom","href":"/reference/test/services/random","docId":"reference/test/services/random","unlisted":false},{"type":"link","label":"TestSystem","href":"/reference/test/services/system","docId":"reference/test/services/system","unlisted":false},{"type":"link","label":"Live","href":"/reference/test/services/live","docId":"reference/test/services/live","unlisted":false},{"type":"link","label":"TestConfig","href":"/reference/test/services/config","docId":"reference/test/services/config","unlisted":false},{"type":"link","label":"Sized","href":"/reference/test/services/sized","docId":"reference/test/services/sized","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/test/services/"},{"type":"category","label":"Test Aspects","items":[{"type":"link","label":"Before, After, and Around","href":"/reference/test/aspects/before-after-around","docId":"reference/test/aspects/before-after-around","unlisted":false},{"type":"link","label":"Conditional Aspects","href":"/reference/test/aspects/conditional","docId":"reference/test/aspects/conditional","unlisted":false},{"type":"link","label":"Debugging and Diagnostics","href":"/reference/test/aspects/debugging-and-diagnostics","docId":"reference/test/aspects/debugging-and-diagnostics","unlisted":false},{"type":"link","label":"Environment-specific Tests","href":"/reference/test/aspects/environment-specific-tests","docId":"reference/test/aspects/environment-specific-tests","unlisted":false},{"type":"link","label":"Execution Strategy","href":"/reference/test/aspects/execution-strategy","docId":"reference/test/aspects/execution-strategy","unlisted":false},{"type":"link","label":"Flaky and Non-flaky Tests","href":"/reference/test/aspects/flaky-and-non-flaky-tests","docId":"reference/test/aspects/flaky-and-non-flaky-tests","unlisted":false},{"type":"link","label":"Ignoring Tests","href":"/reference/test/aspects/ignoring-tests","docId":"reference/test/aspects/ignoring-tests","unlisted":false},{"type":"link","label":"Non-deterministic Test Data","href":"/reference/test/aspects/non-deterministic-test-data","docId":"reference/test/aspects/non-deterministic-test-data","unlisted":false},{"type":"link","label":"Passing Failed Tests","href":"/reference/test/aspects/passing-failed-tests","docId":"reference/test/aspects/passing-failed-tests","unlisted":false},{"type":"link","label":"Repeat and Retry","href":"/reference/test/aspects/repeat-and-retry","docId":"reference/test/aspects/repeat-and-retry","unlisted":false},{"type":"link","label":"Restoring State of Test Services","href":"/reference/test/aspects/restoring-state-of-test-services","docId":"reference/test/aspects/restoring-state-of-test-services","unlisted":false},{"type":"link","label":"Changing the Size of Sized Generators","href":"/reference/test/aspects/sized","docId":"reference/test/aspects/sized","unlisted":false},{"type":"link","label":"Annotating Tests","href":"/reference/test/aspects/annotating-tests","docId":"reference/test/aspects/annotating-tests","unlisted":false},{"type":"link","label":"Configuring Tests","href":"/reference/test/aspects/configuring-tests","docId":"reference/test/aspects/configuring-tests","unlisted":false},{"type":"link","label":"Timing-out Tests","href":"/reference/test/aspects/timing-out-tests","docId":"reference/test/aspects/timing-out-tests","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/test/aspects/"},{"type":"link","label":"Dynamic Test Generation","href":"/reference/test/dynamic-test-generation","docId":"reference/test/dynamic-test-generation","unlisted":false},{"type":"category","label":"Property Testing","items":[{"type":"link","label":"Getting Started","href":"/reference/test/property-testing/getting-started","docId":"reference/test/property-testing/getting-started","unlisted":false},{"type":"link","label":"How Generators Work?","href":"/reference/test/property-testing/how-generators-work","docId":"reference/test/property-testing/how-generators-work","unlisted":false},{"type":"link","label":"Built-in Generators","href":"/reference/test/property-testing/built-in-generators","docId":"reference/test/property-testing/built-in-generators","unlisted":false},{"type":"link","label":"Shrinking","href":"/reference/test/property-testing/shrinking","docId":"reference/test/property-testing/shrinking","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/reference/test/property-testing/"}],"collapsed":true,"collapsible":true,"href":"/reference/test/"}],"guides-sidebar":[{"type":"link","label":"Overview","href":"/guides/","docId":"guides/index","unlisted":false},{"type":"category","label":"Quickstart Guides","collapsed":false,"items":[{"type":"link","label":"Hello World","href":"/guides/quickstarts/hello-world","docId":"guides/quickstarts/hello-world","unlisted":false},{"type":"link","label":"RESTful Web Service","href":"/guides/quickstarts/restful-webservice","docId":"guides/quickstarts/restful-webservice","unlisted":false},{"type":"link","label":"GraphQL Web Service","href":"/guides/quickstarts/graphql-webservice","docId":"guides/quickstarts/graphql-webservice","unlisted":false}],"collapsible":true},{"type":"category","label":"Tutorial Guides","items":[{"type":"link","label":"Making a ZIO application configurable","href":"/guides/tutorials/configurable-zio-application","docId":"guides/tutorials/configurable-zio-application","unlisted":false},{"type":"link","label":"Encoding and Decoding JSON Data","href":"/guides/tutorials/encode-and-decode-json-data","docId":"guides/tutorials/encode-and-decode-json-data","unlisted":false},{"type":"link","label":"Enable Logging in a ZIO Application","href":"/guides/tutorials/enable-logging-in-a-zio-application","docId":"guides/tutorials/enable-logging-in-a-zio-application","unlisted":false},{"type":"link","label":"Create Custom Logger for a ZIO Application","href":"/guides/tutorials/create-custom-logger-for-a-zio-application","docId":"guides/tutorials/create-custom-logger-for-a-zio-application","unlisted":false},{"type":"link","label":"Running Our First ZIO Project With VSCode","href":"/guides/tutorials/run-our-first-zio-project-with-vscode","docId":"guides/tutorials/run-our-first-zio-project-with-vscode","unlisted":false},{"type":"link","label":"Running Our First ZIO Project With IntelliJ IDEA","href":"/guides/tutorials/run-our-first-zio-project-with-intellij-idea","docId":"guides/tutorials/run-our-first-zio-project-with-intellij-idea","unlisted":false},{"type":"link","label":"Deploying a ZIO Application Using Docker","href":"/guides/tutorials/deploy-a-zio-application-using-docker","docId":"guides/tutorials/deploy-a-zio-application-using-docker","unlisted":false},{"type":"link","label":"Producing/Consuming Data To/From Kafka Topics","href":"/guides/tutorials/producing-consuming-data-from-kafka-topics","docId":"guides/tutorials/producing-consuming-data-from-kafka-topics","unlisted":false},{"type":"link","label":"Monitoring a ZIO Application Using ZIO\'s Built-in Metric System","href":"/guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","docId":"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","unlisted":false},{"type":"link","label":"Debugging a ZIO Application","href":"/guides/tutorials/debug-a-zio-application","docId":"guides/tutorials/debug-a-zio-application","unlisted":false},{"type":"link","label":"Building a RESTful Web Service","href":"/guides/tutorials/build-a-restful-webservice","docId":"guides/tutorials/build-a-restful-webservice","unlisted":false},{"type":"link","label":"Building a GraphQL Web Service","href":"/guides/tutorials/build-a-graphql-webservice","docId":"guides/tutorials/build-a-graphql-webservice","unlisted":false},{"type":"link","label":"Gracefully Shutdown ZIO Applications","href":"/guides/tutorials/gracefully-shutdown-zio-application","docId":"guides/tutorials/gracefully-shutdown-zio-application","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integration Guides","items":[{"type":"link","label":"Cats Effect","href":"/guides/interop/with-cats-effect","docId":"guides/interop/with-cats-effect","unlisted":false},{"type":"link","label":"Scala\'s Future","href":"/guides/interop/with-future","docId":"guides/interop/with-future","unlisted":false},{"type":"link","label":"Java","href":"/guides/interop/with-java","docId":"guides/interop/with-java","unlisted":false},{"type":"link","label":"JavaScript","href":"/guides/interop/with-javascript","docId":"guides/interop/with-javascript","unlisted":false},{"type":"link","label":"Monix","href":"/guides/interop/with-monix","docId":"guides/interop/with-monix","unlisted":false},{"type":"link","label":"Scalaz 7.x","href":"/guides/interop/with-scalaz-7x","docId":"guides/interop/with-scalaz-7x","unlisted":false},{"type":"link","label":"Reactive Streams","href":"/guides/interop/with-reactive-streams","docId":"guides/interop/with-reactive-streams","unlisted":false},{"type":"link","label":"Twitter\'s Future","href":"/guides/interop/with-twitter","docId":"guides/interop/with-twitter","unlisted":false},{"type":"link","label":"Guava","href":"/guides/interop/with-guava","docId":"guides/interop/with-guava","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Migration Guides","collapsed":false,"items":[{"type":"link","label":"ZIO 2.x Migration Guide","href":"/guides/migrate/zio-2.x-migration-guide","docId":"guides/migrate/zio-2.x-migration-guide","unlisted":false},{"type":"link","label":"Migration From Akka","href":"/guides/migrate/from-akka","docId":"guides/migrate/from-akka","unlisted":false},{"type":"link","label":"Migration from Cats Effect","href":"/guides/migrate/from-cats-effect","docId":"guides/migrate/from-cats-effect","unlisted":false},{"type":"link","label":"Migration from Monix","href":"/guides/migrate/from-monix","docId":"guides/migrate/from-monix","unlisted":false}],"collapsible":true}],"ecosystem-sidebar":[{"type":"link","label":"ZIO Ecosystem","href":"/ecosystem/","docId":"ecosystem/index","unlisted":false},{"type":"category","label":"Official Libraries","collapsed":false,"items":[{"type":"link","label":"Caliban Deriving","href":"/caliban-deriving/","docId":"caliban-deriving/index","unlisted":false},{"type":"link","label":"izumi-reflect","href":"/izumi-reflect/","docId":"izumi-reflect/index","unlisted":false},{"type":"link","label":"ZIO 2.x Interop Cats 2.x","href":"/zio2-interop-cats2/","docId":"zio2-interop-cats2/index","unlisted":false},{"type":"link","label":"ZIO AMQP","href":"/zio-amqp/","docId":"zio-amqp/index","unlisted":false},{"type":"category","label":"ZIO AWS","items":[{"type":"link","label":"Artifacts","href":"/zio-aws/artifacts","docId":"zio-aws/artifacts","unlisted":false},{"type":"link","label":"Wrappers","href":"/zio-aws/wrappers","docId":"zio-aws/wrappers","unlisted":false},{"type":"link","label":"Configuration","href":"/zio-aws/configuration","docId":"zio-aws/configuration","unlisted":false},{"type":"link","label":"HTTP","href":"/zio-aws/http","docId":"zio-aws/http","unlisted":false},{"type":"link","label":"Aspects","href":"/zio-aws/aspects","docId":"zio-aws/aspects","unlisted":false},{"type":"link","label":"Examples","href":"/zio-aws/examples","docId":"zio-aws/examples","unlisted":false},{"type":"link","label":"Changelog","href":"/zio-aws/changelog","docId":"zio-aws/changelog","unlisted":false},{"type":"link","label":"Migration guide","href":"/zio-aws/migration-guide","docId":"zio-aws/migration-guide","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-aws/"},{"type":"category","label":"ZIO Actors","items":[{"type":"link","label":"Basics","href":"/zio-actors/basics","docId":"zio-actors/basics","unlisted":false},{"type":"link","label":"Supervision","href":"/zio-actors/supervision","docId":"zio-actors/supervision","unlisted":false},{"type":"link","label":"Remoting","href":"/zio-actors/remoting","docId":"zio-actors/remoting","unlisted":false},{"type":"link","label":"Persistence","href":"/zio-actors/persistence","docId":"zio-actors/persistence","unlisted":false},{"type":"link","label":"Akka Interop","href":"/zio-actors/akka-interop","docId":"zio-actors/akka-interop","unlisted":false},{"type":"link","label":"Examples","href":"/zio-actors/examples","docId":"zio-actors/examples","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-actors/"},{"type":"link","label":"ZIO Akka Cluster","href":"/zio-akka-cluster/","docId":"zio-akka-cluster/index","unlisted":false},{"type":"link","label":"ZIO Bson","href":"/zio-bson/","docId":"zio-bson/index","unlisted":false},{"type":"category","label":"ZIO CLI","collapsed":true,"items":[{"type":"link","label":"Args","href":"/zio-cli/args","docId":"zio-cli/args","unlisted":false},{"type":"link","label":"Options","href":"/zio-cli/options","docId":"zio-cli/options","unlisted":false},{"type":"link","label":"Commands","href":"/zio-cli/commands","docId":"zio-cli/commands","unlisted":false},{"type":"link","label":"Help Documentation","href":"/zio-cli/helpdoc","docId":"zio-cli/helpdoc","unlisted":false},{"type":"link","label":"Built-in commands","href":"/zio-cli/built-in-commands","docId":"zio-cli/built-in-commands","unlisted":false},{"type":"link","label":"Cli Configuration","href":"/zio-cli/cli-config","docId":"zio-cli/cli-config","unlisted":false},{"type":"link","label":"OAuth2","href":"/zio-cli/auth","docId":"zio-cli/auth","unlisted":false},{"type":"link","label":"Bash and Zsh Completion","href":"/zio-cli/bash-and-zsh-completion","docId":"zio-cli/bash-and-zsh-completion","unlisted":false},{"type":"link","label":"SBT Plugin","href":"/zio-cli/sbt-plugin","docId":"zio-cli/sbt-plugin","unlisted":false},{"type":"link","label":"Advanced example","href":"/zio-cli/examples","docId":"zio-cli/examples","unlisted":false}],"collapsible":true,"href":"/zio-cli/"},{"type":"category","label":"ZIO Cache","collapsed":true,"items":[{"type":"link","label":"Lookup","href":"/zio-cache/lookup","docId":"zio-cache/lookup","unlisted":false},{"type":"link","label":"Cache","href":"/zio-cache/cache","docId":"zio-cache/cache","unlisted":false},{"type":"link","label":"Cache Statistics","href":"/zio-cache/cache-statistics","docId":"zio-cache/cache-statistics","unlisted":false},{"type":"link","label":"Entry Statistics","href":"/zio-cache/entry-statistics","docId":"zio-cache/entry-statistics","unlisted":false}],"collapsible":true,"href":"/zio-cache/"},{"type":"category","label":"ZIO Config","collapsed":true,"items":[{"type":"link","label":"Dive Into ZIO Config","href":"/zio-config/dive-into-zio-config","docId":"zio-config/dive-into-zio-config","unlisted":false},{"type":"link","label":"Integrations","href":"/zio-config/integrations","docId":"zio-config/integrations","unlisted":false},{"type":"link","label":"Automatic Derivation of Config","href":"/zio-config/automatic-derivation-of-config","docId":"zio-config/automatic-derivation-of-config","unlisted":false},{"type":"link","label":"Read from various Sources","href":"/zio-config/read-from-various-sources","docId":"zio-config/read-from-various-sources","unlisted":false},{"type":"link","label":"Automatic Validations","href":"/zio-config/automatic-validations","docId":"zio-config/automatic-validations","unlisted":false},{"type":"link","label":"Resources","href":"/zio-config/resources","docId":"zio-config/resources","unlisted":false}],"collapsible":true,"href":"/zio-config/"},{"type":"category","label":"ZIO Connect","items":[{"type":"link","label":"Couchbase Connector","href":"/zio-connect/couchbase-connector","docId":"zio-connect/couchbase-connector","unlisted":false},{"type":"link","label":"DynamoDB Connector","href":"/zio-connect/dynamodb-connector","docId":"zio-connect/dynamodb-connector","unlisted":false},{"type":"link","label":"File Connector","href":"/zio-connect/file-connector","docId":"zio-connect/file-connector","unlisted":false},{"type":"link","label":"S3 Connector","href":"/zio-connect/s3-connector","docId":"zio-connect/s3-connector","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-connect/"},{"type":"link","label":"ZIO Constraintless","href":"/zio-constraintless/","docId":"zio-constraintless/index","unlisted":false},{"type":"link","label":"ZIO Deriving","href":"/zio-deriving/","docId":"zio-deriving/index","unlisted":false},{"type":"category","label":"ZIO Direct Style","collapsed":true,"items":[{"type":"link","label":"Supported Constructs","href":"/zio-direct/supported-constructs","docId":"zio-direct/supported-constructs","unlisted":false},{"type":"link","label":"IntelliJ Support","href":"/zio-direct/intellij-support","docId":"zio-direct/intellij-support","unlisted":false},{"type":"link","label":"Other Supported Monads","href":"/zio-direct/other-supported-monads","docId":"zio-direct/other-supported-monads","unlisted":false}],"collapsible":true,"href":"/zio-direct/"},{"type":"category","label":"ZIO DynamoDB","collapsed":true,"items":[{"type":"category","collapsed":true,"label":"Concepts","items":[{"type":"link","label":"Architecture","href":"/zio-dynamodb/concepts/architecture","docId":"zio-dynamodb/concepts/architecture","unlisted":false},{"type":"link","label":"High Level API","href":"/zio-dynamodb/concepts/high-level-api","docId":"zio-dynamodb/concepts/high-level-api","unlisted":false},{"type":"link","label":"Low Level API","href":"/zio-dynamodb/concepts/low-level-api","docId":"zio-dynamodb/concepts/low-level-api","unlisted":false}],"collapsible":true},{"type":"category","collapsed":true,"label":"Guides","items":[{"type":"link","label":"Getting Started","href":"/zio-dynamodb/guides/getting-started","docId":"zio-dynamodb/guides/getting-started","unlisted":false},{"type":"link","label":"High Level API Cheat Sheet","href":"/zio-dynamodb/guides/cheat-sheet","docId":"zio-dynamodb/guides/cheat-sheet","unlisted":false},{"type":"link","label":"High Level API Data Modelling and Limitations","href":"/zio-dynamodb/guides/data-modelling","docId":"zio-dynamodb/guides/data-modelling","unlisted":false},{"type":"link","label":"Codec Customization","href":"/zio-dynamodb/guides/codec-customization","docId":"zio-dynamodb/guides/codec-customization","unlisted":false},{"type":"link","label":"DynamoDB Transactions","href":"/zio-dynamodb/guides/transactions","docId":"zio-dynamodb/guides/transactions","unlisted":false},{"type":"link","label":"Testing ZIO DynamoDB Applications","href":"/zio-dynamodb/guides/testing","docId":"zio-dynamodb/guides/testing","unlisted":false},{"type":"link","label":"Cats Effect Interop","href":"/zio-dynamodb/guides/ce-interop","docId":"zio-dynamodb/guides/ce-interop","unlisted":false}],"collapsible":true},{"type":"category","collapsed":true,"label":"Reference","items":[{"type":"category","label":"High Level API","collapsed":true,"items":[{"type":"category","label":"Creating Models","collapsed":true,"items":[{"type":"link","label":"Field Traversal","href":"/zio-dynamodb/reference/hi-level-api/creating-models/field-traversal","docId":"zio-dynamodb/reference/hi-level-api/creating-models/field-traversal","unlisted":false}],"collapsible":true,"href":"/zio-dynamodb/reference/hi-level-api/creating-models/"},{"type":"category","label":"CRUD Operations","collapsed":true,"items":[{"type":"link","label":"put","href":"/zio-dynamodb/reference/hi-level-api/crud-operations/put","docId":"zio-dynamodb/reference/hi-level-api/crud-operations/put","unlisted":false},{"type":"link","label":"get","href":"/zio-dynamodb/reference/hi-level-api/crud-operations/get","docId":"zio-dynamodb/reference/hi-level-api/crud-operations/get","unlisted":false},{"type":"link","label":"update","href":"/zio-dynamodb/reference/hi-level-api/crud-operations/update","docId":"zio-dynamodb/reference/hi-level-api/crud-operations/update","unlisted":false},{"type":"link","label":"deleteFrom","href":"/zio-dynamodb/reference/hi-level-api/crud-operations/delete","docId":"zio-dynamodb/reference/hi-level-api/crud-operations/delete","unlisted":false}],"collapsible":true,"href":"/zio-dynamodb/reference/hi-level-api/crud-operations/"},{"type":"category","label":"Scan and Query Operations","collapsed":true,"items":[{"type":"link","label":"scanAll","href":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","docId":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","unlisted":false},{"type":"link","label":"scanSome","href":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-some","docId":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-some","unlisted":false},{"type":"link","label":"queryAll","href":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-all","docId":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-all","unlisted":false},{"type":"link","label":"querySome","href":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-some","docId":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-some","unlisted":false}],"collapsible":true,"href":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/"},{"type":"link","label":"Primary Keys","href":"/zio-dynamodb/reference/hi-level-api/primary-keys","docId":"zio-dynamodb/reference/hi-level-api/primary-keys","unlisted":false}],"collapsible":true,"href":"/zio-dynamodb/reference/hi-level-api/"},{"type":"category","label":"Low Level API","collapsed":true,"items":[{"type":"link","label":"AttributeValue","href":"/zio-dynamodb/reference/low-level-api/attribute-value","docId":"zio-dynamodb/reference/low-level-api/attribute-value","unlisted":false},{"type":"link","label":"$ and parse functions","href":"/zio-dynamodb/reference/low-level-api/dollar-function","docId":"zio-dynamodb/reference/low-level-api/dollar-function","unlisted":false}],"collapsible":true,"href":"/zio-dynamodb/reference/low-level-api/"},{"type":"link","label":"DynamoDBQuery","href":"/zio-dynamodb/reference/dynamodb-query","docId":"zio-dynamodb/reference/dynamodb-query","unlisted":false},{"type":"link","label":"ProjectionExpression","href":"/zio-dynamodb/reference/projection-expression","docId":"zio-dynamodb/reference/projection-expression","unlisted":false},{"type":"link","label":"Error Handling","href":"/zio-dynamodb/reference/error-handling","docId":"zio-dynamodb/reference/error-handling","unlisted":false},{"type":"link","label":"Auto batching and parallelisation","href":"/zio-dynamodb/reference/auto-batching-and-parallelisation","docId":"zio-dynamodb/reference/auto-batching-and-parallelisation","unlisted":false},{"type":"link","label":"ZIO DynamoDB JSON Module","href":"/zio-dynamodb/reference/zio-dynamodb-json","docId":"zio-dynamodb/reference/zio-dynamodb-json","unlisted":false}],"collapsible":true}],"collapsible":true,"href":"/zio-dynamodb/"},{"type":"category","label":"ZIO FTP","collapsed":true,"items":[{"type":"link","label":"Environment","href":"/zio-ftp/environment","docId":"zio-ftp/environment","unlisted":false}],"collapsible":true,"href":"/zio-ftp/"},{"type":"category","label":"ZIO Flow","items":[{"type":"link","label":"Defining flows","href":"/zio-flow/zflow","docId":"zio-flow/zflow","unlisted":false},{"type":"link","label":"Remote","href":"/zio-flow/remote","docId":"zio-flow/remote","unlisted":false},{"type":"link","label":"Activities","href":"/zio-flow/activities","docId":"zio-flow/activities","unlisted":false},{"type":"link","label":"Execution","href":"/zio-flow/execution","docId":"zio-flow/execution","unlisted":false},{"type":"link","label":"Backends","href":"/zio-flow/backends","docId":"zio-flow/backends","unlisted":false},{"type":"link","label":"Testing","href":"/zio-flow/testing","docId":"zio-flow/testing","unlisted":false},{"type":"link","label":"Examples","href":"/zio-flow/examples","docId":"zio-flow/examples","unlisted":false},{"type":"link","label":"Internals","href":"/zio-flow/internals","docId":"zio-flow/internals","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-flow/"},{"type":"category","label":"ZIO HTTP","collapsed":true,"items":[{"type":"link","label":"Installation","href":"/zio-http/installation","docId":"zio-http/installation","unlisted":false},{"type":"category","collapsed":true,"label":"Concepts","items":[{"type":"link","label":"Routing","href":"/zio-http/concepts/routing","docId":"zio-http/concepts/routing","unlisted":false},{"type":"link","label":"Middleware","href":"/zio-http/concepts/middleware","docId":"zio-http/concepts/middleware","unlisted":false},{"type":"link","label":"Endpoint API","href":"/zio-http/concepts/endpoint","docId":"zio-http/concepts/endpoint","unlisted":false}],"collapsible":true},{"type":"category","collapsed":true,"label":"Reference","items":[{"type":"link","label":"Overview","href":"/zio-http/reference/overview","docId":"zio-http/reference/overview","unlisted":false},{"type":"link","label":"Server","href":"/zio-http/reference/server","docId":"zio-http/reference/server","unlisted":false},{"type":"link","label":"Client","href":"/zio-http/reference/client","docId":"zio-http/reference/client","unlisted":false},{"type":"category","label":"Routing","items":[{"type":"link","label":"Routes","href":"/zio-http/reference/routing/routes","docId":"zio-http/reference/routing/routes","unlisted":false},{"type":"link","label":"RoutePattern","href":"/zio-http/reference/routing/route_pattern","docId":"zio-http/reference/routing/route_pattern","unlisted":false},{"type":"link","label":"PathCodec","href":"/zio-http/reference/routing/path_codec","docId":"zio-http/reference/routing/path_codec","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Request Handler","href":"/zio-http/reference/handler","docId":"zio-http/reference/handler","unlisted":false},{"type":"category","label":"HTTP Messages","items":[{"type":"link","label":"Request","href":"/zio-http/reference/request","docId":"zio-http/reference/request","unlisted":false},{"type":"link","label":"Response","href":"/zio-http/reference/response/","docId":"zio-http/reference/response/response","unlisted":false},{"type":"link","label":"Status Codes","href":"/zio-http/reference/response/status","docId":"zio-http/reference/response/status","unlisted":false},{"type":"category","label":"Headers","items":[{"type":"link","label":"Headers","href":"/zio-http/reference/headers/","docId":"zio-http/reference/headers/headers","unlisted":false},{"type":"link","label":"Cookies","href":"/zio-http/reference/headers/session/cookies","docId":"zio-http/reference/headers/session/cookies","unlisted":false},{"type":"link","label":"Flash","href":"/zio-http/reference/headers/session/flash","docId":"zio-http/reference/headers/session/flash","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Message Body","items":[{"type":"link","label":"Body","href":"/zio-http/reference/body/","docId":"zio-http/reference/body/body","unlisted":false},{"type":"link","label":"Form Data","href":"/zio-http/reference/body/form","docId":"zio-http/reference/body/form","unlisted":false},{"type":"link","label":"BinaryCodecs","href":"/zio-http/reference/body/binary_codecs","docId":"zio-http/reference/body/binary_codecs","unlisted":false},{"type":"link","label":"Template","href":"/zio-http/reference/body/template","docId":"zio-http/reference/body/template","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Declarative Endpoints","items":[{"type":"link","label":"Endpoint","href":"/zio-http/reference/endpoint","docId":"zio-http/reference/endpoint","unlisted":false},{"type":"link","label":"HttpCodec","href":"/zio-http/reference/http-codec","docId":"zio-http/reference/http-codec","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Aspects","items":[{"type":"link","label":"ProtocolStack","href":"/zio-http/reference/aop/protocol-stack","docId":"zio-http/reference/aop/protocol-stack","unlisted":false},{"type":"link","label":"Middleware","href":"/zio-http/reference/aop/middleware","docId":"zio-http/reference/aop/middleware","unlisted":false},{"type":"link","label":"HandlerAspect","href":"/zio-http/reference/aop/handler_aspect","docId":"zio-http/reference/aop/handler_aspect","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"WebSocket","items":[{"type":"link","label":"Socket","href":"/zio-http/reference/socket/","docId":"zio-http/reference/socket/socket","unlisted":false},{"type":"link","label":"WebSocketFrame","href":"/zio-http/reference/socket/websocketframe","docId":"zio-http/reference/socket/websocketframe","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsible":true,"href":"/zio-http/reference/"},{"type":"category","label":"Guides","items":[{"type":"link","label":"Integration with ZIO Config","href":"/zio-http/guides/integration-with-zio-config","docId":"zio-http/guides/integration-with-zio-config","unlisted":false},{"type":"link","label":"Testing HTTP Applications","href":"/zio-http/guides/testing-http-apps","docId":"zio-http/guides/testing-http-apps","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-http/"},{"type":"category","label":"Examples","items":[{"type":"link","label":"Hello World","href":"/zio-http/examples/hello-world","docId":"zio-http/examples/hello-world","unlisted":false},{"type":"link","label":"HTTP Client-Server","href":"/zio-http/examples/http-client-server","docId":"zio-http/examples/http-client-server","unlisted":false},{"type":"link","label":"Https Client and Server","href":"/zio-http/examples/https-client-server","docId":"zio-http/examples/https-client-server","unlisted":false},{"type":"link","label":"Serving Static Files","href":"/zio-http/examples/serving-static-files","docId":"zio-http/examples/serving-static-files","unlisted":false},{"type":"link","label":"HTML Templating","href":"/zio-http/examples/html-templating","docId":"zio-http/examples/html-templating","unlisted":false},{"type":"link","label":"WebSocket Server & Client","href":"/zio-http/examples/websocket","docId":"zio-http/examples/websocket","unlisted":false},{"type":"link","label":"Streaming","href":"/zio-http/examples/streaming","docId":"zio-http/examples/streaming","unlisted":false},{"type":"link","label":"Endpoint","href":"/zio-http/examples/endpoint","docId":"zio-http/examples/endpoint","unlisted":false},{"type":"link","label":"Middleware CORS Handling","href":"/zio-http/examples/middleware-cors-handling","docId":"zio-http/examples/middleware-cors-handling","unlisted":false},{"type":"link","label":"Authentication","href":"/zio-http/examples/authentication","docId":"zio-http/examples/authentication","unlisted":false},{"type":"link","label":"Graceful Shutdown","href":"/zio-http/examples/graceful-shutdown","docId":"zio-http/examples/graceful-shutdown","unlisted":false},{"type":"link","label":"CLI","href":"/zio-http/examples/cli","docId":"zio-http/examples/cli","unlisted":false},{"type":"link","label":"Concrete Entity","href":"/zio-http/examples/concrete-entity","docId":"zio-http/examples/concrete-entity","unlisted":false},{"type":"link","label":"Multipart Form Data","href":"/zio-http/examples/multipart-form-data","docId":"zio-http/examples/multipart-form-data","unlisted":false},{"type":"link","label":"Server Sent Events in Endpoints","href":"/zio-http/examples/server-sent-events-in-endpoints","docId":"zio-http/examples/server-sent-events-in-endpoints","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-http/examples/"},{"type":"link","label":"FAQ","href":"/zio-http/faq","docId":"zio-http/faq","unlisted":false}],"collapsible":true,"href":"/zio-http/"},{"type":"category","label":"ZIO Insight","collapsed":true,"items":[{"type":"link","label":"Developer Notes","href":"/zio-insight/developer-notes","docId":"zio-insight/developer-notes","unlisted":false}],"collapsible":true,"href":"/zio-insight/"},{"type":"link","label":"ZIO Interop Guava","href":"/zio-interop-guava/","docId":"zio-interop-guava/index","unlisted":false},{"type":"link","label":"ZIO Interop Monix","href":"/interop-monix/","docId":"interop-monix/index","unlisted":false},{"type":"link","label":"ZIO Interop Reactive Streams","href":"/zio-interop-reactivestreams/","docId":"zio-interop-reactivestreams/index","unlisted":false},{"type":"link","label":"ZIO Interop Scalaz","href":"/zio-interop-scalaz/","docId":"zio-interop-scalaz/index","unlisted":false},{"type":"link","label":"ZIO Interop Twitter","href":"/zio-interop-twitter/","docId":"zio-interop-twitter/index","unlisted":false},{"type":"category","label":"ZIO JDBC","collapsed":true,"items":[{"type":"link","label":"Installation","href":"/zio-jdbc/installation","docId":"zio-jdbc/installation","unlisted":false},{"type":"link","label":"Getting Started","href":"/zio-jdbc/getting-started","docId":"zio-jdbc/getting-started","unlisted":false}],"collapsible":true,"href":"/zio-jdbc/"},{"type":"category","label":"ZIO JSON","collapsed":true,"items":[{"type":"link","label":"Decoding","href":"/zio-json/decoding","docId":"zio-json/decoding","unlisted":false},{"type":"link","label":"Encoding","href":"/zio-json/encoding","docId":"zio-json/encoding","unlisted":false},{"type":"link","label":"Configuration","href":"/zio-json/configuration","docId":"zio-json/configuration","unlisted":false},{"type":"link","label":"Manual Instances","href":"/zio-json/manual-instances","docId":"zio-json/manual-instances","unlisted":false},{"type":"link","label":"Performance","href":"/zio-json/performance","docId":"zio-json/performance","unlisted":false},{"type":"link","label":"Security","href":"/zio-json/security","docId":"zio-json/security","unlisted":false},{"type":"category","label":"Interop","collapsed":true,"items":[{"type":"link","label":"Akka Http Interop","href":"/zio-json/interop/akka-http","docId":"zio-json/interop/akka-http","unlisted":false},{"type":"link","label":"HTTP4s Interop","href":"/zio-json/interop/http4s","docId":"zio-json/interop/http4s","unlisted":false},{"type":"link","label":"Refined Interop","href":"/zio-json/interop/refined","docId":"zio-json/interop/refined","unlisted":false},{"type":"link","label":"Scalaz 7.x Interop","href":"/zio-json/interop/scalaz-7x","docId":"zio-json/interop/scalaz-7x","unlisted":false}],"collapsible":true,"href":"/zio-json/interop/"}],"collapsible":true,"href":"/zio-json/"},{"type":"category","label":"ZIO Kafka","collapsed":true,"items":[{"type":"link","label":"Consuming Kafka topics using ZIO Streams","href":"/zio-kafka/consuming-kafka-topics-using-zio-streams","docId":"zio-kafka/consuming-kafka-topics-using-zio-streams","unlisted":false},{"type":"link","label":"Example of Consuming, Producing and Committing Offsets","href":"/zio-kafka/example-of-consuming-producing-and-committing-offsets","docId":"zio-kafka/example-of-consuming-producing-and-committing-offsets","unlisted":false},{"type":"link","label":"Partition Assignment And Offset Retrieval","href":"/zio-kafka/partition-assignment-and-offset-retrieval","docId":"zio-kafka/partition-assignment-and-offset-retrieval","unlisted":false},{"type":"link","label":"Zio-Kafka Metrics","href":"/zio-kafka/metrics","docId":"zio-kafka/metrics","unlisted":false},{"type":"link","label":"Tuning the consumer","href":"/zio-kafka/consumer-tuning","docId":"zio-kafka/consumer-tuning","unlisted":false},{"type":"link","label":"Preventing duplicates","href":"/zio-kafka/preventing-duplicates","docId":"zio-kafka/preventing-duplicates","unlisted":false},{"type":"link","label":"Sharing a Consumer between multiple streams","href":"/zio-kafka/sharing-consumer","docId":"zio-kafka/sharing-consumer","unlisted":false},{"type":"link","label":"Serialization and Deserialization","href":"/zio-kafka/serialization-and-deserialization","docId":"zio-kafka/serialization-and-deserialization","unlisted":false},{"type":"link","label":"Writing Tests with the `zio-kafka-testkit` library","href":"/zio-kafka/writing-tests","docId":"zio-kafka/writing-tests","unlisted":false}],"collapsible":true,"href":"/zio-kafka/"},{"type":"link","label":"ZIO Lambda","href":"/zio-lambda/","docId":"zio-lambda/index","unlisted":false},{"type":"category","label":"ZIO Logging","items":[{"type":"link","label":"Formatting Log Records","href":"/zio-logging/formatting-log-records","docId":"zio-logging/formatting-log-records","unlisted":false},{"type":"link","label":"Logger Context and Annotations","href":"/zio-logging/logger-context-and-annotations","docId":"zio-logging/logger-context-and-annotations","unlisted":false},{"type":"link","label":"Log Filter","href":"/zio-logging/log-filter","docId":"zio-logging/log-filter","unlisted":false},{"type":"link","label":"Console Logger","href":"/zio-logging/console-logger","docId":"zio-logging/console-logger","unlisted":false},{"type":"link","label":"File Logger","href":"/zio-logging/file-logger","docId":"zio-logging/file-logger","unlisted":false},{"type":"link","label":"Reconfigurable Logger","href":"/zio-logging/reconfigurable-logger","docId":"zio-logging/reconfigurable-logger","unlisted":false},{"type":"link","label":"Java Platform/System Logger","href":"/zio-logging/jpl","docId":"zio-logging/jpl","unlisted":false},{"type":"link","label":"java.util.logging bridge","href":"/zio-logging/jul-bridge","docId":"zio-logging/jul-bridge","unlisted":false},{"type":"link","label":"SLF4J v2","href":"/zio-logging/slf4j2","docId":"zio-logging/slf4j2","unlisted":false},{"type":"link","label":"SLF4J v1","href":"/zio-logging/slf4j1","docId":"zio-logging/slf4j1","unlisted":false},{"type":"link","label":"SLF4J v2 bridge","href":"/zio-logging/slf4j2-bridge","docId":"zio-logging/slf4j2-bridge","unlisted":false},{"type":"link","label":"SLF4J v1 bridge","href":"/zio-logging/slf4j1-bridge","docId":"zio-logging/slf4j1-bridge","unlisted":false},{"type":"link","label":"Log Metrics","href":"/zio-logging/metrics","docId":"zio-logging/metrics","unlisted":false},{"type":"link","label":"Testing","href":"/zio-logging/testing","docId":"zio-logging/testing","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-logging/"},{"type":"link","label":"ZIO Memberlist","href":"/zio-memberlist/","docId":"zio-memberlist/index","unlisted":false},{"type":"link","label":"ZIO Meta","href":"/zio-meta/","docId":"zio-meta/index","unlisted":false},{"type":"category","label":"ZIO Metrics Connectors","items":[{"type":"link","label":"Getting Started","href":"/zio-metrics-connectors/getting-started","docId":"zio-metrics-connectors/getting-started","unlisted":false},{"type":"category","label":"Metrics","collapsed":true,"items":[{"type":"link","label":"ZIO Metric Reference","href":"/zio-metrics-connectors/metrics/metric-reference","docId":"zio-metrics-connectors/metrics/metric-reference","unlisted":false},{"type":"link","label":"StatsD Client","href":"/zio-metrics-connectors/metrics/statsd-client","docId":"zio-metrics-connectors/metrics/statsd-client","unlisted":false},{"type":"link","label":"Datadog Client","href":"/zio-metrics-connectors/metrics/datadog-client","docId":"zio-metrics-connectors/metrics/datadog-client","unlisted":false},{"type":"link","label":"Prometheus Client","href":"/zio-metrics-connectors/metrics/prometheus-client","docId":"zio-metrics-connectors/metrics/prometheus-client","unlisted":false},{"type":"link","label":"Micrometer Connector","href":"/zio-metrics-connectors/metrics/micrometer-connector","docId":"zio-metrics-connectors/metrics/micrometer-connector","unlisted":false},{"type":"link","label":"Instrumentation Examples","href":"/zio-metrics-connectors/metrics/instrumentation-examples","docId":"zio-metrics-connectors/metrics/instrumentation-examples","unlisted":false}],"collapsible":true,"href":"/zio-metrics-connectors/metrics/"}],"collapsed":true,"collapsible":true,"href":"/zio-metrics-connectors/"},{"type":"category","label":"ZIO Mock","collapsed":true,"items":[{"type":"link","label":"Mock","href":"/zio-mock/mock","docId":"zio-mock/mock","unlisted":false},{"type":"link","label":"Expectation","href":"/zio-mock/expectation","docId":"zio-mock/expectation","unlisted":false}],"collapsible":true,"href":"/zio-mock/"},{"type":"category","label":"ZIO NIO","items":[{"type":"link","label":"Blocking I/O","href":"/zio-nio/blocking","docId":"zio-nio/blocking","unlisted":false},{"type":"link","label":"File Channel","href":"/zio-nio/files","docId":"zio-nio/files","unlisted":false},{"type":"link","label":"Socket Channel","href":"/zio-nio/sockets","docId":"zio-nio/sockets","unlisted":false},{"type":"link","label":"Resource Management","href":"/zio-nio/resources","docId":"zio-nio/resources","unlisted":false},{"type":"link","label":"Character Sets","href":"/zio-nio/charsets","docId":"zio-nio/charsets","unlisted":false},{"type":"link","label":"Use Cases","href":"/zio-nio/use-cases","docId":"zio-nio/use-cases","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zio-nio/"},{"type":"category","label":"ZIO Optics","collapsed":true,"items":[{"type":"link","label":"Understanding Optics","href":"/zio-optics/understanding-optics","docId":"zio-optics/understanding-optics","unlisted":false},{"type":"link","label":"Constructing Optics","href":"/zio-optics/constructing-optics","docId":"zio-optics/constructing-optics","unlisted":false},{"type":"link","label":"Composing Optics","href":"/zio-optics/composing-optics","docId":"zio-optics/composing-optics","unlisted":false},{"type":"link","label":"Using Optics","href":"/zio-optics/using-optics","docId":"zio-optics/using-optics","unlisted":false},{"type":"link","label":"Effectual Optics","href":"/zio-optics/effectual-optics","docId":"zio-optics/effectual-optics","unlisted":false}],"collapsible":true,"href":"/zio-optics/"},{"type":"link","label":"ZIO Parser","href":"/zio-parser/","docId":"zio-parser/index","unlisted":false},{"type":"category","label":"ZIO Prelude","collapsed":true,"items":[{"type":"category","label":"Functional Abstractions","collapsed":true,"items":[{"type":"link","label":"Abstraction Diagrams","href":"/zio-prelude/functional-abstractions/abstraction-diagrams","docId":"zio-prelude/functional-abstractions/abstraction-diagrams","unlisted":false},{"type":"category","label":"Concrete Types","collapsed":true,"items":[{"type":"link","label":"Associative","href":"/zio-prelude/functional-abstractions/concrete-types/associative","docId":"zio-prelude/functional-abstractions/concrete-types/associative","unlisted":false},{"type":"link","label":"Commutative","href":"/zio-prelude/functional-abstractions/concrete-types/commutative","docId":"zio-prelude/functional-abstractions/concrete-types/commutative","unlisted":false},{"type":"link","label":"Debug","href":"/zio-prelude/functional-abstractions/concrete-types/debug","docId":"zio-prelude/functional-abstractions/concrete-types/debug","unlisted":false},{"type":"link","label":"Equal","href":"/zio-prelude/functional-abstractions/concrete-types/equal","docId":"zio-prelude/functional-abstractions/concrete-types/equal","unlisted":false},{"type":"link","label":"Hash","href":"/zio-prelude/functional-abstractions/concrete-types/hash","docId":"zio-prelude/functional-abstractions/concrete-types/hash","unlisted":false},{"type":"link","label":"Identity","href":"/zio-prelude/functional-abstractions/concrete-types/identity","docId":"zio-prelude/functional-abstractions/concrete-types/identity","unlisted":false},{"type":"link","label":"Inverse","href":"/zio-prelude/functional-abstractions/concrete-types/inverse","docId":"zio-prelude/functional-abstractions/concrete-types/inverse","unlisted":false},{"type":"link","label":"Ord","href":"/zio-prelude/functional-abstractions/concrete-types/ord","docId":"zio-prelude/functional-abstractions/concrete-types/ord","unlisted":false}],"collapsible":true,"href":"/zio-prelude/functional-abstractions/concrete-types/"},{"type":"category","label":"Parameterized Types","collapsed":true,"items":[{"type":"link","label":"AssociativeBoth","href":"/zio-prelude/functional-abstractions/parameterized-types/associativeboth","docId":"zio-prelude/functional-abstractions/parameterized-types/associativeboth","unlisted":false},{"type":"link","label":"AssociativeEither","href":"/zio-prelude/functional-abstractions/parameterized-types/associativeeither","docId":"zio-prelude/functional-abstractions/parameterized-types/associativeeither","unlisted":false},{"type":"link","label":"AssociativeFlatten","href":"/zio-prelude/functional-abstractions/parameterized-types/associativeflatten","docId":"zio-prelude/functional-abstractions/parameterized-types/associativeflatten","unlisted":false},{"type":"link","label":"CommutativeBoth","href":"/zio-prelude/functional-abstractions/parameterized-types/commutativeboth","docId":"zio-prelude/functional-abstractions/parameterized-types/commutativeboth","unlisted":false},{"type":"link","label":"CommutativeEither","href":"/zio-prelude/functional-abstractions/parameterized-types/commutativeeither","docId":"zio-prelude/functional-abstractions/parameterized-types/commutativeeither","unlisted":false},{"type":"link","label":"Contravariant","href":"/zio-prelude/functional-abstractions/parameterized-types/contravariant","docId":"zio-prelude/functional-abstractions/parameterized-types/contravariant","unlisted":false},{"type":"link","label":"Covariant","href":"/zio-prelude/functional-abstractions/parameterized-types/covariant","docId":"zio-prelude/functional-abstractions/parameterized-types/covariant","unlisted":false},{"type":"link","label":"ForEach","href":"/zio-prelude/functional-abstractions/parameterized-types/foreach","docId":"zio-prelude/functional-abstractions/parameterized-types/foreach","unlisted":false},{"type":"link","label":"IdentityBoth","href":"/zio-prelude/functional-abstractions/parameterized-types/identityboth","docId":"zio-prelude/functional-abstractions/parameterized-types/identityboth","unlisted":false},{"type":"link","label":"IdentityEither","href":"/zio-prelude/functional-abstractions/parameterized-types/identityeither","docId":"zio-prelude/functional-abstractions/parameterized-types/identityeither","unlisted":false},{"type":"link","label":"IdentityFlatten","href":"/zio-prelude/functional-abstractions/parameterized-types/identityflatten","docId":"zio-prelude/functional-abstractions/parameterized-types/identityflatten","unlisted":false},{"type":"link","label":"Invariant","href":"/zio-prelude/functional-abstractions/parameterized-types/invariant","docId":"zio-prelude/functional-abstractions/parameterized-types/invariant","unlisted":false},{"type":"link","label":"NonEmptyForEach","href":"/zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach","docId":"zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach","unlisted":false}],"collapsible":true,"href":"/zio-prelude/functional-abstractions/parameterized-types/"}],"collapsible":true,"href":"/zio-prelude/functional-abstractions/"},{"type":"category","label":"Functional Data Types","collapsed":true,"items":[{"type":"link","label":"Equivalence","href":"/zio-prelude/functional-data-types/equivalence","docId":"zio-prelude/functional-data-types/equivalence","unlisted":false},{"type":"link","label":"NonEmptyList","href":"/zio-prelude/functional-data-types/nonemptylist","docId":"zio-prelude/functional-data-types/nonemptylist","unlisted":false},{"type":"link","label":"These","href":"/zio-prelude/functional-data-types/these","docId":"zio-prelude/functional-data-types/these","unlisted":false},{"type":"link","label":"Validation","href":"/zio-prelude/functional-data-types/validation","docId":"zio-prelude/functional-data-types/validation","unlisted":false},{"type":"link","label":"ZSet","href":"/zio-prelude/functional-data-types/zset","docId":"zio-prelude/functional-data-types/zset","unlisted":false},{"type":"link","label":"ZValidation","href":"/zio-prelude/functional-data-types/zvalidation","docId":"zio-prelude/functional-data-types/zvalidation","unlisted":false}],"collapsible":true,"href":"/zio-prelude/functional-data-types/"},{"type":"link","label":"New Types","href":"/zio-prelude/newtypes/","docId":"zio-prelude/newtypes/index","unlisted":false},{"type":"link","label":"ZPure","href":"/zio-prelude/zpure/","docId":"zio-prelude/zpure/index","unlisted":false},{"type":"link","label":"Resources","href":"/zio-prelude/resources","docId":"zio-prelude/resources","unlisted":false}],"collapsible":true,"href":"/zio-prelude/"},{"type":"category","label":"ZIO Process","collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/zio-process/getting-started","docId":"zio-process/getting-started","unlisted":false},{"type":"link","label":"Basics","href":"/zio-process/basics","docId":"zio-process/basics","unlisted":false},{"type":"link","label":"Piping","href":"/zio-process/piping","docId":"zio-process/piping","unlisted":false},{"type":"link","label":"Interactive Processes","href":"/zio-process/interactive-processes","docId":"zio-process/interactive-processes","unlisted":false},{"type":"link","label":"Other","href":"/zio-process/other","docId":"zio-process/other","unlisted":false}],"collapsible":true,"href":"/zio-process/"},{"type":"category","label":"ZIO Profiling","collapsed":true,"items":[{"type":"link","label":"Resources","href":"/zio-profiling/resources","docId":"zio-profiling/resources","unlisted":false}],"collapsible":true,"href":"/zio-profiling/"},{"type":"category","label":"ZIO Query","collapsed":true,"items":[{"type":"link","label":"ZIO Query","href":"/zio-query/","docId":"zio-query/index","unlisted":false},{"type":"link","label":"Creating Data Sources","href":"/zio-query/creating-data-sources","docId":"zio-query/creating-data-sources","unlisted":false},{"type":"link","label":"Creating Queries","href":"/zio-query/creating-queries","docId":"zio-query/creating-queries","unlisted":false},{"type":"link","label":"Running Queries","href":"/zio-query/running-queries","docId":"zio-query/running-queries","unlisted":false}],"collapsible":true,"href":"/zio-query/"},{"type":"category","label":"ZIO Quill","collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/zio-quill/getting-started","docId":"zio-quill/getting-started","unlisted":false},{"type":"link","label":"Writing Queries","href":"/zio-quill/writing-queries","docId":"zio-quill/writing-queries","unlisted":false},{"type":"link","label":"Extending Quill","href":"/zio-quill/extending-quill","docId":"zio-quill/extending-quill","unlisted":false},{"type":"link","label":"Contexts","href":"/zio-quill/contexts","docId":"zio-quill/contexts","unlisted":false},{"type":"link","label":"Code Generation","href":"/zio-quill/code-generation","docId":"zio-quill/code-generation","unlisted":false},{"type":"link","label":"Logging","href":"/zio-quill/logging","docId":"zio-quill/logging","unlisted":false},{"type":"link","label":"Compiler performance","href":"/zio-quill/compiler-performance","docId":"zio-quill/compiler-performance","unlisted":false},{"type":"link","label":"Additional Resources","href":"/zio-quill/additional-resources","docId":"zio-quill/additional-resources","unlisted":false},{"type":"link","label":"Quill vs. Cassandra","href":"/zio-quill/quill-vs-cassandra","docId":"zio-quill/quill-vs-cassandra","unlisted":false},{"type":"link","label":"Quill vs. Slick","href":"/zio-quill/quill-vs-slick","docId":"zio-quill/quill-vs-slick","unlisted":false},{"type":"link","label":"Quill Changelog","href":"/zio-quill/changelog","docId":"zio-quill/changelog","unlisted":false},{"type":"link","label":"How to Contribute?","href":"/zio-quill/how-to-contribute","docId":"zio-quill/how-to-contribute","unlisted":false}],"collapsible":true,"href":"/zio-quill/"},{"type":"link","label":"ZIO Redis","href":"/zio-redis/","docId":"zio-redis/index","unlisted":false},{"type":"link","label":"ZIO RocksDB","href":"/zio-rocksdb/","docId":"zio-rocksdb/index","unlisted":false},{"type":"link","label":"ZIO S3","href":"/zio-s3/","docId":"zio-s3/index","unlisted":false},{"type":"link","label":"ZIO SBT","href":"/zio-sbt/","docId":"zio-sbt/index","unlisted":false},{"type":"category","label":"ZIO SQL","collapsed":true,"items":[{"type":"link","label":"Deep dive","href":"/zio-sql/deep-dive","docId":"zio-sql/deep-dive","unlisted":false}],"collapsible":true,"href":"/zio-sql/"},{"type":"link","label":"ZIO SQS","href":"/zio-sqs/","docId":"zio-sqs/index","unlisted":false},{"type":"category","label":"ZIO Schema","collapsed":true,"items":[{"type":"link","label":"Motivation","href":"/zio-schema/motivation","docId":"zio-schema/motivation","unlisted":false},{"type":"link","label":"Use cases","href":"/zio-schema/use-cases","docId":"zio-schema/use-cases","unlisted":false},{"type":"link","label":"Basic Building Blocks","href":"/zio-schema/basic-building-blocks","docId":"zio-schema/basic-building-blocks","unlisted":false},{"type":"link","label":"Standard Type Reference","href":"/zio-schema/standard-type-reference","docId":"zio-schema/standard-type-reference","unlisted":false},{"type":"category","label":"Writing Schema","collapsed":true,"items":[{"type":"link","label":"Manual Schema Construction","href":"/zio-schema/manual-schema-construction","docId":"zio-schema/manual-schema-construction","unlisted":false},{"type":"link","label":"Automatic Schema Derivation","href":"/zio-schema/automatic-schema-derivation","docId":"zio-schema/automatic-schema-derivation","unlisted":false}],"collapsible":true},{"type":"category","label":"Operations","collapsed":true,"items":[{"type":"link","label":"The Default Value","href":"/zio-schema/operations/the-default-value","docId":"zio-schema/operations/the-default-value","unlisted":false},{"type":"link","label":"Transforming Schemas","href":"/zio-schema/operations/transforming-schemas","docId":"zio-schema/operations/transforming-schemas","unlisted":false},{"type":"link","label":"Validation","href":"/zio-schema/operations/validation","docId":"zio-schema/operations/validation","unlisted":false},{"type":"link","label":"Diffing and Patching","href":"/zio-schema/operations/diffing-and-patching","docId":"zio-schema/operations/diffing-and-patching","unlisted":false},{"type":"link","label":"Schema Migration","href":"/zio-schema/operations/schema-migration","docId":"zio-schema/operations/schema-migration","unlisted":false},{"type":"link","label":"Schema Serialization","href":"/zio-schema/operations/schema-serialization","docId":"zio-schema/operations/schema-serialization","unlisted":false},{"type":"link","label":"Dynamic Data Representation","href":"/zio-schema/operations/dynamic-data-representation","docId":"zio-schema/operations/dynamic-data-representation","unlisted":false}],"collapsible":true,"href":"/zio-schema/operations/"},{"type":"category","label":"Derivations","collapsed":true,"items":[{"type":"link","label":"Ordering Derivation","href":"/zio-schema/derivations/ordering-derivation","docId":"zio-schema/derivations/ordering-derivation","unlisted":false},{"type":"link","label":"Optics Derivation","href":"/zio-schema/derivations/optics-derivation","docId":"zio-schema/derivations/optics-derivation","unlisted":false},{"type":"link","label":"ZIO Test Gen Derivation","href":"/zio-schema/derivations/zio-test-gen-derivation","docId":"zio-schema/derivations/zio-test-gen-derivation","unlisted":false},{"type":"category","label":"Codecs","collapsed":true,"items":[{"type":"link","label":"Apache Avro","href":"/zio-schema/derivations/codecs/avro","docId":"zio-schema/derivations/codecs/avro","unlisted":false},{"type":"link","label":"Apache Thrift","href":"/zio-schema/derivations/codecs/thrift","docId":"zio-schema/derivations/codecs/thrift","unlisted":false},{"type":"link","label":"BSON","href":"/zio-schema/derivations/codecs/bson","docId":"zio-schema/derivations/codecs/bson","unlisted":false},{"type":"link","label":"JSON","href":"/zio-schema/derivations/codecs/json","docId":"zio-schema/derivations/codecs/json","unlisted":false},{"type":"link","label":"MessagePack","href":"/zio-schema/derivations/codecs/message-pack","docId":"zio-schema/derivations/codecs/message-pack","unlisted":false},{"type":"link","label":"Protobuf","href":"/zio-schema/derivations/codecs/protobuf","docId":"zio-schema/derivations/codecs/protobuf","unlisted":false}],"collapsible":true,"href":"/zio-schema/derivations/codecs/"}],"collapsible":true},{"type":"category","label":"Examples","collapsed":true,"items":[{"type":"link","label":"Mapping DTO to Domain Object","href":"/zio-schema/examples/mapping-dto-to-domain-object","docId":"zio-schema/examples/mapping-dto-to-domain-object","unlisted":false},{"type":"link","label":"Combining Different Encoders","href":"/zio-schema/examples/combining-different-encoders","docId":"zio-schema/examples/combining-different-encoders","unlisted":false}],"collapsible":true}],"collapsible":true,"href":"/zio-schema/"},{"type":"link","label":"ZIO Streams Compress","href":"/zio-streams-compress/","docId":"zio-streams-compress/index","unlisted":false},{"type":"category","label":"ZIO Telemetry","collapsed":true,"items":[{"type":"link","label":"OpenTracing","href":"/zio-telemetry/opentracing","docId":"zio-telemetry/opentracing","unlisted":false},{"type":"link","label":"OpenTracing Example","href":"/zio-telemetry/opentracing-example","docId":"zio-telemetry/opentracing-example","unlisted":false},{"type":"link","label":"OpenCensus","href":"/zio-telemetry/opencensus","docId":"zio-telemetry/opencensus","unlisted":false},{"type":"link","label":"OpenTelemetry","href":"/zio-telemetry/opentelemetry","docId":"zio-telemetry/opentelemetry","unlisted":false},{"type":"link","label":"OpenTelemetry ZIO Logging","href":"/zio-telemetry/opentelemetry-zio-logging","docId":"zio-telemetry/opentelemetry-zio-logging","unlisted":false},{"type":"link","label":"OpenTelemetry Example","href":"/zio-telemetry/opentelemetry-example","docId":"zio-telemetry/opentelemetry-example","unlisted":false},{"type":"link","label":"OpenTelemetry Automatic Instrumentation Example","href":"/zio-telemetry/opentelemetry-instrumentation-example","docId":"zio-telemetry/opentelemetry-instrumentation-example","unlisted":false}],"collapsible":true,"href":"/zio-telemetry/"},{"type":"link","label":"ZIO Webhooks","href":"/zio-webhooks/","docId":"zio-webhooks/index","unlisted":false}],"collapsible":true,"href":"/ecosystem/officials/"},{"type":"category","label":"Community Libraries","items":[{"type":"link","label":"Caliban","href":"/ecosystem/community/caliban","docId":"ecosystem/community/caliban","unlisted":false},{"type":"link","label":"Distage","href":"/ecosystem/community/distage","docId":"ecosystem/community/distage","unlisted":false},{"type":"link","label":"Fhir-indexer","href":"/ecosystem/community/fhir-indexer","docId":"ecosystem/community/fhir-indexer","unlisted":false},{"type":"link","label":"LogStage","href":"/ecosystem/community/logstage","docId":"ecosystem/community/logstage","unlisted":false},{"type":"link","label":"MUnit ZIO","href":"/ecosystem/community/munit-zio","docId":"ecosystem/community/munit-zio","unlisted":false},{"type":"link","label":"Rezilience","href":"/ecosystem/community/rezilience","docId":"ecosystem/community/rezilience","unlisted":false},{"type":"link","label":"Scala k8s","href":"/ecosystem/community/scala-k8s","docId":"ecosystem/community/scala-k8s","unlisted":false},{"type":"link","label":"tamer","href":"/ecosystem/community/tamer","docId":"ecosystem/community/tamer","unlisted":false},{"type":"link","label":"Tofu ZIO 2 Logging","href":"/ecosystem/community/tofu-zio2-logging","docId":"ecosystem/community/tofu-zio2-logging","unlisted":false},{"type":"link","label":"TranzactIO","href":"/ecosystem/community/tranzactio","docId":"ecosystem/community/tranzactio","unlisted":false},{"type":"link","label":"ZIO AMQP","href":"/ecosystem/community/zio-amqp","docId":"ecosystem/community/zio-amqp","unlisted":false},{"type":"link","label":"ZIO Apache Parquet","href":"/ecosystem/community/zio-apache-parquet","docId":"ecosystem/community/zio-apache-parquet","unlisted":false},{"type":"link","label":"ZIO Arrow","href":"/ecosystem/community/zio-arrow","docId":"ecosystem/community/zio-arrow","unlisted":false},{"type":"link","label":"ZIO AWS S3","href":"/ecosystem/community/zio-aws-s3","docId":"ecosystem/community/zio-aws-s3","unlisted":false},{"type":"link","label":"ZIO gRPC","href":"/ecosystem/community/zio-grpc","docId":"ecosystem/community/zio-grpc","unlisted":false},{"type":"link","label":"ZIO K8s","href":"/ecosystem/community/zio-k8s","docId":"ecosystem/community/zio-k8s","unlisted":false},{"type":"link","label":"ZIO Kinesis","href":"/ecosystem/community/zio-kinesis","docId":"ecosystem/community/zio-kinesis","unlisted":false},{"type":"link","label":"ZIO NebulaGraph","href":"/ecosystem/community/zio-nebula","docId":"ecosystem/community/zio-nebula","unlisted":false},{"type":"link","label":"ZIO Pulsar","href":"/ecosystem/community/zio-pulsar","docId":"ecosystem/community/zio-pulsar","unlisted":false},{"type":"link","label":"ZIO Saga","href":"/ecosystem/community/zio-saga","docId":"ecosystem/community/zio-saga","unlisted":false},{"type":"link","label":"ZIO Slick Interop","href":"/ecosystem/community/zio-slick-interop","docId":"ecosystem/community/zio-slick-interop","unlisted":false},{"type":"link","label":"ZIO Temporal","href":"/ecosystem/community/zio-temporal","docId":"ecosystem/community/zio-temporal","unlisted":false},{"type":"link","label":"ZIO Test Akka HTTP","href":"/ecosystem/community/zio-test-akka-http","docId":"ecosystem/community/zio-test-akka-http","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/ecosystem/community/"},{"type":"link","label":"ZIO Compatible Libraries","href":"/ecosystem/compatible","docId":"ecosystem/compatible","unlisted":false},{"type":"link","label":"ZIO Tools","href":"/ecosystem/tools","docId":"ecosystem/tools","unlisted":false},{"type":"link","label":"Project Templates","href":"/ecosystem/templates","docId":"ecosystem/templates","unlisted":false}],"resources-sidebar":[{"type":"link","label":"Summary","href":"/resources/","docId":"resources/index","unlisted":false},{"type":"link","label":"Articles","href":"/resources/articles","docId":"resources/articles","unlisted":false},{"type":"link","label":"Videos","href":"/resources/videos","docId":"resources/videos","unlisted":false},{"type":"link","label":"Cookbooks","href":"/resources/cookbooks","docId":"resources/cookbooks","unlisted":false},{"type":"link","label":"Cheat Sheets","href":"/resources/cheatsheets","docId":"resources/cheatsheets","unlisted":false},{"type":"link","label":"Sample Projects","href":"/resources/sampleprojects","docId":"resources/sampleprojects","unlisted":false},{"type":"link","label":"Projects using ZIO","href":"/resources/poweredbyzio","docId":"resources/poweredbyzio","unlisted":false}]},"docs":{"adopters":{"id":"adopters","title":"ZIO Adopters","description":"Following is a partial list of companies happily using ZIO in production to craft concurrent applications."},"caliban-deriving/index":{"id":"caliban-deriving/index","title":"Introduction to Caliban Deriving","description":"Full-featured, robust deriving for Caliban.","sidebar":"ecosystem-sidebar"},"can_fail":{"id":"can_fail","title":"Compile Time Errors for Handling Combinators","description":"ZIO provides a variety of combinators to handle errors such as orElse, catchAll, catchSome, option, either, and retry. However, these combinators only make sense for effects that can fail (i.e. where the error type is not Nothing). To help you identify code that doesn\'t make sense, error handling combinators require implicit evidence CanFail[E], which is automatically available for all types except Nothing. The table below includes a list of combinators that only make sense for effects that can fail along with value preserving rewrites."},"code-of-conduct":{"id":"code-of-conduct","title":"Code of Conduct","description":"We are committed to providing a friendly, safe and welcoming"},"coding-guidelines":{"id":"coding-guidelines","title":"Coding Guidelines","description":"These are coding guidelines strictly for ZIO contributors for ZIO projects and"},"contributing-to-documentation":{"id":"contributing-to-documentation","title":"Contributing to The ZIO Documentation","description":"The ZIO documentation is provided by a worldwide community, just like the project itself. So if you are reading this page, you can help us to improve the documentation."},"contributing-to-zio-ecosystem":{"id":"contributing-to-zio-ecosystem","title":"Contributing to the ZIO Ecosystem Projects","description":"The ZIO ecosystem is provided by a worldwide community, just like the project itself. So if you are reading this page, you can help us to improve the ecosystem."},"contributor-guidelines":{"id":"contributor-guidelines","title":"Contributor Guidelines","description":"Thank you for your interest in contributing to ZIO, which is a small, zero-dependency library for doing type-safe, composable concurrent and asynchronous programming!"},"ecosystem/community/caliban":{"id":"ecosystem/community/caliban","title":"Caliban","description":"Caliban is a purely functional library for creating GraphQL servers and clients in Scala.","sidebar":"ecosystem-sidebar"},"ecosystem/community/distage":{"id":"ecosystem/community/distage","title":"Distage","description":"Distage is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala.","sidebar":"ecosystem-sidebar"},"ecosystem/community/fhir-indexer":{"id":"ecosystem/community/fhir-indexer","title":"Fhir-indexer","description":"Fhir-indexer is a ZIO based library for fetching FHIR resources fast and easy.","sidebar":"ecosystem-sidebar"},"ecosystem/community/index":{"id":"ecosystem/community/index","title":"ZIO Ecosystem Community Libraries","description":"In this section we are going to introduce some of the most important libraries that have first-class ZIO support from the community.","sidebar":"ecosystem-sidebar"},"ecosystem/community/logstage":{"id":"ecosystem/community/logstage","title":"LogStage","description":"LogStage is a zero-cost structural logging framework for Scala & Scala.js.","sidebar":"ecosystem-sidebar"},"ecosystem/community/munit-zio":{"id":"ecosystem/community/munit-zio","title":"MUnit ZIO","description":"MUnit ZIO is an integration library between MUnit and ZIO.","sidebar":"ecosystem-sidebar"},"ecosystem/community/rezilience":{"id":"ecosystem/community/rezilience","title":"Rezilience","description":"Rezilience is a ZIO-native library for making resilient distributed systems.","sidebar":"ecosystem-sidebar"},"ecosystem/community/scala-k8s":{"id":"ecosystem/community/scala-k8s","title":"Scala k8s","description":"Scala k8s is a Kubernetes client, data models and typesafe manifest generation for scala, scalajs, and scala native.","sidebar":"ecosystem-sidebar"},"ecosystem/community/tamer":{"id":"ecosystem/community/tamer","title":"tamer","description":"Tamer","sidebar":"ecosystem-sidebar"},"ecosystem/community/tofu-zio2-logging":{"id":"ecosystem/community/tofu-zio2-logging","title":"Tofu ZIO 2 Logging","description":"Tofu is a functional toolkit modules providing a comprehensive set of tools adressing","sidebar":"ecosystem-sidebar"},"ecosystem/community/tranzactio":{"id":"ecosystem/community/tranzactio","title":"TranzactIO","description":"TranzactIO is a ZIO wrapper for some Scala database access libraries, currently for Doobie and Anorm.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-amqp":{"id":"ecosystem/community/zio-amqp","title":"ZIO AMQP","description":"ZIO AMQP is a ZIO-based AMQP client for Scala.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-apache-parquet":{"id":"ecosystem/community/zio-apache-parquet","title":"ZIO Apache Parquet","description":"ZIO Apache Parquet is a ZIO-powered Apache Parquet library.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-arrow":{"id":"ecosystem/community/zio-arrow","title":"ZIO Arrow","description":"ZIO Arrow provides the ZArrow effect, which is a high-performance composition effect for the ZIO ecosystem.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-aws-s3":{"id":"ecosystem/community/zio-aws-s3","title":"ZIO AWS S3","description":"ZIO AWS S3 is a ZIO integration with AWS S3 SDK.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-grpc":{"id":"ecosystem/community/zio-grpc","title":"ZIO gRPC","description":"ZIO-gRPC lets us write purely functional gRPC servers and clients.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-k8s":{"id":"ecosystem/community/zio-k8s","title":"ZIO K8s","description":"ZIO K8S is an idiomatic ZIO client for the Kubernetes API.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-kinesis":{"id":"ecosystem/community/zio-kinesis","title":"ZIO Kinesis","description":"ZIO Kinesis is a ZIO-based AWS Kinesis client for Scala.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-nebula":{"id":"ecosystem/community/zio-nebula","title":"ZIO NebulaGraph","description":"zio-nebula is a simple wrapper around nebula-java for easier integration with NebulaGraph into Scala, ZIO applications.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-pulsar":{"id":"ecosystem/community/zio-pulsar","title":"ZIO Pulsar","description":"ZIO Pulsar is the Apache Pulsar client for Scala with ZIO and ZIO Streams integration.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-saga":{"id":"ecosystem/community/zio-saga","title":"ZIO Saga","description":"ZIO Saga is a distributed transaction manager using Saga Pattern.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-slick-interop":{"id":"ecosystem/community/zio-slick-interop","title":"ZIO Slick Interop","description":"ZIO Slick Interop is a small library, that provides interop between Slick and ZIO.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-temporal":{"id":"ecosystem/community/zio-temporal","title":"ZIO Temporal","description":"ZIO Temporal is a ZIO library for Temporal, a microservice workflow orchestration platform.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zio-test-akka-http":{"id":"ecosystem/community/zio-test-akka-http","title":"ZIO Test Akka HTTP","description":"ZIO Test Akka HTTP is an Akka-HTTP Route TestKit for zio-test.","sidebar":"ecosystem-sidebar"},"ecosystem/community/zparkio":{"id":"ecosystem/community/zparkio","title":"ZparkIO","description":"ZParkIO is a boilerplate framework to use Spark and ZIO together."},"ecosystem/compatible":{"id":"ecosystem/compatible","title":"ZIO Compatible Libraries","description":"List of ZIO compatible libraries:","sidebar":"ecosystem-sidebar"},"ecosystem/index":{"id":"ecosystem/index","title":"ZIO Ecosystem","description":"We have two categories of libraries: official and community.","sidebar":"ecosystem-sidebar"},"ecosystem/officials/index":{"id":"ecosystem/officials/index","title":"ZIO Ecosystem Official Libraries","description":"Official ZIO libraries are hosted in the ZIO organization on GitHub, and are generally maintained by core contributors to ZIO.","sidebar":"ecosystem-sidebar"},"ecosystem/templates":{"id":"ecosystem/templates","title":"Project Templates","description":"List of project starters, bootstrap tools or, templates.","sidebar":"ecosystem-sidebar"},"ecosystem/tools":{"id":"ecosystem/tools","title":"ZIO Tools","description":"- ZIO IntelliJ \u2014 A complementary, community-developed plugin for IntelliJ IDEA, brings enhancements when using ZIO in your projects","sidebar":"ecosystem-sidebar"},"events/index":{"id":"events/index","title":"ZIO Events","description":"ZIO has a number of events that are organized by the community all around the world. These events are a great way to learn about ZIO, meet other ZIO users and contributors, and have fun."},"faq":{"id":"faq","title":"Frequently Answered Questions (FAQ)","description":"In this page we are going to answer general questions related to the ZIO project."},"guides/index":{"id":"guides/index","title":"ZIO Guides","description":"Quickstart Guides","sidebar":"guides-sidebar"},"guides/interop/with-cats-effect":{"id":"guides/interop/with-cats-effect","title":"How to Interop with Cats Effect?","description":"Introduction","sidebar":"guides-sidebar"},"guides/interop/with-future":{"id":"guides/interop/with-future","title":"How to Interop with Future?","description":"Scala Future","sidebar":"guides-sidebar"},"guides/interop/with-guava":{"id":"guides/interop/with-guava","title":"How to Interop with Guava?","description":"interop-guava module provide capibility to convert Guava\'s com.google.common.util.concurrent.ListenableFuture into ZIO Task.","sidebar":"guides-sidebar"},"guides/interop/with-java":{"id":"guides/interop/with-java","title":"How to Interop with Java?","description":"ZIO has full interoperability with foreign Java code. Let me show you how it works and then BOOM, tomorrow you can show off your purely functional Java at work.","sidebar":"guides-sidebar"},"guides/interop/with-javascript":{"id":"guides/interop/with-javascript","title":"How to Interop with JavaScript?","description":"Include ZIO in your Scala.js project by adding the following to your build.sbt:","sidebar":"guides-sidebar"},"guides/interop/with-monix":{"id":"guides/interop/with-monix","title":"How to Interop with Monix?","description":"Checkout interop-monix module for inter-operation support.","sidebar":"guides-sidebar"},"guides/interop/with-reactive-streams":{"id":"guides/interop/with-reactive-streams","title":"How to Interop with Reactive Streams?","description":"Checkout the interop-reactive-streams module for inter-operation support.","sidebar":"guides-sidebar"},"guides/interop/with-scalaz-7x":{"id":"guides/interop/with-scalaz-7x","title":"How to Interop with Scalaz 7.x?","description":"ZIO Instances","sidebar":"guides-sidebar"},"guides/interop/with-twitter":{"id":"guides/interop/with-twitter","title":"How to Interop with Twitter?","description":"interop-twitter module provides capability to convert Twitter Future into ZIO Task.","sidebar":"guides-sidebar"},"guides/migrate/from-akka":{"id":"guides/migrate/from-akka","title":"How to Migrate From Akka to ZIO?","description":"Overview","sidebar":"guides-sidebar"},"guides/migrate/from-cats-effect":{"id":"guides/migrate/from-cats-effect","title":"How to Migrate from Cats Effect to ZIO?","description":"Cats IO[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A]).","sidebar":"guides-sidebar"},"guides/migrate/from-monix":{"id":"guides/migrate/from-monix","title":"How to Migrate from Monix to ZIO?","description":"Monix\'s Task[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A]).","sidebar":"guides-sidebar"},"guides/migrate/zio-2.x-migration-guide":{"id":"guides/migrate/zio-2.x-migration-guide","title":"ZIO 2.x Migration Guide","description":"In this guide we want to introduce the migration process to ZIO 2.x. So if you have a project written in ZIO 1.x and want to migrate that to ZIO 2.x, this article is for you.","sidebar":"guides-sidebar"},"guides/quickstarts/graphql-webservice":{"id":"guides/quickstarts/graphql-webservice","title":"ZIO Quickstart: Building GraphQL Web Service","description":"This quickstart shows how to build a GraphQL web service using ZIO. It uses","sidebar":"guides-sidebar"},"guides/quickstarts/hello-world":{"id":"guides/quickstarts/hello-world","title":"ZIO Quickstart: Hello World","description":"This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps.","sidebar":"guides-sidebar"},"guides/quickstarts/restful-webservice":{"id":"guides/quickstarts/restful-webservice","title":"ZIO Quickstart: Building RESTful Web Service","description":"This quickstart shows how to build a RESTful web service using ZIO. It uses","sidebar":"guides-sidebar"},"guides/tutorials/build-a-graphql-webservice":{"id":"guides/tutorials/build-a-graphql-webservice","title":"Tutorial: How to Build a GraphQL Web Service","description":"Having GraphQL APIs enables the clients the ability to query the exact data they need. This powerful feature makes GraphQL more flexible than RESTful APIs.","sidebar":"guides-sidebar"},"guides/tutorials/build-a-restful-webservice":{"id":"guides/tutorials/build-a-restful-webservice","title":"Tutorial: How to Build a RESTful Web Service","description":"ZIO provides good support for building RESTful web services. Using Service Pattern, we can build web services that are modular and easy to test and maintain. On the other hand, we have several powerful official and community libraries that can help us to work with JSON data types, and databases and also work with HTTP protocol.","sidebar":"guides-sidebar"},"guides/tutorials/configurable-zio-application":{"id":"guides/tutorials/configurable-zio-application","title":"Tutorial: How to Make a ZIO Application Configurable?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/create-custom-logger-for-a-zio-application":{"id":"guides/tutorials/create-custom-logger-for-a-zio-application","title":"Tutorial: How to Create a Custom Logger for a ZIO Application?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/debug-a-zio-application":{"id":"guides/tutorials/debug-a-zio-application","title":"Tutorial: How to Debug a ZIO Application?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/deploy-a-zio-application-using-docker":{"id":"guides/tutorials/deploy-a-zio-application-using-docker","title":"Tutorial: How to Deploy a ZIO Application Using Docker?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/enable-logging-in-a-zio-application":{"id":"guides/tutorials/enable-logging-in-a-zio-application","title":"Tutorial: How to Enable Logging in a ZIO Application","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/encode-and-decode-json-data":{"id":"guides/tutorials/encode-and-decode-json-data","title":"Tutorial: How to Encode and Decode JSON Data?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/gracefully-shutdown-zio-application":{"id":"guides/tutorials/gracefully-shutdown-zio-application","title":"Tutorial: How to Gracefully Shutdown ZIO Applications?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system":{"id":"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","title":"Tutorial: How to Monitor a ZIO Application Using ZIO\'s Built-in Metric System?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/producing-consuming-data-from-kafka-topics":{"id":"guides/tutorials/producing-consuming-data-from-kafka-topics","title":"Tutorial: How to Produce/Consume Data To/From Kafka Topics?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/run-our-first-zio-project-with-intellij-idea":{"id":"guides/tutorials/run-our-first-zio-project-with-intellij-idea","title":"Tutorial: How to Run Our First ZIO Project With IntelliJ IDEA?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/run-our-first-zio-project-with-vscode":{"id":"guides/tutorials/run-our-first-zio-project-with-vscode","title":"Tutorial: How to Run Our First ZIO Project With VSCode?","description":"ZIO is a type-safe library for building asynchronous and concurrent applications. The Scala compiler can catch a lot of errors at compile time since it is type-safe. This ensures that our code is mostly correct, and it prevents lots of bugs from creeping into the runtime. So having a type-safe editor that highlights errors will improve our development experience. VSCode with the power of the Metals extension provides us with a type-safe editor for writing Scala programs.","sidebar":"guides-sidebar"},"interop-monix/index":{"id":"interop-monix/index","title":"Introduction to ZIO Interop Monix","description":"This library provides interoperability between Monix 3.4 and ZIO 1 and ZIO 2. Both JVM and Scala.js are supported.","sidebar":"ecosystem-sidebar"},"izumi-reflect/index":{"id":"izumi-reflect/index","title":"Introduction to izumi-reflect","description":"@quote: Looks a bit similar to TypeTag","sidebar":"ecosystem-sidebar"},"overview/basic-concurrency":{"id":"overview/basic-concurrency","title":"Basic Concurrency","description":"ZIO is a highly concurrent framework, powered by fibers, which are lightweight virtual threads that achieve massive scalability compared to threads, augmented with resource-safe cancellation, which powers many features in ZIO.","sidebar":"overview_sidebar"},"overview/basic-operations":{"id":"overview/basic-operations","title":"Basic Operations","description":"Like the String data type, as well as the collection data types in Scala (such as List, Map, and Set), ZIO effects are immutable, and cannot be changed.","sidebar":"overview_sidebar"},"overview/creating-effects":{"id":"overview/creating-effects","title":"Creating Effects","description":"This section explores some of the common ways to create ZIO effects from values, from computations, and from common Scala data types.","sidebar":"overview_sidebar"},"overview/getting-started":{"id":"overview/getting-started","title":"Getting Started with ZIO","description":"Include ZIO in your project by adding the following to your build.sbt file:","sidebar":"overview_sidebar"},"overview/handling-errors":{"id":"overview/handling-errors","title":"Handling Errors","description":"ZIO effects may fail due to foreseen or unforeseen problems. In order to help you build robust applications, ZIO tracks foreseen errors at compile-time, letting you know which effects can fail, and how they can fail. For non-recoverable problems, ZIO gives you full insight into the cause of failures (even if unexpected or catastrophic), preserving all information and automatically logging unhandled errors.","sidebar":"overview_sidebar"},"overview/handling-resources":{"id":"overview/handling-resources","title":"Handling Resources","description":"Ensuring that your applications never leak resources is one of the keys to maximizing application throughput, minimizing latency, and maximizing per-node uptime.","sidebar":"overview_sidebar"},"overview/performance":{"id":"overview/performance","title":"Performance","description":"ZIO is a high-performance framework that is powered by non-blocking fibers (which will move to virtual threads under Loom).","sidebar":"overview_sidebar"},"overview/platforms":{"id":"overview/platforms","title":"Platforms","description":"ZIO provides a consistent interface across platforms to the maximum extent possible, allowing developers to write code once and deploy it everywhere. However, there are some unavoidable differences between platforms to be aware of.","sidebar":"overview_sidebar"},"overview/running-effects":{"id":"overview/running-effects","title":"Running Effects","description":"ZIO effects are precise plans that describe a computation or interaction. Ultimately, every effect must be executed by the ZIO runtime.","sidebar":"overview_sidebar"},"overview/summary":{"id":"overview/summary","title":"Summary","description":"ZIO is a next-generation framework for building cloud-native applications on the JVM. With a beginner-friendly yet powerful functional core, ZIO lets developers quickly build best-practice applications that are highly scalable, testable, robust, resilient, resource-safe, efficient, and observable.","sidebar":"overview_sidebar"},"reference/architecture/architectural-patterns":{"id":"reference/architecture/architectural-patterns","title":"Architectural Patterns","description":"In this section, we are going to talk about the design elements of a ZIO application and the ZIO idiomatic way of structuring codes to write ZIO applications.","sidebar":"reference-sidebar"},"reference/architecture/functional-design-patterns":{"id":"reference/architecture/functional-design-patterns","title":"Functional Design Patterns","description":"When designing an API, there are patterns that are commonly used. In this section, we are going to talk about some of these patterns:","sidebar":"reference-sidebar"},"reference/architecture/non-functional-requirements":{"id":"reference/architecture/non-functional-requirements","title":"Non-functional Requirements","description":"Introduction","sidebar":"reference-sidebar"},"reference/architecture/programming-paradigms-in-zio":{"id":"reference/architecture/programming-paradigms-in-zio","title":"Programming Paradigms in ZIO","description":"It is important to realize that the programming paradigm used to write a software system has a significant impact on its design and architecture. In this section, we are going to talk the foundation of ZIO from the programming paradigm perspective:","sidebar":"reference-sidebar"},"reference/concurrency/hub":{"id":"reference/concurrency/hub","title":"Hub","description":"A Hub is an asynchronous message hub. Publishers can publish messages to the hub and subscribers can subscribe to receive messagesfrom the hub.","sidebar":"reference-sidebar"},"reference/concurrency/index":{"id":"reference/concurrency/index","title":"Introduction to Concurrent Programming in ZIO","description":"Overview","sidebar":"reference-sidebar"},"reference/concurrency/promise":{"id":"reference/concurrency/promise","title":"Promise","description":"A Promise[E, A] is a variable of IO[E, A] type that can be set exactly once.","sidebar":"reference-sidebar"},"reference/concurrency/queue":{"id":"reference/concurrency/queue","title":"Queue","description":"Queue is a lightweight in-memory queue built on ZIO with composable and transparent back-pressure. It is fully asynchronous (no locks or blocking), purely-functional and type-safe.","sidebar":"reference-sidebar"},"reference/concurrency/ref":{"id":"reference/concurrency/ref","title":"Ref","description":"Ref[A] models a mutable reference to a value of type A in which we can store immutable data. The two basic operations are set, which fills the Ref with a new value, and get, which retrieves its current content.","sidebar":"reference-sidebar"},"reference/concurrency/refsynchronized":{"id":"reference/concurrency/refsynchronized","title":"Ref.Synchronized","description":"Ref.Synchronized[A] models a mutable reference to a value of type A in which we can store immutable data, and update it atomically and effectfully.","sidebar":"reference-sidebar"},"reference/concurrency/semaphore":{"id":"reference/concurrency/semaphore","title":"Semaphore","description":"A Semaphore datatype which allows synchronization between fibers with the withPermit operation, which safely acquires and releases a permit.","sidebar":"reference-sidebar"},"reference/configuration/index":{"id":"reference/configuration/index","title":"Introduction to Configuration in ZIO","description":"Configuration is a core concern for any cloud-native application. So ZIO ships with built-in support for configuration by providing a front-end for configuration providers as well as metrics and logging.","sidebar":"reference-sidebar"},"reference/contextual/automatic-zlayer-derivation":{"id":"reference/contextual/automatic-zlayer-derivation","title":"Automatic ZLayer Derivation","description":"ZIO\'s ZLayer is a powerful tool for building modular, testable, and composable applications. With the ZLayer.derive","sidebar":"reference-sidebar"},"reference/contextual/index":{"id":"reference/contextual/index","title":"Introduction to the ZIO\'s Contextual Data Types","description":"ZIO provides a contextual abstraction that encodes the environment of the running effect. This means, every effect can work within a specific context, called an environment.","sidebar":"reference-sidebar"},"reference/contextual/layer":{"id":"reference/contextual/layer","title":"Layer","description":"Layer[+E, +ROut] is a type alias for ZLayer[Any, E, ROut], which represents a layer that doesn\'t require any services, it may fail with an error type of E, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/rlayer":{"id":"reference/contextual/rlayer","title":"RLayer","description":"RLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Throwable, ROut], which represents a layer that requires RIn as its input, it may fail with Throwable value, or returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/tasklayer":{"id":"reference/contextual/tasklayer","title":"TaskLayer","description":"TaskLayer[+ROut] is a type alias for ZLayer[Any, Throwable, ROut], which represents a layer that doesn\'t require any services as its input, it may fail with Throwable value, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/ulayer":{"id":"reference/contextual/ulayer","title":"ULayer","description":"ULayer[+ROut] is a type alias for ZLayer[Any, Nothing, ROut], which represents a layer that doesn\'t require any services as its input, it can\'t fail, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/urlayer":{"id":"reference/contextual/urlayer","title":"URLayer","description":"URLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Nothing, ROut], which represents a layer that requires RIn as its input, it can\'t fail, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/zenvironment":{"id":"reference/contextual/zenvironment","title":"ZEnvironment","description":"A ZEnvironment[R] is a built-in type-level map for the ZIO data type which is responsible for maintaining the environment of a ZIO effect. The ZIO data type uses this map to maintain all the environmental services and their implementations.","sidebar":"reference-sidebar"},"reference/contextual/zio-environment-use-cases":{"id":"reference/contextual/zio-environment-use-cases","title":"ZIO Environment Use-cases","description":"ZIO Environment allows us to describe workflows which carry some context that is used in the course of executing the workflow. This context can be dived into two categories:","sidebar":"reference-sidebar"},"reference/contextual/zlayer":{"id":"reference/contextual/zlayer","title":"ZLayer","description":"A ZLayer[-RIn, +E, +ROut] describes a layer of an application: every layer in an application requires some services as input RIn and produces some services as the output ROut.","sidebar":"reference-sidebar"},"reference/control-flow/index":{"id":"reference/control-flow/index","title":"Introduction to ZIO\'s Control Flow Operators","description":"Although we have access to built-in Scala control flow structures, ZIO has several control flow combinators. In this section, we are going to introduce different ways of controlling flows in ZIO applications.","sidebar":"reference-sidebar"},"reference/core/cause":{"id":"reference/core/cause","title":"Cause","description":"The ZIO[R, E, A] effect is polymorphic in values of type E and we can work with any error type that we want, but there is a lot of information that is not inside an arbitrary E value. So as a result ZIO needs somewhere to store things like unexpected errors or defects, stack and execution traces, cause of fiber interruptions, and so forth.","sidebar":"reference-sidebar"},"reference/core/exit":{"id":"reference/core/exit","title":"Exit","description":"An Exit[E, A] value describes how fibers end life. It has two possible values:","sidebar":"reference-sidebar"},"reference/core/index":{"id":"reference/core/index","title":"Core Data Types","description":"In this section we are going to talk about the basic data types that are required to build a ZIO application:"},"reference/core/runtime":{"id":"reference/core/runtime","title":"Runtime","description":"A Runtime[R] is capable of executing tasks within an environment R.","sidebar":"reference-sidebar"},"reference/core/zio/io":{"id":"reference/core/zio/io","title":"IO","description":"IO[E, A] is a type alias for ZIO[Any, E, A], which represents an effect that has no requirements, and may fail with an E, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/rio":{"id":"reference/core/zio/rio","title":"RIO","description":"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/task":{"id":"reference/core/zio/task","title":"Task","description":"Task[A] is a type alias for ZIO[Any, Throwable, A], which represents an effect that has no requirements, and may fail with a Throwable value, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/uio":{"id":"reference/core/zio/uio","title":"UIO","description":"UIO[A] is a type alias for ZIO[Any, Nothing, A], which represents an Unexceptional effect that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/urio":{"id":"reference/core/zio/urio","title":"URIO","description":"URIO[R, A] is a type alias for ZIO[R, Nothing, A], which represents an effect that requires an R, and cannot fail, but can succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/zio":{"id":"reference/core/zio/zio","title":"ZIO","description":"A ZIO[R, E, A] value is an immutable value that lazily describes a workflow or job. The workflow requires some environment R, and may fail with an error of type E, or succeed with a value of type A.","sidebar":"reference-sidebar"},"reference/core/zioapp":{"id":"reference/core/zioapp","title":"ZIOApp","description":"The ZIOApp trait is an entry point for a ZIO application that allows sharing layers between applications. It also","sidebar":"reference-sidebar"},"reference/di/automatic-layer-construction":{"id":"reference/di/automatic-layer-construction","title":"Automatic Layer Construction","description":"ZIO also has an automatic layer construction facility, which takes care of building dependency graphs from the individual layers and building blocks. So instead of manually composing layers together to build the final layer, we can only provide individual layers to the ZIO application, and it will do the rest.","sidebar":"reference-sidebar"},"reference/di/building-dependency-graph":{"id":"reference/di/building-dependency-graph","title":"Building Dependency Graph","description":"We have two options to build a dependency graph:","sidebar":"reference-sidebar"},"reference/di/dependency-injection-in-zio":{"id":"reference/di/dependency-injection-in-zio","title":"Getting Started With Dependency Injection in ZIO","description":"In this page, we will focus on essential parts of dependency injection in ZIO. So in some examples we are not going to cover all the best practices for writing ZIO services.","sidebar":"reference-sidebar"},"reference/di/dependency-memoization":{"id":"reference/di/dependency-memoization","title":"Layers Are Shared by Default","description":"Layer memoization allows a layer to be created once and used multiple times in the dependency graph. So if we use the same layer twice, e.g. (a >>> b) ++ (a >>> c), then the a layer will be allocated only once.","sidebar":"reference-sidebar"},"reference/di/dependency-propagation":{"id":"reference/di/dependency-propagation","title":"Dependency Propagation","description":"When we write an application, our application has a lot of dependencies. We need a way to provide implementations and to feed and propagate all dependencies throughout the whole application. We can solve the propagation problem by using ZIO environment.","sidebar":"reference-sidebar"},"reference/di/examples":{"id":"reference/di/examples","title":"Examples","description":"An Example of a ZIO Application with Multiple Config Layers","sidebar":"reference-sidebar"},"reference/di/index":{"id":"reference/di/index","title":"Introduction to Dependency Injection in ZIO","description":"What is a Dependency?","sidebar":"reference-sidebar"},"reference/di/manual-layer-construction":{"id":"reference/di/manual-layer-construction","title":"Manual Layer Construction","description":"We said that we can think of the ZLayer as a more powerful constructor. Constructors are not composable, because they are not values. While a constructor is not composable, ZLayer has a nice facility to compose with other ZLayers. So we can say that a ZLayer turns a constructor into values.","sidebar":"reference-sidebar"},"reference/di/motivation":{"id":"reference/di/motivation","title":"Motivation","description":"In this section, we are going to study how ZIO supports dependency injection by providing pedagogical examples. Examples provided in these sections are not idiomatic and are not meant to be used as a reference. We will discuss the idiomatic way to use dependency injection in ZIO later.","sidebar":"reference-sidebar"},"reference/di/overriding-dependency-graph":{"id":"reference/di/overriding-dependency-graph","title":"Overriding Dependency Graph","description":"We can create a ZIO application by providing a local or a global environment, or a combination:","sidebar":"reference-sidebar"},"reference/di/providing-different-implementation-of-a-service":{"id":"reference/di/providing-different-implementation-of-a-service","title":"Providing Different Implementation of a Service","description":"One of the benefits of using dependency injection is that, we can write our application in a way that without modifying the application logic, we can provide different implementations of services to our application.","sidebar":"reference-sidebar"},"reference/di/zlayer-constructor-as-a-value":{"id":"reference/di/zlayer-constructor-as-a-value","title":"ZLayer: Constructor as a Value","description":"Before jumping into the next section, which will explain dependency injection in ZIO, let\'s take a look at the philosophy behind the ZLayer data type.","sidebar":"reference-sidebar"},"reference/error-management/best-practices/algebraic-data-types":{"id":"reference/error-management/best-practices/algebraic-data-types","title":"Model Domain Errors Using Algebraic Data Types","description":"It is best to use algebraic data types (ADTs) when modeling errors within the same domain or subdomain.","sidebar":"reference-sidebar"},"reference/error-management/best-practices/logging-errors":{"id":"reference/error-management/best-practices/logging-errors","title":"Don\'t Reflexively Log Errors","description":"In modern async concurrent applications with a lot of subsystems, if we do not type errors, we are not able to see what section of our code fails with what error. Therefore, this can be very tempting to log errors when they happen. So when we lose type-safety in the whole application it makes us be more sensitive and program defensively. Therefore, whenever we are calling an API we tend to catch its errors, log them as below:","sidebar":"reference-sidebar"},"reference/error-management/best-practices/unexpected-errors":{"id":"reference/error-management/best-practices/unexpected-errors","title":"Don\'t Type Unexpected Errors","description":"When we first discover typed errors, it may be tempting to put every error into the error type parameter. That is a mistake because we can\'t recover from all types of errors. When we encounter unexpected errors we can\'t do anything in those cases. We should let the application die. Let it crash is the erlang philosophy. It is a good philosophy for all unexpected errors. At best, we can sandbox it, but we should let it crash.","sidebar":"reference-sidebar"},"reference/error-management/best-practices/union-types":{"id":"reference/error-management/best-practices/union-types","title":"Use Union Types to Be More Specific About Error Types","description":"In Scala 3, we have an exciting new feature called union types. By using the union operator, we can encode multiple error types. Using this facility, we can have more precise information on typed errors.","sidebar":"reference-sidebar"},"reference/error-management/error-accumulation":{"id":"reference/error-management/error-accumulation","title":"Error Accumulation","description":"Sequential combinators such as ZIO#zip and ZIO.foreach stop when they reach the first error and return immediately. So their policy on error management is to fail fast.","sidebar":"reference-sidebar"},"reference/error-management/examples":{"id":"reference/error-management/examples","title":"Examples","description":"Let\'s write an application that takes numerator and denominator from the user and then print the result back to the user:","sidebar":"reference-sidebar"},"reference/error-management/exceptional-and-unexceptional-effects":{"id":"reference/error-management/exceptional-and-unexceptional-effects","title":"Exceptional and Unexceptional Effects","description":"Besides the IO type alias, ZIO has four different type aliases which can be categorized into two different categories:","sidebar":"reference-sidebar"},"reference/error-management/expected-and-unexpected-errors":{"id":"reference/error-management/expected-and-unexpected-errors","title":"Expected and Unexpected Errors","description":"Inside an application, there are two distinct categories of errors:","sidebar":"reference-sidebar"},"reference/error-management/imperative-vs-declarative":{"id":"reference/error-management/imperative-vs-declarative","title":"Imperative vs. Declarative Error Handling","description":"To figure out the benefit of typed errors in declarative error handling, we need to understand the drawbacks of the imperative approach and then see how the declarative approach can be used to solve the same problem.","sidebar":"reference-sidebar"},"reference/error-management/index":{"id":"reference/error-management/index","title":"Introduction to Error Management in ZIO","description":"As well as providing first-class support for typed errors, ZIO has a variety of facilities for catching, propagating, and transforming errors in a typesafe manner. In this section, we will learn about different types of errors in ZIO and how we can manage them.","sidebar":"reference-sidebar"},"reference/error-management/operations/chaining-effects-based-on-errors":{"id":"reference/error-management/operations/chaining-effects-based-on-errors","title":"Chaining Effects Based on Errors","description":"Unlike ZIO#flatMap the ZIO#flatMapError combinator chains two effects, where the second effect is dependent on the error channel of the first effect:","sidebar":"reference-sidebar"},"reference/error-management/operations/converting-defects-to-failures":{"id":"reference/error-management/operations/converting-defects-to-failures","title":"Converting Defects to Failures","description":"Both ZIO#resurrect and ZIO#absorb are symmetrical opposite of the ZIO#orDie operator. The ZIO#orDie takes failures from the error channel and converts them into defects, whereas the ZIO#absorb and ZIO#resurrect take defects and convert them into failures:","sidebar":"reference-sidebar"},"reference/error-management/operations/error-refinement":{"id":"reference/error-management/operations/error-refinement","title":"Error Refinement","description":"ZIO has some operators useful for converting defects into failures. So we can take part in non-recoverable errors and convert them into the typed error channel and vice versa.","sidebar":"reference-sidebar"},"reference/error-management/operations/exposing-errors-in-the-success-channel":{"id":"reference/error-management/operations/exposing-errors-in-the-success-channel","title":"Exposing Errors in The Success Channel","description":"Before taking into ZIO#either and ZIO#absolve, let\'s see their signature:","sidebar":"reference-sidebar"},"reference/error-management/operations/exposing-the-cause-in-the-success-channel":{"id":"reference/error-management/operations/exposing-the-cause-in-the-success-channel","title":"Exposing the Cause in The Success Channel","description":"Using the ZIO#cause operation we can expose the cause, and then by using ZIO#uncause we can reverse this operation:","sidebar":"reference-sidebar"},"reference/error-management/operations/filtering-the-success-channel":{"id":"reference/error-management/operations/filtering-the-success-channel","title":"Filtering the Success Channel","description":"ZIO has a variety of operators that can filter values on the success channel based on a given predicate, and if the predicate fails, we can use different strategies:","sidebar":"reference-sidebar"},"reference/error-management/operations/flattening-optional-error-types":{"id":"reference/error-management/operations/flattening-optional-error-types","title":"Flattening Optional Error Types","description":"If we have an optional error of type E in the error channel, we can flatten it to the E type using the ZIO#flattenErrorOption operator:","sidebar":"reference-sidebar"},"reference/error-management/operations/flipping-error-and-success-channels":{"id":"reference/error-management/operations/flipping-error-and-success-channels","title":"Flipping Error and Success Channels","description":"Sometimes, we would like to apply some methods on the error channel which are specific for the success channel, or we want to apply some methods on the success channel which are specific for the error channel. Therefore, we can flip the error and success channel and before flipping back, we can perform the right operator on flipped channels:","sidebar":"reference-sidebar"},"reference/error-management/operations/map-operations":{"id":"reference/error-management/operations/map-operations","title":"Map Operations","description":"Other than ZIO#map and ZIO#flatMap, ZIO has several other operators to manage errors while mapping:","sidebar":"reference-sidebar"},"reference/error-management/operations/merging-the-error-channel-into-the-success-channel":{"id":"reference/error-management/operations/merging-the-error-channel-into-the-success-channel","title":"Merging the Error Channel into the Success Channel","description":"With ZIO#merge we can merge the error channel into the success channel:","sidebar":"reference-sidebar"},"reference/error-management/operations/rejecting-some-success-values":{"id":"reference/error-management/operations/rejecting-some-success-values","title":"Rejecting Some Success Values","description":"We can reject some success values using the ZIO#reject operator:","sidebar":"reference-sidebar"},"reference/error-management/operations/tapping-errors":{"id":"reference/error-management/operations/tapping-errors","title":"Tapping Errors","description":"Like tapping for success values ZIO has several operators for tapping error values. So we can peek into failures or underlying defects or causes:","sidebar":"reference-sidebar"},"reference/error-management/operations/zooming-in-on-nested-values":{"id":"reference/error-management/operations/zooming-in-on-nested-values","title":"Zooming In on Nested Values","description":"Option","sidebar":"reference-sidebar"},"reference/error-management/recovering/catching":{"id":"reference/error-management/recovering/catching","title":"Catching","description":"Catching Failures","sidebar":"reference-sidebar"},"reference/error-management/recovering/fallback":{"id":"reference/error-management/recovering/fallback","title":"Fallback","description":"ZIO#orElse","sidebar":"reference-sidebar"},"reference/error-management/recovering/folding":{"id":"reference/error-management/recovering/folding","title":"Folding","description":"Scala\'s Option and Either data types have fold, which let us handle both failure and success at the same time. In a similar fashion, ZIO effects also have several methods that allow us to handle both failure and success.","sidebar":"reference-sidebar"},"reference/error-management/recovering/retrying":{"id":"reference/error-management/recovering/retrying","title":"Retrying","description":"When we are building applications we want to be resilient in the face of a transient failure. This is where we need to retry to overcome these failures.","sidebar":"reference-sidebar"},"reference/error-management/recovering/sandboxing":{"id":"reference/error-management/recovering/sandboxing","title":"Sandboxing","description":"We know that a ZIO effect may fail due to a failure, a defect, a fiber interruption, or a combination of these causes. So a ZIO effect may contain more than one cause. Using the ZIO#sandbox operator, we can sandbox all errors of a ZIO application, whether the cause is a failure, defect, or a fiber interruption or combination of these. This operator exposes the full cause of a ZIO effect into the error channel:","sidebar":"reference-sidebar"},"reference/error-management/recovering/timing-out":{"id":"reference/error-management/recovering/timing-out","title":"Timing out","description":"ZIO#timeout","sidebar":"reference-sidebar"},"reference/error-management/sequential-and-parallel-errors":{"id":"reference/error-management/sequential-and-parallel-errors","title":"Sequential and Parallel Errors","description":"A simple and regular ZIO application usually fails with one error, which is the first error encountered by the ZIO runtime:","sidebar":"reference-sidebar"},"reference/error-management/typed-errors-guarantees":{"id":"reference/error-management/typed-errors-guarantees","title":"Typed Errors Guarantees","description":"Typed errors don\'t guarantee the absence of defects and interruptions. Having an effect of type ZIO[R, E, A], means it can fail because of some failure of type E, but it doesn\'t mean it can\'t die or be interrupted. So the error channel is only for failure errors.","sidebar":"reference-sidebar"},"reference/error-management/types/defects":{"id":"reference/error-management/types/defects","title":"Defects","description":"By providing a Throwable value to the ZIO.die constructor, we can describe a dying effect:","sidebar":"reference-sidebar"},"reference/error-management/types/failures":{"id":"reference/error-management/types/failures","title":"Failures","description":"When writing ZIO application, we can model a failure, using the ZIO.fail constructor:","sidebar":"reference-sidebar"},"reference/error-management/types/fatals":{"id":"reference/error-management/types/fatals","title":"Fatal Errors","description":"In ZIO on the JVM platform, the VirtualMachineError and all its subtypes are the only errors considered fatal by the ZIO runtime. So if during the running application, the JVM throws any of these errors like StackOverflowError, the ZIO runtime considers it as a catastrophic fatal error. So it will interrupt the whole application immediately without safe resource interruption. None of the ZIO#catchAll and ZIO#catchAllDefects can catch these fatal errors. At most, if we set the Runtime.setReportFatal, the application will log the stack trace before interrupting the entire application.","sidebar":"reference-sidebar"},"reference/error-management/types/index":{"id":"reference/error-management/types/index","title":"Three Types of Errors","description":"We should consider three types of errors when writing ZIO applications:","sidebar":"reference-sidebar"},"reference/fiber/fiber":{"id":"reference/fiber/fiber","title":"Fiber","description":"To perform an effect without blocking the current process, we can use fibers, which are a lightweight concurrency mechanism.","sidebar":"reference-sidebar"},"reference/fiber/fiberid":{"id":"reference/fiber/fiberid","title":"FiberId","description":"FiberId is the identity of a Fiber, described by a globally unique sequence number and the time when it began life:","sidebar":"reference-sidebar"},"reference/fiber/fiberstatus":{"id":"reference/fiber/fiberstatus","title":"Fiber.Status","description":"Fiber.Status describes the current status of a Fiber.","sidebar":"reference-sidebar"},"reference/fiber/index":{"id":"reference/fiber/index","title":"Introduction to ZIO Fibers","description":"A Fiber can be thought of as a virtual thread. A Fiber is the analog of a Java thread (java.lang.Thread), but it performs much better. Fibers are implemented in such a fashion that a single JVM thread will execute many fibers. We can think of fibers as unbounded JVM threads.","sidebar":"reference-sidebar"},"reference/index":{"id":"reference/index","title":"Introduction","description":"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:","sidebar":"reference-sidebar"},"reference/interruption/index":{"id":"reference/interruption/index","title":"Introduction to ZIO\'s Interruption Model","description":"While developing concurrent applications, there are several cases that we need to interrupt the execution of other fibers, for example:","sidebar":"reference-sidebar"},"reference/observability/logging":{"id":"reference/observability/logging","title":"Introduction to Logging in ZIO","description":"ZIO supports a lightweight built-in logging facade that standardizes the interface to logging functionality. So it doesn\'t replace existing logging libraries, but also we can plug it into one of the existing logging backends.","sidebar":"reference-sidebar"},"reference/observability/metrics/counter":{"id":"reference/observability/metrics/counter","title":"Counter","description":"A Counter is a metric representing a single numerical value that may be incremented over time. A typical use of this metric would be to track the number of a certain type of request received.","sidebar":"reference-sidebar"},"reference/observability/metrics/frequency":{"id":"reference/observability/metrics/frequency","title":"Frequency","description":"A Frequency represents the number of occurrences of specified values. We can think of a Frequency as a set of counters associated with each value except that new counters will automatically be created when new values are observed.","sidebar":"reference-sidebar"},"reference/observability/metrics/gauge":{"id":"reference/observability/metrics/gauge","title":"Gauge","description":"A Gauge is a metric representing a single numerical value that may be set or adjusted. A typical use of this metric would be to track the current memory usage.","sidebar":"reference-sidebar"},"reference/observability/metrics/histogram":{"id":"reference/observability/metrics/histogram","title":"Histogram","description":"A Histogram is a metric representing a collection of numerical with the distribution of the cumulative values over time. They organize a range of measurements into distinct intervals, known as buckets, and record the frequency of measurements falling within each bucket.","sidebar":"reference-sidebar"},"reference/observability/metrics/index":{"id":"reference/observability/metrics/index","title":"Introduction to ZIO Metrics","description":"In highly concurrent applications, things are interconnected, so maintaining such a setup to run smoothly and without application downtimes is very challenging.","sidebar":"reference-sidebar"},"reference/observability/metrics/jvm":{"id":"reference/observability/metrics/jvm","title":"JVM Metrics","description":"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the Prometheus Java Hotspot library and compatible with that library.","sidebar":"reference-sidebar"},"reference/observability/metrics/metriclabel":{"id":"reference/observability/metrics/metriclabel","title":"MetricLabel","description":"A MetricLabel metadata represents a key-value pair that allows analyzing metrics at an additional level of granularity. For example, if a metric tracks the response time of a service, labels could be used to create separate versions that track response times for different clients.","sidebar":"reference-sidebar"},"reference/observability/metrics/summary":{"id":"reference/observability/metrics/summary","title":"Summary","description":"A Summary represents a sliding window of a time series along with metrics for certain percentiles of the time series, referred to as quantiles.","sidebar":"reference-sidebar"},"reference/observability/supervisor":{"id":"reference/observability/supervisor","title":"Supervisor","description":"A Supervisor[A] is allowed to supervise the launching and termination of fibers, producing some visible value of type A from the supervision.","sidebar":"reference-sidebar"},"reference/observability/tracing":{"id":"reference/observability/tracing","title":"Introduction to Tracing in ZIO","description":"Although logs and metrics are useful for understanding the behavior of individual services, they are not enough to provide a complete overview of the lifetime of a request in a distributed system.","sidebar":"reference-sidebar"},"reference/resource/index":{"id":"reference/resource/index","title":"Introduction to Resource Management in ZIO","description":"When we are writing a long-lived application, resource management is very important. Proper resource management is vital to any large-scale application. We need to make sure that our application is resource-safe, and it doesn\'t leak any resource.","sidebar":"reference-sidebar"},"reference/resource/scope":{"id":"reference/resource/scope","title":"Scope","description":"The Scope data type is the foundation of safe and composable resources handling in ZIO.","sidebar":"reference-sidebar"},"reference/resource/scopedref":{"id":"reference/resource/scopedref","title":"ScopedRef: Mutable Reference For Resources","description":"ScopedRef is a resourceful version of Ref data type. So it is a Ref for resourceful effects.","sidebar":"reference-sidebar"},"reference/resource/zkeyedpool":{"id":"reference/resource/zkeyedpool","title":"ZKeyedPool","description":"The ZKeyedPool[+Err, -Key, Item] is a pool of items of type Item that are associated with a key of type Key. An attempt to get an item from a pool may fail with an error of type Err.","sidebar":"reference-sidebar"},"reference/resource/zpool":{"id":"reference/resource/zpool","title":"ZPool","description":"A ZPool[E, A] is a pool of items of type A, each of which may be associated with the acquisition and release of resources. An attempt to get an item A from a pool may fail with an error of type E.","sidebar":"reference-sidebar"},"reference/schedule/built-in-schedules":{"id":"reference/schedule/built-in-schedules","title":"Built-in Schedules","description":"succeed","sidebar":"reference-sidebar"},"reference/schedule/combinators":{"id":"reference/schedule/combinators","title":"Schedule Combinators","description":"Schedules define stateful, possibly effectful, recurring schedules of events, and compose in a variety of ways. Combinators allow us to take schedules and combine them together to get other schedules and if we have combinators with just the right properties. Then in theory we should be able to solve an infinite number of problems, with only a few combinators and few base schedules.","sidebar":"reference-sidebar"},"reference/schedule/examples":{"id":"reference/schedule/examples","title":"Examples","description":"Let\'s try some example of creating and combining schedules.","sidebar":"reference-sidebar"},"reference/schedule/index":{"id":"reference/schedule/index","title":"Introduction to Scheduling ZIO Effects","description":"A Schedule[Env, In, Out] is an immutable value that describes a recurring effectful schedule, which runs in some environment Env, after consuming values of type In (errors in the case of retry, or values in the case of repeat) produces values of type Out, and in every step based on input values and the internal state decides to halt or continue after some delay d.","sidebar":"reference-sidebar"},"reference/schedule/repetition":{"id":"reference/schedule/repetition","title":"Repetition","description":"In the case of repetition, ZIO has a ZIO#repeat function, which takes a schedule as a repetition policy and returns another effect that describes an effect with repetition strategy according to that policy.","sidebar":"reference-sidebar"},"reference/schedule/retrying":{"id":"reference/schedule/retrying","title":"Retrying","description":"In the case of retrying, ZIO has a ZIO#retry function, which takes a schedule as a repetition policy and returns another effect that describes an effect with repetition strategy which will retry following the failure of the original effect.","sidebar":"reference-sidebar"},"reference/service-pattern/defining-polymorphic-services-in-zio":{"id":"reference/service-pattern/defining-polymorphic-services-in-zio","title":"Defining Polymorphic Services in ZIO","description":"As we discussed here, the ZEnvironment, which is the underlying data type used by ZLayer, is backed by a type-level mapping from types of services to implementations of those services. This functionality is backed by izumi.reflect.Tag, which captures a type as a value.","sidebar":"reference-sidebar"},"reference/service-pattern/generating-accessor-methods-using-macros":{"id":"reference/service-pattern/generating-accessor-methods-using-macros","title":"Generating Accessor Methods Using Macros","description":"Writing accessor methods is a repetitive task and would be cumbersome in services with many methods. We can automate the generation of accessor methods using zio-macro module.","sidebar":"reference-sidebar"},"reference/service-pattern/introduction":{"id":"reference/service-pattern/introduction","title":"Introduction to Writing ZIO Services","description":"Defining services in ZIO is not very different from object-oriented style, it has the same principle: coding to an interface, not an implementation. Therefore, ZIO encourages us to implement this principle by using Service Pattern, which is quite similar to the object-oriented style.","sidebar":"reference-sidebar"},"reference/service-pattern/reloadable-services":{"id":"reference/service-pattern/reloadable-services","title":"Introduction to Reloadable Services","description":"Reloadable services are a feature in ZIO that allow us to reload services when necessary. With ZIO When we reload a service, it will automatically deallocate any resources that the service was using. This includes any open files, network connections, or database connections. ZIO will then reallocate new resources for the new service. This process of deallocation and reallocation is handled automatically by ZIO, so you don\'t need to worry about it.","sidebar":"reference-sidebar"},"reference/service-pattern/service-pattern":{"id":"reference/service-pattern/service-pattern","title":"The Four Elements of Service Pattern","description":"Writing services in ZIO using the Service Pattern is very similar to the object-oriented way of defining services. We use scala traits to define services, classes to implement services, and constructors to define service dependencies. Finally, we lift the class constructor into the ZLayer.","sidebar":"reference-sidebar"},"reference/service-pattern/the-three-laws-of-zio-environment":{"id":"reference/service-pattern/the-three-laws-of-zio-environment","title":"The Three Laws of ZIO Environment","description":"When we are working with the ZIO environment, one question might arise: \\"When should we use environment and when do we need to use constructors?\\".","sidebar":"reference-sidebar"},"reference/services/clock":{"id":"reference/services/clock","title":"Clock","description":"Clock service contains some functionality related to time and scheduling.","sidebar":"reference-sidebar"},"reference/services/console":{"id":"reference/services/console","title":"Console","description":"The Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.","sidebar":"reference-sidebar"},"reference/services/index":{"id":"reference/services/index","title":"Introduction to ZIO\'s Built-in Services","description":"ZIO already provides four built-in services:","sidebar":"reference-sidebar"},"reference/services/random":{"id":"reference/services/random","title":"Random","description":"Random service provides utilities to generate random numbers. It\'s a functional wrapper of scala.util.Random. This service contains various different pseudo-random generators like nextInt, nextBoolean and nextDouble. Each random number generator functions return a URIO[Random, T] value.","sidebar":"reference-sidebar"},"reference/services/system":{"id":"reference/services/system","title":"System","description":"System service contains several useful functions related to system environments and properties. Both of system environments and system properties are key/value pairs. They are used to pass user-defined information to our application.","sidebar":"reference-sidebar"},"reference/state-management/fiber-local-state":{"id":"reference/state-management/fiber-local-state","title":"Fiber-local State","description":"Both the FiberRef and ZState data types are state management tools that are scoped to a certain fiber. Their values are only accessible within the fiber that runs them.","sidebar":"reference-sidebar"},"reference/state-management/fiberref":{"id":"reference/state-management/fiberref","title":"FiberRef: Introduction to Fiber-local Storage","description":"FiberRef is a data structure for managing and accessing thread-local values within a ZIO fiber. Thread-local storage (TLS) is a mechanism that provides each fiber its own separate storage space. A FiberRef[A] is a specialized type of mutable reference (Ref[A]) that allows us to store and retrieve values of type A that are local to a specific fiber.","sidebar":"reference-sidebar"},"reference/state-management/global-shared-state":{"id":"reference/state-management/global-shared-state","title":"Global Shared State Using Ref","description":"One of the common use cases for Ref is to manage the state of applications, especially in concurrent environments. We can use the Ref data type, which is a purely functional description of a mutable reference.","sidebar":"reference-sidebar"},"reference/state-management/index":{"id":"reference/state-management/index","title":"Introduction to State Management in ZIO","description":"When we write a program, more often we need to keep track of some sort of state during the execution of the program. If an object has a state, its behavior is influenced by passing the time.","sidebar":"reference-sidebar"},"reference/state-management/recursion":{"id":"reference/state-management/recursion","title":"State Management Using Recursion","description":"This is a very common pattern to use variables to keep track of the state. For example, to calculate the length of a list, we can store intermediate results inside the count variable:","sidebar":"reference-sidebar"},"reference/state-management/zstate":{"id":"reference/state-management/zstate","title":"ZState","description":"ZStateS] models a value of type S that can be read from and written to during the execution of an effect. This is a higher-level construct built on top of [FiberRef and the environment type to support using ZIO where we might have traditionally used state monad transformers.","sidebar":"reference-sidebar"},"reference/stm/index":{"id":"reference/stm/index","title":"Introduction to Software Transactional Memory","description":"Overview","sidebar":"reference-sidebar"},"reference/stm/stm":{"id":"reference/stm/stm","title":"STM","description":"An STM[E, A] represents an effect that can be performed transactionally resulting in a failure E or a success A. There is a more powerful variant ZSTM[R, E, A] which supports an environment type R like ZIO[R, E, A].","sidebar":"reference-sidebar"},"reference/stm/tarray":{"id":"reference/stm/tarray","title":"TArray","description":"TArray is an array of mutable references that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/thub":{"id":"reference/stm/thub","title":"THub","description":"A THub is a transactional message hub. Publishers can publish messages to the hub and subscribers can subscribe to take messages from the hub.","sidebar":"reference-sidebar"},"reference/stm/tmap":{"id":"reference/stm/tmap","title":"TMap","description":"A TMap[A] is a mutable map that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/tpriorityqueue":{"id":"reference/stm/tpriorityqueue","title":"TPriorityQueue","description":"A TPriorityQueue[A] is a mutable queue that can participate in STM transactions. A TPriorityQueue contains values of type A for which an Ordering is defined. Unlike a TQueue, take returns the highest priority value (the value that is first in the specified ordering) as opposed to the first value offered to the queue. The ordering of elements sharing the same priority when taken from the queue is not guaranteed.","sidebar":"reference-sidebar"},"reference/stm/tpromise":{"id":"reference/stm/tpromise","title":"TPromise","description":"TPromise is a mutable reference that can be set exactly once and can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/tqueue":{"id":"reference/stm/tqueue","title":"TQueue","description":"A TQueue[A] is a mutable queue that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/trandom":{"id":"reference/stm/trandom","title":"TRandom","description":"TRandom is a random service like Random that provides utilities to generate random numbers, but they can participate in STM transactions.","sidebar":"reference-sidebar"},"reference/stm/treentrantlock":{"id":"reference/stm/treentrantlock","title":"TReentrantLock","description":"A TReentrantLock allows safe concurrent access to some mutable state efficiently, allowing multiple fibers to read the","sidebar":"reference-sidebar"},"reference/stm/tref":{"id":"reference/stm/tref","title":"TRef","description":"A TRef[A] is a mutable reference to an immutable value, which can participate in transactions in STM. The mutable reference can be retrieved and set from within transactions, with strong guarantees for atomicity, consistency, and isolation from other transactions.","sidebar":"reference-sidebar"},"reference/stm/tsemaphore":{"id":"reference/stm/tsemaphore","title":"TSemaphore","description":"TSemaphore is a semaphore with transactional semantics that can be used to control access to a common resource. It","sidebar":"reference-sidebar"},"reference/stm/tset":{"id":"reference/stm/tset","title":"TSet","description":"A TSet[A] is a mutable set that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stream/chunk":{"id":"reference/stream/chunk","title":"Chunk","description":"A Chunk[A] represents a chunk of values of type A. Chunks are usually backed by arrays, but expose a purely functional, safe interface to the underlying elements, and they become lazy on operations that would be costly with arrays, such as repeated concatenation. Like lists and arrays, Chunk is an ordered collection.","sidebar":"reference-sidebar"},"reference/stream/index":{"id":"reference/stream/index","title":"Introduction to ZIO Streams","description":"The primary goal of a streaming library is to introduce a high-level API that abstracts the mechanism of reading and writing operations using data sources and destinations.","sidebar":"reference-sidebar"},"reference/stream/installation":{"id":"reference/stream/installation","title":"Installing ZIO Streams","description":"In order to use ZIO Streaming, we need to add the required configuration in our SBT settings:","sidebar":"reference-sidebar"},"reference/stream/subscription-ref":{"id":"reference/stream/subscription-ref","title":"SubscriptionRef","description":"A SubscriptionRef[A] is a Ref that lets us subscribe to receive the current value along with all changes to that value.","sidebar":"reference-sidebar"},"reference/stream/zchannel/channel-interruption":{"id":"reference/stream/zchannel/channel-interruption","title":"Channel Interruption","description":"We can interrupt a channel using the ZChannel.interruptWhen operator. It takes a ZIO effect that will be evaluated, if it finishes before the channel is closed, it will interrupt the channel, and the terminal value of the returned channel will be the success value of the effect:","sidebar":"reference-sidebar"},"reference/stream/zchannel/channel-operations":{"id":"reference/stream/zchannel/channel-operations","title":"Channel Operations","description":"Piping","sidebar":"reference-sidebar"},"reference/stream/zchannel/composing-channels":{"id":"reference/stream/zchannel/composing-channels","title":"Composing Channels","description":"We can write more complex channels by using read operators and composing them recursively.","sidebar":"reference-sidebar"},"reference/stream/zchannel/creating-channels":{"id":"reference/stream/zchannel/creating-channels","title":"Creating Channels","description":"ZChannel have several constructors and also built-in channels, where suitable to create more complex channels.","sidebar":"reference-sidebar"},"reference/stream/zchannel/index":{"id":"reference/stream/zchannel/index","title":"Introduction To ZChannels","description":"Channels are the nexus of communications, which support both reading and writing. They allow us to have a unidirectional flow of data from the input to the output.","sidebar":"reference-sidebar"},"reference/stream/zchannel/running-a-channel":{"id":"reference/stream/zchannel/running-a-channel","title":"Running a Channel","description":"To run a channel, we can use the ZChannel.runXYZ methods:","sidebar":"reference-sidebar"},"reference/stream/zpipeline":{"id":"reference/stream/zpipeline","title":"ZPipeline","description":"Introduction","sidebar":"reference-sidebar"},"reference/stream/zsink/creating-sinks":{"id":"reference/stream/zsink/creating-sinks","title":"Creating Sinks","description":"The zio.stream provides numerous kinds of sinks to use.","sidebar":"reference-sidebar"},"reference/stream/zsink/index":{"id":"reference/stream/zsink/index","title":"Introduction to ZSink","description":"A ZSink[R, E, I, L, Z] is used to consume elements produced by a ZStream. You can think of a sink as a function that will consume a variable amount of I elements (could be 0, 1, or many!), might fail with an error of type E, and will eventually yield a value of type Z together with a remainder of type L as leftover.","sidebar":"reference-sidebar"},"reference/stream/zsink/leftovers":{"id":"reference/stream/zsink/leftovers","title":"Leftovers","description":"Collecting Leftovers","sidebar":"reference-sidebar"},"reference/stream/zsink/operations":{"id":"reference/stream/zsink/operations","title":"Sink Operations","description":"Having created the sink, we can transform it with provided operations.","sidebar":"reference-sidebar"},"reference/stream/zsink/parallel-operators":{"id":"reference/stream/zsink/parallel-operators","title":"Parallel Operators","description":"Parallel Zipping","sidebar":"reference-sidebar"},"reference/stream/zstream/consuming-streams":{"id":"reference/stream/zstream/consuming-streams","title":"Consuming Streams","description":"Using a Sink","sidebar":"reference-sidebar"},"reference/stream/zstream/creating-zio-streams":{"id":"reference/stream/zstream/creating-zio-streams","title":"Creating ZIO Streams","description":"There are several ways to create ZIO Stream. In this section, we are going to enumerate some of the important ways of creating ZStream.","sidebar":"reference-sidebar"},"reference/stream/zstream/error-handling":{"id":"reference/stream/zstream/error-handling","title":"Error Handling","description":"Recovering from Failure","sidebar":"reference-sidebar"},"reference/stream/zstream/index":{"id":"reference/stream/zstream/index","title":"Introduction to ZStream","description":"A ZStream[R, E, O] is a description of a program that, when evaluated, may emit zero or more values of type O, may fail with errors of type E, and uses an environment of type R.","sidebar":"reference-sidebar"},"reference/stream/zstream/operations":{"id":"reference/stream/zstream/operations","title":"Operations","description":"Tapping","sidebar":"reference-sidebar"},"reference/stream/zstream/resourceful-streams":{"id":"reference/stream/zstream/resourceful-streams","title":"Resourceful Streams","description":"Most of the constructors of ZStream have a special variant to lift a scoped resource to a Stream (e.g. ZStream.fromReaderScoped). By using these constructors, we are creating streams that are resource-safe. Before creating a stream, they acquire the resource, and after usage; they close the stream.","sidebar":"reference-sidebar"},"reference/stream/zstream/scheduling":{"id":"reference/stream/zstream/scheduling","title":"Scheduling","description":"To schedule the output of a stream we use ZStream#schedule combinator.","sidebar":"reference-sidebar"},"reference/stream/zstream/streams-are-chunked-by-default":{"id":"reference/stream/zstream/streams-are-chunked-by-default","title":"Streams Are Chunked by Default","description":"Every time we are working with streams, we are always working with chunks. There are no streams with individual elements, these streams have always chunks in their underlying implementation. So every time we evaluate a stream, when we pull an element out of a stream, we are actually pulling out a chunk of elements.","sidebar":"reference-sidebar"},"reference/stream/zstream/type-aliases":{"id":"reference/stream/zstream/type-aliases","title":"Type Aliases","description":"The ZStream data type, has two type aliases:","sidebar":"reference-sidebar"},"reference/sync/concurrentmap":{"id":"reference/sync/concurrentmap","title":"ConcurrentMap","description":"A ConcurrentMap is a wrapper over java.util.concurrent.ConcurrentHashMap.","sidebar":"reference-sidebar"},"reference/sync/concurrentset":{"id":"reference/sync/concurrentset","title":"ConcurrentSet","description":"A ConcurrentSet is a Set wrapper over java.util.concurrent.ConcurrentHashMap.","sidebar":"reference-sidebar"},"reference/sync/countdownlatch":{"id":"reference/sync/countdownlatch","title":"CountdownLatch","description":"A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers completes.","sidebar":"reference-sidebar"},"reference/sync/cyclicbarrier":{"id":"reference/sync/cyclicbarrier","title":"CyclicBarrier","description":"A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point.","sidebar":"reference-sidebar"},"reference/sync/index":{"id":"reference/sync/index","title":"Introduction to ZIO\'s Synchronization Primitives","description":"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies. ZIO provides a set of synchronization primitives and concurrent data structures in the zio-concurrent module that helps us to achieve the desired synchronization.","sidebar":"reference-sidebar"},"reference/sync/mvar":{"id":"reference/sync/mvar","title":"MVar","description":"An MVar[A] is a mutable location that is either empty or contains a value of type A. So the MVar acts like a single-element buffer."},"reference/sync/reentrantlock":{"id":"reference/sync/reentrantlock","title":"ReentrantLock","description":"A ReentrantLock is a lock which can be acquired multiple times by the same fiber. When a fiber acquires (lock) a reentrant lock, it will become the owner of that lock. Other fibers cannot obtain the lock unless the lock owner releases (unlock) the lock. As the lock is reentrant, the lock owner can call the lock again, multiple times.","sidebar":"reference-sidebar"},"reference/test/aspects/annotating-tests":{"id":"reference/test/aspects/annotating-tests","title":"Annotating Tests","description":"Measuring Execution Time","sidebar":"reference-sidebar"},"reference/test/aspects/before-after-around":{"id":"reference/test/aspects/before-after-around","title":"Before, After, and Around Test Aspects","description":"1. We can run an effect before, after, or around every test:","sidebar":"reference-sidebar"},"reference/test/aspects/conditional":{"id":"reference/test/aspects/conditional","title":"Conditional Aspects","description":"When we apply a conditional aspect, it will run the spec only if the specified predicate is satisfied.","sidebar":"reference-sidebar"},"reference/test/aspects/configuring-tests":{"id":"reference/test/aspects/configuring-tests","title":"Configuring Tests","description":"To run cases, there are some default configuration settings which are used by test runner, such as repeats, retries, samples and shrinks. We can change these settings using test aspects:","sidebar":"reference-sidebar"},"reference/test/aspects/debugging-and-diagnostics":{"id":"reference/test/aspects/debugging-and-diagnostics","title":"Debugging and Diagnostics","description":"Debugging","sidebar":"reference-sidebar"},"reference/test/aspects/environment-specific-tests":{"id":"reference/test/aspects/environment-specific-tests","title":"Environment-specific Tests","description":"OS-specific Tests","sidebar":"reference-sidebar"},"reference/test/aspects/execution-strategy":{"id":"reference/test/aspects/execution-strategy","title":"Execution Strategy","description":"ZIO Test has two different strategies to run members of a test suite","sidebar":"reference-sidebar"},"reference/test/aspects/flaky-and-non-flaky-tests":{"id":"reference/test/aspects/flaky-and-non-flaky-tests","title":"Flaky and Non-flaky Tests","description":"Whenever we deal with concurrency issues or race conditions, we should ensure that our tests pass consistently. The nonFlaky is a test aspect to do that.","sidebar":"reference-sidebar"},"reference/test/aspects/ignoring-tests":{"id":"reference/test/aspects/ignoring-tests","title":"Ignoring Tests","description":"To ignore running a test, we can use the ignore test aspect:","sidebar":"reference-sidebar"},"reference/test/aspects/index":{"id":"reference/test/aspects/index","title":"Introduction to Test Aspects","description":"A TestAspect is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another, possibly enlarging the environment or error type. We use them to change existing tests or even entire suites or specs that we have already created.","sidebar":"reference-sidebar"},"reference/test/aspects/non-deterministic-test-data":{"id":"reference/test/aspects/non-deterministic-test-data","title":"Non-deterministic Test Data","description":"The random process of the TestRandom is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers.","sidebar":"reference-sidebar"},"reference/test/aspects/passing-failed-tests":{"id":"reference/test/aspects/passing-failed-tests","title":"Passing Failed Tests","description":"The failing aspect makes a test that failed for any reason pass.","sidebar":"reference-sidebar"},"reference/test/aspects/repeat-and-retry":{"id":"reference/test/aspects/repeat-and-retry","title":"Repeat and Retry","description":"There are some situations where we need to repeat a test with a specific schedule, or our tests might fail, and we need to retry them until we make sure that our tests pass. ZIO Test has the following test aspects for these scenarios:","sidebar":"reference-sidebar"},"reference/test/aspects/restoring-state-of-test-services":{"id":"reference/test/aspects/restoring-state-of-test-services","title":"Restoring State of Test Services","description":"ZIO Test has some test aspects which restore the state of given restorable test services, such as TestClock, TestConsole, TestRandom and TestSystem, to their starting state after the test is run. Note that these test aspects are only useful when we are repeating tests.","sidebar":"reference-sidebar"},"reference/test/aspects/sized":{"id":"reference/test/aspects/sized","title":"Changing the Size of Sized Generators","description":"To change the default size used by sized generators we can use size test aspect:","sidebar":"reference-sidebar"},"reference/test/aspects/timing-out-tests":{"id":"reference/test/aspects/timing-out-tests","title":"Timing-out Tests","description":"The timeout test aspect takes a duration and times out each test. If the test case runs longer than the time specified, it is immediately canceled and reported as a failure, with a message showing that the timeout was exceeded:","sidebar":"reference-sidebar"},"reference/test/assertions/built-in-assertions":{"id":"reference/test/assertions/built-in-assertions","title":"Built-in Assertions","description":"To create Assertion[A] object one can use functions defined under zio.test.Assertion. There are already a number of useful assertions predefined like equalTo, isFalse, isTrue, contains, throws and more.","sidebar":"reference-sidebar"},"reference/test/assertions/classic-assertions":{"id":"reference/test/assertions/classic-assertions","title":"Classic Assertions","description":"In almost all cases we encourage developers using smart assertions instead of classic assertions. They are more expressive and easier to use. So you can skip reading this section.","sidebar":"reference-sidebar"},"reference/test/assertions/index":{"id":"reference/test/assertions/index","title":"Introduction to ZIO Test Assertions","description":"Assertions are used to make sure that the assumptions on computations are exactly what we expect them to be. They are executable checks for a property that must be true in our code. Also, they can be seen as a specification of a program and facilitate understanding of programs.","sidebar":"reference-sidebar"},"reference/test/assertions/smart-assertions":{"id":"reference/test/assertions/smart-assertions","title":"Smart Assertions","description":"The smart assertion is a simple way to assert both ordinary values and ZIO effects. It uses the assertTrue function, which uses macro under the hood.","sidebar":"reference-sidebar"},"reference/test/dynamic-test-generation":{"id":"reference/test/dynamic-test-generation","title":"Dynamic Test Generation","description":"Tests in ZIO are dynamic. Meaning that they are not required to be statically defined at compile time. They can be generated at runtime effectfully.","sidebar":"reference-sidebar"},"reference/test/index":{"id":"reference/test/index","title":"Introduction to ZIO Test","description":"ZIO Test is a zero dependency testing library that makes it easy to test effectual programs. In ZIO Test, all tests are immutable values and tests are tightly integrated with ZIO, so testing effectual programs is as natural as testing pure ones.","sidebar":"reference-sidebar"},"reference/test/installation":{"id":"reference/test/installation","title":"Installing ZIO Test","description":"In order to use ZIO Test, we need to add the required configuration in our SBT settings:","sidebar":"reference-sidebar"},"reference/test/junit-integration":{"id":"reference/test/junit-integration","title":"Integrating ZIO Test with JUnit","description":"Unit testing is an essential practice in software development, enabling developers to validate the correctness and reliability of their code. JUnit, a widely adopted testing framework, has emerged as a standard choice for Java applications. With its robust features and extensive ecosystem, JUnit simplifies the process of writing and executing tests, empowering developers to deliver high-quality software.","sidebar":"reference-sidebar"},"reference/test/property-testing/built-in-generators":{"id":"reference/test/property-testing/built-in-generators","title":"Built-in Generators","description":"In the companion object of the Gen data type, there are tons of generators for various data types.","sidebar":"reference-sidebar"},"reference/test/property-testing/getting-started":{"id":"reference/test/property-testing/getting-started","title":"Getting Started With Property Checking","description":"The fundamental idea behind property checking is to test the properties of the target function using random inputs.","sidebar":"reference-sidebar"},"reference/test/property-testing/how-generators-work":{"id":"reference/test/property-testing/how-generators-work","title":"How Generators Work?","description":"A Gen[R, A] represents a generator of values of type A, which requires an environment R. The Gen data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values.","sidebar":"reference-sidebar"},"reference/test/property-testing/index":{"id":"reference/test/property-testing/index","title":"Introduction To Property Testing","description":"What is Property-Based Testing?","sidebar":"reference-sidebar"},"reference/test/property-testing/operators":{"id":"reference/test/property-testing/operators","title":"Operators","description":"1. Gen#zipWith \u2014 Composes this generator with the specified generator to create a cartesian product of elements with the specified function:"},"reference/test/property-testing/shrinking":{"id":"reference/test/property-testing/shrinking","title":"Shrinking","description":"In Property-Based Testing, we specify certain properties of a program, then we ask the testing framework to generate random test data to discover counterexamples. The existence of counterexamples shows that our function, which is under the test, is not correct. Unfortunately, in almost all cases, the first counterexample is not the minimal one, and they are fairly large or complex. So it is not a pretty good sample to describe why our test is failing.","sidebar":"reference-sidebar"},"reference/test/running-tests":{"id":"reference/test/running-tests","title":"Running Tests","description":"We can run ZIO Tests in two ways:","sidebar":"reference-sidebar"},"reference/test/services/clock":{"id":"reference/test/services/clock","title":"TestClock","description":"In most cases we want unit tests to be as fast as possible. Waiting for real time to pass by is a real killer for this.","sidebar":"reference-sidebar"},"reference/test/services/config":{"id":"reference/test/services/config","title":"TestConfig","description":"The TestConfig service provides access to default configuration settings used by ZIO Test:","sidebar":"reference-sidebar"},"reference/test/services/console":{"id":"reference/test/services/console","title":"TestConsole","description":"TestConsole allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:","sidebar":"reference-sidebar"},"reference/test/services/index":{"id":"reference/test/services/index","title":"Introduction","description":"ZIO Test has out of the box test implementations for all built-in ZIO services, such as Console, Clock, Random and System through the following modules:","sidebar":"reference-sidebar"},"reference/test/services/live":{"id":"reference/test/services/live","title":"Live","description":"The Live trait provides access to the live environment from within the test environment for effects such as printing test results to the console or timing out tests where it is necessary to access the real environment.","sidebar":"reference-sidebar"},"reference/test/services/random":{"id":"reference/test/services/random","title":"TestRandom","description":"When working with randomness, testing might be hard because the inputs to the tested function change on every invocation. So our code behaves in an indeterministic way.","sidebar":"reference-sidebar"},"reference/test/services/sized":{"id":"reference/test/services/sized","title":"Sized","description":"The Sized service enables the Sized Generators to access the size from the ZIO Test environment:","sidebar":"reference-sidebar"},"reference/test/services/system":{"id":"reference/test/services/system","title":"TestSystem","description":"TestSystem supports deterministic testing of effects involving system properties.","sidebar":"reference-sidebar"},"reference/test/sharing-layers-between-multiple-files":{"id":"reference/test/sharing-layers-between-multiple-files","title":"Sharing Layers Between Multiple Files","description":"In the previous example, we used the Spec#provideXYZShared methods to share layers between multiple specs in one file. In most cases, when the number of tests and specs grows, this is not a good idea. We want a way to share layers between multiple specs in different files.","sidebar":"reference-sidebar"},"reference/test/sharing-layers-within-the-same-file":{"id":"reference/test/sharing-layers-within-the-same-file","title":"Sharing Layers within the Same File","description":"The Spec data type has a very nice mechanism to share layers within all tests in a suite. So instead of acquiring and releasing dependencies for each test, we can share the layer within all tests. The test framework acquires that layer for once and shares that between all tests. When the execution of all tests is finished, that layer will be released. To share layers between multiple specs we can use one of the provide methods ending with Shared (provideShared/provideCustomShared/provideSomeShared/provideLayerShared/provideCustomLayerShared/provideSomeLayerShared):","sidebar":"reference-sidebar"},"reference/test/spec":{"id":"reference/test/spec","title":"Spec","description":"Constructors","sidebar":"reference-sidebar"},"reference/test/test-hierarchies-and-organization":{"id":"reference/test/test-hierarchies-and-organization","title":"Test Hierarchies and Organization","description":"A Spec[R, E] is the backbone of ZIO Test. All specs require an environment of type R and may potentially fail with an error of type E.","sidebar":"reference-sidebar"},"reference/test/why-zio-test":{"id":"reference/test/why-zio-test","title":"Why ZIO Test?","description":"In this section, we will discuss important features of the ZIO Test which help us to test our effectual code easily.","sidebar":"reference-sidebar"},"reference/test/writing-our-first-test":{"id":"reference/test/writing-our-first-test","title":"Writing Our First Test","description":"Any object that implements the ZIOSpecDefault trait is a runnable test. So to start writing tests we need to extend ZIOSpecDefault, which requires a Spec:","sidebar":"reference-sidebar"},"reference/test/zio-test-diff":{"id":"reference/test/zio-test-diff","title":"zio.test.diff.Diff","description":"When asserting two things are the same it\'s sometimes difficult to see the difference. Luckily there is a zio.test.Diff type-class. The purpose this type class is to output the difference between two things."},"resources/articles":{"id":"resources/articles","title":"Articles","description":"These articles reflect the state of ZIO at the time of their publication. The code samples might be outdated, considering ZIO was early in development at the time they were written. However, the concepts are still relevant.","sidebar":"resources-sidebar"},"resources/cheatsheets":{"id":"resources/cheatsheets","title":"Cheat Sheets","description":"- ZIO Cheat Sheet","sidebar":"resources-sidebar"},"resources/cookbooks":{"id":"resources/cookbooks","title":"Cookbooks","description":"- ZIO Cookbook A beginners\' tour to ZIO by Boris V.Kuznetsov","sidebar":"resources-sidebar"},"resources/index":{"id":"resources/index","title":"Summary","description":"ZIO has a huge ecosystem of libraries, tools, talks, tutorials, and more. In this section, we are going to introduce some of the most important ones.","sidebar":"resources-sidebar"},"resources/poweredbyzio":{"id":"resources/poweredbyzio","title":"Projects using ZIO","description":"- Rudder \u2014 an example about how to manage error ADT in several sub-projects and specialized sub-domains, and how one can gradually contextualize error messages in domain layers. Uses queues, resources, interop with Java, and historical code. See context and references.","sidebar":"resources-sidebar"},"resources/sampleprojects":{"id":"resources/sampleprojects","title":"Sample Projects","description":"- GitHub Release Pager with ZIO 2.0 by Pavels Sisojevs","sidebar":"resources-sidebar"},"resources/videos":{"id":"resources/videos","title":"Videos","description":"Functional Programming","sidebar":"resources-sidebar"},"zio-actors/akka-interop":{"id":"zio-actors/akka-interop","title":"Akka Interop","description":"Akka Interop gives you the ability to send and receive messages between zio actors and akka typed actors.","sidebar":"ecosystem-sidebar"},"zio-actors/basics":{"id":"zio-actors/basics","title":"Basics","description":"Actors are higher level concurrency models which receive messages, process them and update their internal state.","sidebar":"ecosystem-sidebar"},"zio-actors/examples":{"id":"zio-actors/examples","title":"Examples","description":"So now how to use it? Here you can find some examples to dive into:","sidebar":"ecosystem-sidebar"},"zio-actors/index":{"id":"zio-actors/index","title":"Introduction to ZIO Actors","description":"ZIO Actors - a high-performance, purely-functional library for building, composing, and supervising typed actors backed by ZIO.","sidebar":"ecosystem-sidebar"},"zio-actors/persistence":{"id":"zio-actors/persistence","title":"Persistence","description":"Persistence gives you ability to store events that occur in your system with defined datastore.","sidebar":"ecosystem-sidebar"},"zio-actors/remoting":{"id":"zio-actors/remoting","title":"Remoting","description":"Remoting makes it possible to lookup for actors that reside on another ActorSystems.","sidebar":"ecosystem-sidebar"},"zio-actors/supervision":{"id":"zio-actors/supervision","title":"Supervision","description":"A Supervisors responsibility is to manage actors failure policies.","sidebar":"ecosystem-sidebar"},"zio-akka-cluster/index":{"id":"zio-akka-cluster/index","title":"Introduction to ZIO Akka Cluster","description":"This library is a ZIO wrapper for Akka Cluster.","sidebar":"ecosystem-sidebar"},"zio-amqp/index":{"id":"zio-amqp/index","title":"ZIO AMQP","description":"ZIO AMQP is a ZIO-based wrapper around the RabbitMQ client. It provides a streaming interface to AMQP queues and helps to prevent you from shooting yourself in the foot with thread-safety issues.","sidebar":"ecosystem-sidebar"},"zio-aws/artifacts":{"id":"zio-aws/artifacts","title":"Artifacts","description":"Core module","sidebar":"ecosystem-sidebar"},"zio-aws/aspects":{"id":"zio-aws/aspects","title":"Aspects","description":"It is possible to define aspects of type AwsCallAspect[R] that can modify the behavior of the AWS client modules. This can be used for example","sidebar":"ecosystem-sidebar"},"zio-aws/changelog":{"id":"zio-aws/changelog","title":"Changelog","description":"Note: this is a manually maintained list of important changes. Because of having auto-release from CI, this","sidebar":"ecosystem-sidebar"},"zio-aws/configuration":{"id":"zio-aws/configuration","title":"Configuration","description":"Common configuration","sidebar":"ecosystem-sidebar"},"zio-aws/examples":{"id":"zio-aws/examples","title":"Examples","description":"The following example uses the ElasticBeanstalk and EC2 APIs to print some info.","sidebar":"ecosystem-sidebar"},"zio-aws/getting-started":{"id":"zio-aws/getting-started","title":"Summary","description":"Low-level AWS wrapper for ZIO for all AWS services using the AWS Java SDK v2."},"zio-aws/http":{"id":"zio-aws/http","title":"HTTP","description":"By default the AWS Java SDK uses netty under the hood to make the HTTP client calls. zio-aws defines the http client","sidebar":"ecosystem-sidebar"},"zio-aws/index":{"id":"zio-aws/index","title":"Overview","description":"Low-level AWS wrapper for ZIO for all AWS services using the AWS Java SDK v2.","sidebar":"ecosystem-sidebar"},"zio-aws/migration-guide":{"id":"zio-aws/migration-guide","title":"Migration guide","description":"There are some major changes compared to the ZIO 1 version (v3.x.x.x and v4.x.x.x). This section contains detailed information about what changed and how to modify existing code.","sidebar":"ecosystem-sidebar"},"zio-aws/wrappers":{"id":"zio-aws/wrappers","title":"Wrappers","description":"Service modules","sidebar":"ecosystem-sidebar"},"zio-bson/index":{"id":"zio-bson/index","title":"Getting Started with ZIO Bson","description":"ZIO Bson is BSON library with tight ZIO integration.","sidebar":"ecosystem-sidebar"},"zio-cache/cache":{"id":"zio-cache/cache","title":"Cache","description":"A cache is defined in terms of a lookup function, a capacity, and a time to live.","sidebar":"ecosystem-sidebar"},"zio-cache/cache-statistics":{"id":"zio-cache/cache-statistics","title":"Cache Statistics","description":"ZIO Cache automatically tracks various statistics associated with the cache, such as the number of cache hits and misses and the current size of the cache, to allow you to assess the effectiveness of the cache. You can access these statistics by using the cacheStats operator on Cache.","sidebar":"ecosystem-sidebar"},"zio-cache/entry-statistics":{"id":"zio-cache/entry-statistics","title":"Entry Statistics","description":"ZIO Cache also tracks statistics associated with each entry, such as when the entry was last accessed. You can access the statistics for a specified entry using the entryStats operator on Cache.","sidebar":"ecosystem-sidebar"},"zio-cache/index":{"id":"zio-cache/index","title":"Introduction to ZIO Cache","description":"ZIO Cache is a library that makes it easy to optimize the performance of our application by caching values.","sidebar":"ecosystem-sidebar"},"zio-cache/lookup":{"id":"zio-cache/lookup","title":"Lookup","description":"A Lookup is a lookup function that, given a key of type Key, knows how to compute a value of type Value, requiring an environment of type Environment and potentially failing with an error of type Error.","sidebar":"ecosystem-sidebar"},"zio-cli/args":{"id":"zio-cli/args","title":"Args","description":"The Args data type models command-line arguments. Arguments are name-less, position-based parameters passed to a command-line program that modify its behavior. For example, the Git CLI has a command named git clone that creates a copy of an existing repository. It has an argument called \\"repository\\" that represents the existing repository\'s path. To clone the ZIO CLI repository, it can be called this way:","sidebar":"ecosystem-sidebar"},"zio-cli/auth":{"id":"zio-cli/auth","title":"Authorization with OAuth2","description":"A command-line application interacting with an external API might require some form of authentication, so that access is restricted for unauthorized users. One widely employed authorization and authentication protocol is OAuth2. ZIO CLI can perform interactions with APIs requiring OAuth2. Although it is possible to construct a custom OAuth2 provider easily, there are already tailored OAuth2 providers for GitHub, Google and Facebook within ZIO CLI. We will see how we can add OAuth2 to our CLI application and how we can construct a custom OAuth2 provider to interact with other APIs.","sidebar":"ecosystem-sidebar"},"zio-cli/bash-and-zsh-completion":{"id":"zio-cli/bash-and-zsh-completion","title":"Bash and Zsh Completion","description":"Overview","sidebar":"ecosystem-sidebar"},"zio-cli/built-in-commands":{"id":"zio-cli/built-in-commands","title":"Built-in commands","description":"ZIO CLI automatically constructs some common commands:","sidebar":"ecosystem-sidebar"},"zio-cli/cli-config":{"id":"zio-cli/cli-config","title":"Cli Configuration","description":"It is possible to tweak the behavior of our CliApp specifying a custom CliConfig in the parameter cliConfig of method CliApp.make. By default, CliApp.make uses CliConfig.default. CliConfig specifies how a CliApp","sidebar":"ecosystem-sidebar"},"zio-cli/commands":{"id":"zio-cli/commands","title":"Commands","description":"A command is a piece of text representing a directive for a CLI application. This allows the user to communicate easily which task must perform the application. A popular CLI app is the Version Control System called Git. Commonly used commands of Git are among the following.","sidebar":"ecosystem-sidebar"},"zio-cli/examples":{"id":"zio-cli/examples","title":"Advanced example","description":"This example implements some git commands. The workflow is the one used before:","sidebar":"ecosystem-sidebar"},"zio-cli/helpdoc":{"id":"zio-cli/helpdoc","title":"Help Documentation","description":"HelpDoc is a description of the documentation of a CLI App. They can be added to any Command, Options or Args.","sidebar":"ecosystem-sidebar"},"zio-cli/index":{"id":"zio-cli/index","title":"Introduction to ZIO CLI","description":"Rapidly build powerful command-line applications powered by ZIO","sidebar":"ecosystem-sidebar"},"zio-cli/options":{"id":"zio-cli/options","title":"Options","description":"The Options data type models command-line options. Contrary to arguments, options are named, position-independent parameters passed to a command-line program that modify its behavior. Note that the user must specify the name of the option just before its content. As an example, the Git CLI has a command named git checkout that allows changing between different development branches. It has different options that modify the functionality of the command like option quiet. This option allows suppressing feedback messages. It can be specified in the following manners:","sidebar":"ecosystem-sidebar"},"zio-cli/sbt-plugin":{"id":"zio-cli/sbt-plugin","title":"ZIO CLI SBT Plugin","description":"Overview","sidebar":"ecosystem-sidebar"},"zio-config/automatic-derivation-of-config":{"id":"zio-config/automatic-derivation-of-config","title":"Automatic Derivation of Config","description":"By bringing in zio-config-magnolia we  avoid all the boilerplate required to define the config. With a single import, Config is automatically derived.","sidebar":"ecosystem-sidebar"},"zio-config/automatic-validations":{"id":"zio-config/automatic-validations","title":"Automatic Validations","description":"By bringing in zio-config-refined module, you get validations for your config parameters almost for free.","sidebar":"ecosystem-sidebar"},"zio-config/dive-into-zio-config":{"id":"zio-config/dive-into-zio-config","title":"Dive Into ZIO Config","description":"Note that this documentation is for 1.x series. For newer versions, please refer to docs section in GitHub.","sidebar":"ecosystem-sidebar"},"zio-config/index":{"id":"zio-config/index","title":"Getting Started with ZIO Config","description":"ZIO Config is a ZIO-based library and act as an extension to core library ZIO\'s Config language.","sidebar":"ecosystem-sidebar"},"zio-config/integrations":{"id":"zio-config/integrations","title":"Integrations","description":"Integration with other libraries","sidebar":"ecosystem-sidebar"},"zio-config/read-from-various-sources":{"id":"zio-config/read-from-various-sources","title":"Read from various Sources","description":"zio-config supports various sources.","sidebar":"ecosystem-sidebar"},"zio-config/resources":{"id":"zio-config/resources","title":"ZIO Config Resources","description":"- Easy Config For Your App by Afsal Thaj (December 2020) \u2014 Managing application configuration can be quite challenging: we often have to support multiple data sources with overrides, including HOCON, system properties, environment variables, and more. We have to document our configuration so it is clear to IT and DevOps how to configure our applications. We have to do strong validation with error accumulation to ensure bad data is rejected and good error messages are generated for end-users. In this presentation, Afsal Thaj, the author of ZIO Config, shows attendees how to solve all of these problems in a composable and testable way. By separating the description of configuration from what must be done with the configuration, ZIO Config provides all standard features\u2014including multiple data sources, data source overrides, documentation, and validation with error accumulation\u2014for free. Come learn how to make your applications configurable in an easy way that will delight IT and DevOps and make it easy to change your applications over time.","sidebar":"ecosystem-sidebar"},"zio-connect/couchbase-connector":{"id":"zio-connect/couchbase-connector","title":"Couchbase Connector","description":"Setup","sidebar":"ecosystem-sidebar"},"zio-connect/dynamodb-connector":{"id":"zio-connect/dynamodb-connector","title":"DynamoDB Connector","description":"Setup","sidebar":"ecosystem-sidebar"},"zio-connect/file-connector":{"id":"zio-connect/file-connector","title":"File Connector","description":"Setup","sidebar":"ecosystem-sidebar"},"zio-connect/index":{"id":"zio-connect/index","title":"Introduction to ZIO Connectors","description":"ZIO connectors are Sources, Sinks and Pipelines for channeling data. They are easy to use, and they are designed to be","sidebar":"ecosystem-sidebar"},"zio-connect/s3-connector":{"id":"zio-connect/s3-connector","title":"S3 Connector","description":"Setup","sidebar":"ecosystem-sidebar"},"zio-constraintless/index":{"id":"zio-constraintless/index","title":"Introduction to ZIO Constraintless","description":"ZIO Constraintless allows you to build programs as mere descriptions with maximum polymorphism, maximum modularity, zero abstraction leakage, and zero casting.","sidebar":"ecosystem-sidebar"},"zio-deriving/index":{"id":"zio-deriving/index","title":"Introduction to ZIO Deriving","description":"ZIO Deriving is a Scala library for typeclass derivation with the design goals of:","sidebar":"ecosystem-sidebar"},"zio-direct/index":{"id":"zio-direct/index","title":"Introduction to ZIO Direct Style","description":"ZIO Direct Style is a library that allows using directly-style i.e. imperative programming with ZIO effects which is based on the Monadless paradigm.","sidebar":"ecosystem-sidebar"},"zio-direct/intellij-support":{"id":"zio-direct/intellij-support","title":"ZIO-Direct IntelliJ Support","description":"It is highly recommended that you use Metals instead of IntelliJ for ZIO-Direct development since Metals correctly infers types for defer blocks (and other whitebox macros). This is especially true in Scala 3 where IntelliJ does not properly support union-types upon which the defer mechanism relies for ZIO error type composition.","sidebar":"ecosystem-sidebar"},"zio-direct/other-supported-monads":{"id":"zio-direct/other-supported-monads","title":"Other Supported Monads","description":"As of RC5, zio-direct now supports ZStream and ZPure as well as scala.concurrent.Future and scala.List. The latter two are largely fully functional but largely for demonstration purposes.","sidebar":"ecosystem-sidebar"},"zio-direct/supported-constructs":{"id":"zio-direct/supported-constructs","title":"Scala Constructs Supported by ZIO-Direct","description":"ZIO-direct supports using the following constructs inside of a defer block. Approximate translations of the what the Scala code looks like are available below. In order to see the exact translations for any code in a defer block, use defer.info.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/concepts/architecture":{"id":"zio-dynamodb/concepts/architecture","title":"Architecture","description":"In the below diagram you can see the different layers of library and its dependencies.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/concepts/high-level-api":{"id":"zio-dynamodb/concepts/high-level-api","title":"High Level API","description":"The high level API relies on two mechanisms to provide type safety and reduce boilerplate code:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/concepts/low-level-api":{"id":"zio-dynamodb/concepts/low-level-api","title":"Low Level API","description":"The low level API provides low level query creation and execution while still offering a large reduction in boilerplate. It\'s is based one to one on DynamoDB abstractions and the surface area consists of:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/ce-interop":{"id":"zio-dynamodb/guides/ce-interop","title":"Cats Effect Interop","description":"The zio-dynamodb-ce cats effect interop module provides a way to use ZIO DynamoDB with Cats Effect 3 with minimal","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/cheat-sheet":{"id":"zio-dynamodb/guides/cheat-sheet","title":"High Level API Cheat Sheet","description":"Note this guide assumes the reader has some basic knowledge of AWS DynamoDB API.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/codec-customization":{"id":"zio-dynamodb/guides/codec-customization","title":"Codec Customization","description":"Sealed trait members that are case classes","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/data-modelling":{"id":"zio-dynamodb/guides/data-modelling","title":"High Level API Data Modelling and Limitations","description":"The High Level API relies heavily on ZIO Schema and inherits some of it\'s limitations, namely:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/getting-started":{"id":"zio-dynamodb/guides/getting-started","title":"Getting Started","description":"Add the dependency to your build.sbt file","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/testing":{"id":"zio-dynamodb/guides/testing","title":"Testing ZIO DynamoDB Applications","description":"Full Stack Integration Testing","sidebar":"ecosystem-sidebar"},"zio-dynamodb/guides/transactions":{"id":"zio-dynamodb/guides/transactions","title":"DynamoDB Transactions","description":"Transactions are as simple as calling the .transaction method on a DynamoDBQuery. As long as every component of the query is a valid transaction item and the DynamoDBQuery does not have a mix of get and write transaction items. A list of valid items for both types of queries is listed below.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/index":{"id":"zio-dynamodb/index","title":"Introduction to ZIO DynamoDB","description":"Simple, type-safe, and efficient access to DynamoDB","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/auto-batching-and-parallelisation":{"id":"zio-dynamodb/reference/auto-batching-and-parallelisation","title":"Auto batching and parallelisation","description":"When DynamoDBQuery\'s are composed either manually via the zip combinator or automatically using the DynamoDBQuery.forEach function they become eligible for auto-batching and parallelisation in the execute method.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/dynamodb-query":{"id":"zio-dynamodb/reference/dynamodb-query","title":"DynamoDBQuery","description":"When we use the Low or High Level API constructors to create a query we end up with the type DynamoDBQuery which is a sealed trait.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/error-handling":{"id":"zio-dynamodb/reference/error-handling","title":"Error Handling","description":"DynamoDBError is a sealed trait that represents all the possible errors that can occur when interacting with DynamoDB","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/creating-models/field-traversal":{"id":"zio-dynamodb/reference/hi-level-api/creating-models/field-traversal","title":"Field Traversal","description":"We will be using the below model for the examples which contains a complex collection field hobbies and a nested case","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/creating-models/index":{"id":"zio-dynamodb/reference/hi-level-api/creating-models/index","title":"Creating Models","description":"The High Level API provides automatic serialization and deserialization of Scala case classes to and from DynamoDB types.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/crud-operations/delete":{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/delete","title":"deleteFrom","description":"The deleteFrom operation is used to remove an item from a table. The primaryKeyExpr param can be created using the ProjectionExpression\'s in the companion object for model class:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/crud-operations/get":{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/get","title":"get","description":"The get operation is used to retrieve an item from a table. The KeyConditionExpr.PrimaryKeyExpr can be created using the ProjectionExpression\'s in the companion object for model class. It returns an Either[ItemError, From] where ItemError is a sealed trait that that has ValueNotFound and DecodingError instances.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/crud-operations/index":{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/index","title":"CRUD Operations","description":"The High Level API mirrors the CRUD operations of DDB but with a high level of type safety.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/crud-operations/put":{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/put","title":"put","description":"The put operation is used to insert or replace an item in a table.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/crud-operations/update":{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/update","title":"update","description":"The update operation is used to modify an existing item in a table. Both KeyConditionExpr.PrimaryKeyExpr and the Action params can be created using the ProjectionExpression\'s in the companion object for model class:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/index":{"id":"zio-dynamodb/reference/hi-level-api/index","title":"High Level API","description":"High Level API constructors for CRUD operations are found on the DynamoDBQuery companion object. They rely on a","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/primary-keys":{"id":"zio-dynamodb/reference/hi-level-api/primary-keys","title":"Primary Keys","description":"In the native AWS DynamoDB API primary keys are represented in two different ways depending on context:","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/index":{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/index","title":"Scan and Query Operations","description":"The High Level API mirrors the Scan and Query operations of DDB but with a high level of type safety.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-all":{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-all","title":"queryAll","description":"The queryAll operation must be used in conjunction with the whereKey combinator which allows you to specify the partition key and optionally sort key expression the query.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-some":{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-some","title":"querySome","description":"The scanSome operation is used page limit number of items in a table, and returns them in a tuple of Chunk[A] and LastEvaluatedKey. The LastEvaluatedKey can be used to continue scanning the table from where the last page left off using the startKey combinator.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all":{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-all","title":"scanAll","description":"The scanAll operation is used to scan all items in a table, and uses a ZIO stream to return the results.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-some":{"id":"zio-dynamodb/reference/hi-level-api/scan-and-query-operations/scan-some","title":"scanSome","description":"The scanSome operation is used page limit number of items in a table, and returns them in a tuple of Chunk[A] and LastEvaluatedKey. The LastEvaluatedKey can be used to continue scanning the table from where the last page left off using the startKey combinator.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/low-level-api/attribute-value":{"id":"zio-dynamodb/reference/low-level-api/attribute-value","title":"AttributeValue","description":"The sealed trait AttributeValue has a one to one correspondence with the concept of an attribute value in the AWS DDB API. It has implementations for all the types that are supported by DynamoDB","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/low-level-api/dollar-function":{"id":"zio-dynamodb/reference/low-level-api/dollar-function","title":"$ and parse functions","description":"The $ and parse functions are the primary way to create a ProjectionExpression in the Low Level API.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/low-level-api/index":{"id":"zio-dynamodb/reference/low-level-api/index","title":"Low Level API","description":"Low Level API operations are found on the DynamoDBQuery companion object. All the function names contain the word Item to indicate that they are operations on AWS DDB items in a table.","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/projection-expression":{"id":"zio-dynamodb/reference/projection-expression","title":"ProjectionExpression","description":"The ProjectionExpression API is common to both the Type Safe High Level API (with the exception the primary keys API)","sidebar":"ecosystem-sidebar"},"zio-dynamodb/reference/zio-dynamodb-json":{"id":"zio-dynamodb/reference/zio-dynamodb-json","title":"ZIO DynamoDB JSON Module","description":"zio-dynamodb-json is a new experimental optional module designed for debugging and troubleshooting purposes.","sidebar":"ecosystem-sidebar"},"zio-flow/activities":{"id":"zio-flow/activities","title":"Activities","description":"Overview","sidebar":"ecosystem-sidebar"},"zio-flow/backends":{"id":"zio-flow/backends","title":"Backends","description":"This page lists all the provided backend implementations for storing persistent data in the ZIO Flow executors.","sidebar":"ecosystem-sidebar"},"zio-flow/examples":{"id":"zio-flow/examples","title":"Examples","description":"We will add more examples here later. Until then, check","sidebar":"ecosystem-sidebar"},"zio-flow/execution":{"id":"zio-flow/execution","title":"Execution","description":"The data structures and operators in the zio-flow library only describe a ZIO Flow program. To execute them we need","sidebar":"ecosystem-sidebar"},"zio-flow/index":{"id":"zio-flow/index","title":"Introduction to ZIO Flow","description":"ZIO Flow is an engine for executing persistent, distributed, fault-tolerant applications, providing an easy and powerful way to build stateful serverless applications.","sidebar":"ecosystem-sidebar"},"zio-flow/internals":{"id":"zio-flow/internals","title":"Internals","description":"This page contains information about some implementation details of ZIO Flow which are not necessary to know about for","sidebar":"ecosystem-sidebar"},"zio-flow/remote":{"id":"zio-flow/remote","title":"Remote","description":"Overview","sidebar":"ecosystem-sidebar"},"zio-flow/testing":{"id":"zio-flow/testing","title":"Testing","description":"ZIO Flow has some tools and practices helping the testing flows, remotes, and backend implementations.","sidebar":"ecosystem-sidebar"},"zio-flow/zflow":{"id":"zio-flow/zflow","title":"Defining flows","description":"Overview","sidebar":"ecosystem-sidebar"},"zio-ftp/environment":{"id":"zio-ftp/environment","title":"Environment","description":"FtpClient & Blocking","sidebar":"ecosystem-sidebar"},"zio-ftp/index":{"id":"zio-ftp/index","title":"ZIO FTP","description":"ZIO FTP is a thin wrapper over (s)Ftp client for ZIO.","sidebar":"ecosystem-sidebar"},"zio-http/concepts/endpoint":{"id":"zio-http/concepts/endpoint","title":"Endpoint API","description":"The Endpoint API is a declarative DSL for defining HTTP endpoints. It is a way to define a type safe API for your application.","sidebar":"ecosystem-sidebar"},"zio-http/concepts/middleware":{"id":"zio-http/concepts/middleware","title":"Middleware","description":"A middleware has the purpose of intercepting a request, a response or both. It helps in implementing cross-cutting concerns like access logging, authentication, etc.","sidebar":"ecosystem-sidebar"},"zio-http/concepts/routing":{"id":"zio-http/concepts/routing","title":"Routing","description":"ZIO HTTP routing does some things differently than other (Scala) HTTP libraries.","sidebar":"ecosystem-sidebar"},"zio-http/examples/authentication":{"id":"zio-http/examples/authentication","title":"Authentication Example","description":"Authentication Server Example","sidebar":"ecosystem-sidebar"},"zio-http/examples/cli":{"id":"zio-http/examples/cli","title":"CLI Client-Server Examples","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/concrete-entity":{"id":"zio-http/examples/concrete-entity","title":"Concrete Entity Example","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/endpoint":{"id":"zio-http/examples/endpoint","title":"Endpoint Examples","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/graceful-shutdown":{"id":"zio-http/examples/graceful-shutdown","title":"Graceful Shutdown Example","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/hello-world":{"id":"zio-http/examples/hello-world","title":"Hello World Example","description":"Simple Example","sidebar":"ecosystem-sidebar"},"zio-http/examples/html-templating":{"id":"zio-http/examples/html-templating","title":"HTML Templating Example","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/http-client-server":{"id":"zio-http/examples/http-client-server","title":"HTTP Client-Server Example","description":"Client and Server Example","sidebar":"ecosystem-sidebar"},"zio-http/examples/https-client-server":{"id":"zio-http/examples/https-client-server","title":"HTTPS Client and Server Example","description":"Client Example","sidebar":"ecosystem-sidebar"},"zio-http/examples/index":{"id":"zio-http/examples/index","title":"ZIO HTTP Examples","description":"This section aims to demonstrate the usage of key concepts and ideas in the ZIO HTTP library with examples.","sidebar":"ecosystem-sidebar"},"zio-http/examples/middleware-cors-handling":{"id":"zio-http/examples/middleware-cors-handling","title":"Middleware CORS Handling Example","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/multipart-form-data":{"id":"zio-http/examples/multipart-form-data","title":"Multipart Form Data Example","description":"Multipart Form Data Example","sidebar":"ecosystem-sidebar"},"zio-http/examples/server-sent-events-in-endpoints":{"id":"zio-http/examples/server-sent-events-in-endpoints","title":"Server Sent Events in Endpoints Example","description":"","sidebar":"ecosystem-sidebar"},"zio-http/examples/serving-static-files":{"id":"zio-http/examples/serving-static-files","title":"Serving Static Files Example","description":"Serving Static Files","sidebar":"ecosystem-sidebar"},"zio-http/examples/static-files":{"id":"zio-http/examples/static-files","title":"Serving Static Files","description":""},"zio-http/examples/streaming":{"id":"zio-http/examples/streaming","title":"Streaming Examples","description":"Streaming Request","sidebar":"ecosystem-sidebar"},"zio-http/examples/websocket":{"id":"zio-http/examples/websocket","title":"WebSocket Example","description":"This example shows how to create a WebSocket server using ZIO HTTP and how to write a client to connect to it.","sidebar":"ecosystem-sidebar"},"zio-http/faq":{"id":"zio-http/faq","title":"Frequently Asked Questions","description":"I\'m New to ZIO! How Can I Get Started with ZIO HTTP?","sidebar":"ecosystem-sidebar"},"zio-http/guides/integration-with-zio-config":{"id":"zio-http/guides/integration-with-zio-config","title":"How to Integrate with ZIO Config","description":"When building HTTP applications, it is common to have configuration settings that need to be loaded from various sources such as environment variables, system properties, or configuration files. It is essential especially when deploying applications to different environments like development, testing, and production, or we want to have a cloud-native application that can be configured dynamically.","sidebar":"ecosystem-sidebar"},"zio-http/guides/testing-http-apps":{"id":"zio-http/guides/testing-http-apps","title":"Testing HTTP Applications","description":"Testing HTTP applications is a critical part of the development process. Utilizing the ZIO Test we can write first-class tests for our HTTP applications.","sidebar":"ecosystem-sidebar"},"zio-http/index":{"id":"zio-http/index","title":"Introduction to ZIO HTTP","description":"ZIO HTTP is a scala library for building http apps. It is powered by ZIO and Netty and aims at being the defacto solution for writing, highly scalable and performant web applications using idiomatic Scala.","sidebar":"ecosystem-sidebar"},"zio-http/installation":{"id":"zio-http/installation","title":"Installation","description":"In this guide, we will learn how to get started with a new ZIO HTTP project.","sidebar":"ecosystem-sidebar"},"zio-http/migration/RC4-to-xx":{"id":"zio-http/migration/RC4-to-xx","title":"RC4-to-xx","description":"QueryCodec"},"zio-http/migration/RC6-to-xx":{"id":"zio-http/migration/RC6-to-xx","title":"RC6-to-xx","description":"Root and Empty"},"zio-http/reference/aop/handler_aspect":{"id":"zio-http/reference/aop/handler_aspect","title":"HandlerAspect","description":"A HandlerAspect is a wrapper around ProtocolStack with the two following features:","sidebar":"ecosystem-sidebar"},"zio-http/reference/aop/middleware":{"id":"zio-http/reference/aop/middleware","title":"Middleware","description":"A middleware helps in addressing common crosscutting concerns without duplicating boilerplate code.","sidebar":"ecosystem-sidebar"},"zio-http/reference/aop/protocol-stack":{"id":"zio-http/reference/aop/protocol-stack","title":"ProtocolStack","description":"The ProtocolStack is a low-level data type typically utilized in other higher abstractions such as HandlerAspect and Middleware for building middlewares. If you intend to write middleware, it is advisable in most cases to utilize these higher abstractions, as they simplify the process of middleware creation.","sidebar":"ecosystem-sidebar"},"zio-http/reference/body/binary_codecs":{"id":"zio-http/reference/body/binary_codecs","title":"BinaryCodecs for Request/Response Bodies","description":"ZIO HTTP has built-in support for encoding and decoding request/response bodies. This is achieved using generating codecs for our custom data types powered by ZIO Schema.","sidebar":"ecosystem-sidebar"},"zio-http/reference/body/body":{"id":"zio-http/reference/body/body","title":"Body","description":"Body is a domain to model content for Request and Response. The body can be a fixed chunk of bytes, a stream of bytes, or form data, or any type that can be encoded into such representations (such as textual data using some character encoding, the contents of files, JSON, etc.).","sidebar":"ecosystem-sidebar"},"zio-http/reference/body/form":{"id":"zio-http/reference/body/form","title":"Form Data","description":"The Form represents a collection of FormFields that can be a multipart or URL-encoded form:","sidebar":"ecosystem-sidebar"},"zio-http/reference/body/template":{"id":"zio-http/reference/body/template","title":"Template","description":"The package zio.http.template._ contains lightweight helpers for generating statically typed, safe html similiar in spirit to scalatags.","sidebar":"ecosystem-sidebar"},"zio-http/reference/client":{"id":"zio-http/reference/client","title":"Client","description":"ZClient is an HTTP client that enables us to make HTTP requests and handle responses in a purely functional manner. ZClient leverages the ZIO library\'s capabilities to provide a high-performance, asynchronous, and type-safe HTTP client solution.","sidebar":"ecosystem-sidebar"},"zio-http/reference/endpoint":{"id":"zio-http/reference/endpoint","title":"Endpoint","description":"The Endpoint API in ZIO HTTP, is an alternative way to describe the endpoints but in a declarative way. It is a high-level API that allows us to describe the endpoints and their inputs, outputs, and how they should look. So we can think of it as a DSL for just describing the endpoints, and then we can implement them separately.","sidebar":"ecosystem-sidebar"},"zio-http/reference/handler":{"id":"zio-http/reference/handler","title":"Request Handler","description":"A Handler is responsible for processing the matched incoming request and generating an appropriate response. It is a function that takes a Request and produces a Response. Thus, it is a crucial component of the ZIO HTTP that determines how the server should respond to a request matched by the corresponding RoutePattern.","sidebar":"ecosystem-sidebar"},"zio-http/reference/headers/headers":{"id":"zio-http/reference/headers/headers","title":"Headers","description":"ZIO HTTP provides support for all HTTP headers (as defined in RFC2616) along with custom headers.","sidebar":"ecosystem-sidebar"},"zio-http/reference/headers/session/cookies":{"id":"zio-http/reference/headers/session/cookies","title":"Cookies","description":"Cookies are small pieces of data that websites store on a user\'s browser. They are sent between the client (browser) and server in HTTP requests and responses. Cookies serve various purposes, including session management, user authentication, personalization, and tracking.","sidebar":"ecosystem-sidebar"},"zio-http/reference/headers/session/flash":{"id":"zio-http/reference/headers/session/flash","title":"Flash Messages","description":"Flash messages are temporary short-lived messages that are displayed to users on web applications to inform users about the outcome of certain actions, such as form submissions. These messages are typically stored in session data but are automatically removed after being displayed to the user.","sidebar":"ecosystem-sidebar"},"zio-http/reference/http-codec":{"id":"zio-http/reference/http-codec","title":"HttpCodec","description":"In ZIO HTTP when we work with HTTP requests and responses, we are not dealing with raw bytes but with structured data. This structured data is represented by the Request and Response types. But under the hood, these types are serialized and deserialized to and from raw bytes. This process is handled by HTTP Codecs. We can think of HttpCodec as a pair of functions both for encoding and decoding requests and responses:","sidebar":"ecosystem-sidebar"},"zio-http/reference/index":{"id":"zio-http/reference/index","title":"ZIO HTTP Reference","description":"This section offers a detailed reference for the essential concepts and ideas in the ZIO HTTP library.","sidebar":"ecosystem-sidebar"},"zio-http/reference/overview":{"id":"zio-http/reference/overview","title":"Overview","description":"ZIO HTTP offers an expressive API for creating HTTP applications. It uses a domain-specific language (DSL) to define routes and handlers. Both server and client are designed in terms of HTTP as a function, so they are functions from Request to Response.","sidebar":"ecosystem-sidebar"},"zio-http/reference/request":{"id":"zio-http/reference/request","title":"Request","description":"ZIO HTTP Request is designed in the simplest way possible to decode an HTTP Request into a ZIO HTTP request. It supports all HTTP request methods (as defined in RFC2616 ) and headers along with custom methods and headers.","sidebar":"ecosystem-sidebar"},"zio-http/reference/response/response":{"id":"zio-http/reference/response/response","title":"Response","description":"ZIO HTTP Response is designed to encode HTTP Response.","sidebar":"ecosystem-sidebar"},"zio-http/reference/response/status":{"id":"zio-http/reference/response/status","title":"Status Codes","description":"HTTP status codes are standard response codes given by web services on the Internet. The codes help identify the cause of the problem when a web page or other resource does not load properly.","sidebar":"ecosystem-sidebar"},"zio-http/reference/routing/path_codec":{"id":"zio-http/reference/routing/path_codec","title":"PathCodec","description":"PathCodec[A] represents a codec for paths of type A, comprising segments where each segment can be a literal, an integer, a long, a string, a UUID, or the trailing path.","sidebar":"ecosystem-sidebar"},"zio-http/reference/routing/route_pattern":{"id":"zio-http/reference/routing/route_pattern","title":"RoutePattern","description":"RoutePattern defines a pattern for matching routes by examining both the HTTP method and the path. In addition to specifying a method, patterns contain segment patterns, which can consist of literals, integers, longs, and other segment types.","sidebar":"ecosystem-sidebar"},"zio-http/reference/routing/routes":{"id":"zio-http/reference/routing/routes","title":"Routes","description":"Routes models a collection of routes, each of which is defined by a pattern and a handler. This data type can be thought of as modeling a routing table, which decides where to direct every endpoint in an API based on both method and path of the request.","sidebar":"ecosystem-sidebar"},"zio-http/reference/server":{"id":"zio-http/reference/server","title":"Server","description":"Using the ZIO HTTP Server, we can serve one or more HTTP applications. It provides methods to install HTTP applications into the server. Also it offers a comprehensive Config class that allows fine-grained control over server behavior. We can configure settings such as SSL/TLS, address binding, request decompression and response compression, and more.","sidebar":"ecosystem-sidebar"},"zio-http/reference/socket/socket":{"id":"zio-http/reference/socket/socket","title":"Socket","description":"Websocket support can be added to your Http application using the same Http domain, something like this \u2014","sidebar":"ecosystem-sidebar"},"zio-http/reference/socket/websocketframe":{"id":"zio-http/reference/socket/websocketframe","title":"WebSocketFrame","description":"In the WebSocket protocol, communication happens using frames. ZIO","sidebar":"ecosystem-sidebar"},"zio-insight/developer-notes":{"id":"zio-insight/developer-notes","title":"Developer Notes","description":"","sidebar":"ecosystem-sidebar"},"zio-insight/how-to-contribute":{"id":"zio-insight/how-to-contribute","title":"How to Contribute?","description":"Thank you for your interest in contributing to ZIO, which is a small, zero-dependency library for doing type-safe, composable concurrent and asynchronous programming!"},"zio-insight/index":{"id":"zio-insight/index","title":"Introduction to ZIO Insight","description":"Development CI Badge Sonatype Snapshots ZIO Insight","sidebar":"ecosystem-sidebar"},"zio-interop-guava/index":{"id":"zio-interop-guava/index","title":"Introduction to ZIO Interop Guava","description":"This library provides an interoperability layer with Guava \'s com.google.common.util.concurrent.ListenableFuture.","sidebar":"ecosystem-sidebar"},"zio-interop-reactivestreams/index":{"id":"zio-interop-reactivestreams/index","title":"Introduction to ZIO Interop Reactive Streams","description":"This library provides an interoperability layer between ZIO and reactive streams.","sidebar":"ecosystem-sidebar"},"zio-interop-scalaz/index":{"id":"zio-interop-scalaz/index","title":"Introduction to ZIO Interop Scalaz","description":"This library provides instances for several Scalaz typeclasses.","sidebar":"ecosystem-sidebar"},"zio-interop-twitter/index":{"id":"zio-interop-twitter/index","title":"Introduction to ZIO Interop Twitter","description":"This library provides capability to convert Twitter Future into ZIO Task.","sidebar":"ecosystem-sidebar"},"zio-jdbc/getting-started":{"id":"zio-jdbc/getting-started","title":"Getting Started with ZIO JDBC","description":"Writing Queries","sidebar":"ecosystem-sidebar"},"zio-jdbc/index":{"id":"zio-jdbc/index","title":"Introduction to ZIO JDBC","description":"ZIO JDBC is a ZIO library for JDBC access, providing a small, unopinionated, and ergonomic foundation for directly interacting with JDBC.","sidebar":"ecosystem-sidebar"},"zio-jdbc/installation":{"id":"zio-jdbc/installation","title":"Installation","description":"Installation","sidebar":"ecosystem-sidebar"},"zio-json/configuration":{"id":"zio-json/configuration","title":"Configuration","description":"Field naming","sidebar":"ecosystem-sidebar"},"zio-json/decoding":{"id":"zio-json/decoding","title":"Decoding","description":"Automatic Derivation","sidebar":"ecosystem-sidebar"},"zio-json/encoding":{"id":"zio-json/encoding","title":"Encoding","description":"Automatic Derivation","sidebar":"ecosystem-sidebar"},"zio-json/index":{"id":"zio-json/index","title":"Getting Started with ZIO Json","description":"ZIO Json is a fast and secure JSON library with tight ZIO integration.","sidebar":"ecosystem-sidebar"},"zio-json/interop/akka-http":{"id":"zio-json/interop/akka-http","title":"Akka Http Interop","description":"An interop module is provided for Akka Http 10.2.4","sidebar":"ecosystem-sidebar"},"zio-json/interop/http4s":{"id":"zio-json/interop/http4s","title":"HTTP4s Interop","description":"An interop module is provided for HTTP4s v0.21","sidebar":"ecosystem-sidebar"},"zio-json/interop/index":{"id":"zio-json/interop/index","title":"Interop modules","description":"Integrations are provided several popular libraries, which are published as separate artifacts:","sidebar":"ecosystem-sidebar"},"zio-json/interop/refined":{"id":"zio-json/interop/refined","title":"Refined Interop","description":"Installation","sidebar":"ecosystem-sidebar"},"zio-json/interop/scalaz-7x":{"id":"zio-json/interop/scalaz-7x","title":"Scalaz 7.x Interop","description":"Installation","sidebar":"ecosystem-sidebar"},"zio-json/manual-instances":{"id":"zio-json/manual-instances","title":"Manual Instances","description":"Sometimes it is easier to reuse an existing JsonDecoder rather than generate a new one. This can be accomplished using convenience methods on the JsonDecoder typeclass to derive new decoders:","sidebar":"ecosystem-sidebar"},"zio-json/performance":{"id":"zio-json/performance","title":"Performance","description":"The following benchmarks are freely available to run on your hardware with sbt \\"zioJsonJVM/jmh:run -prof gc\\" and can be extended to include more niche libraries. We only compare zio-json against Circe and Play as they are the incumbent solutions used by most of the Scala ecosystem.","sidebar":"ecosystem-sidebar"},"zio-json/security":{"id":"zio-json/security","title":"Security","description":"A Denial of Service (DOS) attack is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services. The vast majority of public-facing servers written in Scala are vulnerable to DOS attack.","sidebar":"ecosystem-sidebar"},"zio-kafka/consumer-tuning":{"id":"zio-kafka/consumer-tuning","title":"Tuning the consumer","description":"Zio-kafka\'s consumer can be tuned with the ConsumerSettings class.","sidebar":"ecosystem-sidebar"},"zio-kafka/consuming-kafka-topics-using-zio-streams":{"id":"zio-kafka/consuming-kafka-topics-using-zio-streams","title":"Consuming Kafka topics using ZIO Streams","description":"First, create a consumer using the ConsumerSettings instance:","sidebar":"ecosystem-sidebar"},"zio-kafka/example-of-consuming-producing-and-committing-offsets":{"id":"zio-kafka/example-of-consuming-producing-and-committing-offsets","title":"Example of Consuming, Producing and Committing Offsets","description":"This example shows how to consume messages from topic topica and produce transformed messages to topicb, after which consumer offsets are committed. Processing is done in chunks using ZStreamChunk for more efficiency. Please note: ZIO consumer does not support automatic offset committing. As a result, it ignores the Kafka consumer setting enable.auto.commit=true. Developers should manually commit offsets using the provided commit methods, typically after processing messages or at appropriate points in their application logic.","sidebar":"ecosystem-sidebar"},"zio-kafka/index":{"id":"zio-kafka/index","title":"Getting Started with ZIO Kafka","description":"ZIO Kafka is a Kafka client for ZIO. It provides a purely functional, streams-based interface to the Kafka","sidebar":"ecosystem-sidebar"},"zio-kafka/metrics":{"id":"zio-kafka/metrics","title":"Zio-Kafka Metrics","description":"Zio-kafka exposes all the metrics of the wrapped Java based consumer and producer, plus some more metrics about the","sidebar":"ecosystem-sidebar"},"zio-kafka/partition-assignment-and-offset-retrieval":{"id":"zio-kafka/partition-assignment-and-offset-retrieval","title":"Partition Assignment And Offset Retrieval","description":"zio-kafka offers several ways to control which Kafka topics and partitions are assigned to your application.","sidebar":"ecosystem-sidebar"},"zio-kafka/preventing-duplicates":{"id":"zio-kafka/preventing-duplicates","title":"Preventing duplicates","description":"In zio-kafka processing of records runs asynchronously with partition management. This brings substantial performance","sidebar":"ecosystem-sidebar"},"zio-kafka/serialization-and-deserialization":{"id":"zio-kafka/serialization-and-deserialization","title":"Serialization and Deserialization","description":"Zio-kafka deserializes incoming data, and deserializes outgoing data (both keys and values) from byte arrays to any","sidebar":"ecosystem-sidebar"},"zio-kafka/sharing-consumer":{"id":"zio-kafka/sharing-consumer","title":"Sharing a Consumer between multiple streams","description":"Often in a single application, you want to consume from multiple Kafka topics and process each topic in a distinct way. With zio-kafka you can use a single Consumer instance for multiple streams from different topics. It is not only easier to create a single Consumer layer instead of one for each topic, but it may be more resource efficient as well. The underlying Apache Kafka consumer, its thread pool and communication with the Kafka brokers will be shared, resulting in less resource consumption compared to when you create a Consumer instance for every topic.","sidebar":"ecosystem-sidebar"},"zio-kafka/writing-tests":{"id":"zio-kafka/writing-tests","title":"Writing Tests with the `zio-kafka-testkit` library","description":"zio-kafka provides a zio-kafka-testkit library to help you test your code using zio-kafka.","sidebar":"ecosystem-sidebar"},"zio-lambda/index":{"id":"zio-lambda/index","title":"Introduction to ZIO Lambda","description":"A ZIO-based AWS Custom Runtime compatible with GraalVM Native Image.","sidebar":"ecosystem-sidebar"},"zio-logging/console-logger":{"id":"zio-logging/console-logger","title":"Console Logger","description":"logger layer with configuration from config provider:","sidebar":"ecosystem-sidebar"},"zio-logging/file-logger":{"id":"zio-logging/file-logger","title":"File Logger","description":"logger layer with configuration from config provider:","sidebar":"ecosystem-sidebar"},"zio-logging/formatting-log-records":{"id":"zio-logging/formatting-log-records","title":"Formatting Log Records","description":"A LogFormat represents a DSL to describe the format of text log messages.","sidebar":"ecosystem-sidebar"},"zio-logging/index":{"id":"zio-logging/index","title":"Introduction to ZIO Logging","description":"ZIO Logging is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box with integrations for common logging backends.","sidebar":"ecosystem-sidebar"},"zio-logging/jpl":{"id":"zio-logging/jpl","title":"Java Platform/System Logger","description":"Java Platform/System Logger is logging API which was introduced in Java 9.","sidebar":"ecosystem-sidebar"},"zio-logging/jul-bridge":{"id":"zio-logging/jul-bridge","title":"java.util.logging bridge","description":"It is possible to use zio-logging for included java.util.logging Loggers (do not confuse with java.platform.logging),","sidebar":"ecosystem-sidebar"},"zio-logging/log-filter":{"id":"zio-logging/log-filter","title":"Log Filter","description":"A LogFilter represents function/conditions for log filtering.","sidebar":"ecosystem-sidebar"},"zio-logging/logger-context-and-annotations":{"id":"zio-logging/logger-context-and-annotations","title":"Logger Context and Annotations","description":"The logContext fiber reference is used to store typed, structured log","sidebar":"ecosystem-sidebar"},"zio-logging/metrics":{"id":"zio-logging/metrics","title":"Log Metrics","description":"Log metrics collecting metrics related to ZIO logging (all ZIO.log* functions).","sidebar":"ecosystem-sidebar"},"zio-logging/reconfigurable-logger":{"id":"zio-logging/reconfigurable-logger","title":"Reconfigurable Logger","description":"ReconfigurableLogger is adding support for updating logger configuration in application runtime.","sidebar":"ecosystem-sidebar"},"zio-logging/slf4j1":{"id":"zio-logging/slf4j1","title":"SLF4J v1","description":"The Simple Logging Facade for Java (SLF4J v1 - working with JDK8) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j).","sidebar":"ecosystem-sidebar"},"zio-logging/slf4j1-bridge":{"id":"zio-logging/slf4j1-bridge","title":"SLF4J v1 bridge","description":"It is possible to use zio-logging for SLF4J loggers, usually third-party non-ZIO libraries. To do so, import the zio-logging-slf4j-bridge module for SLF4J v1 (working with JDK8):","sidebar":"ecosystem-sidebar"},"zio-logging/slf4j2":{"id":"zio-logging/slf4j2","title":"SLF4J v2","description":"The Simple Logging Facade for Java (SLF4J v2 - using JDK9+ module system JPMS) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j).","sidebar":"ecosystem-sidebar"},"zio-logging/slf4j2-bridge":{"id":"zio-logging/slf4j2-bridge","title":"SLF4J v2 bridge","description":"It is possible to use zio-logging for SLF4J loggers, usually third-party non-ZIO libraries. To do so, import  the zio-logging-slf4j2-bridge module for SLF4J v2 (using JDK9+ module system (JPMS))","sidebar":"ecosystem-sidebar"},"zio-logging/testing":{"id":"zio-logging/testing","title":"Testing","description":"ZIO 2 test library has test logger implementation for testing:","sidebar":"ecosystem-sidebar"},"zio-memberlist/index":{"id":"zio-memberlist/index","title":"Introduction to ZIO Memberlist","description":"ZIO-memberlist let you form cluster of multiply machines and by using gossip protocol which sends periodically messages between nodes maintain cluster and detects failining nodes.","sidebar":"ecosystem-sidebar"},"zio-meta/index":{"id":"zio-meta/index","title":"Introduction to ZIO Meta","description":"Meta-programming helpers","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/getting-started":{"id":"zio-metrics-connectors/getting-started","title":"Getting Started","description":"ZIO Metrics lets you observe everything that goes on in your ZIO application.","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/index":{"id":"zio-metrics-connectors/index","title":"Introduction to ZIO Metrics Connectors","description":"ZIO Metrics Connectors provides integration between ZIO metrics and industry-leading monitoring and observability systems such as","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/datadog-client":{"id":"zio-metrics-connectors/metrics/datadog-client","title":"Datadog Client","description":"In a normal DataDog setup we will find a DataDog agent with an open UDP port where applications send their","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/index":{"id":"zio-metrics-connectors/metrics/index","title":"Metrics","description":"ZIO Metrics enables the instrumentation of any ZIO based application with specialized aspects. The type of the original ZIO effect will not change by adding on or more aspects to it.","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/instrumentation-examples":{"id":"zio-metrics-connectors/metrics/instrumentation-examples","title":"Instrumentation Examples","description":"The trait below is used in the ZIO Metrics sample application just to show how the individual aspects","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/metric-reference":{"id":"zio-metrics-connectors/metrics/metric-reference","title":"ZIO Metric Reference","description":"All ZIO metrics are defined in the form of aspects that can be applied to effects without changing","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/micrometer-connector":{"id":"zio-metrics-connectors/metrics/micrometer-connector","title":"Micrometer Connector","description":"ZIO Metrics has an integration with Micrometer, a powerful metrics instrumentation library.","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/prometheus-client":{"id":"zio-metrics-connectors/metrics/prometheus-client","title":"Prometheus Client","description":"In a normal prometheus setup we will find prometheus agents which query configured endpoints","sidebar":"ecosystem-sidebar"},"zio-metrics-connectors/metrics/statsd-client":{"id":"zio-metrics-connectors/metrics/statsd-client","title":"StatsD Client","description":"In a normal StatsD setup we will find a StatsD agent with an open UDP port where applications send their","sidebar":"ecosystem-sidebar"},"zio-mock/expectation":{"id":"zio-mock/expectation","title":"Expectation","description":"An Expectation[R] is an immutable tree structure that represents expectations on environment R.","sidebar":"ecosystem-sidebar"},"zio-mock/index":{"id":"zio-mock/index","title":"Introduction to ZIO Mock","description":"Development CI Badge Sonatype Releases Sonatype Snapshots javadoc ZIO Mock","sidebar":"ecosystem-sidebar"},"zio-mock/mock":{"id":"zio-mock/mock","title":"Mock","description":"A Mock[R] represents a mockable environment R. It\'s a base abstract class for every service we want to mock.","sidebar":"ecosystem-sidebar"},"zio-nio/blocking":{"id":"zio-nio/blocking","title":"Blocking I/O","description":"The default ZIO runtime assumes that threads will never block, and maintains a small fixed-size thread pool to perform all its operations. If threads become blocked, CPU utilization can be reduced as the number of available threads drops below the number of available CPU cores. If enough threads block, the entire program may halt.","sidebar":"ecosystem-sidebar"},"zio-nio/charsets":{"id":"zio-nio/charsets","title":"Character Sets","description":"The zio.nio.charset package offers an API for ZIO programs to work with character sets, using the Java NIO support for character sets. Any character set supported by your JVM can be used.","sidebar":"ecosystem-sidebar"},"zio-nio/files":{"id":"zio-nio/files","title":"File Channel","description":"An AsynchronousFileChannel provides an API for handling files in a non-blocking way.","sidebar":"ecosystem-sidebar"},"zio-nio/index":{"id":"zio-nio/index","title":"Introduction to ZIO NIO","description":"ZIO-NIO is a ZIO wrapper on Java NIO, an opinionated interface with deep ZIO integration that provides type and resource safety.","sidebar":"ecosystem-sidebar"},"zio-nio/resources":{"id":"zio-nio/resources","title":"Resource Management","description":"NIO offers several objects, primarily channels, that consume resources (such as operating system file handles) that need to be released when no longer needed. If channels are not closed reliably, resource leaks can occur, causing a number of issues.","sidebar":"ecosystem-sidebar"},"zio-nio/sockets":{"id":"zio-nio/sockets","title":"Socket Channel","description":"AsynchronousSocketChannel and AsynchronousServerSocketChannel provide methods for communicating with remote clients.","sidebar":"ecosystem-sidebar"},"zio-nio/use-cases":{"id":"zio-nio/use-cases","title":"Use Cases","description":"So now where to use it? Here you can find some examples to dive into:","sidebar":"ecosystem-sidebar"},"zio-optics/composing-optics":{"id":"zio-optics/composing-optics","title":"Composing Optics","description":"One of the great features of optics is that they compose.","sidebar":"ecosystem-sidebar"},"zio-optics/constructing-optics":{"id":"zio-optics/constructing-optics","title":"Constructing Optics","description":"ZIO Optics comes included with a variety of optics for working with data structures defined in the Scala standard library.","sidebar":"ecosystem-sidebar"},"zio-optics/effectual-optics":{"id":"zio-optics/effectual-optics","title":"Effectual Optics","description":"In addition to \\"pure\\" optics like the ones discussed so far ZIO Optics supports optics where getting and setting involve ZIO or STM effects. This allows using optics to work with ZIO data structures such as TMap.","sidebar":"ecosystem-sidebar"},"zio-optics/index":{"id":"zio-optics/index","title":"Introduction to ZIO Optics","description":"ZIO Optics is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter.","sidebar":"ecosystem-sidebar"},"zio-optics/overview/index":{"id":"zio-optics/overview/index","title":"index","description":""},"zio-optics/understanding-optics":{"id":"zio-optics/understanding-optics","title":"Understanding Optics","description":"ZIO Optics is based on a single representation of an optic as a combination of a getter and a setter.","sidebar":"ecosystem-sidebar"},"zio-optics/using-optics":{"id":"zio-optics/using-optics","title":"Using Optics","description":"We can use optics to work with our data structures using the get, set, and update operators on Optic.","sidebar":"ecosystem-sidebar"},"zio-parser/index":{"id":"zio-parser/index","title":"Introduction to ZIO Parser","description":"Library for constructing parsers and pretty printers based on invertible syntax descriptions","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/abstraction-diagrams":{"id":"zio-prelude/functional-abstractions/abstraction-diagrams","title":"ZIO Prelude Abstraction Diagrams","description":"Absorption","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/associative":{"id":"zio-prelude/functional-abstractions/concrete-types/associative","title":"Associative","description":"Associative[A] describes a way of combining two values of type A that is associative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/commutative":{"id":"zio-prelude/functional-abstractions/concrete-types/commutative","title":"Commutative","description":"Commutative[A] describes a data type that has a combine operator that is commutative and associative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/debug":{"id":"zio-prelude/functional-abstractions/concrete-types/debug","title":"Debug","description":"Debug[A] describes the ability to render a value of type A to a human readable format for debugging purposes.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/equal":{"id":"zio-prelude/functional-abstractions/concrete-types/equal","title":"Equal","description":"Equal[A] describes the ability to compare two values of type A for equality.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/hash":{"id":"zio-prelude/functional-abstractions/concrete-types/hash","title":"Hash","description":"Hash[A] describes the ability to hash a value of type A.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/identity":{"id":"zio-prelude/functional-abstractions/concrete-types/identity","title":"Identity","description":"Identity[A] describes a data type with an associative combining operation that also has an identity element.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/index":{"id":"zio-prelude/functional-abstractions/concrete-types/index","title":"Introduction","description":"ZIO Prelude features a set of fundamental functional abstractions for working with concrete data types.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/inverse":{"id":"zio-prelude/functional-abstractions/concrete-types/inverse","title":"Inverse","description":"Inverse[A] describes a type that has a combine operator and also has an inverse operator that is the inverse of the combine operator.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/concrete-types/ord":{"id":"zio-prelude/functional-abstractions/concrete-types/ord","title":"Ord","description":"Ord[A] describes a total ordering on values of type A.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/index":{"id":"zio-prelude/functional-abstractions/index","title":"Introduction","description":"ZIO Prelude features a next generation approach to functional abstractions. This approach is based on the following ideas:","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/associativeboth":{"id":"zio-prelude/functional-abstractions/parameterized-types/associativeboth","title":"AssociativeBoth","description":"AssociativeBoth[F] describes a way of combining two values F[A] and F[B] into a value F[(A, B)] that is associative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/associativeeither":{"id":"zio-prelude/functional-abstractions/parameterized-types/associativeeither","title":"AssociativeEither","description":"AssociativeEither describes a way of combining two values F[A] and F[B] into a value F[Either[A, B]] that is associative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/associativeflatten":{"id":"zio-prelude/functional-abstractions/parameterized-types/associativeflatten","title":"AssociativeFlatten","description":"AssociativeFlatten[F] describes a way of combining two layers of a value of type F[F[A]] into a F[A] in a way that is associative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/commutativeboth":{"id":"zio-prelude/functional-abstractions/parameterized-types/commutativeboth","title":"CommutativeBoth","description":"CommutativeBoth[F] describes a way of combining two values F[A] and F[B] into a value F[(A, B)] that is commutative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/commutativeeither":{"id":"zio-prelude/functional-abstractions/parameterized-types/commutativeeither","title":"CommutativeEither","description":"CommutativeEither[F] describes a way of combining two parameterized types F[A] and F[B] that is commutative.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/contravariant":{"id":"zio-prelude/functional-abstractions/parameterized-types/contravariant","title":"Contravariant","description":"Contravariant describes a parameterized type F[A] that potentially consumes but never produces A values.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/covariant":{"id":"zio-prelude/functional-abstractions/parameterized-types/covariant","title":"Covariant","description":"Covariant[F] describes a parameterized type F[A] that potentially produces but never consumes A values.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/foreach":{"id":"zio-prelude/functional-abstractions/parameterized-types/foreach","title":"ForEach","description":"ForEach[F] describes a parameterized type F[A] that contains zero or more values of type A.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/identityboth":{"id":"zio-prelude/functional-abstractions/parameterized-types/identityboth","title":"IdentityBoth","description":"IdentityBoth[F] describes an associative way to combine two values F[A] and F[B] into a value F[(A, B)] that also has an identity element of type F[Any].","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/identityeither":{"id":"zio-prelude/functional-abstractions/parameterized-types/identityeither","title":"IdentityEither","description":"IdentityEither[F] describes an associative way to combine two values F[A] and F[B] into a value F[Either[A, B]] with an identity value none of type F[Nothing].","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/identityflatten":{"id":"zio-prelude/functional-abstractions/parameterized-types/identityflatten","title":"IdentityFlatten","description":"IdentityFlatten[F] describes a way of combining two layers of a value of type F[F[A]] into a F[A] in a way that is associative and has an identity value any of type F[Any].","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/index":{"id":"zio-prelude/functional-abstractions/parameterized-types/index","title":"Introduction","description":"In addition to abstractions for concrete types, ZIO Prelude provides a set of functional abstractions to describe the common structure of parameterized types.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/invariant":{"id":"zio-prelude/functional-abstractions/parameterized-types/invariant","title":"Invariant","description":"Invariant[F] describes a parameterized type F[A] that potentially both consumes and produces A values.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach":{"id":"zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach","title":"NonEmptyForEach","description":"NomEmptyForEach[F] describes a parameterized type F[A] that contains one or more values of type A.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/equivalence":{"id":"zio-prelude/functional-data-types/equivalence","title":"Equivalence","description":"An Equivalence[A, B] describes an equivalence relationship between two types A and B.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/index":{"id":"zio-prelude/functional-data-types/index","title":"Functional Data Types in ZIO Prelude","description":"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/nonemptylist":{"id":"zio-prelude/functional-data-types/nonemptylist","title":"NonEmptyList","description":"NonEmptyList represents a List that is guaranteed not to be empty.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/these":{"id":"zio-prelude/functional-data-types/these","title":"These","description":"These[A, B] is a data type that models a value that can be either a Left with a value of type A, a Right with a value of type B, or a Both with both a value of type A and a value of type B.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/validation":{"id":"zio-prelude/functional-data-types/validation","title":"Validation","description":"A Validation[E, A] is a data type that is either a Success with a value of type A or a Failure with one or more errors of type E.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/zset":{"id":"zio-prelude/functional-data-types/zset","title":"ZSet","description":"ZSet is a version of a set that generalizes the measure of \\"how many times\\" each element appears in the set.","sidebar":"ecosystem-sidebar"},"zio-prelude/functional-data-types/zvalidation":{"id":"zio-prelude/functional-data-types/zvalidation","title":"ZValidation","description":"Like many other data types in ZIO, the Validation data type we learned about before is actually a type alias for a more general data type called ZValidation.","sidebar":"ecosystem-sidebar"},"zio-prelude/index":{"id":"zio-prelude/index","title":"Introduction to ZIO Prelude","description":"ZIO Prelude is a lightweight, distinctly Scala take on functional abstractions, with tight ZIO integration.","sidebar":"ecosystem-sidebar"},"zio-prelude/newtypes/index":{"id":"zio-prelude/newtypes/index","title":"New Types","description":"ZIO Prelude provides functionality for creating zero overhead new types to allow you to increase the type safety of your application without compromising performance or ergonomics.","sidebar":"ecosystem-sidebar"},"zio-prelude/resources":{"id":"zio-prelude/resources","title":"ZIO Prelude Resources","description":"- Refactoring Functional Type Classes - slides by John De Goes and Adam Fraser,","sidebar":"ecosystem-sidebar"},"zio-prelude/zpure/index":{"id":"zio-prelude/zpure/index","title":"ZPure","description":"A ZPure[W, S1, S2, R, E, A] is a description of a computation that requires an environment R and an initial state S1 and either fails with an error of type E or succeeds with an updated state of type S2 and a value of type A, in either case also producing a log of type W.","sidebar":"ecosystem-sidebar"},"zio-process/basics":{"id":"zio-process/basics","title":"Basics","description":"To build a description of a command:","sidebar":"ecosystem-sidebar"},"zio-process/getting-started":{"id":"zio-process/getting-started","title":"Getting Started","description":"ZIO Process - a purely functional command and process library based on ZIO.","sidebar":"ecosystem-sidebar"},"zio-process/index":{"id":"zio-process/index","title":"Introduction to ZIO Process","description":"ZIO Process is a simple ZIO library for interacting with external processes and command-line programs.","sidebar":"ecosystem-sidebar"},"zio-process/interactive-processes":{"id":"zio-process/interactive-processes","title":"Interactive Processes","description":"Sometimes you want to interact with a process in a back-and-forth manner by sending requests to the process and receiving responses back. For example, interacting with a repl-like process like node -i, python -i, etc. or an ssh server.","sidebar":"ecosystem-sidebar"},"zio-process/other":{"id":"zio-process/other","title":"Other","description":"Inheriting I/O","sidebar":"ecosystem-sidebar"},"zio-process/piping":{"id":"zio-process/piping","title":"Piping","description":"You can pipe the output of one process as the input to another. For example, if you want to return a list of all running","sidebar":"ecosystem-sidebar"},"zio-profiling/index":{"id":"zio-profiling/index","title":"Introduction to ZIO Profiling","description":"ZIO Profiling is a collection of different profilers for better understanding the runtime behavior of ZIO programs.","sidebar":"ecosystem-sidebar"},"zio-profiling/resources":{"id":"zio-profiling/resources","title":"Resources","description":"Talks","sidebar":"ecosystem-sidebar"},"zio-query/creating-data-sources":{"id":"zio-query/creating-data-sources","title":"Creating Data Sources","description":"To construct a ZQuery that executes a request, you first need to create a DataSource. A DataSource[R, A] requires an environment R and is capable of executing requests of type A. It is defined in terms of:","sidebar":"ecosystem-sidebar"},"zio-query/creating-queries":{"id":"zio-query/creating-queries","title":"Creating Queries","description":"There are several ways to create a ZQuery. We\'ve seen ZQuery.fromRequest, but you can also:","sidebar":"ecosystem-sidebar"},"zio-query/index":{"id":"zio-query/index","title":"Introduction to ZIO Query","description":"ZIO Query is a library for writing optimized queries to data sources in a high-level compositional style. It can add efficient pipelining, batching, and caching to any data source. ZIO Query helps us dramatically reduce load on data sources and improve performance.","sidebar":"ecosystem-sidebar"},"zio-query/running-queries":{"id":"zio-query/running-queries","title":"Running Queries","description":"There are several ways to run a ZQuery:","sidebar":"ecosystem-sidebar"},"zio-quill/additional-resources":{"id":"zio-quill/additional-resources","title":"Additional Resources","description":"Templates","sidebar":"ecosystem-sidebar"},"zio-quill/changelog":{"id":"zio-quill/changelog","title":"Quill Changelog","description":"Starting from the versions superior v4.6.1, the release notes and changelog will be provided in the GitHub Releases of the project.","sidebar":"ecosystem-sidebar"},"zio-quill/code-generation":{"id":"zio-quill/code-generation","title":"Code Generation","description":"Quill now has a highly customizable code generator. Currently, it only supports JDBC but it will soon be extended to other contexts. With a minimal amount of configuration, the code generator takes schemas like this:","sidebar":"ecosystem-sidebar"},"zio-quill/compiler-performance":{"id":"zio-quill/compiler-performance","title":"Compiler performance","description":"Quill will probably make the slow scala compiler even slower, since a lot of additional Parsing, Typechecking, Implicit resolution works introduced to expand a Query.","sidebar":"ecosystem-sidebar"},"zio-quill/contexts":{"id":"zio-quill/contexts","title":"Contexts","description":"Contexts represent the database and provide an execution interface for queries.","sidebar":"ecosystem-sidebar"},"zio-quill/extending-quill":{"id":"zio-quill/extending-quill","title":"Extending Quill","description":"Infix","sidebar":"ecosystem-sidebar"},"zio-quill/getting-started":{"id":"zio-quill/getting-started","title":"Getting Started with Quill","description":"### Scastie is a great tool to try out Quill without having to prepare a local environment. It works with mirror contexts, see this snippet as an example.","sidebar":"ecosystem-sidebar"},"zio-quill/how-to-contribute":{"id":"zio-quill/how-to-contribute","title":"How to Contribute?","description":"Instructions on how to contribute to Quill project.","sidebar":"ecosystem-sidebar"},"zio-quill/index":{"id":"zio-quill/index","title":"Introduction to ZIO Quill","description":"Quill provides a Quoted Domain Specific Language (QDSL) to express queries in Scala and execute them in a target language.","sidebar":"ecosystem-sidebar"},"zio-quill/logging":{"id":"zio-quill/logging","title":"Logging","description":"Logging to a File at Compile-Time","sidebar":"ecosystem-sidebar"},"zio-quill/quill-vs-cassandra":{"id":"zio-quill/quill-vs-cassandra","title":"Quill vs. Cassandra","description":"This document compares Quill to the Datastax Java driver and the Phantom library. This is an incomplete comparison, additions and corrections are welcome.","sidebar":"ecosystem-sidebar"},"zio-quill/quill-vs-slick":{"id":"zio-quill/quill-vs-slick","title":"Quill vs. Slick","description":"This document compares Quill to the Typesafe Slick library. This is an incomplete comparison, additions and corrections are welcome.","sidebar":"ecosystem-sidebar"},"zio-quill/writing-queries":{"id":"zio-quill/writing-queries","title":"Writing Queries","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-redis/index":{"id":"zio-redis/index","title":"Introduction to ZIO Redis","description":"Development CI Badge Sonatype Releases Sonatype Snapshots javadoc ZIO Redis","sidebar":"ecosystem-sidebar"},"zio-rocksdb/index":{"id":"zio-rocksdb/index","title":"Introduction to ZIO RocksDB","description":"A ZIO-based interface to RocksDB.","sidebar":"ecosystem-sidebar"},"zio-s3/index":{"id":"zio-s3/index","title":"Introduction to ZIO S3","description":"Thin wrapper over S3 async client for ZIO","sidebar":"ecosystem-sidebar"},"zio-sbt/developer-notes":{"id":"zio-sbt/developer-notes","title":"Developer Notes","description":"Todo List"},"zio-sbt/index":{"id":"zio-sbt/index","title":"ZIO SBT","description":"ZIO SBT contains multiple sbt plugins that are useful for ZIO projects. It provides high-level SBT utilities that simplify the development of ZIO applications.","sidebar":"ecosystem-sidebar"},"zio-schema/automatic-schema-derivation":{"id":"zio-schema/automatic-schema-derivation","title":"Automatic Schema Derivation","description":"Automatic schema derivation is the process of generating schema definitions for data types automatically, without the need to manually write them. It allows us to generate the schema for a data type based on its structure and annotations.","sidebar":"ecosystem-sidebar"},"zio-schema/basic-building-blocks":{"id":"zio-schema/basic-building-blocks","title":"Basic Building Blocks","description":"To get started, first we need to understand that a ZIO Schema is basically built-up from these three","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/avro":{"id":"zio-schema/derivations/codecs/avro","title":"Apache Avro Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/bson":{"id":"zio-schema/derivations/codecs/bson","title":"Bson Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/index":{"id":"zio-schema/derivations/codecs/index","title":"Introduction to ZIO Schema Codecs","description":"Once we generate a schema for a type, we can derive a codec for that type.","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/json":{"id":"zio-schema/derivations/codecs/json","title":"JSON Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/message-pack":{"id":"zio-schema/derivations/codecs/message-pack","title":"MessagePack Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/protobuf":{"id":"zio-schema/derivations/codecs/protobuf","title":"Protobuf Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/codecs/thrift":{"id":"zio-schema/derivations/codecs/thrift","title":"Apache Thrift Codecs","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/optics-derivation":{"id":"zio-schema/derivations/optics-derivation","title":"Optics Derivation","description":"Optics are a way of accessing and manipulating data in a functional way. They can be used to get, set, and update values in data structures, as well as to traverse and explore data.","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/ordering-derivation":{"id":"zio-schema/derivations/ordering-derivation","title":"Ordering Derivation","description":"Standard Scala library provides a type class called Ordering[A] that allows us to compare values of type A. ZIO Schema provides a method called ordering that generates an Ordering[A] instance for the underlying type described by the schema:","sidebar":"ecosystem-sidebar"},"zio-schema/derivations/zio-test-gen-derivation":{"id":"zio-schema/derivations/zio-test-gen-derivation","title":"Derivation of ZIO Test Generators","description":"Introduction","sidebar":"ecosystem-sidebar"},"zio-schema/examples/combining-different-encoders":{"id":"zio-schema/examples/combining-different-encoders","title":"Combining Different Encoders","description":"Let\'s take a look at a round-trip converting an object to JSON and back, then converting it to a protobuf and back. This is a simple example, but it shows how to combine different encoders to achieve a round-trip.","sidebar":"ecosystem-sidebar"},"zio-schema/examples/mapping-dto-to-domain-object":{"id":"zio-schema/examples/mapping-dto-to-domain-object","title":"Mapping DTO to Domain Object","description":"When we write layered applications, where different layers are decoupled from each other, we need to transfer data between layers. For example, assume we have a layer that has Person data type and it receives JSON string of type PersonDTO from another layer. We need to convert PersonDTO to Person and maybe vice versa.","sidebar":"ecosystem-sidebar"},"zio-schema/index":{"id":"zio-schema/index","title":"Introduction to ZIO Schema","description":"ZIO Schema is a ZIO-based library for modeling the schema of data structures as first-class values.","sidebar":"ecosystem-sidebar"},"zio-schema/integration-with-zio-streams":{"id":"zio-schema/integration-with-zio-streams","title":"Integration with ZIO Streams","description":"In addition to the regular encode and decode functions, each codec also has a streaming version of these functions called streamEncoder and streamDecoder. By invoking these methods on codecs, we can obtain a ZPipeline where the encoder and decoder are integrated into the ZPipeline stream transformer."},"zio-schema/manual-schema-construction":{"id":"zio-schema/manual-schema-construction","title":"Manual Schema Construction","description":"Assume we have a domain containing following models:","sidebar":"ecosystem-sidebar"},"zio-schema/motivation":{"id":"zio-schema/motivation","title":"The Motivation Behind ZIO Schema","description":"ZIO Schema is a library used in many ZIO projects such as ZIO Flow, ZIO Redis, ZIO Web, ZIO SQL and ZIO DynamoDB. It is all about reification of our types. Reification means transforming something abstract (e.g. side effects, accessing fields, structure)  into something \\"real\\" (values).","sidebar":"ecosystem-sidebar"},"zio-schema/operations/diffing-and-patching":{"id":"zio-schema/operations/diffing-and-patching","title":"Diffing and Patching","description":"ZIO Schema provides two methods called diff and patch:","sidebar":"ecosystem-sidebar"},"zio-schema/operations/dynamic-data-representation":{"id":"zio-schema/operations/dynamic-data-representation","title":"Dynamic Data Representation","description":"DynamicValue is a way to describe the entire universe of possibilities for schema values. It does that in a way that we can interact with and introspect the data with its structure (type information). The structure of the data is baked into the data itself.","sidebar":"ecosystem-sidebar"},"zio-schema/operations/index":{"id":"zio-schema/operations/index","title":"ZIO Schema Operations","description":"Once we have defined our schemas, we can use them to perform a variety of operations. In this section, we will explore some of the most common operations that we can perform on schemas.","sidebar":"ecosystem-sidebar"},"zio-schema/operations/schema-migration":{"id":"zio-schema/operations/schema-migration","title":"Schema Migration","description":"Automatic Migration","sidebar":"ecosystem-sidebar"},"zio-schema/operations/schema-serialization":{"id":"zio-schema/operations/schema-serialization","title":"Serialization of the Schema Itself","description":"In distributed systems, we often need to move computations to data instead of moving data to computations. The data is big and the network is slow, so moving it is expensive and sometimes impossible due to the volume of data. So in distributed systems, we would like to move our functions to the data and apply the data to the functions and gather the results back.","sidebar":"ecosystem-sidebar"},"zio-schema/operations/the-default-value":{"id":"zio-schema/operations/the-default-value","title":"Getting The Default Value","description":"ZIO Schema provides a method called defaultValue that returns the default value of the underlying type described by the schema. This method returns a scala.util.Either[String, A] value, where A is the type described by the schema. If the schema does not have a default value, the method returns a Left value containing an error message. Otherwise, it returns a Right value containing the default value:","sidebar":"ecosystem-sidebar"},"zio-schema/operations/transforming-schemas":{"id":"zio-schema/operations/transforming-schemas","title":"Transforming Schemas","description":"Using the Schema#transform method, we can transform a Schema[A] into a Schema[B] by supplying two functions that can transform between A and B.  In normal Scala code this would be the equivalent of map, but with isomorphism property.","sidebar":"ecosystem-sidebar"},"zio-schema/operations/validation":{"id":"zio-schema/operations/validation","title":"Validation","description":"When we create a schema for a type, we can also specify validation rules for the type. Validations are a way to ensure that the data conforms to certain rules.","sidebar":"ecosystem-sidebar"},"zio-schema/standard-type-reference":{"id":"zio-schema/standard-type-reference","title":"Standard Type Reference","description":"ZIO Schema provides a number of built-in primitive types, that we can use to represent our data. These can be seen in the following table:","sidebar":"ecosystem-sidebar"},"zio-schema/use-cases":{"id":"zio-schema/use-cases","title":"ZIO Schema Use cases","description":"ZIO Schema allows us to create representations of our data types as values.","sidebar":"ecosystem-sidebar"},"zio-sql/deep-dive":{"id":"zio-sql/deep-dive","title":"Deep dive","description":"Inserts in depth","sidebar":"ecosystem-sidebar"},"zio-sql/index":{"id":"zio-sql/index","title":"Introduction to ZIO SQL","description":"ZIO SQL lets you write type-safe, type-inferred, and composable SQL queries in ordinary Scala, helping you prevent persistence bugs before they happen, and leverage your IDE to make writing SQL productive, safe, and fun.","sidebar":"ecosystem-sidebar"},"zio-sqs/index":{"id":"zio-sqs/index","title":"Introduction to ZIO SQS","description":"This library is a ZIO-powered client for AWS SQS. It is built on top of the AWS SDK for Java 2.0 via the automatically generated wrappers from zio-aws.","sidebar":"ecosystem-sidebar"},"zio-streams-compress/index":{"id":"zio-streams-compress/index","title":"Compression and archives with zio-streams","description":"ZIO Streams Compress integrates several compression algorithms and","sidebar":"ecosystem-sidebar"},"zio-telemetry/index":{"id":"zio-telemetry/index","title":"Introduction to ZIO Telemetry","description":"ZIO telemetry is purely-functional and type-safe. It provides clients for","sidebar":"ecosystem-sidebar"},"zio-telemetry/opencensus":{"id":"zio-telemetry/opencensus","title":"OpenCensus","description":"OpenCensus is a stats collection and distributed tracing framework. Well known implementations are Jaeger","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentelemetry":{"id":"zio-telemetry/opentelemetry","title":"OpenTelemetry","description":"OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, and export telemetry data for analysis in order to understand your software\'s performance and behavior. Well known implementations are Jaeger and Zipkin.","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentelemetry-example":{"id":"zio-telemetry/opentelemetry-example","title":"OpenTelemetry Example","description":"You can find the source code here.","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentelemetry-instrumentation-example":{"id":"zio-telemetry/opentelemetry-instrumentation-example","title":"OpenTelemetry Automatic Instrumentation Example","description":"You can find the source code here.","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentelemetry-zio-logging":{"id":"zio-telemetry/opentelemetry-zio-logging","title":"OpenTelemetry ZIO Logging","description":"zio-opentelemetry logging facilities are implemented around OpenTelemetry Logging.","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentracing":{"id":"zio-telemetry/opentracing","title":"OpenTracing","description":"OpenTracing is a standard and API for distributed tracing, i.e. collecting timings,","sidebar":"ecosystem-sidebar"},"zio-telemetry/opentracing-example":{"id":"zio-telemetry/opentracing-example","title":"OpenTracing Example","description":"You can find the source code here.","sidebar":"ecosystem-sidebar"},"zio-webhooks/index":{"id":"zio-webhooks/index","title":"Introduction to ZIO Webhooks","description":"ZIO Webhooks is a microlibrary for reliable and persistent webhook delivery.","sidebar":"ecosystem-sidebar"},"zio2-interop-cats2/index":{"id":"zio2-interop-cats2/index","title":"ZIO 2.x Interoperation with Cats 2.x","description":"Installation","sidebar":"ecosystem-sidebar"}}}}')}}]);