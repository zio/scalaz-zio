"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6508],{9075:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"zio-kafka/metrics","title":"Zio-Kafka Metrics","description":"Zio-kafka exposes all the metrics of the wrapped Java based consumer and producer, plus some more metrics about the","source":"@site/docs/zio-kafka/metrics.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/metrics","permalink":"/zio-kafka/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/metrics.md","tags":[],"version":"current","frontMatter":{"id":"metrics","title":"Zio-Kafka Metrics"},"sidebar":"ecosystem-sidebar","previous":{"title":"Partition Assignment And Offset Retrieval","permalink":"/zio-kafka/partition-assignment-and-offset-retrieval"},"next":{"title":"Tuning the consumer","permalink":"/zio-kafka/consumer-tuning"}}');var t=r(74848),n=r(28453);const c={id:"metrics",title:"Zio-Kafka Metrics"},d=void 0,o={},a=[{value:"Java client metrics",id:"java-client-metrics",level:2},{value:"Zio-kafka consumer metrics",id:"zio-kafka-consumer-metrics",level:2},{value:"Poll metrics",id:"poll-metrics",level:3},{value:"Partition stream metrics",id:"partition-stream-metrics",level:3},{value:"Commit metrics",id:"commit-metrics",level:3},{value:"Aggregated commit metrics",id:"aggregated-commit-metrics",level:3},{value:"Rebalance metrics",id:"rebalance-metrics",level:3},{value:"Runloop metrics",id:"runloop-metrics",level:3},{value:"Example",id:"example",level:2}];function l(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Zio-kafka exposes all the metrics of the wrapped Java based consumer and producer, plus some more metrics about the\nzio-kafka consumer itself."}),"\n",(0,t.jsx)(s.h2,{id:"java-client-metrics",children:"Java client metrics"}),"\n",(0,t.jsxs)(s.p,{children:["The metrics from the Java metrics can be obtained via the ",(0,t.jsx)(s.code,{children:"Consumer.metrics"})," and ",(0,t.jsx)(s.code,{children:"Producer.metrics"})," methods. Both\nreturn a live view on the internal metrics of the consumer/producer. We currently do not expose these metrics elsewhere,\na PR to copy them to the zio-metrics API is welcome."]}),"\n",(0,t.jsx)(s.h2,{id:"zio-kafka-consumer-metrics",children:"Zio-kafka consumer metrics"}),"\n",(0,t.jsx)(s.p,{children:"The zio-kafka consumer collects some additional metrics using the zio-metrics API. This allows any zio-metrics backend\nto access and process the observed values."}),"\n",(0,t.jsxs)(s.p,{children:["By default, no tags are added. Tags can be configured via ",(0,t.jsx)(s.code,{children:"ConsumerSettings.withMetricsLabels"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"Like the zio-metrics we follow Prometheus conventions. This means that:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"durations are expressed in seconds,"}),"\n",(0,t.jsx)(s.li,{children:"counters can only increase,"}),"\n",(0,t.jsx)(s.li,{children:"metric names use snake_case and end in the unit where possible."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The histograms each use 10 buckets. To reach a decent range while keeping sufficient accuracy at the low end, most\nbucket boundaries use an exponential series based on \ud835\udc52."}),"\n",(0,t.jsx)(s.h3,{id:"poll-metrics",children:"Poll metrics"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counter"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_polls"})}),(0,t.jsx)(s.td,{children:"The number of polls."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_poll_latency_seconds"})}),(0,t.jsx)(s.td,{children:"The duration of a single poll in seconds."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_poll_size"})}),(0,t.jsx)(s.td,{children:"The number of records fetched by a single poll."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"gauge"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_resumed_in_latest_poll"})}),(0,t.jsx)(s.td,{children:"The number of partitions resumed in the latest poll call."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"gauge"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_paused_in_latest_poll"})}),(0,t.jsx)(s.td,{children:"The number of partitions paused in the latest poll call (because of backpressure)."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counter"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_poll_auth_errors"})}),(0,t.jsx)(s.td,{children:"The number of polls that ended with an authentication or authorization error."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"partition-stream-metrics",children:"Partition stream metrics"}),"\n",(0,t.jsx)(s.p,{children:"These metrics are updated after every poll."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_pending_requests"})}),(0,t.jsx)(s.td,{children:"The number of partitions that ran out of records (the queue is empty)."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_queue_size"})}),(0,t.jsx)(s.td,{children:"The number of records queued for a partition."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_all_queue_size"})}),(0,t.jsx)(s.td,{children:"The total number of records queued for all partitions."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_queue_polls"})}),(0,t.jsx)(s.td,{children:"The number of polls during which records are idling in a queue."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"commit-metrics",children:"Commit metrics"}),"\n",(0,t.jsx)(s.p,{children:"These metrics measure the separate commit requests issued through zio-kafka's api."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_pending_commits"})}),(0,t.jsx)(s.td,{children:"The number of commits that are awaiting completion."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_commits"})}),(0,t.jsx)(s.td,{children:"The number of commits."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_commit_latency_seconds"})}),(0,t.jsx)(s.td,{children:"The duration of a commit in seconds."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"aggregated-commit-metrics",children:"Aggregated commit metrics"}),"\n",(0,t.jsx)(s.p,{children:"After every poll zio-kafka combines all outstanding commit requests into 1 aggregated commit. These metrics are for the aggregated commits."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_aggregated_commits"})}),(0,t.jsx)(s.td,{children:"The number of aggregated commits."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_aggregated_commit_latency_seconds"})}),(0,t.jsx)(s.td,{children:"The duration of an aggregated commit in seconds."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_aggregated_commit_size"})}),(0,t.jsx)(s.td,{children:"An approximation of the number of records (offsets) per aggregated commit."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"rebalance-metrics",children:"Rebalance metrics"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_rebalances"})}),(0,t.jsx)(s.td,{children:"The number of rebalances."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"gauge"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_currently_assigned"})}),(0,t.jsx)(s.td,{children:"The number of partitions currently assigned to the consumer."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_assigned"})}),(0,t.jsx)(s.td,{children:"The number of partitions assigned to the consumer."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_revoked"})}),(0,t.jsx)(s.td,{children:"The number of partitions revoked to the consumer."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"counterInt"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_partitions_lost"})}),(0,t.jsx)(s.td,{children:"The number of partitions lost to the consumer."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"runloop-metrics",children:"Runloop metrics"}),"\n",(0,t.jsx)(s.p,{children:"These metrics are updated after every poll."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"gauge"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_subscription_state"})}),(0,t.jsx)(s.td,{children:"Whether the consumer is subscribed (1) or not (0)."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_command_queue_size"})}),(0,t.jsx)(s.td,{children:"The number of commands queued in the consumer."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"histogram"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ziokafka_consumer_commit_queue_size"})}),(0,t.jsx)(s.td,{children:"The number of commits queued in the consumer."})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"https://github.com/zio/zio-kafka/blob/master/zio-kafka/src/main/scala/zio/kafka/consumer/internal/ConsumerMetrics.scala",children:"ConsumerMetrics.scala"})," for the exact details."]}),"\n",(0,t.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.p,{children:"Here is an example dashboard that could be built with these metrics:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"metrics-dashboard.png",src:r(22802).A+"",width:"2854",height:"1786"})})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},22802:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/metrics-dashboard-d29a3a164e44ab236a20e3bf91e7d155.png"},28453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>d});var i=r(96540);const t={},n=i.createContext(t);function c(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);