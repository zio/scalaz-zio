"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[76892],{36301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"zio-http/examples/multipart-form-data","title":"Multipart Form Data Example","description":"Multipart Form Data Example","source":"@site/docs/zio-http/examples/multipart-form-data.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/multipart-form-data","permalink":"/zio-http/examples/multipart-form-data","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/multipart-form-data.md","tags":[],"version":"current","frontMatter":{"id":"multipart-form-data","title":"Multipart Form Data Example","sidebar_label":"Multipart Form Data"},"sidebar":"ecosystem-sidebar","previous":{"title":"Concrete Entity","permalink":"/zio-http/examples/concrete-entity"},"next":{"title":"Server Sent Events in Endpoints","permalink":"/zio-http/examples/server-sent-events-in-endpoints"}}');var r=n(74848),o=n(28453);const s={id:"multipart-form-data",title:"Multipart Form Data Example",sidebar_label:"Multipart Form Data"},i=void 0,l={},d=[{value:"Multipart Form Data Example",id:"multipart-form-data-example",level:2},{value:"Multipart Form Data Streaming Example",id:"multipart-form-data-streaming-example",level:2}];function m(e){const t={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"multipart-form-data-example",children:"Multipart Form Data Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/MultipartFormData.scala" ',children:'package example\n\nimport scala.annotation.nowarn\n\nimport zio._\n\nimport zio.http._\n\nobject MultipartFormData extends ZIOAppDefault {\n\n  private val routes: Routes[Any, Response] =\n    Routes(\n      Method.POST / "upload" ->\n        handler { (req: Request) =>\n          if (req.header(Header.ContentType).exists(_.mediaType == MediaType.multipart.`form-data`))\n            for {\n              form     <- req.body.asMultipartForm\n                .mapError(ex =>\n                  Response(\n                    Status.InternalServerError,\n                    body = Body.fromString(s"Failed to decode body as multipart/form-data (${ex.getMessage}"),\n                  ),\n                )\n              response <- form.get("file") match {\n                case Some(file) =>\n                  file match {\n                    case FormField.Binary(_, data, contentType, transferEncoding, filename) =>\n                      ZIO.succeed(\n                        Response.text(\n                          s"Received ${data.length} bytes of $contentType filename $filename and transfer encoding $transferEncoding",\n                        ),\n                      )\n                    case _                                                                  =>\n                      ZIO.fail(\n                        Response(Status.BadRequest, body = Body.fromString("Parameter \'file\' must be a binary file")),\n                      )\n                  }\n                case None       =>\n                  ZIO.fail(Response(Status.BadRequest, body = Body.fromString("Missing \'file\' from body")))\n              }\n            } yield response\n          else ZIO.succeed(Response(status = Status.NotFound))\n        },\n    ).sandbox\n\n  @nowarn("msg=dead code")\n  private def program: ZIO[Client & Server, Throwable, Unit] =\n    for {\n      port         <- Server.install(routes)\n      _            <- ZIO.logInfo(s"Server started on port $port")\n      client       <- ZIO.service[Client]\n      response     <- client\n        .host("localhost")\n        .port(port)\n        .batched(\n          Request.post(\n            "/upload",\n            Body.fromMultipartForm(\n              Form(\n                FormField.binaryField(\n                  "file",\n                  Chunk.fromArray("Hello, world!".getBytes),\n                  MediaType.application.`octet-stream`,\n                  filename = Some("hello.txt"),\n                ),\n              ),\n              Boundary("AaB03x"),\n            ),\n          ),\n        )\n      responseBody <- response.body.asString\n      _            <- ZIO.logInfo(s"Response: [${response.status}] $responseBody")\n      _            <- ZIO.never\n    } yield ()\n\n  override def run =\n    program.provide(Server.default, Client.default)\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"multipart-form-data-streaming-example",children:"Multipart Form Data Streaming Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/MultipartFormDataStreaming.scala" ',children:'package example\n\nimport scala.annotation.nowarn\n\nimport zio._\n\nimport zio.stream.{ZSink, ZStream}\n\nimport zio.http._\n\nobject MultipartFormDataStreaming extends ZIOAppDefault {\n\n  private val routes: Routes[Any, Response] =\n    Routes(\n      Method.POST / "upload-simple"    -> handler { (req: Request) =>\n        for {\n          count <- req.body.asStream.run(ZSink.count)\n          _     <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload-nonstream" -> handler { (req: Request) =>\n        for {\n          form <- req.body.asMultipartForm\n          count = form.formData.collect {\n            case sb: FormField.Binary =>\n              sb.data.size\n            case _                    => 0\n          }.sum\n          _ <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload-collect"   -> handler { (req: Request) =>\n        for {\n          sform <- req.body.asMultipartFormStream\n          form  <- sform.collectAll\n          count = form.formData.collect {\n            case sb: FormField.Binary =>\n              sb.data.size\n            case _                    => 0\n          }.sum\n          _ <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload"           -> handler { (req: Request) =>\n        if (req.header(Header.ContentType).exists(_.mediaType == MediaType.multipart.`form-data`))\n          for {\n            _     <- ZIO.debug("Starting to read multipart/form stream")\n            form  <- req.body.asMultipartFormStream\n              .mapError(ex =>\n                Response(\n                  Status.InternalServerError,\n                  body = Body.fromString(s"Failed to decode body as multipart/form-data (${ex.getMessage}"),\n                ),\n              )\n            count <- form.fields.flatMap {\n              case sb: FormField.StreamingBinary =>\n                sb.data\n              case _                             =>\n                ZStream.empty\n            }.run(ZSink.count)\n\n            _ <- ZIO.debug(s"Finished reading multipart/form stream, received $count bytes of data")\n          } yield Response.text(count.toString)\n        else ZIO.succeed(Response(status = Status.NotFound))\n      },\n    ).sandbox @@ Middleware.debug\n\n  @nowarn("msg=dead code")\n  private def program: ZIO[Server, Throwable, Unit] =\n    for {\n      port <- Server.install(routes)\n      _    <- ZIO.logInfo(s"Server started on port $port")\n      _    <- ZIO.never\n    } yield ()\n\n  override def run =\n    program\n      .provide(\n        ZLayer.succeed(Server.Config.default.enableRequestStreaming),\n        Server.live,\n      )\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);