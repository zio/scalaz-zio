"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2008],{23542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"reference/sync/concurrentset","title":"ConcurrentSet","description":"A ConcurrentSet is a Set wrapper over java.util.concurrent.ConcurrentHashMap.","source":"@site/docs/reference/sync/concurrentset.md","sourceDirName":"reference/sync","slug":"/reference/sync/concurrentset","permalink":"/reference/sync/concurrentset","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/sync/concurrentset.md","tags":[],"version":"current","frontMatter":{"id":"concurrentset","title":"ConcurrentSet"},"sidebar":"reference-sidebar","previous":{"title":"ConcurrentMap","permalink":"/reference/sync/concurrentmap"},"next":{"title":"Introduction to Concurrent Programming in ZIO","permalink":"/reference/concurrency/"}}');var s=n(74848),d=n(28453);const i={id:"concurrentset",title:"ConcurrentSet"},c=void 0,l={},h=[{value:"Creation",id:"creation",level:2},{value:"Update Operations",id:"update-operations",level:2},{value:"Adding Values",id:"adding-values",level:3},{value:"Updating Values",id:"updating-values",level:3},{value:"Removing Values",id:"removing-values",level:3},{value:"Retrieval Operations",id:"retrieval-operations",level:2},{value:"Example Usage",id:"example-usage",level:2}];function o(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"ConcurrentSet"})," is a Set wrapper over ",(0,s.jsx)(t.code,{children:"java.util.concurrent.ConcurrentHashMap"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"creation",children:"Creation"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"empty[A]: UIO[ConcurrentSet[A]]"})}),(0,s.jsxs)(t.td,{children:["Makes an empty ",(0,s.jsx)(t.code,{children:"ConcurrentSet"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"empty[A](initialCapacity: Int): UIO[ConcurrentSet[A]]"})}),(0,s.jsxs)(t.td,{children:["Makes an empty ",(0,s.jsx)(t.code,{children:"ConcurrentSet"})," with initial capacity"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"fromIterable[A](as: Iterable[(A)]): UIO[ConcurrentSet[A]]"})}),(0,s.jsxs)(t.td,{children:["Makes a new ",(0,s.jsx)(t.code,{children:"ConcurrentSet"})," initialized with the provided collection"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"make[A](as: A*): UIO[ConcurrentSet[A]]"})}),(0,s.jsxs)(t.td,{children:["Makes a new ",(0,s.jsx)(t.code,{children:"ConcurrentSet"})," initialized with the provided elements"]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"update-operations",children:"Update Operations"}),"\n",(0,s.jsxs)(t.p,{children:["Basic operations are provided to manipulate the values in the ",(0,s.jsx)(t.code,{children:"ConcurrentSet"}),":"]}),"\n",(0,s.jsx)(t.h3,{id:"adding-values",children:"Adding Values"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"add(x: A): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Adds a new value."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"addAll(xs: Iterable[A]): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Adds all new values."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"updating-values",children:"Updating Values"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"transform(f: A => A): UIO[Unit]"})}),(0,s.jsx)(t.td,{children:"Transform all elements of the ConcurrentSet using the given function."})]})})]}),"\n",(0,s.jsx)(t.h3,{id:"removing-values",children:"Removing Values"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"remove(x: A): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Removes the entry for the given value if it is mapped to an existing element."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"removeAll(xs: Iterable[A]): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Removes all the entries for the given values if they are mapped to an existing element."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"removeIf(p: A => Boolean): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Removes all elements which satisfy the given predicate."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"retainAll(xs: Iterable[A]): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Retain all the entries for the given values if they are mapped to an existing element."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"retainIf(p: A => Boolean): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Removes all elements which do not satisfy the given predicate."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"clear: UIO[Unit]"})}),(0,s.jsx)(t.td,{children:"Removes all elements."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"retrieval-operations",children:"Retrieval Operations"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Method"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"collectFirst[B](pf: PartialFunction[(A, B)): UIO[Option[B]]"})}),(0,s.jsx)(t.td,{children:"Finds the first element of a set for which the partial function is defined and applies the function to it."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"exists(p: A => Boolean): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Tests whether a given predicate holds true for at least one element in the set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"fold[R, E, S](zero: S)(f: (S, A) => S): UIO[S]"})}),(0,s.jsx)(t.td,{children:"Folds the elements of a set using the given binary operator."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"forall(p: A => Boolean): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Tests whether a predicate is satisfied by all elements of a set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"find[B](p: A => Boolean): UIO[Option[A]]"})}),(0,s.jsx)(t.td,{children:"Retrieves the elements in which predicate is satisfied."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"contains(x: A): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Tests whether if the element is in the set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"containsAll(xs: Iterable[A]): UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"Tests if the elements in the collection are a subset of the set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"size: UIO[Int]"})}),(0,s.jsx)(t.td,{children:"Number of elements in the set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"isEmpty: UIO[Boolean]"})}),(0,s.jsx)(t.td,{children:"True if there are no elements in the set."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"toSet: UIO[Set[A]]"})}),(0,s.jsx)(t.td,{children:"Convert the ConcurrentSet to Set."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(t.p,{children:"Given:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import zio.concurrent.ConcurrentSet\n\nfor {\n  emptySet  <- ConcurrentSet.empty[Int] \n  setA      <- ConcurrentSet.make[Int](1, 2, 3, 4)\n} yield ()\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Operation"}),(0,s.jsx)(t.th,{children:"Result"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"emptySet.add(1).toSet"})}),(0,s.jsx)(t.td,{children:"Set(1)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.addAll(Chunk(5, 6).toSet)"})}),(0,s.jsx)(t.td,{children:"Set(1, 2, 3, 4, 5, 6)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.remove(1).toSet"})}),(0,s.jsx)(t.td,{children:"Set(2, 3, 4)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.removeAll(1, 3).toSet"})}),(0,s.jsx)(t.td,{children:"Set(2, 4)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.retainAll(List(1, 3, 5, 6)).toSet"})}),(0,s.jsx)(t.td,{children:"Set(1, 3)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.clear.isEmpty"})}),(0,s.jsx)(t.td,{children:"true"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.contains(5)"})}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.containsAll(Chunk(1, 2, 3))"})}),(0,s.jsx)(t.td,{children:"true"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.exists(_ > 4)"})}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.forAll(_ < 5)"})}),(0,s.jsx)(t.td,{children:"true"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.removeIf(_ % 2 == 0)"})}),(0,s.jsx)(t.td,{children:"Set(1, 3)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.retainIf(_ % 2 == 0)"})}),(0,s.jsx)(t.td,{children:"Set(2, 4)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.find(_ > 2)"})}),(0,s.jsx)(t.td,{children:"Set(3, 4)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:'setA.collectFirst { case 3 => "Three" }'})}),(0,s.jsx)(t.td,{children:"Set(3)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.size"})}),(0,s.jsx)(t.td,{children:"4"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.transform(_ + 10)"})}),(0,s.jsx)(t.td,{children:"Set(11, 12, 13, 14)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"setA.fold(0)(_ + _)"})}),(0,s.jsx)(t.td,{children:"10"})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(96540);const s={},d=r.createContext(s);function i(e){const t=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(d.Provider,{value:t},e.children)}}}]);