"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[30423],{25475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"zio-schema/manual-schema-construction","title":"Manual Schema Construction","description":"Assume we have a domain containing following models:","source":"@site/docs/zio-schema/manual-schema-construction.md","sourceDirName":"zio-schema","slug":"/zio-schema/manual-schema-construction","permalink":"/zio-schema/manual-schema-construction","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/manual-schema-construction.md","tags":[],"version":"current","frontMatter":{"id":"manual-schema-construction","title":"Manual Schema Construction"},"sidebar":"ecosystem-sidebar","previous":{"title":"Standard Type Reference","permalink":"/zio-schema/standard-type-reference"},"next":{"title":"Automatic Schema Derivation","permalink":"/zio-schema/automatic-schema-derivation"}}');var r=t(74848),c=t(28453);const s={id:"manual-schema-construction",title:"Manual Schema Construction"},o=void 0,i={},m=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Assume we have a domain containing following models:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object Domain {\n  final case class Person(name: String, age: Int)\n\n  sealed trait PaymentMethod\n\n  object PaymentMethod {\n    final case class CreditCard(number: String, expirationMonth: Int, expirationYear: Int) extends PaymentMethod\n    final case class WireTransfer(accountNumber: String, bankCode: String) extends PaymentMethod\n  }\n\n  final case class Customer(person: Person, paymentMethod: PaymentMethod)\n  \n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Let's begin by creating a schema for the ",(0,r.jsx)(n.code,{children:"Person"})," data type:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import zio.schema._\n\nfinal case class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    Schema.CaseClass2[String, Int, Person](\n      id0 = TypeId.fromTypeName("Person"),\n      field01 = Schema.Field(name0 = "name", schema0 = Schema[String], get0 = _.name, set0 = (p, x) => p.copy(name = x)),\n      field02 = Schema.Field(name0 = "age", schema0 = Schema[Int], get0 = _.age, set0 = (person, age) => person.copy(age = age)),\n      construct0 = (name, age) => Person(name, age),\n    )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The next step is writing schema for ",(0,r.jsx)(n.code,{children:"PaymentMethod"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema._\n\nsealed trait PaymentMethod\n\nobject PaymentMethod {\n  implicit val schema: Schema[PaymentMethod] =\n    Schema.Enum2[CreditCard, WireTransfer, PaymentMethod](\n      id = TypeId.fromTypeName("PaymentMethod"),\n      case1 = Schema.Case[PaymentMethod, CreditCard](\n        id = "CreditCard",\n        schema = CreditCard.schema,\n        unsafeDeconstruct = pm => pm.asInstanceOf[PaymentMethod.CreditCard],\n        construct = cc => cc.asInstanceOf[PaymentMethod],\n        isCase = _.isInstanceOf[PaymentMethod.CreditCard],\n        annotations = Chunk.empty\n      ),\n      case2 = Schema.Case[PaymentMethod, WireTransfer](\n        id = "WireTransfer",\n        schema = WireTransfer.schema,\n        unsafeDeconstruct = pm => pm.asInstanceOf[PaymentMethod.WireTransfer],\n        construct = wt => wt.asInstanceOf[PaymentMethod],\n        isCase = _.isInstanceOf[PaymentMethod.WireTransfer],\n        annotations = Chunk.empty\n      )\n    )\n\n  final case class CreditCard(\n      number: String,\n      expirationMonth: Int,\n      expirationYear: Int\n  ) extends PaymentMethod\n\n  object CreditCard {\n    implicit val schema: Schema[CreditCard] =\n      Schema.CaseClass3[String, Int, Int, CreditCard](\n        id0 = TypeId.fromTypeName("CreditCard"),\n        field01 = Schema.Field[CreditCard, String](\n          name0 = "number",\n          schema0 = Schema.primitive[String],\n          get0 = _.number,\n          set0 = (cc, n) => cc.copy(number = n)\n        ),\n        field02 = Schema.Field[CreditCard, Int](\n          name0 = "expirationMonth",\n          schema0 = Schema.primitive[Int],\n          get0 = _.expirationMonth,\n          set0 = (cc, em) => cc.copy(expirationMonth = em)\n        ),\n        field03 = Schema.Field[CreditCard, Int](\n          name0 = "expirationYear",\n          schema0 = Schema.primitive[Int],\n          get0 = _.expirationYear,\n          set0 = (cc, ey) => cc.copy(expirationYear = ey)\n        ),\n        construct0 = (n, em, ey) => CreditCard(n, em, ey)\n      )\n  }\n\n  final case class WireTransfer(accountNumber: String, bankCode: String)\n      extends PaymentMethod\n\n  object WireTransfer {\n    implicit val schema: Schema[WireTransfer] =\n      Schema.CaseClass2[String, String, WireTransfer](\n        id0 = TypeId.fromTypeName("WireTransfer"),\n        field01 = Schema.Field[WireTransfer, String](\n          name0 = "accountNumber",\n          schema0 = Schema.primitive[String],\n          get0 = _.accountNumber,\n          set0 = (wt, an) => wt.copy(accountNumber = an)\n        ),\n        field02 = Schema.Field[WireTransfer, String](\n          name0 = "bankCode",\n          schema0 = Schema.primitive[String],\n          get0 = _.bankCode,\n          set0 = (wt, bc) => wt.copy(bankCode = bc)\n        ),\n        construct0 = (ac, bc) => WireTransfer(ac, bc)\n      )\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And finally, we need to define the schema for the ",(0,r.jsx)(n.code,{children:"Customer"})," data type:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema._\n\nfinal case class Customer(person: Person, paymentMethod: PaymentMethod)\n\nobject Customer {\n  implicit val schema: Schema[Customer] =\n    Schema.CaseClass2[Person, PaymentMethod, Customer](\n      id0 = TypeId.fromTypeName("Customer"),\n      field01 = Schema.Field[Customer, Person](\n        name0 = "person",\n        schema0 = Person.schema,\n        get0 = _.person,\n        set0 = (c, p) => c.copy(person = p)\n      ),\n      field02 = Schema.Field[Customer, PaymentMethod](\n        name0 = "paymentMethod",\n        schema0 = Schema[PaymentMethod],\n        get0 = _.paymentMethod,\n        set0 = (c, pm) => c.copy(paymentMethod = pm)\n      ),\n      construct0 = (p, pm) => Customer(p, pm)\n    )\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now that we have written all the required schemas, we can proceed to create encoders and decoders (codecs) for each of our domain models."}),"\n",(0,r.jsxs)(n.p,{children:["Let's start with writing protobuf codecs. We need to add the following line to our ",(0,r.jsx)(n.code,{children:"build.sbt"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema-protobuf" % 1.5.0\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here's an example that demonstrates a roundtrip test for protobuf codecs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import zio.schema._\nimport zio.schema.codec._\nimport zio.schema.codec.ProtobufCodec._\n\n// Create a customer instance\nval customer =\n  Customer(\n    person = Person("John Doe", 42),\n    paymentMethod = PaymentMethod.CreditCard("1000100010001000", 6, 2024)\n  )\n\n// Create binary codec from customer \nval customerCodec: BinaryCodec[Customer] =\n  ProtobufCodec.protobufCodec[Customer]\n\n// Encode the customer object\nval encodedCustomer: Chunk[Byte] = customerCodec.encode(customer)\n\n// Decode the byte array back to the person instance\nval decodedCustomer: Either[DecodeError, Customer] =\n  customerCodec.decode(encodedCustomer)\n\nassert(Right(customer) == decodedCustomer)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const r={},c=a.createContext(r);function s(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);