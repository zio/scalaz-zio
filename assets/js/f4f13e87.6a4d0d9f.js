"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71021],{27432:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"reference/stream/zchannel/composing-channels","title":"Composing Channels","description":"We can write more complex channels by using read operators and composing them recursively.","source":"@site/docs/reference/stream/zchannel/composing-channels.md","sourceDirName":"reference/stream/zchannel","slug":"/reference/stream/zchannel/composing-channels","permalink":"/reference/stream/zchannel/composing-channels","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zchannel/composing-channels.md","tags":[],"version":"current","frontMatter":{"id":"composing-channels","title":"Composing Channels"},"sidebar":"reference-sidebar","previous":{"title":"Creating Channels","permalink":"/reference/stream/zchannel/creating-channels"},"next":{"title":"Running a Channel","permalink":"/reference/stream/zchannel/running-a-channel"}}');var l=t(74848),r=t(28453);const i={id:"composing-channels",title:"Composing Channels"},o=void 0,s={},c=[{value:"Simple Echo Channel",id:"simple-echo-channel",level:2},{value:"Echo Channel Forever",id:"echo-channel-forever",level:2},{value:"Replicator Channel",id:"replicator-channel",level:2},{value:"Counter Channel",id:"counter-channel",level:2},{value:"Dedupe Channel",id:"dedupe-channel",level:2},{value:"Buffered Channel",id:"buffered-channel",level:2}];function h(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["We can write more complex channels by using ",(0,l.jsx)(n.code,{children:"read"})," operators and composing them recursively."]}),"\n",(0,l.jsx)(n.p,{children:"Let's try some examples:"}),"\n",(0,l.jsx)(n.h2,{id:"simple-echo-channel",children:"Simple Echo Channel"}),"\n",(0,l.jsxs)(n.p,{children:["Assume we want to read a value from the input port and then print it to the console, we can use the ",(0,l.jsx)(n.code,{children:"ZChannel.readWith"})," operator to do this:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\n\nval producer = \n  ZChannel.write(1)\n  \nval consumer = \n  ZChannel.readWith(\n    (i: Int) => ZChannel.fromZIO(Console.printLine("Consumed: " + i)),\n    (_: Any) => ZChannel.unit,\n    (_: Any) => ZChannel.unit\n  )\n\n(producer >>> consumer).run\n// Output:\n// Consumed: 1\n'})}),"\n",(0,l.jsx)(n.h2,{id:"echo-channel-forever",children:"Echo Channel Forever"}),"\n",(0,l.jsx)(n.p,{children:"We can also recursively compose channels to create a more complex channel. In the following example, we are going to continuously read values from the console and write them back to the console:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.stream.ZChannel\n\nimport java.io.IOException\n\nobject MainApp extends ZIOAppDefault {\n  val producer: ZChannel[Any, Any, Any, Any, IOException, String, Nothing] =\n    ZChannel\n      .fromZIO(Console.readLine("Please enter some text: "))\n      .flatMap(i => ZChannel.write(i) *> producer)\n\n  val consumer: ZChannel[Any, Any, String, Any, IOException, Nothing, Unit] =\n    ZChannel.readWith(\n      (i: String) => i match {\n        case "exit" => ZChannel.unit\n        case _ => ZChannel.fromZIO(Console.printLine("Consumed: " + i)) *> consumer\n      },\n      (_: Any) => ZChannel.unit,\n      (_: Any) => ZChannel.unit\n    )\n\n  def run = (producer >>> consumer).run\n}\n\n// Output:\n// Please enter some text: Foo\n// Consumed: Foo\n// Please enter some text: Bar\n// Consumed: Bar\n// Please enter some text: Baz\n// Consumed: Baz\n// Please enter some text: exit\n'})}),"\n",(0,l.jsx)(n.h2,{id:"replicator-channel",children:"Replicator Channel"}),"\n",(0,l.jsx)(n.p,{children:"In this example, we are going to create a channel that replicates any input values to the output port."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.stream._\n\nobject MainApp extends ZIOAppDefault {\n  lazy val doubler: ZChannel[Any, Any, Int, Any, Nothing, Int, Unit] =\n    ZChannel.readWith(\n      (i: Int) => ZChannel.writeAll(i, i) *> doubler,\n      (_: Any) => ZChannel.unit,\n      (_: Any) => ZChannel.unit\n    )\n  def run = (ZChannel.writeAll(1,2,3,4,5) >>> doubler).runCollect.debug\n}\n// Output:\n//   (Chunk(1,1,2,2,3,3,4,4,5,5),())\n"})}),"\n",(0,l.jsx)(n.h2,{id:"counter-channel",children:"Counter Channel"}),"\n",(0,l.jsxs)(n.p,{children:["We can also use ",(0,l.jsx)(n.code,{children:"Ref"})," to create a channel with an updatable state. For example, we can create a channel that keeps track number of all the values that it has read and finally returns it as the done value:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\n\nobject MainApp extends ZIOAppDefault {\n  val counter = {\n      def count(c: Int): ZChannel[Any, Any, Int, Any, String, Int, Int] =\n        ZChannel.readWith(\n          (i: Int) => ZChannel.write(i) *> count(c + 1),\n          (_: Any) => ZChannel.fail("error"),\n          (_: Any) => ZChannel.succeed(c)\n        )\n\n      count(0)\n    }\n\n  def run = (ZChannel.writeAll(1, 2, 3, 4, 5) >>> counter).runCollect.debug\n}\n\n// Output:\n// (Chunk(1,2,3,4,5), 5)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"dedupe-channel",children:"Dedupe Channel"}),"\n",(0,l.jsx)(n.p,{children:"Sometimes we want to remove duplicate values from the input port. We need to have a state that keeps track of the values that have been seen. So if a value is seen for the first time, we can write it to the output port. If a value is duplicated, we can ignore it:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.stream._\n\nimport scala.collection.immutable.HashSet\n\nobject MainApp extends ZIOAppDefault {\n  val dedup =\n    ZChannel.fromZIO(Ref.make[HashSet[Int]](HashSet.empty)).flatMap { ref =>\n      lazy val inner: ZChannel[Any, Any, Int, Any, Nothing, Int, Unit] =\n        ZChannel.readWith(\n          (i: Int) =>\n            ZChannel\n              .fromZIO(ref.modify(s => (s contains i, s incl i)))\n              .flatMap {\n                case true  => ZChannel.unit\n                case false => ZChannel.write(i)\n              } *> inner,\n          (_: Any) => ZChannel.unit,\n          (_: Any) => ZChannel.unit\n        )\n      inner\n    }\n\n  def run =\n    (ZChannel.writeAll(1, 2, 2, 3, 3, 4, 2, 5, 5) >>> dedup).runCollect.debug\n}\n// Output:\n// (Chunk(1,2,3,4,5),())\n"})}),"\n",(0,l.jsx)(n.h2,{id:"buffered-channel",children:"Buffered Channel"}),"\n",(0,l.jsxs)(n.p,{children:["With help of ",(0,l.jsx)(n.code,{children:"ZChannel.buffer"})," or ",(0,l.jsx)(n.code,{children:"ZChannel.bufferChunk"}),", we can create a channel backed by a buffer."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"If the buffer is full, the channel puts the values in the buffer to the output port."}),"\n",(0,l.jsx)(n.li,{children:"If the buffer is empty, the channel reads the value from the input port and puts it in the output port."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Assume we have a channel written as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.stream._\n\ndef buffered(input: Int) =\n  ZChannel\n    .fromZIO(Ref.make(input))\n    .flatMap { ref =>\n      ZChannel.buffer[Any, Int, Unit](\n        0,\n        i => if (i == 0) true else false,\n        ref\n      )\n    }\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If the buffer is empty (zero value), the ",(0,l.jsx)(n.code,{children:"buffered"})," channel passes the ",(0,l.jsx)(n.code,{children:"1"})," to the output port:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"(ZChannel.write(1) >>> buffered(0)).runCollect.debug\n"})}),"\n",(0,l.jsx)(n.p,{children:"If the buffer is full, the channel puts the value from the buffer to the output port:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",children:"(ZChannel.write(1) >>> buffered(0)).runCollect.debug\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const l={},r=a.createContext(l);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);