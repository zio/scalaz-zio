"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[51056],{28453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>a});var i=s(96540);const n={},t=i.createContext(n);function o(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(t.Provider,{value:r},e.children)}},64997:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/interop/with-reactive-streams","title":"How to Interop with Reactive Streams?","description":"Checkout the interop-reactive-streams module for inter-operation support.","source":"@site/versioned_docs/version-1.0.18/guides/interop/with-reactive-streams.md","sourceDirName":"guides/interop","slug":"/guides/interop/with-reactive-streams","permalink":"/1.0.18/guides/interop/with-reactive-streams","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/guides/interop/with-reactive-streams.md","tags":[],"version":"1.0.18","frontMatter":{"id":"with-reactive-streams","title":"How to Interop with Reactive Streams?"},"sidebar":"overview_sidebar","previous":{"title":"How to Interop with Scalaz 7.x?","permalink":"/1.0.18/guides/interop/with-scalaz-7x"},"next":{"title":"How to Interop with Twitter?","permalink":"/1.0.18/guides/interop/with-twitter"}}');var n=s(74848),t=s(28453);const o={id:"with-reactive-streams",title:"How to Interop with Reactive Streams?"},a=void 0,c={},l=[{value:"Reactive Streams <code>Producer</code> and <code>Subscriber</code>",id:"reactive-streams-producer-and-subscriber",level:2},{value:"Examples",id:"examples",level:2},{value:"Publisher to Stream",id:"publisher-to-stream",level:3},{value:"Subscriber to Sink",id:"subscriber-to-sink",level:3},{value:"Stream to Publisher",id:"stream-to-publisher",level:3},{value:"Sink to Subscriber",id:"sink-to-subscriber",level:3}];function d(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["Checkout the ",(0,n.jsx)(r.a,{href:"https://github.com/zio/interop-reactive-streams",children:(0,n.jsx)(r.code,{children:"interop-reactive-streams"})})," module for inter-operation support."]}),"\n",(0,n.jsxs)(r.h2,{id:"reactive-streams-producer-and-subscriber",children:["Reactive Streams ",(0,n.jsx)(r.code,{children:"Producer"})," and ",(0,n.jsx)(r.code,{children:"Subscriber"})]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"ZIO"})," integrates with ",(0,n.jsx)(r.a,{href:"http://reactivestreams.org",children:"Reactive Streams"})," by providing conversions from ",(0,n.jsx)(r.code,{children:"zio.stream.Stream"})," to ",(0,n.jsx)(r.code,{children:"org.reactivestreams.Publisher"}),"\nand from ",(0,n.jsx)(r.code,{children:"zio.stream.Sink"})," to ",(0,n.jsx)(r.code,{children:"org.reactivestreams.Subscriber"})," and vice versa. Simply import ",(0,n.jsx)(r.code,{children:"import zio.interop.reactivestreams._"})," to make the\nconversions available."]}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.p,{children:"First, let's get a few imports out of the way."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"import org.reactivestreams.example.unicast._\nimport zio._\nimport zio.interop.reactivestreams._\nimport zio.stream._\n\nval runtime = Runtime.default\n"})}),"\n",(0,n.jsxs)(r.p,{children:["We use the following ",(0,n.jsx)(r.code,{children:"Publisher"})," and ",(0,n.jsx)(r.code,{children:"Subscriber"})," for the examples:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val publisher = new RangePublisher(3, 10)\nval subscriber = new SyncSubscriber[Int] {\n  override protected def whenNext(v: Int): Boolean = {\n    print(s"$v, ")\n    true\n  }\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"publisher-to-stream",children:"Publisher to Stream"}),"\n",(0,n.jsxs)(r.p,{children:["A ",(0,n.jsx)(r.code,{children:"Publisher"})," used as a ",(0,n.jsx)(r.code,{children:"Stream"})," buffers up to ",(0,n.jsx)(r.code,{children:"qSize"})," elements. If possible, ",(0,n.jsx)(r.code,{children:"qSize"})," should be\na power of two for best performance. The default is 16."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"val streamFromPublisher = publisher.toStream(qSize = 16)\nruntime.unsafeRun(\n  streamFromPublisher.run(Sink.collectAll[Integer])\n)\n"})}),"\n",(0,n.jsx)(r.h3,{id:"subscriber-to-sink",children:"Subscriber to Sink"}),"\n",(0,n.jsxs)(r.p,{children:["When running a ",(0,n.jsx)(r.code,{children:"Stream"})," to a ",(0,n.jsx)(r.code,{children:"Subscriber"}),", a side channel is needed for signalling failures.\nFor this reason ",(0,n.jsx)(r.code,{children:"toSink"})," returns a tuple of ",(0,n.jsx)(r.code,{children:"Promise"})," and ",(0,n.jsx)(r.code,{children:"Sink"}),". The ",(0,n.jsx)(r.code,{children:"Promise"})," must be failed\non ",(0,n.jsx)(r.code,{children:"Stream"})," failure. The type parameter on ",(0,n.jsx)(r.code,{children:"toSink"})," is the error type of ",(0,n.jsx)(r.em,{children:"the Stream"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:'val asSink = subscriber.toSink[Throwable]\nval failingStream = Stream.range(3, 13) ++ Stream.fail(new RuntimeException("boom!"))\nruntime.unsafeRun(\n  asSink.flatMap { case (errorP, sink) =>\n    failingStream.run(sink).catchAll(errorP.fail)\n  }\n)\n'})}),"\n",(0,n.jsx)(r.h3,{id:"stream-to-publisher",children:"Stream to Publisher"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"val stream = Stream.range(3, 13)\nruntime.unsafeRun(\n  stream.toPublisher.flatMap { publisher =>\n    UIO(publisher.subscribe(subscriber))\n  }\n)\n"})}),"\n",(0,n.jsx)(r.h3,{id:"sink-to-subscriber",children:"Sink to Subscriber"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"toSubscriber"})," returns a ",(0,n.jsx)(r.code,{children:"Subscriber"})," and an ",(0,n.jsx)(r.code,{children:"IO"})," which completes with the result of running the\n",(0,n.jsx)(r.code,{children:"Sink"})," or the error if the ",(0,n.jsx)(r.code,{children:"Publisher"})," fails.\nA ",(0,n.jsx)(r.code,{children:"Sink"})," used as a ",(0,n.jsx)(r.code,{children:"Subscriber"})," buffers up to ",(0,n.jsx)(r.code,{children:"qSize"})," elements. If possible, ",(0,n.jsx)(r.code,{children:"qSize"})," should be\na power of two for best performance. The default is 16."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-scala",children:"val sink = Sink.collectAll[Integer]\nruntime.unsafeRun(\n  sink.toSubscriber(qSize = 16).flatMap { case (subscriber, result) => \n    UIO(publisher.subscribe(subscriber)) *> result\n  }\n)\n"})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);