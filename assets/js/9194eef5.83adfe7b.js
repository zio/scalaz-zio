"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[44607],{82405:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>r,frontMatter:()=>m,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"zio-cli/examples","title":"Advanced example","description":"This example implements some git commands. The workflow is the one used before:","source":"@site/docs/zio-cli/examples.md","sourceDirName":"zio-cli","slug":"/zio-cli/examples","permalink":"/zio-cli/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/examples.md","tags":[],"version":"current","frontMatter":{"id":"examples","title":"Advanced example"},"sidebar":"ecosystem-sidebar","previous":{"title":"SBT Plugin","permalink":"/zio-cli/sbt-plugin"},"next":{"title":"ZIO Cache","permalink":"/zio-cache/"}}');var i=o(74848),a=o(28453);const m={id:"examples",title:"Advanced example"},s=void 0,d={},c=[];function l(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This example implements some git commands. The workflow is the one used before:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define options and arguments"}),"\n",(0,i.jsx)(n.li,{children:"Construct a command"}),"\n",(0,i.jsxs)(n.li,{children:["Transform command using ",(0,i.jsx)(n.code,{children:"map"})," to change the type parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Construct CLI app using ",(0,i.jsx)(n.code,{children:"CliApp.make"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.Console.printLine\nimport zio.cli.HelpDoc.Span.text\nimport zio.cli._\n\nimport java.nio.file.{Path => JPath}\n\nobject GitExample extends ZIOCliDefault {\n  import java.nio.file.Path\n\n  sealed trait Subcommand extends Product with Serializable\n  object Subcommand {\n    final case class Add(modified: Boolean, directory: JPath) extends Subcommand\n    final case class Remote(verbose: Boolean)                 extends Subcommand\n    object Remote {\n      sealed trait RemoteSubcommand extends Subcommand\n      final case class Add(name: String, url: String) extends RemoteSubcommand\n      final case class Remove(name: String)           extends RemoteSubcommand\n    }\n  }\n\n  val modifiedFlag: Options[Boolean] = Options.boolean("m")\n\n  val addHelp: HelpDoc = HelpDoc.p("Add subcommand description")\n  val add =\n    Command("add", modifiedFlag, Args.directory("directory")).withHelp(addHelp).map { case (modified, directory) =>\n      Subcommand.Add(modified, directory)\n    }\n\n  val verboseFlag: Options[Boolean] = Options.boolean("verbose").alias("v")\n  val configPath: Options[Path]     = Options.directory("c", Exists.Yes)\n\n  val remoteAdd = {\n    val remoteAddHelp: HelpDoc = HelpDoc.p("Add remote subcommand description")\n    Command("add", Options.text("name") ++ Options.text("url")).withHelp(remoteAddHelp).map { case (name, url) =>\n      Subcommand.Remote.Add(name, url)\n    }\n  }\n\n  val remoteRemove = {\n    val remoteRemoveHelp: HelpDoc = HelpDoc.p("Remove remote subcommand description")\n    Command("remove", Args.text("name")).withHelp(remoteRemoveHelp).map(Subcommand.Remote.Remove)\n  }\n\n  val remoteHelp: HelpDoc = HelpDoc.p("Remote subcommand description")\n  val remote = {\n    Command("remote", verboseFlag)\n      .withHelp(remoteHelp)\n      .map(Subcommand.Remote(_))\n      .subcommands(remoteAdd, remoteRemove)\n      .map(_._2)\n  }\n\n  val git: Command[Subcommand] =\n    Command("git", Options.none, Args.none).subcommands(add, remote)\n\n  val cliApp = CliApp.make(\n    name = "Git Version Control",\n    version = "0.9.2",\n    summary = text("a client for the git dvcs protocol"),\n    command = git\n  ) {\n    case Subcommand.Add(modified, directory) =>\n      printLine(s"Executing `git add $directory` with modified flag set to $modified")\n    case Subcommand.Remote.Add(name, url) =>\n      printLine(s"Executing `git remote add $name $url`")\n    case Subcommand.Remote.Remove(name) =>\n      printLine(s"Executing `git remote remove $name`")\n    case Subcommand.Remote(verbose) =>\n      printLine(s"Executing `git remote` with verbose flag set to $verbose")\n\n  }\n}\n\nobject Example2 extends scala.App {\n  println(GitExample.git.helpDoc.toPlaintext())\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:" COMMANDS\n\n  - add [-m] <directory>      Add subcommand description\n  - remote [(-v, --verbose)]  Remote subcommand description\n"})})]})}function r(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>m,x:()=>s});var t=o(96540);const i={},a=t.createContext(i);function m(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:m(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);