"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[5265],{57218:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"zio-flow/execution","title":"Execution","description":"The data structures and operators in the zio-flow library only describe a ZIO Flow program. To execute them we need","source":"@site/docs/zio-flow/execution.md","sourceDirName":"zio-flow","slug":"/zio-flow/execution","permalink":"/zio-flow/execution","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-flow/execution.md","tags":[],"version":"current","frontMatter":{"id":"execution","title":"Execution"},"sidebar":"ecosystem-sidebar","previous":{"title":"Activities","permalink":"/zio-flow/activities"},"next":{"title":"Backends","permalink":"/zio-flow/backends"}}');var s=i(74848),r=i(28453);const o={id:"execution",title:"Execution"},l="Execution",d={},c=[{value:"Embedding the persistent executor",id:"embedding-the-persistent-executor",level:2},{value:"<code>run</code>",id:"run",level:3},{value:"<code>start</code> and <code>poll</code>",id:"start-and-poll",level:3},{value:"<code>restartAll</code>",id:"restartall",level:3},{value:"<code>delete</code>",id:"delete",level:3},{value:"<code>pause</code>, <code>resume</code> and <code>abort</code>",id:"pause-resume-and-abort",level:3},{value:"<code>getAll</code>",id:"getall",level:3},{value:"<code>forceGarbageCollection</code>",id:"forcegarbagecollection",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"<code>DurableLog</code>",id:"durablelog",level:4},{value:"<code>KeyValueStore</code>",id:"keyvaluestore",level:4},{value:"<code>Configuration</code>",id:"configuration",level:4},{value:"<code>OperationExecutor</code>",id:"operationexecutor",level:4},{value:"<code>Serializer</code> and <code>Deserializer</code>",id:"serializer-and-deserializer",level:4},{value:"ZIO Flow Server",id:"zio-flow-server",level:2},{value:"Running the server",id:"running-the-server",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"HTTP retry policies",id:"http-retry-policies",level:4},{value:"REST API",id:"rest-api",level:3},{value:"<code>GET /healthcheck</code>",id:"get-healthcheck",level:4},{value:"<code>GET /metrics</code>",id:"get-metrics",level:4},{value:"<code>GET /templates</code>",id:"get-templates",level:4},{value:"<code>GET /templates/&lt;templateId&gt;</code>",id:"get-templatestemplateid",level:4},{value:"<code>PUT /templates/&lt;templateId&gt;</code>",id:"put-templatestemplateid",level:4},{value:"<code>DELETE /templates/&lt;templateId&gt;</code>",id:"delete-templatestemplateid",level:4},{value:"<code>POST /flows</code>",id:"post-flows",level:4},{value:"<code>GET /flows</code>",id:"get-flows",level:4},{value:"<code>GET /flows/&lt;flowId&gt;</code>",id:"get-flowsflowid",level:4},{value:"<code>DELETE /flows/&lt;flowId&gt;</code>",id:"delete-flowsflowid",level:4},{value:"<code>POST /flows/&lt;flowId&gt;/pause</code>",id:"post-flowsflowidpause",level:4},{value:"<code>POST /flows/&lt;flowId&gt;/resume</code>",id:"post-flowsflowidresume",level:4},{value:"<code>POST /flows/&lt;flowId&gt;/abort</code>",id:"post-flowsflowidabort",level:4},{value:"Metrics",id:"metrics",level:2},{value:"Custom operation executor",id:"custom-operation-executor",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"execution",children:"Execution"})}),"\n",(0,s.jsxs)(n.p,{children:["The data structures and operators in the ",(0,s.jsx)(n.code,{children:"zio-flow"})," library only ",(0,s.jsx)(n.em,{children:"describe"})," a ZIO Flow program. To execute them we need\na persistent executor configured with a chosen set of dependencies. Most of the executor implementation is in\nthe ",(0,s.jsx)(n.code,{children:"zio-flow-runtime"})," module, with some backend-specific extra modules discussed in the ",(0,s.jsx)(n.a,{href:"backends",children:"backends"})," section."]}),"\n",(0,s.jsx)(n.p,{children:"There are two main ways to execute a ZIO Flow program:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Embedding ",(0,s.jsx)(n.code,{children:"zio-flow-runtime"})," in your own application, using the ",(0,s.jsx)(n.code,{children:"PersistentExecutor"})," service"]}),"\n",(0,s.jsxs)(n.li,{children:["Use the default ",(0,s.jsx)(n.em,{children:"ZIO Flow Server"})," which is an executable service application built on top of ",(0,s.jsx)(n.code,{children:"zio-flow-runtime"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"embedding-the-persistent-executor",children:"Embedding the persistent executor"}),"\n",(0,s.jsx)(n.p,{children:"To embed the ZIO Flow executor in your own application, you need to add the following dependency:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-flow-runtime" % "1.0.0-RC4"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then you can initialize the ",(0,s.jsx)(n.code,{children:"PersistentExecutor"})," service with the following method on its companion object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"def make(gcPeriod: Duration = 5.minutes): ZLayer[\n  DurableLog with\n    KeyValueStore with\n    Configuration with\n    OperationExecutor with\n    Serializer with\n    Deserializer, Nothing, ZFlowExecutor]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is a ",(0,s.jsx)(n.code,{children:"ZLayer"})," creating a ",(0,s.jsx)(n.code,{children:"ZFlowExecutor"}),". Let's see first what this interface is capable of, then we'll see how to\ncreate the required dependencies."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ZFlowExecutor"})," interface has the following methods:"]}),"\n",(0,s.jsx)(n.h3,{id:"run",children:(0,s.jsx)(n.code,{children:"run"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"run"})," submits a flow to the executor, and waits until it completes. The failure/success of the flow is represented as\nthe failure/result of this ",(0,s.jsx)(n.code,{children:"ZIO"})," effect."]}),"\n",(0,s.jsxs)(n.p,{children:["To make this work ZIO Flow needs a ",(0,s.jsx)(n.code,{children:"Schema"})," for both the error type and the result type. This is how the executor's\nresult can be converted to the expected type."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"run"})," method expects that the provided ",(0,s.jsx)(n.code,{children:"ZFlow"})," has no input requirements (it's ",(0,s.jsx)(n.code,{children:"R"})," parameter is ",(0,s.jsx)(n.code,{children:"Any"}),"). If you need\nto run a flow that requires an input, you can first use ",(0,s.jsx)(n.code,{children:".provide"})," on it to provide the input, and then run it."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's see an example, assuming that we have ",(0,s.jsx)(n.code,{children:"ZFlowExecutor"})," in the environment of our ZIO program:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.flow._\nimport zio.flow.runtime._\n\nval flow: ZFlow[Int, String, Int] = ZFlow.input[Int].flatMap { n =>\n  ZFlow.ifThenElse(n > 10)(ifTrue = ZFlow.succeed(1), ifFalse = ZFlow.fail("input is too low"))\n}\n\ndef program: ZIO[ZFlowExecutor, String, Int] =\n  ZFlowExecutor.run(FlowId("test1"), flow.provide(5))\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"FlowId"})," is a unique identifier for ",(0,s.jsx)(n.em,{children:"an execution"})," of the flow. It is the caller's responsibility to generate a\nfresh identifier in case the flow has to be started from scratch. If a flow with the given identifier is already\nrunning, or it's persisted state is available, the execution of that flow will continue and the method will wait for the\nresult of that execution."]}),"\n",(0,s.jsxs)(n.h3,{id:"start-and-poll",children:[(0,s.jsx)(n.code,{children:"start"})," and ",(0,s.jsx)(n.code,{children:"poll"})]}),"\n",(0,s.jsxs)(n.p,{children:["An alternative to ",(0,s.jsx)(n.code,{children:"run"})," is to just ",(0,s.jsx)(n.em,{children:"start"})," the execution of a flow with the ",(0,s.jsx)(n.code,{children:"start"})," method, without waiting for its\ncompletion. The running workflow's state can be later queries with ",(0,s.jsx)(n.code,{children:"poll"}),". The start method actually returns with\na ",(0,s.jsx)(n.code,{children:"DurablePromise"})," that can be directly used to wait for the result of the flow, but it is much simpler to use\nthe ",(0,s.jsx)(n.code,{children:"poll"})," method instead."]}),"\n",(0,s.jsxs)(n.p,{children:["Another difference is that ",(0,s.jsx)(n.code,{children:"start"})," and ",(0,s.jsx)(n.code,{children:"poll"})," does not use the flow's error and result types. The polled result\nrepresents both failures and errors as ",(0,s.jsx)(n.code,{children:"DynamicValue"})," values. This is a generic data type from the ",(0,s.jsx)(n.code,{children:"zio-schema"})," library\nthat can represent any value that has a ",(0,s.jsx)(n.code,{children:"Schema"}),". By owning such a ",(0,s.jsx)(n.code,{children:"Schema"})," you can convert back the dynamic value to\nits original type. You can learn more about how ",(0,s.jsx)(n.code,{children:"DynamicValue"})," is used in the internals of ZIO Flow in\nthe ",(0,s.jsx)(n.a,{href:"internals",children:"internals"})," page."]}),"\n",(0,s.jsx)(n.h3,{id:"restartall",children:(0,s.jsx)(n.code,{children:"restartAll"})}),"\n",(0,s.jsxs)(n.p,{children:["When the executor is initialized, it is not running any flows, even if there were previously running flows persisted\nthat could be resumed. To start running these persisted flows, you can call the ",(0,s.jsx)(n.code,{children:"restartAll"})," method. This will load and\nimmediately resume every persisted ZIO Flow program that was previously running."]}),"\n",(0,s.jsxs)(n.p,{children:["If you don't want this, you can resume the flows one by one if you know their ",(0,s.jsx)(n.code,{children:"FlowId"})," by calling ",(0,s.jsx)(n.code,{children:"run"})," or ",(0,s.jsx)(n.code,{children:"start"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"delete",children:(0,s.jsx)(n.code,{children:"delete"})}),"\n",(0,s.jsxs)(n.p,{children:["Once a flow is completed, it's last persisted state, as well as it's results is still stored in the database, so\ncalling ",(0,s.jsx)(n.code,{children:"poll"})," or ",(0,s.jsx)(n.code,{children:"getAll"})," can return information about it. The ",(0,s.jsx)(n.code,{children:"delete"})," method completely removes a ",(0,s.jsx)(n.em,{children:"completed flow"}),"\nfrom the executor's persisted state."]}),"\n",(0,s.jsxs)(n.h3,{id:"pause-resume-and-abort",children:[(0,s.jsx)(n.code,{children:"pause"}),", ",(0,s.jsx)(n.code,{children:"resume"})," and ",(0,s.jsx)(n.code,{children:"abort"})]}),"\n",(0,s.jsxs)(n.p,{children:["A running flow can be ",(0,s.jsx)(n.em,{children:"paused"})," with ",(0,s.jsx)(n.code,{children:"pause"})," and resumed any time with ",(0,s.jsx)(n.code,{children:"resume"}),". A paused flow remains paused in case the\nexecutor is restarted and ",(0,s.jsx)(n.code,{children:"restartAll"})," is called."]}),"\n",(0,s.jsxs)(n.p,{children:["A running (or paused) flow can be ",(0,s.jsx)(n.em,{children:"aborted"})," with the ",(0,s.jsx)(n.code,{children:"abort"})," method. An aborted flow's result is\nthe ",(0,s.jsx)(n.code,{children:"ExecutorError.Interrupted"})," error."]}),"\n",(0,s.jsx)(n.h3,{id:"getall",children:(0,s.jsx)(n.code,{children:"getAll"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"getAll"})," method returns a ",(0,s.jsx)(n.em,{children:"ZIO stream"})," of ",(0,s.jsx)(n.code,{children:"FlowId"})," and ",(0,s.jsx)(n.code,{children:"FlowStatus"})," pairs, listing all the ZIO Flow programs the\nexecutor knows about. The ",(0,s.jsx)(n.code,{children:"FlowStatus"})," is an enumeration with the following values:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Running"})," - the flow is currently running"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Paused"})," - the flow is currently paused"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Suspended"})," - the flow is currently suspended in a transaction, waiting for a variable to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Done"})," - the flow finished running either with an error or with a success"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"forcegarbagecollection",children:(0,s.jsx)(n.code,{children:"forceGarbageCollection"})}),"\n",(0,s.jsxs)(n.p,{children:["Garbage collection in the context of a persistent executor is not about releasing items from the ",(0,s.jsx)(n.em,{children:"memory"}),", but deleting\nold persistent state from the database backend. This is executed periodically by the executor, but you can also trigger\nit manually with the ",(0,s.jsx)(n.code,{children:"forceGarbageCollection"})," method."]}),"\n",(0,s.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["The persistent executor layer depends on the following other ZIO ",(0,s.jsx)(n.em,{children:"services"}),":"]}),"\n",(0,s.jsx)(n.h4,{id:"durablelog",children:(0,s.jsx)(n.code,{children:"DurableLog"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DurableLog"})," is a persistent event log used for waiting for variables to change or promises to be completed. Currently\nthe only implementation is defined by the ",(0,s.jsx)(n.code,{children:"DurableLog.layer"})," layer and it depends on an ",(0,s.jsx)(n.code,{children:"IndexedStore"}),". ",(0,s.jsx)(n.code,{children:"IndexedStore"}),"\nis provided by the ",(0,s.jsx)(n.a,{href:"backends",children:"backend modules"})," similar to",(0,s.jsx)(n.code,{children:"KeyValueStore"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"keyvaluestore",children:(0,s.jsx)(n.code,{children:"KeyValueStore"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"KeyValueStore"})," is an interface for storing and retrieving information based on keys from a persistency solution. There\nare multiple implementations available in the ",(0,s.jsx)(n.a,{href:"backends",children:"backend modules"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"configuration",children:(0,s.jsx)(n.code,{children:"Configuration"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Configuration"})," service stores the user defined configuration values, indexed by a ",(0,s.jsx)(n.code,{children:"ConfigKey"}),", that can be accessed\nby the ZIO Flow programs using ",(0,s.jsx)(n.code,{children:"Remote.config"}),". The following implementations are available:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Configuration.inMemory"})," - stores the configuration in memory, useful mostly for testing. The initial state is empty."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Configuration.fromEnvironment"})," - by providing a mapping from ",(0,s.jsx)(n.code,{children:"ConfigKey"})," to ",(0,s.jsx)(n.em,{children:"system environment variable names"}),", this\nimplementation provides configuration values for ZIO Flow programs directly from environment variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Configuration.fromConfig"})," - uses ZIO's native configuration API to read configuration values from a given subsection\nof the provided configuration"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"operationexecutor",children:(0,s.jsx)(n.code,{children:"OperationExecutor"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"OperationExecutor"})," service is responsible for executing ",(0,s.jsx)(n.code,{children:"Operatotion"}),"s, described on the ",(0,s.jsx)(n.a,{href:"activities",children:"activities"}),"\npage."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two built-in ",(0,s.jsx)(n.code,{children:"OperatorExecutor"})," implementations in ZIO Flow:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefaultOperationExecutor.layer"})," constructs an executor that supports the ",(0,s.jsx)(n.code,{children:"Operation.HTTP"})," operations, implemented\nusing the ",(0,s.jsx)(n.code,{children:"zio-http"})," library"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MockedOperationExecutor"})," is useful for testing flow, more information about it can be found on\nthe ",(0,s.jsx)(n.a,{href:"testing#mocking-operations",children:"testing"})," page"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The default operation executor requires you to provide HTTP retry policy configuration, that describes how each HTTP\nrequests are handling errors. More information about these policies can be found in the server configuration section\nbelow."}),"\n",(0,s.jsxs)(n.h4,{id:"serializer-and-deserializer",children:[(0,s.jsx)(n.code,{children:"Serializer"})," and ",(0,s.jsx)(n.code,{children:"Deserializer"})]}),"\n",(0,s.jsxs)(n.p,{children:["These two services define how the persisted data (both variables and flow state) is serialized and deserialized.\nSerialization is based on ",(0,s.jsx)(n.em,{children:"codecs"})," provided by the ",(0,s.jsx)(n.code,{children:"zio-schema"})," library."]}),"\n",(0,s.jsx)(n.p,{children:"Currently we provide two implementations for these services:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Serializer.json"})," and ",(0,s.jsx)(n.code,{children:"Deserializer.json"})," - uses JSON serialization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Serializer.protobuf"})," and ",(0,s.jsx)(n.code,{children:"Deserializer.protobuf"})," - uses Protobuf serialization"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"zio-flow-server",children:"ZIO Flow Server"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"ZIO Flow Server"})," is a ready to use executable server application that wraps the persistent executor and provides a (\nHOCON) file based configuration to set it up, and a REST API for running and querying flows."]}),"\n",(0,s.jsx)(n.h3,{id:"running-the-server",children:"Running the server"}),"\n",(0,s.jsx)(n.p,{children:"There is no packaged executable of the server at the moment, but later we are planning to provide a ready to use docker\ncontainer."}),"\n",(0,s.jsx)(n.p,{children:"Today to run the server the easiest way is to clone the repository and run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export ZIO_FLOW_SERVER_CONFIG=custom-config.conf\nsbt zioFlowServer/run\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["The configuration file pointed by ",(0,s.jsx)(n.code,{children:"ZIO_FLOW_SERVER_CONFIG"})," is a ",(0,s.jsx)(n.em,{children:"HOCON file"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The file has the following sections and values:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Section"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"port"})}),(0,s.jsx)(n.td,{children:"the port the server will listen on"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"key-value-store"})}),(0,s.jsxs)(n.td,{children:["selects the backend to use for ",(0,s.jsx)(n.em,{children:"key value store"}),", can be either ",(0,s.jsx)(n.code,{children:"rocksdb"}),", ",(0,s.jsx)(n.code,{children:"cassandra"}),", ",(0,s.jsx)(n.code,{children:"dynamodb"})," or ",(0,s.jsx)(n.code,{children:"in-memory"}),". See the ",(0,s.jsx)(n.a,{href:"backends",children:"backends"})," page for more information. Currently the ",(0,s.jsx)(n.code,{children:"key-value-store"})," is also used to store the ",(0,s.jsx)(n.em,{children:"flow templates"})," (discussed below). This is expected to move to its own configuration key in next versions."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"indexed-store"})}),(0,s.jsxs)(n.td,{children:["selects the backend to use for ",(0,s.jsx)(n.em,{children:"indexed store"}),", most of the time it should be the same as ",(0,s.jsx)(n.code,{children:"key-value-store"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"metrics.interval"})}),(0,s.jsx)(n.td,{children:"defines the interval for collecting internal metrics"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"serialization-format"})}),(0,s.jsxs)(n.td,{children:["can be either ",(0,s.jsx)(n.code,{children:"json"})," or ",(0,s.jsx)(n.code,{children:"protobuf"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gc-period"})}),(0,s.jsx)(n.td,{children:"the interval"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"flow-configuration"})}),(0,s.jsxs)(n.td,{children:["a list of key-value pairs of user-defined configuration provided to flows via ",(0,s.jsx)(n.code,{children:"Remote.config"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"policies"})}),(0,s.jsx)(n.td,{children:"definition of HTTP retry policies, explained in details below"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"rocksdb-key-value-store"})}),(0,s.jsxs)(n.td,{children:["configuration for the RocksDB key value store, if it was selected by ",(0,s.jsx)(n.code,{children:"key-value-store"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"rocksdb-indexed-store"})}),(0,s.jsxs)(n.td,{children:["configuration for the RocksDB indexed store, if it was selected by ",(0,s.jsx)(n.code,{children:"indexed-store"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cassandra-key-value-store"})}),(0,s.jsxs)(n.td,{children:["configuration for the Cassandra key value store, if it was selected by ",(0,s.jsx)(n.code,{children:"key-value-store"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cassandra-indexed-store"})}),(0,s.jsxs)(n.td,{children:["configuration for the Cassandra indexed store, if it was selected by ",(0,s.jsx)(n.code,{children:"indexed-store"})]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["For configuration of the ",(0,s.jsx)(n.em,{children:"DynamoDb store"}),", check the documentation of\nthe ",(0,s.jsx)(n.a,{href:"https://zio.dev/zio-aws/configuration",children:"zio-aws library"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"http-retry-policies",children:"HTTP retry policies"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"policies.http"})," node contains two sub nodes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," is the default policy for all HTTP requests that are not customized by the ",(0,s.jsx)(n.code,{children:"per-host"})," settings"]}),"\n",(0,s.jsxs)(n.li,{children:["Items in ",(0,s.jsx)(n.code,{children:"per-host"})," can override the default settings based on the request's host name"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For each host (and the default settings) you can define the following settings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max-parallel-request-count"})," is the maximum number of parallel requests that can be sent to the host"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"host-override"})," should only be used in the ",(0,s.jsx)(n.code,{children:"per-host"})," configurations and it allows you to change the host name of the\nrequests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"retry-policies"})," is a list of retry policies, described below"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"circuit-breaker-policy"})," is an optional node describing how to reset the ",(0,s.jsx)(n.em,{children:"circuit breaker"})," for the host after it gets\nopened"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeout"})," is the maximum duration a request can take before get cancelled"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Each element in ",(0,s.jsx)(n.code,{children:"retry-policies"})," is a configuration object with the following properties:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"condition"})," specifies the condition when this specific retry policy should be used. The following condition types are\nsupported:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"always"})," defines a retry policy that is going to match ",(0,s.jsx)(n.em,{children:"all"})," requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"for-specific-status"})," selects a single specific HTTP status code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"for-4xx"})," defines a retry policy for cases when the server responded with any HTTP status code between 400-499"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"for-5xx"})," defines a retry policy for cases when the server responded with any HTTP status code between 500-599"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"open-circuit-breaker"})," defines a retry policy for the case when a request is blocked by an open ",(0,s.jsx)(n.em,{children:"circuit breaker"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"or"})," combines two conditions, defined in the ",(0,s.jsx)(n.code,{children:"first"})," and ",(0,s.jsx)(n.code,{children:"second"})," sub nodes"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"retry-policy"})," defines how to retry the request; it is the same configuration structure as the one used\nfor ",(0,s.jsx)(n.code,{children:"circuit-breaker-policy"}),", and we are going to define it later."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"break-circuit"})," is a boolean option. If it is ",(0,s.jsx)(n.code,{children:"true"}),", when the condition of this retry policy is triggered, it will not\nonly retry the request but also report this as a failure for the ",(0,s.jsx)(n.em,{children:"circuit breaker"}),". The circuit breaker will open the\ncircuit, making all further requests fail (with the condition ",(0,s.jsx)(n.code,{children:"open-circuit-breaker"}),") for a given period."]}),"\n",(0,s.jsxs)(n.p,{children:["For both the ",(0,s.jsx)(n.code,{children:"retry-polcy"})," of each retry policy and for the ",(0,s.jsx)(n.code,{children:"circuit-breaker-policy"})," describing the resetting behavior\nof the circuit breaker the configuration structure looks the same:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fail-after"})," defines the maximum number of retries, or the maximum elapsed time spent for retries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"repetition"})," defines how much time elapses between retries. it can be either a ",(0,s.jsx)(n.code,{children:"fixed"})," time interval, or\nan ",(0,s.jsx)(n.code,{children:"exponential"})," one"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"jitter"})," is a boolean configuration enabling some jittering for these configured intervals"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"ZIO Flow Server"})," provides a HTTP REST API for working with ZIO Flow programs. This section defines all the\navailable endpoints."]}),"\n",(0,s.jsx)(n.h4,{id:"get-healthcheck",children:(0,s.jsx)(n.code,{children:"GET /healthcheck"})}),"\n",(0,s.jsx)(n.p,{children:"Simple healthcheck endpoint to check that ZIO Flow server is running."}),"\n",(0,s.jsx)(n.h4,{id:"get-metrics",children:(0,s.jsx)(n.code,{children:"GET /metrics"})}),"\n",(0,s.jsxs)(n.p,{children:["Prometheus metrics. The list of available metrics is defined in the ",(0,s.jsx)(n.a,{href:"#metrics",children:"metrics section"})]}),"\n",(0,s.jsx)(n.h4,{id:"get-templates",children:(0,s.jsx)(n.code,{children:"GET /templates"})}),"\n",(0,s.jsxs)(n.p,{children:["Get all the available ",(0,s.jsx)(n.em,{children:"templates"})," registered in the server. A ",(0,s.jsx)(n.em,{children:"template"})," in ZIO Flow server is a stored ZIO Flow program\nthat optionally can have an ",(0,s.jsx)(n.em,{children:"input parameter"})," as well. By storing these on the server they get an associated ",(0,s.jsx)(n.em,{children:"template\nID"})," and you can refer to this ID when starting a new flow instead of sending the whole serialized ZIO Flow program every\ntime."]}),"\n",(0,s.jsx)(n.p,{children:"The response JSON has the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "entries": [\n    {\n      "templateId": "xyz",\n      "template": {\n        "flow": {\n          ...\n        }\n        "inputSchema": {\n          ...\n        }\n      }\n    },\n    ...\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get-templatestemplateid",children:(0,s.jsx)(n.code,{children:"GET /templates/<templateId>"})}),"\n",(0,s.jsxs)(n.p,{children:["Gets a single stored ",(0,s.jsx)(n.em,{children:"flow template"})," by its identifier."]}),"\n",(0,s.jsx)(n.h4,{id:"put-templatestemplateid",children:(0,s.jsx)(n.code,{children:"PUT /templates/<templateId>"})}),"\n",(0,s.jsxs)(n.p,{children:["Stores a new ",(0,s.jsx)(n.em,{children:"flow template"})," by providing an identifier and posting the flow and input schema in the request's body."]}),"\n",(0,s.jsx)(n.h4,{id:"delete-templatestemplateid",children:(0,s.jsx)(n.code,{children:"DELETE /templates/<templateId>"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes a ",(0,s.jsx)(n.em,{children:"flow template"})," that was previously stored by the above defined ",(0,s.jsx)(n.code,{children:"PUT"})," by its identifier."]}),"\n",(0,s.jsx)(n.h4,{id:"post-flows",children:(0,s.jsx)(n.code,{children:"POST /flows"})}),"\n",(0,s.jsxs)(n.p,{children:["Start executing a new ",(0,s.jsx)(n.em,{children:"ZIO Flow program"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following JSON examples show the possibilities of this endpoint:"}),"\n",(0,s.jsxs)(n.p,{children:["Starting execution of a ZIO Flow that has no parameters (",(0,s.jsx)(n.code,{children:"ZFlow.succeed(1)"}),") :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Flow": {\n    "flow": {\n      "Return": {\n        "Literal": {\n          "Int": 1\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Starting execution of a ZIO Flow that has a ",(0,s.jsx)(n.em,{children:"required input parameter"})," by providing this parameter's type (schema) and\nthe value as well (",(0,s.jsx)(n.code,{children:"ZFlow.input[Int]"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "FlowWithParameter": {\n    "flow": {\n      "Input": {}\n    },\n    "schema": {\n      "Other": {\n        "toAst": {\n          "Value": {\n            "valueType": "int",\n            "path": [],\n            "optional": false\n          }\n        }\n      }\n    },\n    "value": 1\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Starting a ZIO Flow program that is stored as a ",(0,s.jsx)(n.em,{children:"flow template"})," and does not require any parameters:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Template": {\n    "templateId": "template1"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Starting a ZIO Flow program that is stored as a ",(0,s.jsx)(n.em,{children:"flow template"})," and requires a parameter as well:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "TemplateWithParameter": {\n    "templateId": "template2",\n    "value": 1\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The response JSON contains a field called ",(0,s.jsx)(n.code,{children:"flowId"})," containing the started flow's identifier. It can be used to poll\nfor the result of the running flow, as well as pausing, resuming or aborting it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "flowId": "xyz"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get-flows",children:(0,s.jsx)(n.code,{children:"GET /flows"})}),"\n",(0,s.jsx)(n.p,{children:"Gets a list of all the flows handled by the server's executor, together with their current status."}),"\n",(0,s.jsxs)(n.p,{children:["The response is a mapping from ",(0,s.jsx)(n.em,{children:"flow ID"})," to ",(0,s.jsx)(n.em,{children:"status"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "flow1": "Running",\n  "flow2": "Paused",\n  "flow3": "Done",\n  "flow4": "Suspended"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"(in reality the flow IDs are UUIDs)"}),"\n",(0,s.jsx)(n.h4,{id:"get-flowsflowid",children:(0,s.jsx)(n.code,{children:"GET /flows/<flowId>"})}),"\n",(0,s.jsx)(n.p,{children:"Polls the status of a given flow. The following examples demonstrate the possible response JSONs for this request:"}),"\n",(0,s.jsx)(n.p,{children:"When the flow is still running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Running": {}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If the flow died with an internal error, or was ",(0,s.jsx)(n.em,{children:"aborted"})," (could be any other ",(0,s.jsx)(n.code,{children:"ExecutionError"}),", not just ",(0,s.jsx)(n.code,{children:"Interrupted"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Died": {\n    "value": {\n      "Interrupted": {}\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the flow finished running and succeeded with a value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Succeeded": {\n    "value": 1\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the flow finished running and failed with a value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Failed": {\n    "value": "flow failed!"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"delete-flowsflowid",children:(0,s.jsx)(n.code,{children:"DELETE /flows/<flowId>"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes an already completed ",(0,s.jsx)(n.em,{children:"flow"})," from the executor."]}),"\n",(0,s.jsx)(n.h4,{id:"post-flowsflowidpause",children:(0,s.jsx)(n.code,{children:"POST /flows/<flowId>/pause"})}),"\n",(0,s.jsxs)(n.p,{children:["Pauses a running ",(0,s.jsx)(n.em,{children:"flow"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"post-flowsflowidresume",children:(0,s.jsx)(n.code,{children:"POST /flows/<flowId>/resume"})}),"\n",(0,s.jsxs)(n.p,{children:["Resumes a previously paused ",(0,s.jsx)(n.em,{children:"flow"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"post-flowsflowidabort",children:(0,s.jsx)(n.code,{children:"POST /flows/<flowId>/abort"})}),"\n",(0,s.jsx)(n.p,{children:"Aborts a running flow."}),"\n",(0,s.jsx)(n.h2,{id:"metrics",children:"Metrics"}),"\n",(0,s.jsxs)(n.p,{children:["Many components of ZIO Flow report ",(0,s.jsx)(n.em,{children:"metrics"})," using ZIO's built-in metrics API. ",(0,s.jsx)(n.em,{children:"ZIO Flow Server"})," exposes these metrics\nfor Prometheus via the ",(0,s.jsx)(n.code,{children:"/metrics"})," endpoint. In case of using the executor embedded in your own application, the metrics\ncan be sent to any metrics backend that supports the ZIO metrics API."]}),"\n",(0,s.jsx)(n.p,{children:"The following list contains all the metrics reported by various components of the ZIO Flow runtime:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_remote_evals"})," is a counter for (",(0,s.jsx)(n.em,{children:"tracked Remotes"}),")[remote#metrics]"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_remote_eval_time_ms"})," is a histogram for ",(0,s.jsx)(n.em,{children:"tracked Remotes"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_started_total"})," is a counter incremented every time a flow is started executing (either new or restarted)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_active_flows"})," is a gauge containing the actual number of running or suspended flows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_operations_total"})," is a counter for each primitive ",(0,s.jsx)(n.code,{children:"ZFlow"})," operation that was executed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_transactions_total"})," is a counter for the number of committed, failed or retried transactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_finished_flows_total"})," is a counter increased when a flow finishes with either success, failure or death"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_executor_error_total"})," is a counter for different executor errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_state_size_bytes"})," is a histogram for the serialized workflow state snapshots in bytes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_variable_access_total"})," is a counter increased when a remote variable is accessed (read, write or delete)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_variable_size_bytes"})," is a histogram of the serialized size of remote variables in bytes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_finished_flow_age_ms"})," is a histogram of the duration between submitting the workflow and completing it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_total_execution_time_ms"})," is a histogram of the total time a workflow was in either running or suspended state\nduring its life"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_suspended_time_ms"})," is a histogram of time fragments a workflow spends in suspended state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_gc_time_ms"})," is a histogram of the time a full persistent garbage collection run takes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_gc_deletion"})," is a counter for the number of remote variables deleted by the garbage collector"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_gc"})," is a counter for the number of persistent garbage collector runs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_http_responses_total"})," is a counter for the number of HTTP operations performed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_http_response_time_ms"})," is a histogram of the HTTP operation response times"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_http_failed_requests_total"})," is a counter for the number of failed HTTP requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"zioflow_http_retried_requests_total"})," is a counter for the number of retried HTTP requests per host- ``"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ZIO Flow Server also reports the ",(0,s.jsx)(n.em,{children:"default JVM metrics"})," provided by ZIO Core."]}),"\n",(0,s.jsx)(n.h2,{id:"custom-operation-executor",children:"Custom operation executor"}),"\n",(0,s.jsxs)(n.p,{children:["Writing a custom implementation of ",(0,s.jsx)(n.code,{children:"OperationExecutor"})," is the intended way to extend ZIO Flow with custom ways to\ninteract with the outside world. An ",(0,s.jsx)(n.code,{children:"OperationExecutor"})," gets an input value and an ",(0,s.jsx)(n.code,{children:"Operation[Input, Output]"})," value, and\nit has to provide a ",(0,s.jsx)(n.em,{children:"ZIO effect"})," that produces a ",(0,s.jsx)(n.code,{children:"Result"})," or fails with an ",(0,s.jsx)(n.code,{children:"ActivityError"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["As ",(0,s.jsx)(n.code,{children:"Operation"})," is a sealed trait, custom operations are encoded by ",(0,s.jsx)(n.code,{children:"Operation.Custom"})," with a payload represented by\na ",(0,s.jsx)(n.code,{children:"DynamicValue"}),". The payload can be converted to ",(0,s.jsx)(n.code,{children:"DynamicValue"})," using a ",(0,s.jsx)(n.code,{children:"Schema"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following example shows how to implement a custom operation that gets a static string (serialized as part of the\noperation) and a dynamic string from the operation's input, and pushes a concatenated string to a queue provided for the\noperation executor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import zio.schema.{DeriveSchema, DynamicValue, Schema, TypeId}\n\nfinal case class CustomOp(prefix: String)\n\nobject CustomOp {\n  val typeId: TypeId = TypeId.parse("zio.flow.runtime.internal.executor.CustomOperationExecutorSpec.CustomOp")\n  implicit val schema: Schema[CustomOp] = DeriveSchema.gen[CustomOp]\n}\n\n/** Helper for constructing the custom operation */\ndef customOp(prefix: String): Operation[String, Unit] =\n  Operation.Custom(CustomOp.typeId, DynamicValue(CustomOp(prefix)), Schema[String], Schema[Unit])\n\n/** Example usage of the custom operation in an activity */\ndef customActivity(prefix: String): Activity[String, Unit] =\n  Activity(\n    "custom1",\n    "test activity using custom operation",\n    customOp(prefix),\n    Activity.checkNotSupported,\n    Activity.compensateNotSupported\n  )\n\n/** Example implementation of the custom operation executor */\nfinal class CustomOperationExecutor(queue: Queue[String]) extends OperationExecutor {\n  override def execute[Input, Result](\n    input: Input,\n    operation: Operation[Input, Result]\n  ): ZIO[RemoteContext, ActivityError, Result] =\n    operation match {\n      case Operation.Custom(typeId, operation, _, _) if typeId == CustomOp.typeId =>\n        for {\n          op <-\n            ZIO.fromEither(operation.toTypedValue(CustomOp.schema)).mapError(failure => ActivityError(failure, None))\n          _ <- queue.offer(op.prefix + input.asInstanceOf[String])\n        } yield ().asInstanceOf[Result]\n      case _ =>\n        ZIO.fail(ActivityError("Unsupported operation", None))\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);