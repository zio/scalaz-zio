"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[39235],{33271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"reference/test/dynamic-test-generation","title":"Dynamic Test Generation","description":"Tests in ZIO are dynamic. Meaning that they are not required to be statically defined at compile time. They can be generated at runtime effectfully.","source":"@site/docs/reference/test/dynamic-test-generation.md","sourceDirName":"reference/test","slug":"/reference/test/dynamic-test-generation","permalink":"/reference/test/dynamic-test-generation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/dynamic-test-generation.md","tags":[],"version":"current","frontMatter":{"id":"dynamic-test-generation","title":"Dynamic Test Generation"},"sidebar":"reference-sidebar","previous":{"title":"Timing-out Tests","permalink":"/reference/test/aspects/timing-out-tests"},"next":{"title":"Introduction To Property Testing","permalink":"/reference/test/property-testing/"}}');var a=n(74848),i=n(28453);const r={id:"dynamic-test-generation",title:"Dynamic Test Generation"},c=void 0,d={},o=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Tests in ZIO are dynamic. Meaning that they are not required to be statically defined at compile time. They can be generated at runtime effectfully."}),"\n",(0,a.jsxs)(t.p,{children:["Assume we have implemented the ",(0,a.jsx)(t.code,{children:"add"})," operator which adds two numbers:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"def add(a: Int, b: Int): Int = ???\n"})}),"\n",(0,a.jsxs)(t.p,{children:["We want to test this function using the following test data inside the ",(0,a.jsx)(t.code,{children:"resources"})," directory:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",metastring:'title="src/test/resources/test-data.csv"',children:"0, 0, 0\n1, 0, 1\n0, 1, 1\n0, -1, -1\n-1, 0, -1\n1, 1, 2\n1, -1, 0\n-1, 1, 0\n"})}),"\n",(0,a.jsx)(t.p,{children:"Let's load it and create a bunch of tests using this test data:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test._\nimport zio.test.test\n\ndef loadTestData: Task[List[((Int, Int), Int)]] =\n  ZIO.attemptBlocking(\n    scala.io.Source\n      .fromResource("test-data.csv")\n      .getLines()\n      .toList\n      .map(_.split(\',\').map(_.trim))\n      .map(i => ((i(0).toInt, i(1).toInt), i(2).toInt))\n  )\n  \ndef makeTest(a: Int, b: Int)(expected: Int): Spec[Any, Nothing] =\n  test(s"test add($a, $b) == $expected") {\n    assertTrue(add(a, b) == expected)\n  }\n\ndef makeTests: ZIO[Any, Throwable, List[Spec[Any, Nothing]]] =\n  loadTestData.map { testData =>\n    testData.map { case ((a, b), expected) =>\n      makeTest(a, b)(expected)\n    }\n  }\n'})}),"\n",(0,a.jsx)(t.p,{children:"Now we are ready to run all generated tests:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test._\n\nobject AdditionSpec extends ZIOSpecDefault {\n  override def spec = suite("add")(makeTests)\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Here is the test runner's output:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"+ add\n  + test add(0, 0) == 0\n  + test add(1, 0) == 1\n  + test add(0, -1) == -1\n  + test add(0, 1) == 1\n  + test add(-1, 1) == 0\n  + test add(1, -1) == 0\n  + test add(1, 1) == 2\n  + test add(-1, 0) == -1\n8 tests passed. 0 tests failed. 0 tests ignored.\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);