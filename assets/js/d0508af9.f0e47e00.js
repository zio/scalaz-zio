"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[77850],{1596:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"zio-jdbc/getting-started","title":"Getting Started with ZIO JDBC","description":"Writing Queries","source":"@site/docs/zio-jdbc/getting-started.md","sourceDirName":"zio-jdbc","slug":"/zio-jdbc/getting-started","permalink":"/zio-jdbc/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-jdbc/getting-started.md","tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started with ZIO JDBC","sidebar_label":"Getting Started"},"sidebar":"ecosystem-sidebar","previous":{"title":"Installation","permalink":"/zio-jdbc/installation"},"next":{"title":"Getting Started","permalink":"/zio-json/"}}');var r=t(74848),i=t(28453);const a={id:"getting-started",title:"Getting Started with ZIO JDBC",sidebar_label:"Getting Started"},s=void 0,l={},c=[{value:"Writing Queries",id:"writing-queries",level:2},{value:"Executing Statements",id:"executing-statements",level:2},{value:"Creating a Connection Pool",id:"creating-a-connection-pool",level:2},{value:"Full Example",id:"full-example",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"writing-queries",children:"Writing Queries"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Basic.scala"})," (see ",(0,r.jsx)(n.code,{children:"zio.jdbc.examples"})," in project)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'  val age = 42\n\nval ex0: SqlFragment = sql"create table if not exists users(name varchar(255), age int)"\n\n// Creating SQL statements using interpolation:\nval ex1: SqlFragment = sql"select * from users where age = $age"\n\n// Selecting into tuples:\nval ex2: Query[(String, Int)] = sql"select name, age from users".query[(String, Int)]\n\n// Inserting from tuples:\nval ex3: SqlFragment = sql"insert into users (name, age)".values(("John", 42))\n\n// dropping table\nval ex4: SqlFragment = sql"drop table if exists users"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"executing-statements",children:"Executing Statements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val res1: ZIO[ZConnectionPool, Throwable, Option[(String, Int)]] = \n  transaction {\n    sql\"select name, age from users where name = 'Sherlock Holmes'\".query[(String, Int)].selectOne\n  }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-connection-pool",children:"Creating a Connection Pool"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'\n val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =\n    ZLayer.succeed(ZConnectionPoolConfig.default)\n \n  val properties = Map(\n    "user"     -> "mysql",\n    "password" -> "mysql"\n  )\n \n  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =\n    ZConnectionPool.mysql("localhost", 3306, "mysql", properties)\n \n  val live: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] = createZIOPoolConfig >>> connectionPool\n'})}),"\n",(0,r.jsx)(n.h2,{id:"full-example",children:"Full Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"App.scala"})," (see ",(0,r.jsx)(n.code,{children:"zio.jdbc.examples"})," in project)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'\nimport zio._\nimport zio.jdbc._\nimport zio.schema.Schema\n\n/**\n * You\'ll need the appropriate JDBC driver, and a database running.\n */\nobject App extends ZIOAppDefault {\n  final case class User(name: String, age: Int)\n  \n  object User {\n    import Schema.Field\n    \n    implicit val schema: Schema[User] =\n      Schema.CaseClass2[String, Int, User](\n        Field("name", Schema[String]),\n        Field("age", Schema[Int]),\n        (name, age) => User(name, age),\n        _.name,\n        _.age\n      )\n    \n    // One can derive a jdbc decoder from a zio-schema or\n    implicit val jdbcDecoder: JdbcDecoder[User] = JdbcDecoder.fromSchema\n    \n    // One can derive a jdbc encoder from a zio-schema \n    implicit val jdbcEncoder: JdbcEncoder[User] = JdbcEncoder.fromSchema\n    \n    // a custom decoder from a tuple\n    // implicit val jdbcDecoder = JdbcDecoder[(String, Int)].map[User](t => User(t._1, t._2))\n  }\n  \n  val create: ZIO[ZConnectionPool, Throwable, Unit] = transaction {\n    Basic.ex0.execute\n  }\n  \n  val insertRow: ZIO[ZConnectionPool, Throwable, Long] = transaction {\n    Basic.ex3.insert\n  }\n  \n  val select: ZIO[ZConnectionPool, Throwable, Chunk[User]] = transaction {\n    Basic.ex2.as[User].selectAll\n  }\n  \n  val drop: ZIO[ZConnectionPool, Throwable, Unit] = transaction {\n    Basic.ex4.execute\n  }\n  \n  val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =\n    ZLayer.succeed(ZConnectionPoolConfig.default)\n  \n  val properties = Map(\n    "user"     -> "postgres",\n    "password" -> "postgres"\n  )\n  \n  /**\n   * Pre defined ZConnection Pools exist for:\n   *  Postgres, SQL Server, Oracle, MySQL and h2\n   *  custom pools, can also be constructed\n   */\n  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =\n    ZConnectionPool.postgres("localhost", 5432, "postgres", properties)\n  \n  val program: ZIO[ZConnectionPool, Throwable, Chunk[User]] = for {\n    _   <- create *> insertRow\n    res <- select\n    _   <- drop\n  } yield res\n  \n  override def run: ZIO[ZEnv with ZIOAppArgs, Any, Any] =\n    for {\n      results <- program.provideLayer(createZIOPoolConfig >>> connectionPool)\n      _       <- Console.printLine(results.mkString("\\n"))\n    } yield ()\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);