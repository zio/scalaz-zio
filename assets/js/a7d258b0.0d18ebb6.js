"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[42312],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},93267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"reference/test/aspects/execution-strategy","title":"Execution Strategy","description":"ZIO Test has two different strategies to run members of a test suite","source":"@site/docs/reference/test/aspects/execution-strategy.md","sourceDirName":"reference/test/aspects","slug":"/reference/test/aspects/execution-strategy","permalink":"/reference/test/aspects/execution-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/execution-strategy.md","tags":[],"version":"current","frontMatter":{"id":"execution-strategy","title":"Execution Strategy"},"sidebar":"reference-sidebar","previous":{"title":"Environment-specific Tests","permalink":"/reference/test/aspects/environment-specific-tests"},"next":{"title":"Flaky and Non-flaky Tests","permalink":"/reference/test/aspects/flaky-and-non-flaky-tests"}}');var r=n(74848),i=n(28453);const a={id:"execution-strategy",title:"Execution Strategy"},l=void 0,c={},u=[{value:"Parallel",id:"parallel",level:2},{value:"Sequential",id:"sequential",level:2}];function o(e){const t={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["ZIO Test has two different strategies to run members of a test suite: ",(0,r.jsx)(t.em,{children:"sequential"})," and ",(0,r.jsx)(t.em,{children:"parallel"}),". Accordingly, there are two test aspects for specifying the execution strategy:"]}),"\n",(0,r.jsx)(t.h2,{id:"parallel",children:"Parallel"}),"\n",(0,r.jsxs)(t.p,{children:["The default strategy is parallel. We can explicitly enable it using ",(0,r.jsx)(t.code,{children:"TestAspect.parallel"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{ test, _ }\n\nsuite("Parallel")(\n  test("A")(Live.live(ZIO.attempt("Running Test A").delay(1.second)).debug.map(_ => assertTrue(true))),\n  test("B")(ZIO.attempt("Running Test B").debug.map(_ => assertTrue(true))),\n  test("C")(Live.live(ZIO.attempt("Running Test C").delay(500.millis)).debug.map(_ => assertTrue(true)))\n) @@ TestAspect.parallel\n'})}),"\n",(0,r.jsx)(t.p,{children:"After running this suite, we have the following output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Running Test B\nRunning Test C\nRunning Test A\n+ Parallel\n  + A\n  + B\n  + C\n"})}),"\n",(0,r.jsxs)(t.p,{children:["To change the degree of the parallelism, we can use the ",(0,r.jsx)(t.code,{children:"parallelN"})," test aspect. It takes the number of fibers and executes the members of a suite in parallel up to the specified number of concurrent fibers."]}),"\n",(0,r.jsx)(t.h2,{id:"sequential",children:"Sequential"}),"\n",(0,r.jsxs)(t.p,{children:["To execute them sequentially, we can use the ",(0,r.jsx)(t.code,{children:"sequential"})," test aspect:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{ test, _ }\n\nsuite("Sequential")(\n  test("A")(Live.live(ZIO.attempt("Running Test A").delay(1.second)).debug.map(_ => assertTrue(true))),\n  test("B")(ZIO.attempt("Running Test B").debug.map(_ => assertTrue(true))),\n  test("C")(Live.live(ZIO.attempt("Running Test C").delay(500.millis)).debug.map(_ => assertTrue(true)))\n) @@ TestAspect.sequential\n'})}),"\n",(0,r.jsx)(t.p,{children:"And here is the output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Running Test A\nRunning Test B\nRunning Test C\n+ Sequential\n  + A\n  + B\n  + C\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);