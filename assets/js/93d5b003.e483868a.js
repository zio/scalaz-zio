"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3531],{61315:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"zio-cli/helpdoc","title":"Help Documentation","description":"HelpDoc is a description of the documentation of a CLI App. They can be added to any Command, Options or Args.","source":"@site/docs/zio-cli/helpdoc.md","sourceDirName":"zio-cli","slug":"/zio-cli/helpdoc","permalink":"/zio-cli/helpdoc","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/helpdoc.md","tags":[],"version":"current","frontMatter":{"id":"helpdoc","title":"Help Documentation"},"sidebar":"ecosystem-sidebar","previous":{"title":"Commands","permalink":"/zio-cli/commands"},"next":{"title":"Built-in commands","permalink":"/zio-cli/built-in-commands"}}');var i=o(74848),c=o(28453);const t={id:"helpdoc",title:"Help Documentation"},a=void 0,l={},d=[{value:"Building blocks",id:"building-blocks",level:2},{value:"Span",id:"span",level:3},{value:"Transformation methods",id:"transformation-methods",level:2},{value:"Combination methods",id:"combination-methods",level:2},{value:"Examples",id:"examples",level:2}];function r(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"HelpDoc"})," is a description of the documentation of a CLI App. They can be added to any ",(0,i.jsx)(n.code,{children:"Command"}),", ",(0,i.jsx)(n.code,{children:"Options"})," or ",(0,i.jsx)(n.code,{children:"Args"}),".\n",(0,i.jsx)(n.code,{children:"HelpDoc"})," is composed of a list of ",(0,i.jsx)(n.code,{children:"HelpDoc"})," items that can be headers, paragraphs, description lists, sequences and enumerations."]}),"\n",(0,i.jsx)(n.h2,{id:"building-blocks",children:"Building blocks"}),"\n",(0,i.jsxs)(n.p,{children:["The most basic forms of ",(0,i.jsx)(n.code,{children:"HelpDoc"})," are headers and paragraphs. Method ",(0,i.jsx)(n.code,{children:"HelpDoc.p"})," can create paragraphs from text, while methods ",(0,i.jsx)(n.code,{children:"HelpDoc.h1"}),", ",(0,i.jsx)(n.code,{children:"HelpDoc.h2"})," and ",(0,i.jsx)(n.code,{children:"HelpDoc.h3"})," create headers of different levels."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.cli._\nimport zio.cli.HelpDoc.Span\n\nval t = "text"\n\nval element: HelpDoc  = HelpDoc.empty             // HelpDoc without content\nval header1: HelpDoc  = HelpDoc.h1("Level 1")     // Header of level 1\nval header2: HelpDoc  = HelpDoc.h2("Level 2")     // Header of level 2\nval header3: HelpDoc  = HelpDoc.h3(t: String)     // Header of level 3\nval p: HelpDoc        = HelpDoc.p(t: String)      // Paragraph\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It is possible to construct a more complex ",(0,i.jsx)(n.code,{children:"HelpDoc"})," by combining them. We can use enumerations, description lists and blocks. In each of the following methods, it is possible to use as many ",(0,i.jsx)(n.code,{children:"HelpDoc"})," arguments as desired."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Enumeration"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"// Enumeration of HelpDocs\nHelpDoc.enumeration(element: HelpDoc): HelpDoc\nHelpDoc.enumeration(header1 + p, header2 + p)\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The output of ",(0,i.jsx)(n.code,{children:"HelpDoc.enumeration(header1 + p, header2 + p)"})," is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"- \nLEVEL 1\n\n  text\n  -\nLEVEL 2\n\n  text\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Description List"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'  \n// Creates a list with Span as header\nval definition1 = (Span.text("Span1"), HelpDoc.p("Description 1"))\nval definition2 = (Span.text("Span2"), HelpDoc.p("Description 12"))\nHelpDoc.descriptionList(definition1: (Span, HelpDoc)): HelpDoc\nHelpDoc.descriptionList(definition1: (Span, HelpDoc), definition2: (Span, HelpDoc))\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The output of ",(0,i.jsx)(n.code,{children:"HelpDoc.descriptionList(definition1: (Span, HelpDoc), definition2: (Span, HelpDoc))"})," is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Span1\n  Description 1\n\nSpan2\n  Description 2\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Blocks"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"// Stacks HelpDocs\nHelpDoc.blocks(element: HelpDoc): HelpDoc\nHelpDoc.blocks(header1 + p, header2 + p)\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The output of ",(0,i.jsx)(n.code,{children:"HelpDoc.blocks(header1 + p, header2 + p)"})," is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"LEVEL 1\n\n  text\n\nLEVEL 2\n\n  text\n"})}),"\n",(0,i.jsx)(n.h3,{id:"span",children:"Span"}),"\n",(0,i.jsxs)(n.p,{children:["The data of a HelpDoc is not stored as text, rather as ",(0,i.jsx)(n.code,{children:"Span"})," type, that also contains information about the type of information. It is possible to use methods ",(0,i.jsx)(n.code,{children:"h1"}),", ",(0,i.jsx)(n.code,{children:"h2"}),", ",(0,i.jsx)(n.code,{children:"h3"})," and ",(0,i.jsx)(n.code,{children:"p"})," with ",(0,i.jsx)(n.code,{children:"Span"})," instead of ",(0,i.jsx)(n.code,{children:"String"}),". You can create ",(0,i.jsx)(n.code,{children:"Span"})," instances using the following methods:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'\nval span = Span.code(t: String)\nSpan.empty\nSpan.error(span: Span)\nSpan.error(t: String)\nSpan.space\nSpan.spans(span: Span)                // You can add more than one span\nSpan.spans(span, span)\nSpan.spans(List(span))\nSpan.strong(span: Span)\nSpan.strong(t: String)\nSpan.text(t: String)\nSpan.uri(java.net.URI.create("https://zio.dev/"))\nSpan.weak(span: Span)\nSpan.weak(t: String)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also obtain its text value using ",(0,i.jsx)(n.code,{children:"span.text"})," or concatenate ",(0,i.jsx)(n.code,{children:"Span"})," using ",(0,i.jsx)(n.code,{children:"span1 + span2"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"transformation-methods",children:"Transformation methods"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"HelpDoc"})," can be converted into plaintext and HTML:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait HelpDoc {\n  def toHTML: String\n  def toPlaintext(columnWidth: Int = 100, color: Boolean = true): String\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"combination-methods",children:"Combination methods"}),"\n",(0,i.jsxs)(n.p,{children:["The following methods allow to combine ",(0,i.jsx)(n.code,{children:"HelpDoc"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait HelpDoc {\n  def +(that: HelpDoc): HelpDoc     // Concatenate HelpDocs in successive levels\n  def |(that: HelpDoc): HelpDoc\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Method ",(0,i.jsx)(n.code,{children:"+"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It concatenates ",(0,i.jsx)(n.code,{children:"HelpDoc"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.cli._\n\nHelpDoc.h1("Header 1") + HelpDoc.p("paragraph content")\n'})}),"\n",(0,i.jsx)(n.p,{children:"It shows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Header 1\n\n  paragraph content\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Method ",(0,i.jsx)(n.code,{children:"|"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It shows the second ",(0,i.jsx)(n.code,{children:"HelpDoc"})," only if the first one is empty. It could be used to show a backup ",(0,i.jsx)(n.code,{children:"HelpDoc"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.p,{children:["The more common use case is through the operators ",(0,i.jsx)(n.code,{children:"??"})," and ",(0,i.jsx)(n.code,{children:"withHelp"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"??"})," can be applied to ",(0,i.jsx)(n.code,{children:"Options"})," and ",(0,i.jsx)(n.code,{children:"Args"}),". It adds a string to the current description."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.cli._\n\ntrait Options[A] {\n  def ??(that: String): Options[A] // or Args[A]\n}\n\nval optionsWithHelp = Options.text("sample") ?? "description of options"\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"withHelp"})," is applied to ",(0,i.jsx)(n.code,{children:"Command"}),". It overwrites the current help of the command, so use it cautiously! On the other hand, you need to use it to add your desired ",(0,i.jsx)(n.code,{children:"HelpDoc"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.cli._\n\ntrait Options[A] {\n  def withHelp(that: String): Command[A] // that is converted into a paragraph\n  def withHelp(that: HelpDoc): Command[A]\n}\n\nval optionsWithHelp = Options.text("sample") ?? "description of options"\nval commandWithHelp = Command("command", optionsWithHelp).withHelp("description of command")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"withHelp"})," is used with a command that has parent and children subcommands, it is applied only to the parent command."]}),"\n",(0,i.jsx)(n.p,{children:"If a more complex use is desired, it is possible to combine headers and paragraphs using the methods before."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'// Create a HelpDoc with a header depending on an integer\nval paragraph = HelpDoc.p("paragraph")\ndef header(n: Int) = HelpDoc.h1("Header: " + n)\ndef completeDoc(n: Int) = header(n) + paragraph\n\n// Create an enumeration of HelpDocs\nval complexDoc = HelpDoc.enumeration(completeDoc(7), completeDoc(-1), completeDoc(3))\n'})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var s=o(96540);const i={},c=s.createContext(i);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);