"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[98580],{13011:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"guides/tutorials/encode-and-decode-json-data","title":"Tutorial: How to Encode and Decode JSON Data?","description":"Introduction","source":"@site/docs/guides/tutorials/encode-and-decode-json-data.md","sourceDirName":"guides/tutorials","slug":"/guides/tutorials/encode-and-decode-json-data","permalink":"/guides/tutorials/encode-and-decode-json-data","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/tutorials/encode-and-decode-json-data.md","tags":[],"version":"current","frontMatter":{"id":"encode-and-decode-json-data","title":"Tutorial: How to Encode and Decode JSON Data?","sidebar_label":"Encoding and Decoding JSON Data"},"sidebar":"guides-sidebar","previous":{"title":"Making a ZIO application configurable","permalink":"/guides/tutorials/configurable-zio-application"},"next":{"title":"Enable Logging in a ZIO Application","permalink":"/guides/tutorials/enable-logging-in-a-zio-application"}}');var i=o(74848),d=o(28453);const r={id:"encode-and-decode-json-data",title:"Tutorial: How to Encode and Decode JSON Data?",sidebar_label:"Encoding and Decoding JSON Data"},c=void 0,t={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Running Examples",id:"running-examples",level:2},{value:"What is ZIO JSON?",id:"what-is-zio-json",level:2},{value:"Adding Dependencies",id:"adding-dependencies",level:2},{value:"JsonEncoder and JsonDecoder",id:"jsonencoder-and-jsondecoder",level:2},{value:"Built-in Decoders and Encoders",id:"built-in-decoders-and-encoders",level:2},{value:"Simple Values",id:"simple-values",level:3},{value:"Higher-kinded Types",id:"higher-kinded-types",level:3},{value:"How to Define Custom Decoder/Encoder?",id:"how-to-define-custom-decoderencoder",level:2},{value:"Writing From Scratch",id:"writing-from-scratch",level:3},{value:"Automatic Derivation of Codecs (macros)",id:"automatic-derivation-of-codecs-macros",level:3},{value:"Mapping Existing Codecs to Complex Types",id:"mapping-existing-codecs-to-complex-types",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"In this article, we will cover how to encode and decode JSON data."}),"\n",(0,i.jsx)(n.h2,{id:"running-examples",children:"Running Examples"}),"\n",(0,i.jsxs)(n.p,{children:["To access the code examples, you can clone the ",(0,i.jsx)(n.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstarts"})," project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-encode-decode-json-data\n"})}),"\n",(0,i.jsx)(n.p,{children:"To run all tests, execute the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ sbt Test/runMain dev.zio.quickstart.JsonSpec\n"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-zio-json",children:"What is ZIO JSON?"}),"\n",(0,i.jsxs)(n.p,{children:["ZIO JSON is a library that provides facilities for writing efficient JSON encoders and decoders. In this article, we will use this library to work with JSON data. To learn more about that, please refer to the ",(0,i.jsx)(n.a,{href:"https://zio.github.io/zio-json/",children:"ZIO JSON"})," documentation."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-dependencies",children:"Adding Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["To use ZIO JSON, we need to add the following dependency to our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-json" % "0.3.0-RC10"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"jsonencoder-and-jsondecoder",children:"JsonEncoder and JsonDecoder"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"JsonEncoder"})," and ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," are the two main types in ZIO JSON. They are used to encode and decode JSON data. Let's see how they are defined (with simplified syntax):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait JsonDecoder[A] {\n  def decodeJson(str: CharSequence): Either[String, A]\n}\n\ntrait JsonEncoder[A] {\n  def encodeJson(a: A): CharSequence\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can say for a type ",(0,i.jsx)(n.code,{children:"A"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"decoder"})," is a function that takes a ",(0,i.jsx)(n.code,{children:"CharSequence"})," and returns a ",(0,i.jsx)(n.code,{children:"Right"})," with the decoded value or a ",(0,i.jsx)(n.code,{children:"Left"})," with an error message."]}),"\n",(0,i.jsxs)(n.li,{children:["An ",(0,i.jsx)(n.strong,{children:"encoder"})," is a function that takes a value of type ",(0,i.jsx)(n.code,{children:"A"})," and returns a ",(0,i.jsx)(n.code,{children:"CharSequence"})," that represents the encoded value (JSON string)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If we provide an instance of ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," and ",(0,i.jsx)(n.code,{children:"JsonEncoder"})," for a type ",(0,i.jsx)(n.code,{children:"A"}),", we can encode and decode JSON data of that type."]}),"\n",(0,i.jsx)(n.h2,{id:"built-in-decoders-and-encoders",children:"Built-in Decoders and Encoders"}),"\n",(0,i.jsx)(n.h3,{id:"simple-values",children:"Simple Values"}),"\n",(0,i.jsxs)(n.p,{children:["The ZIO JSON library provides a default implementation for most of the primitive types like ",(0,i.jsx)(n.code,{children:"Int"}),", ",(0,i.jsx)(n.code,{children:"String"}),", ",(0,i.jsx)(n.code,{children:"Boolean"}),", etc."]}),"\n",(0,i.jsx)(n.p,{children:"Let's start test some simple examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport zio.json._\n\ntest("decode from string") {\n  val json    = "\\"John Doe\\""\n  val decoded = JsonDecoder[String].decodeJson(json)\n\n  assertTrue(decoded == Right("John Doe"))\n}\n\ntest("decode from int") {\n  val json    = "123"\n  val decoded = JsonDecoder[Int].decodeJson(json)\n\n  assertTrue(decoded == Right(123))\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"higher-kinded-types",children:"Higher-kinded Types"}),"\n",(0,i.jsxs)(n.p,{children:["It also supports higher-kinded types like ",(0,i.jsx)(n.code,{children:"List"})," and ",(0,i.jsx)(n.code,{children:"Option"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.json._\nimport zio.test._\nimport zio.test.Assertion._\n\ntest("decode from optional value") {\n  val json = "null"\n  val decoded = JsonDecoder[Option[Int]].decodeJson(json)\n  assertTrue(decoded == Right(None))\n} +\ntest("decode from array of ints") {\n  val json    = "[1, 2, 3]"\n  val decoded = json.fromJson[Array[Int]]\n\n  assert(decoded)(isRight(equalTo(Array(1, 2, 3))))\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-define-custom-decoderencoder",children:"How to Define Custom Decoder/Encoder?"}),"\n",(0,i.jsx)(n.h3,{id:"writing-from-scratch",children:"Writing From Scratch"}),"\n",(0,i.jsxs)(n.p,{children:["To have a new instance we implement the ",(0,i.jsx)(n.code,{children:"JsonEncoder"})," and ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," interfaces for a type ",(0,i.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if we have a type ",(0,i.jsx)(n.code,{children:"Person"})," we can create instances of ",(0,i.jsx)(n.code,{children:"JsonEncoder"})," and ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," for this type as below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.json._\nimport zio.json.internal.{Write, RetractReader}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val encoder: JsonEncoder[Person] =\n    new JsonEncoder[Person] {\n      override def unsafeEncode(a: Person, indent: Option[Int], out: Write): Unit = ???\n    }\n  implicit val decoder: JsonDecoder[Person] =\n    new JsonDecoder[Person] {\n      override def unsafeDecode(trace: List[JsonError], in: RetractReader): Person = ???\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Writing encoders and decoders from scratch is a complicated task and is not recommended for regular usage. So we don't deep into it furthermore."}),"\n",(0,i.jsx)(n.h3,{id:"automatic-derivation-of-codecs-macros",children:"Automatic Derivation of Codecs (macros)"}),"\n",(0,i.jsxs)(n.p,{children:["By using macro utilities, we can derive the instances of ",(0,i.jsx)(n.code,{children:"JsonEncoder"})," and ",(0,i.jsx)(n.code,{children:"JsonDecoder"})," for a case class using ",(0,i.jsx)(n.code,{children:"DeriveJsonDecoder.gen[A]"})," and ",(0,i.jsx)(n.code,{children:"DeriveJsonEncoder.gen[A]"})," macros:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport zio.json._\n\ntest("automatic derivation for case classes") {\n  case class Person(name: String, age: Int)\n  object Person {\n    implicit val decoder: JsonDecoder[Person] = DeriveJsonDecoder.gen[Person]\n    implicit val encoder: JsonEncoder[Person] = DeriveJsonEncoder.gen[Person]\n  }\n\n  assertTrue((Person("John", 42).toJson == "{\\"name\\":\\"John\\",\\"age\\":42}")\n    && ("{\\"name\\":\\"John\\",\\"age\\":42}".fromJson[Person] == Right(Person("John", 42)))\n  )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Let's try a more complex example. Assume we have a data type ",(0,i.jsx)(n.code,{children:"Fruit"})," that is written as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"sealed trait Fruit extends Product with Serializable\ncase class Banana(curvature: Double) extends Fruit\ncase class Apple (poison: Boolean)   extends Fruit\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can generate encoder and decoder for this ADT using the macros:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.json._\n\nobject Fruit {\n  implicit val decoder: JsonDecoder[Fruit] =\n    DeriveJsonDecoder.gen[Fruit]\n\n  implicit val encoder: JsonEncoder[Fruit] =\n    DeriveJsonEncoder.gen[Fruit]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"So then we can have the following tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport zio.json._\n\ntest("decode from custom adt") {\n  val json =\n    """\n      |[\n      |  {\n      |    "Apple": {\n      |      "poison": false\n      |    }\n      |  },\n      |  {\n      |    "Banana": {\n      |      "curvature": 0.5\n      |    }\n      |  }\n      |]\n      |""".stripMargin\n\n  val decoded = json.fromJson[List[Fruit]]\n  assertTrue(decoded == Right(List(Apple(false), Banana(0.5))))\n} +\ntest("roundtrip custom adt") {\n  val fruits = List(Apple(false), Banana(0.5))\n  val json = fruits.toJson\n  val roundTrip = json.fromJson[List[Fruit]]\n  assertTrue(roundTrip == Right(fruits))\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mapping-existing-codecs-to-complex-types",children:"Mapping Existing Codecs to Complex Types"}),"\n",(0,i.jsxs)(n.p,{children:["If we have ",(0,i.jsx)(n.code,{children:"JsonDecoder[A]"})," we can map its ",(0,i.jsx)(n.strong,{children:"output"})," to ",(0,i.jsx)(n.code,{children:"JsonDecoder[B]"})," by providing a function ",(0,i.jsx)(n.code,{children:"A => B"})," as an argument to ",(0,i.jsx)(n.code,{children:"map"})," operation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait JsonDecoder[A] {\n  def map[B](f: A => B): JsonDecoder[B]\n} \n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport zio.json._\n\ntest("mapping decoders") {\n  case class Person(name: String, age: Int)\n  object Person {\n    implicit val decoder = JsonDecoder[(String, Int)].map { case (name, age) => Person(name, age) }\n  }\n\n  val person = "[\\"John\\",42]".fromJson[Person]\n\n  assertTrue(person == Right(Person("John", 42)))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If we have ",(0,i.jsx)(n.code,{children:"JsonEncoder[A]"})," we can map its ",(0,i.jsx)(n.strong,{children:"input"})," by providing a function  of typ ",(0,i.jsx)(n.code,{children:"B => A"})," to ",(0,i.jsx)(n.code,{children:"contramap"})," operator to create a new ",(0,i.jsx)(n.code,{children:"JsonEncoder[B]"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait JsonEncoder[A] {\n  def contramap[B](f: B => A): JsonEncoder[B]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.test._\nimport zio.json._\n\ntest("mapping encoders (contramap)") {\n  case class Person(name: String, age: Int)\n  object Person {\n    implicit val encoder: JsonEncoder[Person] =\n      JsonEncoder[(String, Int)].contramap((p: Person) => (p.name, p.age))\n  }\n\n  val json = Person("John", 42).toJson\n\n  assertTrue(json == "[\\"John\\",42]")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"In this section we have covered the basics of JSON encoding and decoding. We have also seen how to create custom codecs for complex types."}),"\n",(0,i.jsxs)(n.p,{children:["All the source code associated with this article is available on the ",(0,i.jsx)(n.a,{href:"http://github.com/zio/zio-quickstarts",children:"ZIO Quickstart"})," on Github."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var s=o(96540);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);