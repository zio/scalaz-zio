"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[21152],{28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var i=a(96540);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},70274:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"zio-schema/operations/schema-migration","title":"Schema Migration","description":"Automatic Migration","source":"@site/docs/zio-schema/operations/schema-migration.md","sourceDirName":"zio-schema/operations","slug":"/zio-schema/operations/schema-migration","permalink":"/zio-schema/operations/schema-migration","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/schema-migration.md","tags":[],"version":"current","frontMatter":{"id":"schema-migration","title":"Schema Migration"},"sidebar":"ecosystem-sidebar","previous":{"title":"Diffing and Patching","permalink":"/zio-schema/operations/diffing-and-patching"},"next":{"title":"Schema Serialization","permalink":"/zio-schema/operations/schema-serialization"}}');var t=a(74848),o=a(28453);const s={id:"schema-migration",title:"Schema Migration"},r=void 0,c={},h=[{value:"Automatic Migration",id:"automatic-migration",level:2},{value:"Manual Migration",id:"manual-migration",level:2},{value:"Deriving Migrations",id:"deriving-migrations",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"automatic-migration",children:"Automatic Migration"}),"\n",(0,t.jsxs)(n.p,{children:["With ZIO Schema, we can automatically migrate data from one version of a schema to another. As software evolves, we often need to add, change or remove old fields. ZIO Schema provides two methods called ",(0,t.jsx)(n.code,{children:"migrate"})," and ",(0,t.jsx)(n.code,{children:"coerce"})," which help migrate the old schema to the new one:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"sealed trait Schema[A] {\n  def migrate[B](newSchema: Schema[B]): Either[String, A => scala.util.Either[String, B]]\n\n  def coerce[B](newSchema: Schema[B]): Either[String, Schema[B]]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"migrate"})," method takes a new schema and returns a function that can migrate values of the old schema to values of the new schema as a ",(0,t.jsx)(n.code,{children:"Right"})," value of ",(0,t.jsx)(n.code,{children:"Either"}),". If the schemas have unambiguous transformations or are incompatible, the method returns a ",(0,t.jsx)(n.code,{children:"Left"})," value containing an error message."]}),"\n",(0,t.jsx)(n.h2,{id:"manual-migration",children:"Manual Migration"}),"\n",(0,t.jsxs)(n.p,{children:["By having ",(0,t.jsx)(n.code,{children:"DynamicValue"})," which its type information embedded in the data itself, we can perform migrations of the data easily by applying a sequence of migration steps to the data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait DynamicValue {\n  def transform(transforms: Chunk[Migration]): Either[String, DynamicValue]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Migration"})," is a sealed trait with several subtypes:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"sealed trait Migration\nobject Migration {\n  final case class AddNode(override val path: NodePath, node: MetaSchema) extends Migration\n\n  final case class DeleteNode(override val path: NodePath) extends Migration\n\n  final case class AddCase(override val path: NodePath, node: MetaSchema) extends Migration\n\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"Migration"})," ADT we can describe the migration steps and then we can apply them to the ",(0,t.jsx)(n.code,{children:"DynamicValue"}),". Let's try a simple example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.Chunk\nimport zio.schema.meta.Migration.DeleteNode\nimport zio.schema.meta.{Migration, NodePath}\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person1(name: String, age: Int)\n\nobject Person1 {\n  implicit val schema: Schema[Person1] = DeriveSchema.gen\n}\n\ncase class Person2(name: String)\n\nobject Person2 {\n  implicit val schema: Schema[Person2] = DeriveSchema.gen\n}\n\nval person1: Person1 = Person1("John Doe", 42)\n\nval migrations: Chunk[Migration] = Chunk(DeleteNode(NodePath.root / "age"))\n\nval person2 = DeriveSchema\n  .gen[Person1]\n  .toDynamic(person1)\n  .transform(migrations)\n  .flatMap(_.toTypedValue[Person2])\n  \nassert(person2 == Right(Person2("John Doe")))\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deriving-migrations",children:"Deriving Migrations"}),"\n",(0,t.jsxs)(n.p,{children:["ZIO Schema provides a way to derive migrations automatically using the ",(0,t.jsx)(n.code,{children:"Migration.derive"})," operation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object Migration {\n  def derive(from: MetaSchema, to: MetaSchema): Either[String, Chunk[Migration]]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It takes two ",(0,t.jsx)(n.code,{children:"MetaSchema"})," values, the old and the new schema, and returns a ",(0,t.jsx)(n.code,{children:"Chunk[Migration]"})," that describes the migrations steps. Let's try a simple example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import zio.schema._\nimport zio.schema.meta._\n\ncase class Person1(name: String, age: Int, language: String, height: Int)\n\nobject Person1 {\n  implicit val schema: Schema[Person1] = DeriveSchema.gen\n}\n\ncase class Person2(\n    name: String,\n    role: String,\n    language: Set[String],\n    height: Double\n)\n\nobject Person2 {\n  implicit val schema: Schema[Person2] = DeriveSchema.gen\n}\n\nval migrations = Migration.derive(\n  MetaSchema.fromSchema(Person1.schema),\n  MetaSchema.fromSchema(Person2.schema)\n)\n\nprintln(migrations)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The output of the above code is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"Right(\n  Chunk(IncrementDimensions(Chunk(language,item),1),\n  ChangeType(Chunk(height),double),\n  AddNode(Chunk(role),string),\n  DeleteNode(Chunk(age)))\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"This output describes a series of migration steps that should be applied to the old schema to be transformed into the new schema."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);