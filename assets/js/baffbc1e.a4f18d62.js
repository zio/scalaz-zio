"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[68655],{31596:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/error-management/operations/converting-defects-to-failures","title":"Converting Defects to Failures","description":"Both ZIO#resurrect and ZIO#absorb are symmetrical opposite of the ZIO#orDie operator. The ZIO#orDie takes failures from the error channel and converts them into defects, whereas the ZIO#absorb and ZIO#resurrect take defects and convert them into failures:","source":"@site/docs/reference/error-management/operations/converting-defects-to-failures.md","sourceDirName":"reference/error-management/operations","slug":"/reference/error-management/operations/converting-defects-to-failures","permalink":"/reference/error-management/operations/converting-defects-to-failures","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/converting-defects-to-failures.md","tags":[],"version":"current","frontMatter":{"id":"converting-defects-to-failures","title":"Converting Defects to Failures"},"sidebar":"reference-sidebar","previous":{"title":"Exposing the Cause in The Success Channel","permalink":"/reference/error-management/operations/exposing-the-cause-in-the-success-channel"},"next":{"title":"Error Refinement","permalink":"/reference/error-management/operations/error-refinement"}}');var o=r(74848),a=r(28453);const i={id:"converting-defects-to-failures",title:"Converting Defects to Failures"},s=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Both ",(0,o.jsx)(n.code,{children:"ZIO#resurrect"})," and ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," are symmetrical opposite of the ",(0,o.jsx)(n.code,{children:"ZIO#orDie"})," operator. The ",(0,o.jsx)(n.code,{children:"ZIO#orDie"})," takes failures from the error channel and converts them into defects, whereas the ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," and ",(0,o.jsx)(n.code,{children:"ZIO#resurrect"})," take defects and convert them into failures:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"trait ZIO[-R, +E, +A] {\n  def absorb(implicit ev: E IsSubtypeOfError Throwable): ZIO[R, Throwable, A]\n  def absorbWith(f: E => Throwable): ZIO[R, Throwable, A]\n  def resurrect(implicit ev1: E IsSubtypeOfError Throwable): ZIO[R, Throwable, A]\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Below are examples of the ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," and ",(0,o.jsx)(n.code,{children:"ZIO#resurrect"})," operators:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nval effect1 =\n  ZIO.fail(new IllegalArgumentException("wrong argument"))  // ZIO[Any, IllegalArgumentException, Nothing]\n    .orDie                                                  // ZIO[Any, Nothing, Nothing]\n    .absorb                                                 // ZIO[Any, Throwable, Nothing]\n    .refineToOrDie[IllegalArgumentException]                // ZIO[Any, IllegalArgumentException, Nothing]\n\nval effect2 =\n  ZIO.fail(new IllegalArgumentException("wrong argument"))  // ZIO[Any, IllegalArgumentException , Nothing]\n    .orDie                                                  // ZIO[Any, Nothing, Nothing]\n    .resurrect                                              // ZIO[Any, Throwable, Nothing]\n    .refineToOrDie[IllegalArgumentException]                // ZIO[Any, IllegalArgumentException, Nothing]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["So what is the difference between ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," and ",(0,o.jsx)(n.code,{children:"ZIO#resurrect"})," operators?"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," can recover from both ",(0,o.jsx)(n.code,{children:"Die"})," and ",(0,o.jsx)(n.code,{children:"Interruption"})," causes. Using this operator we can absorb failures, defects and interruptions using ",(0,o.jsx)(n.code,{children:"ZIO#absorb"})," operation. It attempts to convert all causes into a failure, throwing away all information about the cause of the error:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val effect1 =\n    ZIO.dieMessage("Boom!") // ZIO[Any, Nothing, Nothing]\n      .absorb               // ZIO[Any, Throwable, Nothing]\n      .ignore\n  val effect2 =\n    ZIO.interrupt           // ZIO[Any, Nothing, Nothing]\n      .absorb               // ZIO[Any, Throwable, Nothing]\n      .ignore\n\n  def run =\n    (effect1 <*> effect2)\n      .debug("application exited successfully")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The output would be as below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"application exited successfully: ()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Whereas, the ",(0,o.jsx)(n.code,{children:"ZIO#resurrect"})," will only recover from ",(0,o.jsx)(n.code,{children:"Die"})," causes:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val effect1 =\n    ZIO\n      .dieMessage("Boom!") // ZIO[Any, Nothing, Nothing]\n      .resurrect           // ZIO[Any, Throwable, Nothing]\n      .ignore\n  val effect2 =\n    ZIO.interrupt          // ZIO[Any, Nothing, Nothing]\n      .resurrect           // ZIO[Any, Throwable, Nothing]\n      .ignore\n\n  def run =\n    (effect1 <*> effect2)\n      .debug("couldn\'t recover from fiber interruption")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"And, here is the output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'timestamp=2022-02-18T14:21:52.559872464Z level=ERROR thread=#zio-fiber-0 message="Exception in thread "zio-fiber-2" java.lang.InterruptedException: Interrupted by thread "zio-fiber-"\n\tat <empty>.MainApp.effect2(MainApp.scala:10)\n\tat <empty>.MainApp.effect2(MainApp.scala:11)\n\tat <empty>.MainApp.effect2(MainApp.scala:12)\n\tat <empty>.MainApp.run(MainApp.scala:15)\n\tat <empty>.MainApp.run(MainApp.scala:16)"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(96540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);