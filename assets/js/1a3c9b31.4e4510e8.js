"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9242],{46299:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"reference/index","title":"Introduction","description":"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:","source":"@site/docs/reference/index.md","sourceDirName":"reference","slug":"/reference/","permalink":"/reference/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction"},"sidebar":"reference-sidebar","next":{"title":"ZIO","permalink":"/reference/core/zio/"}}');var i=n(74848),c=n(28453);const t={id:"index",title:"Introduction"},a=void 0,l={},o=[{value:"Core Data Types",id:"core-data-types",level:2},{value:"Contextual Data Types",id:"contextual-data-types",level:2},{value:"State Management",id:"state-management",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Fiber Primitives",id:"fiber-primitives",level:3},{value:"Concurrency Primitives",id:"concurrency-primitives",level:3},{value:"Synchronization Aids",id:"synchronization-aids",level:3},{value:"STM",id:"stm",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Testing",id:"testing",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#core-data-types",children:"Core Data Types"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#contextual-data-types",children:"Contextual Data Types"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#state-management",children:"State Management"})}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"#concurrency",children:"Concurrency"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#fiber-primitives",children:"Fiber Primitives"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#concurrency-primitives",children:"Concurrency Primitives"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#synchronization-aids",children:"Synchronization Aids"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#stm",children:"STM"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#resource-management",children:"Resource Management"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#streaming",children:"Streaming"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#metrics",children:"Metrics"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#testing",children:"Testing"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"#miscellaneous",children:"Miscellaneous"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"core-data-types",children:"Core Data Types"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/",children:"ZIO"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZIO"})," is a value that models an effectful program, which might fail or succeed.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/uio",children:"UIO"})})," \u2014 ",(0,i.jsx)(r.code,{children:"UIO[A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, Nothing, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/urio",children:"URIO"})})," \u2014 ",(0,i.jsx)(r.code,{children:"URIO[R, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[R, Nothing, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/task",children:"Task"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Task[A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, Throwable, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/rio",children:"RIO"})})," \u2014 ",(0,i.jsx)(r.code,{children:"RIO[R, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[R, Throwable, A]"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zio/io",children:"IO"})})," \u2014 ",(0,i.jsx)(r.code,{children:"IO[E, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZIO[Any, E, A]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/zioapp",children:"ZIOApp"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZIOApp"})," and the ",(0,i.jsx)(r.code,{children:"ZIOAppDefault"})," are entry points for ZIO applications."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/runtime",children:"Runtime"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Runtime[R]"})," is capable of executing tasks within an environment ",(0,i.jsx)(r.code,{children:"R"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/exit",children:"Exit"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Exit[E, A]"})," describes the result of executing an ",(0,i.jsx)(r.code,{children:"IO"})," value."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/core/cause",children:"Cause"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Cause[E]"})," is a description of a full story of a fiber failure."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"contextual-data-types",children:"Contextual Data Types"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/zenvironment",children:"ZEnvironment"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZEnvironment[R]"})," is a built-in type-level map for the ",(0,i.jsx)(r.code,{children:"ZIO"})," data type which is responsible for maintaining the environment of a ",(0,i.jsx)(r.code,{children:"ZIO"})," effect."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/zlayer",children:"ZLayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZLayer[-RIn, +E, +ROut]"})," is a recipe to build an environment of type ",(0,i.jsx)(r.code,{children:"ROut"}),", starting from a value ",(0,i.jsx)(r.code,{children:"RIn"}),", and possibly producing an error ",(0,i.jsx)(r.code,{children:"E"})," during creation.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/rlayer",children:"RLayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"RLayer[-RIn, +ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[RIn, Throwable, ROut]"}),", which represents a layer that requires ",(0,i.jsx)(r.code,{children:"RIn"})," as its input, it may fail with ",(0,i.jsx)(r.code,{children:"Throwable"})," value, or returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/ulayer",children:"ULayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ULayer[+ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[Any, Nothing, ROut]"}),", which represents a layer that doesn't require any services as its input, it can't fail, and returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/layer",children:"Layer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Layer[+E, +ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[Any, E, ROut]"}),", which represents a layer that doesn't require any services, it may fail with an error type of ",(0,i.jsx)(r.code,{children:"E"}),", and returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/urlayer",children:"URLayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"URLayer[-RIn, +ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[RIn, Nothing, ROut]"}),", which represents a layer that requires ",(0,i.jsx)(r.code,{children:"RIn"})," as its input, it can't fail, and returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/contextual/tasklayer",children:"TaskLayer"})})," \u2014 ",(0,i.jsx)(r.code,{children:"TaskLayer[+ROut]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZLayer[Any, Throwable, ROut]"}),", which represents a layer that doesn't require any services as its input, it may fail with ",(0,i.jsx)(r.code,{children:"Throwable"})," value, and returns ",(0,i.jsx)(r.code,{children:"ROut"})," as its output."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"state-management",children:"State Management"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/state-management/zstate",children:"ZState"})}),"\u2014 It models a state that can be read from and written to during the execution of an effect."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/state-management/global-shared-state",children:"Ref"})}),"\u2014 ",(0,i.jsx)(r.code,{children:"Ref[A]"})," models a mutable reference to a value of type ",(0,i.jsx)(r.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/state-management/fiberref",children:"FiberRef"})}),"\u2014 ",(0,i.jsx)(r.code,{children:"FiberRef[A]"})," models a mutable reference to a value of type ",(0,i.jsx)(r.code,{children:"A"}),". As opposed to ",(0,i.jsx)(r.code,{children:"Ref[A]"}),", a value is bound to an executing ",(0,i.jsx)(r.code,{children:"Fiber"})," only.  You can think of it as Java's ",(0,i.jsx)(r.code,{children:"ThreadLocal"})," on steroids."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"concurrency",children:"Concurrency"}),"\n",(0,i.jsx)(r.h3,{id:"fiber-primitives",children:"Fiber Primitives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/fiber/fiber.md",children:"Fiber"})})," \u2014 A fiber value models an ",(0,i.jsx)(r.code,{children:"IO"})," value that has started running, and is the moral equivalent of a green thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/fiber/fiberstatus",children:"Fiber.Status"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Fiber.Status"})," describe the current status of a Fiber."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/fiber/fiberid",children:"FiberId"})})," \u2014 ",(0,i.jsx)(r.code,{children:"FiberId"})," describe the unique identity of a Fiber."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"concurrency-primitives",children:"Concurrency Primitives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/hub",children:"Hub"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Hub"})," is an asynchronous message hub that allows publishers to efficiently broadcast values to many subscribers."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/promise",children:"Promise"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Promise"})," is a model of a variable that may be set a single time, and awaited on by many fibers."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/semaphore",children:"Semaphore"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Semaphore"})," is an asynchronous (non-blocking) semaphore that plays well with ZIO's interruption."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/ref",children:"Ref"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Ref[A]"})," models a mutable reference to a value of type ",(0,i.jsx)(r.code,{children:"A"}),". The two basic operations are ",(0,i.jsx)(r.code,{children:"set"}),", which fills the ",(0,i.jsx)(r.code,{children:"Ref"})," with a new value, and ",(0,i.jsx)(r.code,{children:"get"}),", which retrieves its current content. All operations on a ",(0,i.jsx)(r.code,{children:"Ref"})," are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/refsynchronized",children:"Ref.Synchronized"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Ref.Synchronized[A]"})," models a ",(0,i.jsx)(r.strong,{children:"mutable reference"})," to a value of type ",(0,i.jsx)(r.code,{children:"A"})," in which we can store ",(0,i.jsx)(r.strong,{children:"immutable"})," data, and update it atomically ",(0,i.jsx)(r.strong,{children:"and"})," effectfully."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/concurrency/queue",children:"Queue"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"Queue"})," is an asynchronous queue that never blocks, which is safe for multiple concurrent producers and consumers."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"synchronization-aids",children:"Synchronization Aids"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/sync/reentrantlock",children:"ReentrantLock"})}),"\u2014 The ",(0,i.jsx)(r.code,{children:"ReentrantLock"})," is a synchronization tool that is useful for synchronizing blocks of code."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/sync/countdownlatch",children:"CountdownLatch"})})," \u2014 A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers completes."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/sync/cyclicbarrier",children:"CyclicBarrier"})})," \u2014 A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/sync/concurrentmap",children:"ConcurrentMap"})})," \u2014 A Map wrapper over ",(0,i.jsx)(r.code,{children:"java.util.concurrent.ConcurrentHashMap"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/sync/concurrentset",children:"ConcurrentSet"})})," \u2014 A Set implementation over ",(0,i.jsx)(r.code,{children:"java.util.concurrent.ConcurrentHashMap"})]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"stm",children:"STM"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/stm.md",children:"STM"})})," \u2014 An ",(0,i.jsx)(r.code,{children:"STM"})," represents an effect that can be performed transactionally resulting in a failure or success."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tarray",children:"TArray"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TArray"})," is an array of mutable references that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tset",children:"TSet"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TSet"})," is a mutable set that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tmap",children:"TMap"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TMap"})," is a mutable map that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tref",children:"TRef"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TRef"})," is a mutable reference to an immutable value that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tpriorityqueue",children:"TPriorityQueue"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TPriorityQueue"})," is a mutable priority queue that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tpromise",children:"TPromise"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TPromise"})," is a mutable reference that can be set exactly once and can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tqueue",children:"TQueue"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TQueue"})," is a mutable queue that can participate in transactions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/treentrantlock",children:"TReentrantLock"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TReentrantLock"})," is a reentrant read / write lock that can be composed."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stm/tsemaphore",children:"TSemaphore"})})," \u2014 A ",(0,i.jsx)(r.code,{children:"TSemaphore"})," is a semaphore that can participate in transactions."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/resource/scope",children:"Scope"})})," \u2014 A scope in which resources can safely be used."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/resource/zpool",children:"ZPool"})})," \u2014 An asynchronous and concurrent generalized pool of reusable resources."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"streaming",children:"Streaming"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/zstream/",children:"ZStream"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZStream"})," is a lazy, concurrent, asynchronous source of values.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Stream"})," \u2014 ",(0,i.jsx)(r.code,{children:"Stream[E, A]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZStream[Any, E, A]"}),", which represents a ZIO stream that does not require any services, and may fail with an ",(0,i.jsx)(r.code,{children:"E"}),", or produce elements with an ",(0,i.jsx)(r.code,{children:"A"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/zsink/",children:"ZSink"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZSink"})," is a consumer of values from a ",(0,i.jsx)(r.code,{children:"ZStream"}),", which may produce a value when it has consumed enough.","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/zsink/",children:"Sink"})})," \u2014 ",(0,i.jsx)(r.code,{children:"Sink[InErr, A, OutErr, L, B]"})," is a type alias for ",(0,i.jsx)(r.code,{children:"ZSink[Any, InErr, A, OutErr, L, B]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/zpipeline",children:"ZPipeline"})})," \u2014 ",(0,i.jsx)(r.code,{children:"ZPipeline"})," is a polymorphic stream transformer."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/subscription-ref",children:"SubscriptionRef"})})," \u2014 ",(0,i.jsx)(r.code,{children:"SubscriptionRef[A]"})," contains a current value of type ",(0,i.jsx)(r.code,{children:"A"})," and a stream that can be consumed to observe all changes to that value."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsx)(r.p,{children:"IO supports 5 types of Metrics:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/metrics/counter",children:"Counter"})})," \u2014 The Counter is used for any value that increases over time like ",(0,i.jsx)(r.em,{children:"request counts"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/metrics/gauge",children:"Gauge"})})," \u2014 The gauge is a single numerical value that can arbitrary goes up or down over time like ",(0,i.jsx)(r.em,{children:"memory usage"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/metrics/histogram",children:"Histogram"})})," \u2014 The Histogram is used to track the distribution of a set of observed values across a set of buckets like ",(0,i.jsx)(r.em,{children:"request latencies"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/metrics/summary",children:"Summary"})})," \u2014 The Summary represents a sliding window of a time series along with metrics for certain percentiles of the time series, referred to as quantiles like ",(0,i.jsx)(r.em,{children:"request latencies"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/metrics/frequency",children:"Frequency"})})," \u2014 The Frequency is a metric that counts the number of occurrences of distinct string values."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/spec",children:"Spec"})}),"\u2014 A ",(0,i.jsx)(r.code,{children:"Spec[R, E]"})," is the backbone of ZIO Test. All specs require an environment of type ",(0,i.jsx)(r.code,{children:"R"})," and may potentially fail with an error of type ",(0,i.jsx)(r.code,{children:"E"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/assertions/",children:"Assertion"})}),"\u2014 An ",(0,i.jsx)(r.code,{children:"Assertion[A]"})," is a test assertion that can be used to assert the predicate of type ",(0,i.jsx)(r.code,{children:"A => Boolean"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/aspects/",children:"TestAspect"})}),"\u2014 A ",(0,i.jsx)(r.code,{children:"TestAspect"})," is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/property-testing/built-in-generators",children:"Gen"})}),"\u2014 A ",(0,i.jsx)(r.code,{children:"Gen[R, A]"})," represents a generator of values of type ",(0,i.jsx)(r.code,{children:"A"}),", which requires an environment ",(0,i.jsx)(r.code,{children:"R"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Test Service"}),"\u2014 ZIO Test has the following out-of-the-box test services:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/console",children:"TestConsole"})}),"\u2014 It allows testing of applications that interact with the console."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/clock",children:"TestClock"})}),"\u2014 We can deterministically and efficiently test effects involving the passage of time without actually having to wait for the full amount of time to pass."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/random",children:"TestRandom"})}),"\u2014 This service allows us having fully deterministic testing of code that deals with Randomness."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/system",children:"TestSystem"})}),"\u2014 It supports deterministic testing of effects involving system properties."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/live",children:"Live"})}),"\u2014 It provides access to the live environment from within the test environment for effects."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/config",children:"TestConfig"})}),"\u2014 It provides access to default configuration settings used by ZIO Test."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/test/services/sized",children:"Sized"})}),"\u2014 It enables ",(0,i.jsx)(r.em,{children:"Sized Generators"})," to access the size from the ZIO Test environment."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/stream/chunk",children:"Chunk"})}),"\u2014 ",(0,i.jsx)(r.code,{children:"Chunk"})," is a fast, pure alternative to Arrays."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/reference/observability/supervisor",children:"Supervisor"})}),"\u2014 ",(0,i.jsx)(r.code,{children:"Supervisor[A]"})," is allowed to supervise the launching and termination of fibers, producing some visible value of type ",(0,i.jsx)(r.code,{children:"A"})," from the supervision."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"To learn more about these data types, please explore the pages above, or check out the Scaladoc documentation."})]})}function d(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var s=n(96540);const i={},c=s.createContext(i);function t(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(c.Provider,{value:r},e.children)}}}]);