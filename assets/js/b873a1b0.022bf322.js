"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[78387],{28453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>c});var n=s(96540);const i={},d=n.createContext(i);function t(e){const r=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(d.Provider,{value:r},e.children)}},44447:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/primary-keys","title":"Primary Keys","description":"In the native AWS DynamoDB API primary keys are represented in two different ways depending on context:","source":"@site/docs/zio-dynamodb/reference/hi-level-api/primary-keys.md","sourceDirName":"zio-dynamodb/reference/hi-level-api","slug":"/zio-dynamodb/reference/hi-level-api/primary-keys","permalink":"/zio-dynamodb/reference/hi-level-api/primary-keys","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/primary-keys.md","tags":[],"version":"current","frontMatter":{"id":"primary-keys","title":"Primary Keys"},"sidebar":"ecosystem-sidebar","previous":{"title":"querySome","permalink":"/zio-dynamodb/reference/hi-level-api/scan-and-query-operations/query-some"},"next":{"title":"Low Level API","permalink":"/zio-dynamodb/reference/low-level-api/"}}');var i=s(74848),d=s(28453);const t={id:"primary-keys",title:"Primary Keys"},c=void 0,o={},l=[{value:"Unified Type Safe High Level API for Primary Key Expressions",id:"unified-type-safe-high-level-api-for-primary-key-expressions",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"In the native AWS DynamoDB API primary keys are represented in two different ways depending on context:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"AWS"}),(0,i.jsx)(r.th,{children:"Example"}),(0,i.jsx)(r.th,{children:"Context"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Primary Keys"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'{"id": "1", "year": 2023}'})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"GetItem"}),", ",(0,i.jsx)(r.code,{children:"PutItem"}),", ",(0,i.jsx)(r.code,{children:"DeleteItem"})," ",(0,i.jsx)(r.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-Key",children:"AWS API"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Key Condition Expressions"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"#id=:val1 and #year > :val2"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"Query"})," ",(0,i.jsx)(r.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.KeyConditionExpressions.html",children:"AWS API"})]})]})]})]}),"\n",(0,i.jsxs)(r.p,{children:["Here we see that for CRUD operations the primary key is represented as a JSON object where each value is checked for ",(0,i.jsx)(r.em,{children:"equality"}),", while for Query operations the primary key is represented as a key condition ",(0,i.jsx)(r.em,{children:"expression"})," ."]}),"\n",(0,i.jsxs)(r.p,{children:["The High Level API unifies the two different ways to represent a primary key into a single ",(0,i.jsx)(r.em,{children:"type safe"})," API."]}),"\n",(0,i.jsx)(r.h2,{id:"unified-type-safe-high-level-api-for-primary-key-expressions",children:"Unified Type Safe High Level API for Primary Key Expressions"}),"\n",(0,i.jsx)(r.p,{children:"Assuming the below model"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:"final case class Person(id: String, year: Int, address: String)\nobject Person {\n  implicit val schema: Schema.CaseClass3[String, Int, String, Person] = DeriveSchema.gen[Person]\n  val (id, year, address) = ProjectExpression.accessors[Person]\n}\nfinal case class Employee(id: String, group: String, address: String)\nobject Person {\n  implicit val schema: Schema.CaseClass3[String, Int, String, Person] = DeriveSchema.gen[Person]\n  val (id, year, address) = ProjectExpression.accessors[Person]\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The High Level API unifies the two different ways into a single Type Safe API that is accessed by using the ",(0,i.jsx)(r.code,{children:"ProjectExpression"})," returned by the ",(0,i.jsx)(r.code,{children:"ProjectExpression.accessors"})," function as a springboard via the ",(0,i.jsx)(r.code,{children:"partitionKey"})," and ",(0,i.jsx)(r.code,{children:"sortKey"})," methods."]}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"AWS"}),(0,i.jsx)(r.th,{children:"Example"}),(0,i.jsx)(r.th,{children:"Context"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Primary Keys"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:'Person.id.partitionKey === "1" && Person.year.sortKey === "2020'}),'"']}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"GetItem"}),", ",(0,i.jsx)(r.code,{children:"PutItem"}),", ",(0,i.jsx)(r.code,{children:"DeleteItem"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Key Condition Expressions"}),(0,i.jsxs)(r.td,{children:["[Query]",(0,i.jsx)(r.code,{children:'.whereKey(Person.id.partitionKey === "1" && Person.year.sortKey > 2020)'})]}),(0,i.jsxs)(r.td,{children:["[Query]",(0,i.jsx)(r.code,{children:".whereKey"})]})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Valid operations on primary keys are:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"context"}),(0,i.jsx)(r.th,{children:"operation"}),(0,i.jsx)(r.th,{children:"applies to"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"Person.id.partitionKey"}),(0,i.jsx)("br",{}),(0,i.jsx)(r.code,{children:"Person.year.sortKey"})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"==="})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"GetItem"}),", ",(0,i.jsx)(r.code,{children:"PutItem"}),", ",(0,i.jsx)(r.code,{children:"DeleteItem"}),", [Query]",(0,i.jsx)(r.code,{children:".whereKey"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'Person.id.partitionKey === "1"'})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"&&"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"GetItem"}),", ",(0,i.jsx)(r.code,{children:"PutItem"}),", ",(0,i.jsx)(r.code,{children:"DeleteItem"}),", [Query]",(0,i.jsx)(r.code,{children:".whereKey"}),". ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," Provides conjunction from a partition key to a sort key"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Person.year.sortKey"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">"})}),(0,i.jsxs)(r.td,{children:["[Query]",(0,i.jsx)(r.code,{children:".whereKey"})," only"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:">="})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<="})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"<>"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:".between(2021, 2023)"})}),(0,i.jsx)(r.td,{})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Employee.group.sortKey"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:'.beginsWith("Group1")'})}),(0,i.jsx)(r.td,{children:"Applies to String sort keys only"})]})]})]})]})}function a(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);