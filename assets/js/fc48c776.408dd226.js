"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[25311],{74038:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/tutorials/run-our-first-zio-project-with-vscode","title":"Tutorial: How to Run Our First ZIO Project With VSCode?","description":"ZIO is a type-safe library for building asynchronous and concurrent applications. The Scala compiler can catch a lot of errors at compile time since it is type-safe. This ensures that our code is mostly correct, and it prevents lots of bugs from creeping into the runtime. So having a type-safe editor that highlights errors will improve our development experience. VSCode with the power of the Metals extension provides us with a type-safe editor for writing Scala programs.","source":"@site/docs/guides/tutorials/run-our-first-zio-project-with-vscode.md","sourceDirName":"guides/tutorials","slug":"/guides/tutorials/run-our-first-zio-project-with-vscode","permalink":"/guides/tutorials/run-our-first-zio-project-with-vscode","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/guides/tutorials/run-our-first-zio-project-with-vscode.md","tags":[],"version":"current","frontMatter":{"id":"run-our-first-zio-project-with-vscode","title":"Tutorial: How to Run Our First ZIO Project With VSCode?","sidebar_label":"Running Our First ZIO Project With VSCode"},"sidebar":"guides-sidebar","previous":{"title":"Create Custom Logger for a ZIO Application","permalink":"/guides/tutorials/create-custom-logger-for-a-zio-application"},"next":{"title":"Running Our First ZIO Project With IntelliJ IDEA","permalink":"/guides/tutorials/run-our-first-zio-project-with-intellij-idea"}}');var o=i(74848),r=i(28453);const s={id:"run-our-first-zio-project-with-vscode",title:"Tutorial: How to Run Our First ZIO Project With VSCode?",sidebar_label:"Running Our First ZIO Project With VSCode"},l=void 0,a={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Creating a new ZIO project",id:"creating-a-new-zio-project",level:2},{value:"Diagnosing the Build",id:"diagnosing-the-build",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["ZIO is a ",(0,o.jsx)(t.em,{children:"type-safe"})," library for building asynchronous and concurrent applications. The Scala compiler can catch a lot of errors at compile time since it is type-safe. This ensures that our code is mostly correct, and it prevents lots of bugs from creeping into the runtime. So having a type-safe editor that highlights errors will improve our development experience. VSCode with the power of the ",(0,o.jsx)(t.em,{children:"Metals"})," extension provides us with a type-safe editor for writing Scala programs."]}),"\n",(0,o.jsx)(t.p,{children:"In this tutorial, we will walk through how to run our first ZIO project with VSCode. We will start by creating a new project and then importing that into the VSCode workspace."}),"\n",(0,o.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(t.p,{children:"In this article, we assume that we have already downloaded and installed the following tools:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://www.scala-sbt.org/download.html",children:"SBT build tool"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://code.visualstudio.com/",children:"VSCode"})}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"creating-a-new-zio-project",children:"Creating a new ZIO project"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"First, we need to create a new directory where we should put our project files:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"mkdir my-zio-project\ncd my-zio-project\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"2",children:["\n",(0,o.jsxs)(t.li,{children:["Next, we need to create a new ",(0,o.jsx)(t.code,{children:"build.sbt"})," file:"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"touch build.sbt\n"})}),"\n",(0,o.jsx)(t.p,{children:"Inside this file, let's add the following lines which include the version of Scala language, the name of our project, and the dependencies we want to use:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'scalaVersion := "2.13.10"\nname := "my-zio-project"\nversion := "0.0.1"\n\nlibraryDependencies ++= Seq(\n  "zio" %% "zio" % "2.0.5"\n)\n'})}),"\n",(0,o.jsxs)(t.ol,{start:"3",children:["\n",(0,o.jsxs)(t.li,{children:["Also, we need to specify the SBT version we want to use in the ",(0,o.jsx)(t.code,{children:"project/build.properties"})," file:"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"mkdir project\ntouch project/build.properties\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now, let's add the following lines to the ",(0,o.jsx)(t.code,{children:"project/build.properties"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"sbt.version = 1.8.0\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"4",children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["We are ready to open our project in VsCode. We can do this by opening the ",(0,o.jsx)(t.code,{children:"my-zio-project"})," directory from the ",(0,o.jsx)(t.code,{children:"File > Open Folder"})," menu."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["When we open a project that has a ",(0,o.jsx)(t.code,{children:"build.sbt"})," file, the ",(0,o.jsx)(t.em,{children:"Metals"})," extension will automatically detect the project and prompt us with the following message:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"VSCode",src:i(32920).A+"",width:"1096",height:"724"})}),"\n",(0,o.jsxs)(t.ol,{start:"6",children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["By clicking on the ",(0,o.jsx)(t.code,{children:"Import Build"})," button, the ",(0,o.jsx)(t.em,{children:"Metals"})," will try to download the dependencies from the ",(0,o.jsx)(t.code,{children:"build.sbt"})," file and then import the whole project into the workspace."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["After that, we are ready to write our first ZIO program by creating a new file called ",(0,o.jsx)(t.code,{children:"MainApp.scala"})," inside the ",(0,o.jsx)(t.code,{children:"src/main/scala"})," directory:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"$ mkdir src/main/scala\n$ touch src/main/scala/MainApp.scala\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Let's add the following lines to our ",(0,o.jsx)(t.code,{children:"MainApp.scala"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run = \n    for {\n      name <- Console.readLine("What is your name? ")\n      _    <- Console.printLine(s"Hello, $name!")\n    } yield ()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Now, we can run our program by clicking on the ",(0,o.jsx)(t.em,{children:"run"})," button above the ",(0,o.jsx)(t.code,{children:"MainApp"})," object."]}),"\n",(0,o.jsxs)(t.p,{children:["After we have imported our project using ",(0,o.jsx)(t.em,{children:"Metals"}),", the editor can highlight syntax errors, type-check our code, and run the program. Additionally, it provides code completion that helps us choose the right method. Another handy feature is the ability to jump to the definition of methods and classes just by _Ctrl + Click_ing on them."]}),"\n",(0,o.jsx)(t.h2,{id:"diagnosing-the-build",children:"Diagnosing the Build"}),"\n",(0,o.jsxs)(t.p,{children:["Sometime, the build may fail. To diagnose the build, the first place to look is the ",(0,o.jsx)(t.em,{children:"Metals"})," output, which can be found in the ",(0,o.jsx)(t.em,{children:"Output Window"})," in the VSCode. The output window can be opened by typing ",(0,o.jsx)(t.em,{children:"Toggle Output"})," in the command palette (",(0,o.jsx)(t.code,{children:"Ctrl + Shift + P"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.em,{children:"Metals"})," also provide a build diagnostics panel called ",(0,o.jsx)(t.em,{children:"Metals Doctor"})," which can be opened by typing ",(0,o.jsx)(t.em,{children:"Metals: Run doctor"})," in the command palette. This command will show us the status of the build and if there are any errors, it will guide us on how to fix them."]}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(t.p,{children:["In this tutorial, we have learned how to run a ZIO project with VSCode using the Metals extension. VSCode along with the Metals extension provide lots of handy features that improve the productivity of developers. To learn more about this, we recommend reading the ",(0,o.jsx)(t.a,{href:"https://scalameta.org/metals/docs/editors/vscode/",children:"Metals documentation for VSCode editor"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},32920:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/vscode-a1a1ffa90a17ac344d4fbfe34d1167d9.jpg"},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>l});var n=i(96540);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);