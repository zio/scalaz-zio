"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[41415],{12443:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/fiber/fiberstatus","title":"Fiber.Status","description":"Fiber.Status describe the current status of a Fiber.","source":"@site/versioned_docs/version-1.0.18/reference/fiber/fiberstatus.md","sourceDirName":"reference/fiber","slug":"/reference/fiber/fiberstatus","permalink":"/1.0.18/reference/fiber/fiberstatus","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/fiber/fiberstatus.md","tags":[],"version":"1.0.18","frontMatter":{"id":"fiberstatus","title":"Fiber.Status"},"sidebar":"overview_sidebar","previous":{"title":"Fiber.Id","permalink":"/1.0.18/reference/fiber/fiberid"},"next":{"title":"Introduction","permalink":"/1.0.18/reference/concurrency/"}}');var i=r(74848),s=r(28453);const o={id:"fiberstatus",title:"Fiber.Status"},c=void 0,a={},l=[];function f(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Fiber.Status"})," describe the current status of a ",(0,i.jsx)(n.a,{href:"/1.0.18/reference/fiber/",children:"Fiber"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Each fiber can be in one of the following statues:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Done"}),"\n",(0,i.jsx)(n.li,{children:"Finishing"}),"\n",(0,i.jsx)(n.li,{children:"Running"}),"\n",(0,i.jsx)(n.li,{children:"Suspended"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we are going to ",(0,i.jsx)(n.code,{children:"await"})," on a never-ending fiber and determine the id of that fiber, which we are blocking on:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.console._\nfor {\n  f1 <- ZIO.never.fork\n  f2 <- f1.await.fork\n  blockingOn <- f2.status\n    .collect(()) { case Fiber.Status.Suspended(_, _, _, blockingOn, _) =>\n      blockingOn\n    }\n    .eventually\n} yield (assert(blockingOn == List(f1.id)))\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);