"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20696],{59397:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ecosystem/community/zio-kinesis","title":"ZIO Kinesis","description":"ZIO Kinesis is a ZIO-based AWS Kinesis client for Scala.","source":"@site/docs/ecosystem/community/zio-kinesis.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/zio-kinesis","permalink":"/ecosystem/community/zio-kinesis","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-kinesis.md","tags":[],"version":"current","frontMatter":{"id":"zio-kinesis","title":"ZIO Kinesis"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO K8s","permalink":"/ecosystem/community/zio-k8s"},"next":{"title":"ZIO NebulaGraph","permalink":"/ecosystem/community/zio-nebula"}}');var s=n(74848),t=n(28453);const r={id:"zio-kinesis",title:"ZIO Kinesis"},a=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function d(e){const i={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://github.com/svroonland/zio-kinesis",children:"ZIO Kinesis"})," is a ZIO-based AWS Kinesis client for Scala."]}),"\n",(0,s.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(i.p,{children:["ZIO Kinesis is an interface to Amazon Kinesis Data Streams for consuming and producing data. This library is built on top of ",(0,s.jsx)(i.a,{href:"https://github.com/zio/zio-aws",children:"ZIO AWS"}),", a library of automatically generated ZIO wrappers around AWS SDK methods."]}),"\n",(0,s.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(i.p,{children:["In order to use this library, we need to add the following line in our ",(0,s.jsx)(i.code,{children:"build.sbt"})," file:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'libraryDependencies += "nl.vroste" %% "zio-kinesis" % "0.20.0"\n'})}),"\n",(0,s.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(i.p,{children:"This is an example of consuming a stream from Amazon Kinesis:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'import nl.vroste.zio.kinesis.client.serde.Serde\nimport nl.vroste.zio.kinesis.client.zionative.Consumer\nimport zio.clock.Clock\nimport zio.console.{Console, putStrLn}\nimport zio.duration._\nimport zio.logging.Logging\nimport zio.{ExitCode, URIO, _}\n\nobject ZIOKinesisConsumerExample extends zio.App {\n  val loggingLayer: ZLayer[Any, Nothing, Logging] =\n    (Console.live ++ Clock.live) >>>\n      Logging.console() >>>\n      Logging.withRootLoggerName(getClass.getName)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    Consumer\n      .consumeWith(\n        streamName = "my-stream",\n        applicationName = "my-application",\n        deserializer = Serde.asciiString,\n        workerIdentifier = "worker1",\n        checkpointBatchSize = 1000L,\n        checkpointDuration = 5.minutes\n      )(record => putStrLn(s"Processing record $record"))\n      .provideCustom(Consumer.defaultEnvironment ++ loggingLayer)\n      .exitCode\n}\n'})})]})}function m(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var o=n(96540);const s={},t=o.createContext(s);function r(e){const i=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:i},e.children)}}}]);