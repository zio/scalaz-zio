"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[19812],{1188:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/creating-models/index","title":"Creating Models","description":"The High Level API provides automatic serialization and deserialization of Scala case classes to and from DynamoDB types.","source":"@site/docs/zio-dynamodb/reference/hi-level-api/creating-models/index.md","sourceDirName":"zio-dynamodb/reference/hi-level-api/creating-models","slug":"/zio-dynamodb/reference/hi-level-api/creating-models/","permalink":"/zio-dynamodb/reference/hi-level-api/creating-models/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/creating-models/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Creating Models","sidebar_label":"Creating Models"},"sidebar":"ecosystem-sidebar","previous":{"title":"High Level API","permalink":"/zio-dynamodb/reference/hi-level-api/"},"next":{"title":"Field Traversal","permalink":"/zio-dynamodb/reference/hi-level-api/creating-models/field-traversal"}}');var t=s(74848),d=s(28453);const r={id:"index",title:"Creating Models",sidebar_label:"Creating Models"},c=void 0,o={},a=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The High Level API provides automatic serialization and deserialization of Scala case classes to and from DynamoDB types.\nThis is done by requiring that an implicit ZIO Schema instance is in scope for the case class. This schema instance is\ngenerated semi-automatically by using the ZIO Schema ",(0,t.jsx)(n.code,{children:"DeriveSchema.gen[A]"})," - placing this in the companion object of\nthe case class ensures that this implicit is automatically in scope."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"final case class Person(email: String, hobbies: Map[String, List[String]], registrationDate: Instant)\nobject Person {\n  implicit val schema: Schema.CaseClass3[String, Map[String, List[String]], Instant, Person] =\n    DeriveSchema.gen[Person]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This semi-automatically derived schema is used to automatically generate codecs for the case class (in the ",(0,t.jsx)(n.code,{children:"Codecs"})," object)\nto perform the serialization and deserialization to and from DynamoDB types."]}),"\n",(0,t.jsxs)(n.p,{children:["All standard Scala types are supported by the codecs, as well as nested case classes and collections. Note that where\npossible Scala types are mapped to corresponding DynamoDB types, for example Scala ",(0,t.jsx)(n.code,{children:"Map"}),"'s and ",(0,t.jsx)(n.code,{children:"Set"}),"'s are mapped to\nnative DynamoDB types."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Scala Scalar Types"}),(0,t.jsx)(n.th,{children:"Native DynamoDB Type"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Unit"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"NULL"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"S"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Numeric Types"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"N"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Collection[byte]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"B"})}),(0,t.jsx)(n.td,{children:"Any Scala collection type of byte is serialized to a DynamoDB binary type"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BOOL"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"java.time.*"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"S"})}),(0,t.jsx)(n.td,{children:"There is no native date/time support. Instant is serialized to a string in ISO-8601 format"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"java.util.UUID"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"S"})}),(0,t.jsxs)(n.td,{children:["There is no native ",(0,t.jsx)(n.code,{children:"UUID"})," support"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"java.util.Currency"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"S"})}),(0,t.jsxs)(n.td,{children:["There is no native ",(0,t.jsx)(n.code,{children:"Currency"})," support"]})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Note in the below table that types ",(0,t.jsx)(n.code,{children:"A"}),", ",(0,t.jsx)(n.code,{children:"K"})," and ",(0,t.jsx)(n.code,{children:"V"})," can be collections or case classes as well as scalar types."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Scala Collection Types"}),(0,t.jsx)(n.th,{children:"Native DynamoDB Type"}),(0,t.jsx)(n.th,{children:"Notes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Option[A]"})}),(0,t.jsx)(n.td,{}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Some"}),"/",(0,t.jsx)(n.code,{children:"None"})," are represented by the presence and the absence of the field in the DynamoDB item resepctively."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"List[A]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"L"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Set[String]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SS"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Set"})," of numeric type"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"NS"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Set"})," of binary type"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BS"})}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Set[A]"})," of other type"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"L"})}),(0,t.jsx)(n.td,{children:"If type is not a string or a numeric then a list is used"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Map[String, A]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"M"})}),(0,t.jsx)(n.td,{children:"if key type is a string then a native Map is used"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Map[K, V]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"L"})}),(0,t.jsx)(n.td,{children:"otherwise a list of tuple of key value pair is used"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Note during model development you can use the optional ",(0,t.jsx)(n.code,{children:"zio-dynamodb-json"})," module to view the DynamoDB types generated by the codecs.\neg for the above example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.dynamodb.json._\nval person = Person("email", Map("sports" -> List("cricket", "football")), Instant.now)\nprintln(person.toJsonStringPretty[Person])\n'})}),"\n",(0,t.jsx)(n.p,{children:"...would print the following which is representation of the native DynamoDB types and data in a standard JSON format used in AWS console views:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "registrationDate" : {\n    "S" : "2024-12-05T05:47:46.300286Z"\n  },\n  "hobbies" : {\n    "sports" : {\n      "L" : [\n        {\n          "S" : "cricket"\n        },\n        {\n          "S" : "football"\n        }\n      ]\n    }\n  },\n  "email" : {\n    "S" : "email"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more information about using the ",(0,t.jsx)(n.code,{children:"zio-dynamodb-json"})," module please see the ",(0,t.jsx)(n.a,{href:"reference/zio-dynamodb-json.md",children:"ZIO DynamoDB Json"})," reference page."]}),"\n",(0,t.jsxs)(n.p,{children:["For more information about customising data mappings please see the ",(0,t.jsx)(n.a,{href:"guides/codec-customization.md",children:"Codec Customization"})," guide."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(96540);const t={},d=i.createContext(t);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);