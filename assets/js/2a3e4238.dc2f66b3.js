"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[29587],{10416:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"overview/overview_running_effects","title":"Running Effects","description":"ZIO provides several different ways of running effects in your application.","source":"@site/versioned_docs/version-1.0.18/overview/running_effects.md","sourceDirName":"overview","slug":"/overview/overview_running_effects","permalink":"/1.0.18/overview/overview_running_effects","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/overview/running_effects.md","tags":[],"version":"1.0.18","frontMatter":{"id":"overview_running_effects","title":"Running Effects"},"sidebar":"overview_sidebar","previous":{"title":"Testing Effects","permalink":"/1.0.18/overview/overview_testing_effects"},"next":{"title":"Background","permalink":"/1.0.18/overview/overview_background"}}');var o=t(74848),i=t(28453);const s={id:"overview_running_effects",title:"Running Effects"},c=void 0,l={},a=[{value:"App",id:"app",level:2},{value:"Default Runtime",id:"default-runtime",level:2},{value:"Custom Runtime",id:"custom-runtime",level:2},{value:"Error Reporting",id:"error-reporting",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"ZIO provides several different ways of running effects in your application."}),"\n",(0,o.jsx)(n.h2,{id:"app",children:"App"}),"\n",(0,o.jsxs)(n.p,{children:["If you construct a single effect for your whole program, then the most natural way to run the effect is to extend ",(0,o.jsx)(n.code,{children:"zio.App"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This class provides Scala with a main function, so it can be called from IDEs and launched from the command-line. All you have to do is implement the ",(0,o.jsx)(n.code,{children:"run"})," method, which will be passed all command-line arguments in a ",(0,o.jsx)(n.code,{children:"List"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.console._\n\nobject MyApp extends zio.App {\n\n  def run(args: List[String]) =\n    myAppLogic.exitCode\n\n  val myAppLogic =\n    for {\n      _    <- putStrLn("Hello! What is your name?")\n      name <- getStrLn\n      _    <- putStrLn(s"Hello, ${name}, welcome to ZIO!")\n    } yield ()\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you are using a custom environment for your application, you will have to supply your environment to the effect (using ",(0,o.jsx)(n.code,{children:"ZIO#provide"}),") before you return it from ",(0,o.jsx)(n.code,{children:"run"}),", because ",(0,o.jsx)(n.code,{children:"App"})," does not know how to supply custom environments."]}),"\n",(0,o.jsx)(n.h2,{id:"default-runtime",children:"Default Runtime"}),"\n",(0,o.jsx)(n.p,{children:"Most applications are not greenfield, and must integrate with legacy code, and procedural libraries and frameworks."}),"\n",(0,o.jsxs)(n.p,{children:["In these cases, a better solution for running effects is to create a ",(0,o.jsx)(n.code,{children:"Runtime"}),", which can be passed around and used to run effects wherever required."]}),"\n",(0,o.jsxs)(n.p,{children:["ZIO contains a default runtime called ",(0,o.jsx)(n.code,{children:"Runtime.default"}),". This ",(0,o.jsx)(n.code,{children:"Runtime"})," bundles together production implementations of all ZIO modules (including ",(0,o.jsx)(n.code,{children:"Console"}),", ",(0,o.jsx)(n.code,{children:"System"}),", ",(0,o.jsx)(n.code,{children:"Clock"}),", ",(0,o.jsx)(n.code,{children:"Random"}),", ",(0,o.jsx)(n.code,{children:"Scheduler"}),", and on the JVM, ",(0,o.jsx)(n.code,{children:"Blocking"}),"), and it can run effects that require any combination of these modules."]}),"\n",(0,o.jsx)(n.p,{children:"To access it, merely use"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val runtime = Runtime.default\n"})}),"\n",(0,o.jsx)(n.p,{children:"Once you have a runtime, you can use it to execute effects:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'runtime.unsafeRun(ZIO(println("Hello World!")))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In addition to the ",(0,o.jsx)(n.code,{children:"unsafeRun"})," method, there are other methods that allow executing effects asynchronously or into ",(0,o.jsx)(n.code,{children:"Future"})," values."]}),"\n",(0,o.jsx)(n.h2,{id:"custom-runtime",children:"Custom Runtime"}),"\n",(0,o.jsxs)(n.p,{children:["If you are using a custom environment for your application, then you may find it useful to create a ",(0,o.jsx)(n.code,{children:"Runtime"})," specifically tailored for that environment."]}),"\n",(0,o.jsxs)(n.p,{children:["A custom ",(0,o.jsx)(n.code,{children:"Runtime[R]"})," can be created with two values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"R"})," Environment"]}),". This is the environment that will be provided to effects when they are executed."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Platform"})}),". This is a platform that is required by ZIO in order to bootstrap the runtime system."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For example, the following creates a ",(0,o.jsx)(n.code,{children:"Runtime"})," that can provide an ",(0,o.jsx)(n.code,{children:"Int"})," to effects, using the default ",(0,o.jsx)(n.code,{children:"Platform"})," provided by ZIO:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.internal.Platform\n\nval myRuntime: Runtime[Int] = Runtime(42, Platform.default)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"error-reporting",children:"Error Reporting"}),"\n",(0,o.jsxs)(n.p,{children:["In the ",(0,o.jsx)(n.code,{children:"Platform"})," that is a part of every runtime, there is an error reporter that will be called by ZIO to report every unhandled error. It is a good idea to supply your own error reporter, which can log unhandled errors to a file."]}),"\n",(0,o.jsx)(n.p,{children:"The default unhandled error reporter merely logs the error to standard error."}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"If you are comfortable with running effects, then congratulations!"}),"\n",(0,o.jsx)(n.p,{children:"You are now ready to dive into other sections on the ZIO website, covering data types, use cases, and interop with other systems."}),"\n",(0,o.jsx)(n.p,{children:"Refer to the Scaladoc for detailed documentation on all the core ZIO types and methods."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);