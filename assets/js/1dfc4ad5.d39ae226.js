"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[92909],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(96540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},66578:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"reference/test/services/sized","title":"Sized","description":"The Sized service enables the Sized Generators to access the size from the ZIO Test environment:","source":"@site/docs/reference/test/services/sized.md","sourceDirName":"reference/test/services","slug":"/reference/test/services/sized","permalink":"/reference/test/services/sized","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/services/sized.md","tags":[],"version":"current","frontMatter":{"id":"sized","title":"Sized"},"sidebar":"reference-sidebar","previous":{"title":"TestConfig","permalink":"/reference/test/services/config"},"next":{"title":"Test Aspects","permalink":"/reference/test/aspects/"}}');var t=s(74848),r=s(28453);const c={id:"sized",title:"Sized"},d=void 0,o={},a=[{value:"Operations",id:"operations",level:2},{value:"size",id:"size",level:3},{value:"withSize",id:"withsize",level:3}];function l(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Sized"})," service enables the ",(0,t.jsx)(n.em,{children:"Sized Generators"})," to access the ",(0,t.jsx)(n.em,{children:"size"})," from the ZIO Test environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"trait Sized extends Serializable {\n  def size: UIO[Int]\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Sized"})," service has two APIs:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Sized.size"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Sized.withSize"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let's go through each one:"}),"\n",(0,t.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,t.jsx)(n.h3,{id:"size",children:"size"}),"\n",(0,t.jsxs)(n.p,{children:["To access the default ",(0,t.jsx)(n.em,{children:"size"})," value from the environment, we can use the ",(0,t.jsx)(n.code,{children:"Sized.size"})," API. In ZIO Test, it is used to enable the ",(0,t.jsx)(n.em,{children:"sized generators"})," access the ",(0,t.jsx)(n.em,{children:"size"})," from the environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object Sized {\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For example, the ",(0,t.jsx)(n.code,{children:"Gen.sized"})," generator has the following signature:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object Gen {\n  def sized[R, A](f: Int => Gen[R, A]): Gen[R, A] = ???\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It applies the ",(0,t.jsx)(n.em,{children:"size"})," to the given function of type ",(0,t.jsx)(n.code,{children:"Int => Gen[R, A]"}),". We should note that the ",(0,t.jsx)(n.code,{children:"sized"})," generator obtains the ",(0,t.jsx)(n.code,{children:"size"})," value from the environment internally."]}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, we are creating a sized generator, which generates integer values within the specified range. In this generator, the lower bound is bound to zero, and the upper bound is bound to the ",(0,t.jsx)(n.em,{children:"size"})," value, which is obtained from the ZIO environment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.test._\n\nval sizedInts: Gen[Any, Int] = \n  Gen.sized(Gen.int(0, _))\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To generate some sample values, we can use ",(0,t.jsx)(n.code,{children:"Gen#runCollectN"})," operator on that:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"val samples: UIO[List[Int]] = \n  sizedInts.runCollectN(5).debug\n"})}),"\n",(0,t.jsx)(n.h3,{id:"withsize",children:"withSize"}),"\n",(0,t.jsxs)(n.p,{children:["To change the default ",(0,t.jsx)(n.em,{children:"size"})," temporarily, we can use the ",(0,t.jsx)(n.code,{children:"Size.withSize"}),". It takes a ",(0,t.jsx)(n.code,{children:"size"})," and a ZIO effect, and runs that effect bounded with the given ",(0,t.jsx)(n.code,{children:"size"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object Sized {\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.test._\n\nval effect     : UIO[String] = ZIO.succeed("effect")\nval sizedEffect: UIO[String] = Sized.withSize(10)(effect)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["ZIO Test has a test aspect called ",(0,t.jsx)(n.code,{children:"TestAspect.size"})," which is a helper method for this operation. This test aspect runs each test with the given ",(0,t.jsx)(n.em,{children:"size"})," value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.test._\n\nobject SizedSpec extends ZIOSpecDefault {\n  def spec =\n    suite("sized") {\n      test("bounded int generator shouldn\'t cross its boundaries") {\n        check(Gen.sized(Gen.int(0, _))) { n =>\n          assertTrue(n >= 0 && n <= 200)\n        }\n      } @@ TestAspect.size(200)\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);