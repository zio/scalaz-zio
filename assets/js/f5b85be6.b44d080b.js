"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[93458],{3457:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"reference/stream/zstream/resourceful-streams","title":"Resourceful Streams","description":"Most of the constructors of ZStream have a special variant to lift a scoped resource to a Stream (e.g. ZStream.fromReaderScoped). By using these constructors, we are creating streams that are resource-safe. Before creating a stream, they acquire the resource, and after usage; they close the stream.","source":"@site/docs/reference/stream/zstream/resourceful-streams.md","sourceDirName":"reference/stream/zstream","slug":"/reference/stream/zstream/resourceful-streams","permalink":"/reference/stream/zstream/resourceful-streams","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/resourceful-streams.md","tags":[],"version":"current","frontMatter":{"id":"resourceful-streams","title":"Resourceful Streams"},"sidebar":"reference-sidebar","previous":{"title":"Creating ZIO Streams","permalink":"/reference/stream/zstream/creating-zio-streams"},"next":{"title":"Operations","permalink":"/reference/stream/zstream/operations"}}');var a=t(74848),s=t(28453);const i={id:"resourceful-streams",title:"Resourceful Streams"},o=void 0,c={},l=[{value:"Acquire Release",id:"acquire-release",level:2},{value:"Finalization",id:"finalization",level:2},{value:"Ensuring",id:"ensuring",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:["Most of the constructors of ",(0,a.jsx)(r.code,{children:"ZStream"})," have a special variant to lift a scoped resource to a Stream (e.g. ",(0,a.jsx)(r.code,{children:"ZStream.fromReaderScoped"}),"). By using these constructors, we are creating streams that are resource-safe. Before creating a stream, they acquire the resource, and after usage; they close the stream."]}),"\n",(0,a.jsxs)(r.p,{children:["ZIO Stream also has ",(0,a.jsx)(r.code,{children:"acquireRelease"})," and ",(0,a.jsx)(r.code,{children:"finalizer"})," constructors which are similar to ",(0,a.jsx)(r.code,{children:"ZIO.acquireRelease"}),". They allow us to clean up or finalizing before the stream ends:"]}),"\n",(0,a.jsx)(r.h2,{id:"acquire-release",children:"Acquire Release"}),"\n",(0,a.jsxs)(r.p,{children:["We can provide ",(0,a.jsx)(r.code,{children:"acquire"})," and ",(0,a.jsx)(r.code,{children:"release"})," actions to ",(0,a.jsx)(r.code,{children:"ZStream.acquireReleaseWith"})," to create a resourceful stream:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-scala",children:"object ZStream {\n  def acquireReleaseWith[R, E, A](\n    acquire: ZIO[R, E, A]\n  )(\n    release: A => URIO[R, Any]\n  ): ZStream[R, E, A] = ???\n"})}),"\n",(0,a.jsxs)(r.p,{children:["Let's see an example of using an acquire release when reading a file. In this example, by providing ",(0,a.jsx)(r.code,{children:"acquire"})," and ",(0,a.jsx)(r.code,{children:"release"})," actions to ",(0,a.jsx)(r.code,{children:"ZStream.acquireReleaseWith"}),", it gives us a scoped stream of ",(0,a.jsx)(r.code,{children:"BufferedSource"}),". As this stream is scoped, we can convert that ",(0,a.jsx)(r.code,{children:"BufferedSource"})," to a stream of its lines and then run it, without worrying about resource leakage:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-scala",children:'val lines: ZStream[Any, Throwable, String] =\n  ZStream\n    .acquireReleaseWith(\n      ZIO.attempt(Source.fromFile("file.txt")) <* printLine("The file was opened.")\n    )(x => ZIO.succeed(x.close()) <* printLine("The file was closed.").orDie)\n    .flatMap { is =>\n      ZStream.fromIterator(is.getLines())\n    }\n'})}),"\n",(0,a.jsx)(r.h2,{id:"finalization",children:"Finalization"}),"\n",(0,a.jsx)(r.p,{children:"We can also create a stream that never fails and define a finalizer for it, so that finalizer will be executed before that stream ends."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-scala",children:"object ZStream {\n  def finalizer[R](\n    finalizer: URIO[R, Any]\n  ): ZStream[R, Nothing, Any] = ???\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:"It is useful when need to add a finalizer to an existing stream. Assume we need to clean up the temporary directory after our streaming application ends:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-scala",children:'import zio.Console._\n\ndef application: ZStream[Any, IOException, Unit] = ZStream.fromZIO(printLine("Application Logic."))\ndef deleteDir(dir: Path): ZIO[Any, IOException, Unit] = printLine("Deleting file.")\n\nval myApp: ZStream[Any, IOException, Any] =\n  application ++ ZStream.finalizer(\n    (deleteDir(Paths.get("tmp")) *>\n      printLine("Temporary directory was deleted.")).orDie\n  )\n'})}),"\n",(0,a.jsx)(r.h2,{id:"ensuring",children:"Ensuring"}),"\n",(0,a.jsxs)(r.p,{children:["We might want to run some code after the execution of the stream's finalization. To do so, we can use the ",(0,a.jsx)(r.code,{children:"ZStream#ensuring"})," operator:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-scala",children:'ZStream\n  .finalizer(Console.printLine("Finalizing the stream").orDie)\n  .ensuring(\n    printLine("Doing some other works after stream\'s finalization").orDie\n  )\n  \n// Output:\n// Finalizing the stream\n// Doing some other works after stream\'s finalization\n'})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(96540);const a={},s=n.createContext(a);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);