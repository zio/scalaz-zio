"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2348],{82493:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"reference/stream/zsink/leftovers","title":"Leftovers","description":"Collecting Leftovers","source":"@site/docs/reference/stream/zsink/leftovers.md","sourceDirName":"reference/stream/zsink","slug":"/reference/stream/zsink/leftovers","permalink":"/reference/stream/zsink/leftovers","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zsink/leftovers.md","tags":[],"version":"current","frontMatter":{"id":"leftovers","title":"Leftovers"},"sidebar":"reference-sidebar","previous":{"title":"Parallel Operators","permalink":"/reference/stream/zsink/parallel-operators"},"next":{"title":"Introduction To ZChannels","permalink":"/reference/stream/zchannel/"}}');var s=t(74848),o=t(28453);const i={id:"leftovers",title:"Leftovers"},l=void 0,c={},a=[{value:"Collecting Leftovers",id:"collecting-leftovers",level:2},{value:"Ignoring Leftovers",id:"ignoring-leftovers",level:2}];function f(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"collecting-leftovers",children:"Collecting Leftovers"}),"\n",(0,s.jsxs)(n.p,{children:["A sink consumes a variable amount of ",(0,s.jsx)(n.code,{children:"I"})," elements (zero or more) from the upstream. If the upstream is finite, we can collect leftover values by calling ",(0,s.jsx)(n.code,{children:"ZSink#collectLeftover"}),". It returns a tuple that contains the result of the previous sink and its leftovers:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val s1: ZIO[Any, Nothing, (Chunk[Int], Chunk[Int])] =\n  ZStream(1, 2, 3, 4, 5).run(\n    ZSink.take(3).collectLeftover\n  )\n// Output: (Chunk(1, 2, 3), Chunk(4, 5))\n\n\nval s2: ZIO[Any, Nothing, (Option[Int], Chunk[Int])] =\n  ZStream(1, 2, 3, 4, 5).run(\n    ZSink.head[Int].collectLeftover\n  )\n// Output: (Some(1), Chunk(2, 3, 4, 5))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ignoring-leftovers",children:"Ignoring Leftovers"}),"\n",(0,s.jsxs)(n.p,{children:["If we don't need leftovers, we can drop them by using ",(0,s.jsx)(n.code,{children:"ZSink#ignoreLeftover"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"ZSink.take[Int](3).ignoreLeftover\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);