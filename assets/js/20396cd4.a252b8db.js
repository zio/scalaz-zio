"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[39176],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(96540);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},30071:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"zio-schema/derivations/ordering-derivation","title":"Ordering Derivation","description":"Standard Scala library provides a type class called Ordering[A] that allows us to compare values of type A. ZIO Schema provides a method called ordering that generates an Ordering[A] instance for the underlying type described by the schema:","source":"@site/docs/zio-schema/derivations/ordering-derivation.md","sourceDirName":"zio-schema/derivations","slug":"/zio-schema/derivations/ordering-derivation","permalink":"/zio-schema/derivations/ordering-derivation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/ordering-derivation.md","tags":[],"version":"current","frontMatter":{"id":"ordering-derivation","title":"Ordering Derivation"},"sidebar":"ecosystem-sidebar","previous":{"title":"Dynamic Data Representation","permalink":"/zio-schema/operations/dynamic-data-representation"},"next":{"title":"Optics Derivation","permalink":"/zio-schema/derivations/optics-derivation"}}');var t=r(74848),o=r(28453);const s={id:"ordering-derivation",title:"Ordering Derivation"},a=void 0,d={},c=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Standard Scala library provides a type class called ",(0,t.jsx)(n.code,{children:"Ordering[A]"})," that allows us to compare values of type ",(0,t.jsx)(n.code,{children:"A"}),". ZIO Schema provides a method called ",(0,t.jsx)(n.code,{children:"ordering"})," that generates an ",(0,t.jsx)(n.code,{children:"Ordering[A]"})," instance for the underlying type described by the schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"sealed trait Schema[A] {\n  def ordering: Ordering[A]\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example, where it helps us to sort the list of ",(0,t.jsx)(n.code,{children:"Person"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import zio.schema._\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n}\n\nval sortedList: Seq[Person] =\n  List(\n    Person("John", 42),\n    Person("Jane", 34)\n  ).sorted(Person.schema.ordering)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);