"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[32862],{79625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-logging/testing","title":"Testing","description":"ZIO 2 test library has test logger implementation for testing:","source":"@site/docs/zio-logging/testing.md","sourceDirName":"zio-logging","slug":"/zio-logging/testing","permalink":"/zio-logging/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/testing.md","tags":[],"version":"current","frontMatter":{"id":"testing","title":"Testing"},"sidebar":"ecosystem-sidebar","previous":{"title":"Log Metrics","permalink":"/zio-logging/metrics"},"next":{"title":"ZIO Metrics Connectors","permalink":"/zio-metrics-connectors/"}}');var i=n(74848),s=n(28453);const r={id:"testing",title:"Testing"},a=void 0,g={},l=[];function c(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"ZIO 2 test library has test logger implementation for testing:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-test" % ZioVersion % Test\n'})}),"\n",(0,i.jsx)(t.p,{children:"Test logger layer:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"zio.test.ZTestLogger.default\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can find the source code of examples ",(0,i.jsx)(t.a,{href:"https://github.com/zio/zio-logging/tree/master/examples/src/test/scala/zio/logging/example",children:"here"})]}),"\n",(0,i.jsx)(t.p,{children:"Test example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.{ LogAnnotation, logContext }\nimport zio.test.Assertion._\nimport zio.test._\nimport zio.{ Chunk, LogLevel, Runtime, ZIO, ZIOAspect, _ }\n\nimport java.util.UUID\n\nobject LoggingSpec extends ZIOSpecDefault {\n\n  override def spec: Spec[TestEnvironment, Any] = suite("LoggingSpec")(\n    test("start stop log output") {\n      val users = Chunk.fill(2)(UUID.randomUUID())\n      for {\n        traceId      <- ZIO.succeed(UUID.randomUUID())\n        _            <- ZIO.foreach(users) { uId =>\n                          {\n                            ZIO.logInfo("Starting operation") *> ZIO.sleep(500.millis) *> ZIO.logInfo("Stopping operation")\n                          } @@ ZIOAspect.annotated("user", uId.toString)\n                        } @@ LogAnnotation.TraceId(traceId)\n        _            <- ZIO.logInfo("Done")\n        loggerOutput <- ZTestLogger.logOutput\n      } yield assertTrue(loggerOutput.size == 5) && assertTrue(\n        loggerOutput.forall(_.logLevel == LogLevel.Info)\n      ) && assert(loggerOutput.map(_.message()))(\n        equalTo(\n          Chunk(\n            "Starting operation",\n            "Stopping operation",\n            "Starting operation",\n            "Stopping operation",\n            "Done"\n          )\n        )\n      ) && assert(loggerOutput.map(_.context.get(logContext).flatMap(_.asMap.get(LogAnnotation.TraceId.name))))(\n        equalTo(\n          Chunk.fill(4)(Some(traceId.toString)) :+ None\n        )\n      ) && assert(loggerOutput.map(_.annotations.get("user")))(\n        equalTo(users.flatMap(u => Chunk.fill(2)(Some(u.toString))) :+ None)\n      )\n    }\n  ).provideLayer(\n    Runtime.removeDefaultLoggers >>> ZTestLogger.default\n  ) @@ TestAspect.withLiveClock\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(96540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);