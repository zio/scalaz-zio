"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[31161],{53730:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"zio-actors/akka-interop","title":"Akka Interop","description":"Akka Interop gives you the ability to send and receive messages between zio actors and akka typed actors.","source":"@site/docs/zio-actors/akka-interop.md","sourceDirName":"zio-actors","slug":"/zio-actors/akka-interop","permalink":"/zio-actors/akka-interop","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-actors/akka-interop.md","tags":[],"version":"current","frontMatter":{"id":"akka-interop","title":"Akka Interop"},"sidebar":"ecosystem-sidebar","previous":{"title":"Persistence","permalink":"/zio-actors/persistence"},"next":{"title":"Examples","permalink":"/zio-actors/examples"}}');var n=s(74848),o=s(28453);const r={id:"akka-interop",title:"Akka Interop"},i=void 0,c={},d=[];function l(e){const a={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.p,{children:"Akka Interop gives you the ability to send and receive messages between zio actors and akka typed actors."}),"\n",(0,n.jsxs)(a.p,{children:["To use Akka Interops you need in your ",(0,n.jsx)(a.code,{children:"build.sbt"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sbt",children:'libraryDependencies += "dev.zio" %% "zio-actors-akka-interop" % "0.1.0"\n'})}),"\n",(0,n.jsx)(a.p,{children:"Imports required for example:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:"import zio.actors.Actor.Stateful\nimport zio.actors.{ ActorSystem, ActorRef, Context, Supervisor }\nimport zio.actors.akka.{ AkkaTypedActor, AkkaTypedActorRefLocal }\nimport zio.{ ZIO, IO, Runtime }\n\nimport akka.actor.typed\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.Scheduler\nimport akka.util.Timeout\n\nimport scala.concurrent.duration._\n"})}),"\n",(0,n.jsx)(a.p,{children:"Case class for messages that zio actor send and receive from akka actor:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:"sealed trait TypedMessage[+_]\ncase class PingToZio(zioReplyToActor: ActorRef[ZioMessage], msg: String) extends TypedMessage[Unit]\ncase class PingFromZio(zioSenderActor: ActorRef[ZioMessage]) extends TypedMessage[Unit]\n\nsealed trait ZioMessage[+_]\ncase class PongFromAkka(msg: String) extends ZioMessage[Unit]\ncase class Ping(akkaActor: AkkaTypedActorRefLocal[TypedMessage]) extends ZioMessage[Unit]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["For zio actor basics, (",(0,n.jsx)(a.a,{href:"/zio-actors/basics#usage",children:"Basics section"}),").\nHere's the ",(0,n.jsx)(a.code,{children:"Stateful"})," implementation for our zio actor:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'val handler = new Stateful[Any, String, ZioMessage] {\n  override def receive[A](state: String, msg: ZioMessage[A], context: Context): IO[Throwable, (String, A)] =\n    msg match {             \n      case PongFromAkka(msg) => ZIO.succeed((msg, ()))\n      case Ping(akkaActor) =>\n              for {\n                 self <- context.self[ZioMessage]\n                 _    <- akkaActor ! PingFromZio(self)\n               } yield (state, ())\n      case _=> ZIO.fail(new Exception("fail"))\n    }\n}\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Akka actors (",(0,n.jsx)(a.a,{href:"https://doc.akka.io/docs/akka/current/typed/actor-lifecycle.html#creating-actors",children:"Creation akka actors"}),"),\nneed a behavior, to define the messages to be handled, in this case send and receive messages to zio actor:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'object TestBehavior {\n    lazy val zioRuntime = Runtime.default\n    def apply(): Behavior[TypedMessage[_]] =\n      Behaviors.receiveMessage { message =>\n        message match {                  \n          case PingToZio(zioReplyToActor, msgToZio) => \n            zio.Unsafe.unsafe { implicit unsafe =>\n              zioRuntime.unsafe.run(zioReplyToActor ! PongFromAkka(msgToZio))\n            }\n          case PingFromZio(zioSenderActor)          =>\n            zio.Unsafe.unsafe { implicit unsafe => \n              zioRuntime.unsafe.run(zioSenderActor ! PongFromAkka("Pong from Akka"))\n            }\n        }\n        Behaviors.same\n      }\n  } \n'})}),"\n",(0,n.jsxs)(a.p,{children:["We are ready to start sending messages from zio to akka, or vice versa via ",(0,n.jsx)(a.code,{children:"fire-and-forget"})," interaction pattern,\nbut first we need to create a ZIO value with the created akka ActorRef(or ActorSystem), using ",(0,n.jsx)(a.code,{children:"AkkaTypedActor.make"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'for {\n  akkaSystem <- ZIO.succeed(typed.ActorSystem(TestBehavior(), "akkaSystem"))\n  system     <- ActorSystem("zioSystem")\n  akkaActor  <- AkkaTypedActor.make(akkaSystem)\n  zioActor   <- system.make("zioActor", Supervisor.none, "", handler)\n  _          <- akkaActor ! PingToZio(zioActor, "Ping from Akka")\n  _          <- zioActor ! Ping(akkaActor)\n} yield ()\n'})}),"\n",(0,n.jsxs)(a.p,{children:["There's also ",(0,n.jsx)(a.code,{children:"ask"})," interaction pattern, that provides a way to send a message to an akka actor and expect a response.\nIt's performed via ",(0,n.jsx)(a.code,{children:"?"})," method, and needs a parameter of type ",(0,n.jsx)(a.code,{children:"typed.ActorRef[R] => T"})," (",(0,n.jsx)(a.code,{children:"R"})," represents the response type,\n",(0,n.jsx)(a.code,{children:"T"})," is the message type), with implicit values for ",(0,n.jsx)(a.code,{children:"akka.util.Timeout"}),"  and ",(0,n.jsx)(a.code,{children:"akka.actor.typed.Scheduler"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-scala",children:'sealed trait AskMessage[+_]\ncase class PingAsk(value: Int, replyTo: typed.ActorRef[Int]) extends AskMessage[Int]\n\nobject AskTestBehavior {\n    def apply(): Behavior[AskMessage[_]] =\n      Behaviors.receiveMessage { message =>\n        message match {\n          case PingAsk(value, replyTo) => replyTo ! (value * 2)\n        }\n        Behaviors.same\n      }\n  }\n\ndef PingAskDeferred(value: Int): typed.ActorRef[Int] => PingAsk \n       = (hiddenRef: typed.ActorRef[Int]) => PingAsk(value, hiddenRef)\n       \nimport scala.concurrent.duration.DurationInt \nimplicit val timeout: Timeout = 3.seconds\n         \nfor {\n  akkaAskSystem <- ZIO.succeed(typed.ActorSystem(AskTestBehavior(), "akkaSystem"))\n  akkaActor <- AkkaTypedActor.make(akkaAskSystem)\n  result    <- (akkaActor ? PingAskDeferred(1000)) (timeout, akkaAskSystem.scheduler)\n} yield result == 2000\n'})})]})}function k(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>r,x:()=>i});var t=s(96540);const n={},o=t.createContext(n);function r(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);