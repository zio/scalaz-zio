"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[63628],{28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var o=n(96540);const t={},i=o.createContext(t);function s(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:r},e.children)}},57023:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-dynamodb/reference/error-handling","title":"Error Handling","description":"DynamoDBError is a sealed trait that represents all the possible errors that can occur when interacting with DynamoDB","source":"@site/docs/zio-dynamodb/reference/error-handling.md","sourceDirName":"zio-dynamodb/reference","slug":"/zio-dynamodb/reference/error-handling","permalink":"/zio-dynamodb/reference/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/error-handling.md","tags":[],"version":"current","frontMatter":{"id":"error-handling","title":"Error Handling"},"sidebar":"ecosystem-sidebar","previous":{"title":"ProjectionExpression","permalink":"/zio-dynamodb/reference/projection-expression"},"next":{"title":"Auto batching and parallelisation","permalink":"/zio-dynamodb/reference/auto-batching-and-parallelisation"}}');var t=n(74848),i=n(28453);const s={id:"error-handling",title:"Error Handling"},a=void 0,c={},d=[];function l(e){const r={a:"a",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["DynamoDBError is a sealed trait that represents all the possible errors that can occur when interacting with DynamoDB\nand is returned by the DynamoDBQuery ",(0,t.jsx)(r.code,{children:"execute"})," method."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:"def execute: ZIO[DynamoDBExecutor, DynamoDBError, Out] = ???\n"})}),"\n",(0,t.jsx)(r.p,{children:"The error hierarchy is as follows:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError"})})," top level sealed trait","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.ItemError"})})," sealed trait for item level errors","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.ItemError.ValueNotFound"})})," - returned by ",(0,t.jsx)(r.code,{children:"get"})," in the High Level API. If you expect items to be missing you can use the ",(0,t.jsx)(r.code,{children:"maybeFound"})," extension method to return ",(0,t.jsx)(r.code,{children:"None"})," in this scenario. see ",(0,t.jsxs)(r.a,{href:"hi-level-api/crud-operations/get#working-with-get-return-values",children:["Working With ",(0,t.jsx)(r.code,{children:"get"})," Return Values"]})," for more details."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.ItemError.DecodingError"})})," - returned by automatic codecs in the High Level API when data does not match the expected type described by the schema"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.AWSError"})})," - case class that contains the underlying AWS ",(0,t.jsx)(r.code,{children:"Exception"}),". Typically, you need to pattern match on this when you expect a specific AWS exception eg AWS ",(0,t.jsx)(r.code,{children:"ConditionalCheckFailedException"})," when you do a strict insert operation by having a condition expression that asserts the primary key does not exist."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.BatchError"})})," sealed trait for batch related errors. You need to consider this error if queries result in batching eg if you are using ",(0,t.jsx)(r.code,{children:"DynamoDBQuery.forEach"})," or manually ",(0,t.jsx)(r.code,{children:"Zip"}),"'ing together ",(0,t.jsx)(r.code,{children:"DynamoDBQuery"}),"'s or using utility functions that use ",(0,t.jsx)(r.code,{children:"DynamoDBQuery.forEach"}),". Note at the point that this error is raised automatic retries have already occurred. For a long running process typical handler actions would be to record the errors and to carry on processing. See ",(0,t.jsx)(r.a,{href:"auto-batching-and-parallelisation",children:"Auto batching and parallelisation"})," section for more details.","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.BatchError.GetError"})})," - case class returned by automatic batching - ",(0,t.jsx)(r.code,{children:"unprocessedKeys"})," contains a Map of table name to primary key"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.BatchError.WriteError"})})," - returned by automatic batching - ",(0,t.jsx)(r.code,{children:"unprocessedItems"})," contains a map of table name to item/primary key"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.TransactionError"})})," sealed trait for transaction related errors. You need to handle this error if you are using the transaction API ie ",(0,t.jsx)(r.code,{children:"<dynamoDBQuery>.transaction"})," or ",(0,t.jsx)(r.code,{children:"<dynamoDBQuery>.safeTransaction"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.TransactionError.EmptyTransaction"})})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.TransactionError.MixedTransactionTypes"})})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"DynamoDBError.TransactionError.InvalidTransactionActions"})})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);