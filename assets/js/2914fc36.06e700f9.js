"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[13245],{73944:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reference/core/zio/urio","title":"URIO","description":"URIO[R, A] is a type alias for ZIO[R, Nothing, A], which represents an effect that requires an R, and cannot fail, but can succeed with an A.","source":"@site/docs/reference/core/zio/urio.md","sourceDirName":"reference/core/zio","slug":"/reference/core/zio/urio","permalink":"/reference/core/zio/urio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/core/zio/urio.md","tags":[],"version":"current","frontMatter":{"id":"urio","title":"URIO"},"sidebar":"reference-sidebar","previous":{"title":"UIO","permalink":"/reference/core/zio/uio"},"next":{"title":"Task","permalink":"/reference/core/zio/task"}}');var o=n(74848),r=n(28453);const s={id:"urio",title:"URIO"},c=void 0,a={},d=[];function l(e){const t={admonition:"admonition",code:"code",em:"em",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"URIO[R, A]"})," is a type alias for ",(0,o.jsx)(t.code,{children:"ZIO[R, Nothing, A]"}),", which represents an effect that requires an ",(0,o.jsx)(t.code,{children:"R"}),", and cannot fail, but can succeed with an ",(0,o.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["In Scala, the ",(0,o.jsx)(t.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]})}),"\n",(0,o.jsxs)(t.p,{children:["Let's see how the ",(0,o.jsx)(t.code,{children:"URIO"})," type alias is defined:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"type URIO[-R, +A] = ZIO[R, Nothing, A]\n"})}),"\n",(0,o.jsxs)(t.p,{children:["So ",(0,o.jsx)(t.code,{children:"URIO"})," is equal to a ",(0,o.jsx)(t.code,{children:"ZIO"})," that requires ",(0,o.jsx)(t.code,{children:"R"})," and cannot fail (because in Scala the ",(0,o.jsx)(t.code,{children:"Nothing"})," type has no inhabitant, so we can't create an instance of type ",(0,o.jsx)(t.code,{children:"Nothing"}),"). It succeeds with ",(0,o.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,o.jsxs)(t.admonition,{title:"Principle of Least Power",type:"note",children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On the other hand, the type aliases are a way of specializing the ",(0,o.jsx)(t.code,{children:"ZIO"})," type for less powerful workflows."]}),(0,o.jsx)(t.p,{children:"Often, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the appropriate specialized type alias."}),(0,o.jsxs)(t.p,{children:["So there is no need to convert type aliases to the ",(0,o.jsx)(t.code,{children:"ZIO"})," data type, and whenever the ",(0,o.jsx)(t.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(96540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);