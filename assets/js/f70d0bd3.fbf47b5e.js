"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83055],{28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>i});var r=n(96540);const a={},t=r.createContext(a);function d(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(t.Provider,{value:s},e.children)}},82991:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zio-http/reference/request","title":"Request","description":"ZIO HTTP Request is designed in the simplest way possible to decode an HTTP Request into a ZIO HTTP request. It supports all HTTP request methods (as defined in RFC2616 ) and headers along with custom methods and headers.","source":"@site/docs/zio-http/reference/request.md","sourceDirName":"zio-http/reference","slug":"/zio-http/reference/request","permalink":"/zio-http/reference/request","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/request.md","tags":[],"version":"current","frontMatter":{"id":"request","title":"Request"},"sidebar":"ecosystem-sidebar","previous":{"title":"Request Handler","permalink":"/zio-http/reference/handler"},"next":{"title":"Response","permalink":"/zio-http/reference/response/"}}');var a=n(74848),t=n(28453);const d={id:"request",title:"Request"},i=void 0,o={},c=[{value:"Accessing Incoming Request",id:"accessing-incoming-request",level:2},{value:"Creating a Request",id:"creating-a-request",level:2},{value:"Request with Query Params",id:"request-with-query-params",level:2},{value:"Operations",id:"operations",level:2},{value:"Leading/Trailing Slash",id:"leadingtrailing-slash",level:3},{value:"Patching Requests",id:"patching-requests",level:3},{value:"Request Headers",id:"request-headers",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Retrieving Query Parameters",id:"retrieving-query-parameters",level:3},{value:"Modifying Query Parameters",id:"modifying-query-parameters",level:3},{value:"Retrieving URL/Path",id:"retrieving-urlpath",level:3},{value:"Retrieving Cookies and Flashes",id:"retrieving-cookies-and-flashes",level:3},{value:"Client-side Example",id:"client-side-example",level:2}];function l(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"ZIO HTTP"})," ",(0,a.jsx)(s.code,{children:"Request"})," is designed in the simplest way possible to decode an HTTP Request into a ZIO HTTP request. It supports all HTTP request methods (as defined in ",(0,a.jsx)(s.a,{href:"https://datatracker.ietf.org/doc/html/rfc2616",children:"RFC2616"})," ) and headers along with custom methods and headers."]}),"\n",(0,a.jsx)(s.h2,{id:"accessing-incoming-request",children:"Accessing Incoming Request"}),"\n",(0,a.jsxs)(s.p,{children:["To access the incoming request, we can use a ",(0,a.jsx)(s.code,{children:"Handler"})," which takes a ",(0,a.jsx)(s.code,{children:"Request"})," as input and returns a ",(0,a.jsx)(s.code,{children:"Response"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nRoutes(\n  Method.POST / "echo" ->\n    handler { (req: Request) => \n      req.body.asString(Charsets.Utf8).map(Response.text(_)).sandbox \n    }\n)\n'})}),"\n",(0,a.jsxs)(s.p,{children:["To learn more about handlers, please refer to the ",(0,a.jsx)(s.a,{href:"/zio-http/reference/handler",children:"Handler"})," section."]}),"\n",(0,a.jsx)(s.h2,{id:"creating-a-request",children:"Creating a Request"}),"\n",(0,a.jsxs)(s.p,{children:["The default constructor of ",(0,a.jsx)(s.code,{children:"Request"})," takes the following parameters as input: ",(0,a.jsx)(s.code,{children:"version"}),", ",(0,a.jsx)(s.code,{children:"method"}),", ",(0,a.jsx)(s.code,{children:"url"}),", ",(0,a.jsx)(s.code,{children:"headers"}),", ",(0,a.jsx)(s.code,{children:"body"}),", ",(0,a.jsx)(s.code,{children:"remoteAddress"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"final case class Request(\n  version: Version = Version.Default,\n  method: Method = Method.ANY,\n  url: URL = URL.empty,\n  headers: Headers = Headers.empty,\n  body: Body = Body.empty,\n  remoteAddress: Option[InetAddress] = None,\n) extends HeaderOps[Request]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The below snippet creates a request with default params, ",(0,a.jsx)(s.code,{children:"headers"})," as ",(0,a.jsx)(s.code,{children:"Headers.empty"}),", ",(0,a.jsx)(s.code,{children:"data"})," as ",(0,a.jsx)(s.code,{children:"Body.Empty"}),", ",(0,a.jsx)(s.code,{children:"remoteAddress"})," as ",(0,a.jsx)(s.code,{children:"None"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"import zio.http._\n\nRequest(method = Method.GET, url = URL(Path.root))\n// res1: Request = Request(\n//   version = Default,\n//   method = GET,\n//   url = URL(\n//     path = Path(flags = 3, segments = IndexedSeq()),\n//     kind = Relative,\n//     queryParams = JavaLinkedHashMapQueryParams(underlying = {}),\n//     fragment = None\n//   ),\n//   headers = Iterable(),\n//   body = Body.empty,\n//   remoteAddress = None,\n//   remoteCertificate = None\n// )\n"})}),"\n",(0,a.jsxs)(s.p,{children:["There are also some helper methods to create requests for different HTTP methods inside the ",(0,a.jsx)(s.code,{children:"Request"}),"'s companion object: ",(0,a.jsx)(s.code,{children:"delete"}),", ",(0,a.jsx)(s.code,{children:"get"}),", ",(0,a.jsx)(s.code,{children:"head"}),", ",(0,a.jsx)(s.code,{children:"options"}),", ",(0,a.jsx)(s.code,{children:"patch"}),", ",(0,a.jsx)(s.code,{children:"post"}),", and ",(0,a.jsx)(s.code,{children:"put"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"We can access the request's details using the below fields:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"method"})," to access request method"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"headers"})," to get all the headers in the Request"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"body"})," to access the content of the request as a ",(0,a.jsx)(s.code,{children:"Body"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"url"})," to access request URL"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"remoteAddress"})," to access the request's remote address if available"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"version"})," to access the HTTP version"]}),"\n"]}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsx)(s.p,{children:"Please note that usually, we don't create requests on the server-side. Creating requests is useful while writing unit tests or when we call other services using the ZIO HTTP Client."})}),"\n",(0,a.jsx)(s.h2,{id:"request-with-query-params",children:"Request with Query Params"}),"\n",(0,a.jsxs)(s.p,{children:["Query params can be added in the request using ",(0,a.jsx)(s.code,{children:"url"})," in ",(0,a.jsx)(s.code,{children:"Request"}),", ",(0,a.jsx)(s.code,{children:"URL"})," stores query params as ",(0,a.jsx)(s.code,{children:"Map[String, List[String]]"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["The below snippet creates a request with query params: ",(0,a.jsx)(s.code,{children:"?q=a&q=b&q=c"})]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nRequest.get(url = URL(Path.root, queryParams = QueryParams("q" -> Chunk("a","b","c"))))\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"Request#url.queryParams"})," can be used to read query params from the request."]}),"\n",(0,a.jsx)(s.h2,{id:"operations",children:"Operations"}),"\n",(0,a.jsx)(s.h3,{id:"leadingtrailing-slash",children:"Leading/Trailing Slash"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"Request"})," class provides the following methods to add or drop leading/trailing slashes from the URL:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"addLeadingSlash"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"addTrailingSlash"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"dropLeadingSlash"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"dropTrailingSlash"})}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"patching-requests",children:"Patching Requests"}),"\n",(0,a.jsxs)(s.p,{children:["To patch a request, we can use the ",(0,a.jsx)(s.code,{children:"patch"})," method, which takes a ",(0,a.jsx)(s.code,{children:"Request.Patch"})," as input:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nRequest\n  .get("http://localhost:8080/users")\n  .patch(\n    Request.Patch(\n      addHeaders = Headers(Header.ContentType(MediaType.application.`json`)),\n      addQueryParams = QueryParams("role" -> Chunk("reviewer", "editor"))\n    )\n  )\n// res3: Request = Request(\n//   version = Default,\n//   method = GET,\n//   url = URL(\n//     path = Path(flags = 1, segments = IndexedSeq("users")),\n//     kind = Absolute(\n//       scheme = HTTP,\n//       host = "localhost",\n//       originalPort = Some(value = 8080)\n//     ),\n//     queryParams = JavaLinkedHashMapQueryParams(\n//       underlying = {role=[reviewer, editor]}\n//     ),\n//     fragment = None\n//   ),\n//   headers = Iterable(\n//     ContentType(\n//       mediaType = MediaType(\n//         mainType = "application",\n//         subType = "json",\n//         compressible = true,\n//         binary = false,\n//         fileExtensions = List("json", "map"),\n//         extensions = Map(),\n//         parameters = Map()\n//       ),\n//       boundary = None,\n//       charset = None\n//     )\n//   ),\n//   body = Body.empty,\n//   remoteAddress = None,\n//   remoteCertificate = None\n// )\n'})}),"\n",(0,a.jsx)(s.h3,{id:"request-headers",children:"Request Headers"}),"\n",(0,a.jsxs)(s.p,{children:["There are several methods available to get, update, and remove headers from a ",(0,a.jsx)(s.code,{children:"Request"}),":"]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"To access headers, we can use the following methods:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"Request#header"})," to get a single header"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"Request#headerOrFail"})," to get a single header or fail if it doesn't exist"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"Request#headers"})," to get all headers"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"Request#rawHeader"})," to get a single header as a string"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["To update headers, the ",(0,a.jsx)(s.code,{children:"Request#updateHeaders"})," takes a ",(0,a.jsx)(s.code,{children:"Headers => Headers"})," function as input and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with updated headers."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["To add headers, the ",(0,a.jsx)(s.code,{children:"Request#addHeader"})," and ",(0,a.jsx)(s.code,{children:"Request#addHeaders"})," methods are available."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["To remove headers, the ",(0,a.jsx)(s.code,{children:"Request#removeHeader"})," and ",(0,a.jsx)(s.code,{children:"Request#removeHeaders"})," methods are available."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["To set headers, the ",(0,a.jsx)(s.code,{children:"Request#setHeaders"})," method is available."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"request-body",children:"Request Body"}),"\n",(0,a.jsxs)(s.p,{children:["There are several methods available to get, update, and remove body from a ",(0,a.jsx)(s.code,{children:"Request"}),"."]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.code,{children:"Request#body"})," accesses the body of the request."]}),"\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.code,{children:"Request#withBody"})," takes a ",(0,a.jsx)(s.code,{children:"Body"})," as input and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with the updated body."]}),"\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.code,{children:"Request#updateBody"})," and ",(0,a.jsx)(s.code,{children:"Request#updateBody"})," a ",(0,a.jsx)(s.code,{children:"Body => Body"})," or ",(0,a.jsx)(s.code,{children:"Body => ZIO[R, E, Body]"})," function as input and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with the updated body."]}),"\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.code,{children:"Request#collect"})," collects the streaming body of the request and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with the collected body."]}),"\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.code,{children:"Request#ignoreBody"})," consumes the streaming body fully and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with an empty body."]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"retrieving-query-parameters",children:"Retrieving Query Parameters"}),"\n",(0,a.jsxs)(s.p,{children:["There are several methods available to access query parameters from a ",(0,a.jsx)(s.code,{children:"Request"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["To get a single query parameter, we can use the ",(0,a.jsx)(s.code,{children:"Request#queryParam"})," method that takes a ",(0,a.jsx)(s.code,{children:"String"})," as the input key and returns an ",(0,a.jsx)(s.code,{children:"Option[String]"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'// curl -X GET https://localhost:8080/search?q=value -i\nimport zio._\nimport zio.http._\n\nobject QueryParamExample extends ZIOAppDefault {\n\n  val app =\n    Routes(\n      Method.GET / "search" -> handler { (req: Request) =>\n        val queries = req.queryParam("q")\n        queries match {\n          case Some(value) =>\n            Response.text(s"Value of query param q is $value")\n          case None        =>\n            Response.badRequest(s"The q query parameter is missing!")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The typed version of ",(0,a.jsx)(s.code,{children:"Request#queryParam"})," is ",(0,a.jsx)(s.code,{children:"Request#queryParamTo"})," which takes a key and a type parameter of type ",(0,a.jsx)(s.code,{children:"T"})," and finally returns a ",(0,a.jsx)(s.code,{children:"Either[QueryParamsError, T]"})," value:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'// curl -X GET https://localhost:8080/search?age=42 -i\nimport zio.http._\nobject TypedQueryParamExample extends ZIOAppDefault {\n  val app =\n    Routes(\n      Method.GET / "search" -> Handler.fromFunctionHandler { (req: Request) =>\n        val response: ZIO[Any, QueryParamsError, Response] =\n          ZIO.fromEither(req.queryParamTo[Int]("age"))\n             .map(value => Response.text(s"The value of age query param is: $value"))\n\n        Handler.fromZIO(response).catchAll {\n          case QueryParamsError.Missing(name)                  =>\n            Handler.badRequest(s"The $name query param is missing")\n          case QueryParamsError.Malformed(name, codec, values) =>\n            Handler.badRequest(s"The value of $name query param is malformed")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n'})}),"\n",(0,a.jsx)(s.admonition,{type:"info",children:(0,a.jsxs)(s.p,{children:["In the above example, instead of using ",(0,a.jsx)(s.code,{children:'ZIO.fromEither(req.queryParamTo[Int]("age"))'})," we can use ",(0,a.jsx)(s.code,{children:'req.queryParamToZIO[Int]("age")'})," to get a ",(0,a.jsx)(s.code,{children:"ZIO"})," value directly which encodes the error type in the ZIO effect."]})}),"\n",(0,a.jsxs)(s.p,{children:["To retrieve all query parameter values for a key, we can use the ",(0,a.jsx)(s.code,{children:"Request#queryParams"})," method that takes a ",(0,a.jsx)(s.code,{children:"String"})," as the input key and returns a ",(0,a.jsx)(s.code,{children:"Chunk[String]"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'// curl -X GET https://localhost:8080/search?q=value1&q=value2 -i\n\nimport zio._\nimport zio.http._\n\nobject QueryParamsExample extends ZIOAppDefault {\n  val app =\n    Routes(\n      Method.GET / "search" -> handler { (req: Request) =>\n        val queries = req.queryParams("q")\n        if (queries.nonEmpty) {\n          val text = queries.mkString("Here is the list of values for the q query param: [", ",", "]")\n          Response.text(text)\n        } else {\n          Response.badRequest(s"The q query parameter is missing!")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The typed version of ",(0,a.jsx)(s.code,{children:"Request#queryParams"})," is ",(0,a.jsx)(s.code,{children:"Request#queryParamsTo"})," which takes a key and a type parameter of type ",(0,a.jsx)(s.code,{children:"T"})," and finally returns a ",(0,a.jsx)(s.code,{children:"Either[QueryParamsError, Chunk[T]]"})," value."]}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsxs)(s.p,{children:["All the above methods also have ",(0,a.jsx)(s.code,{children:"OrElse"})," versions which take a default value as input and return the default value if the query parameter is not found, e.g. ",(0,a.jsx)(s.code,{children:"Request#queryParamOrElse"}),", ",(0,a.jsx)(s.code,{children:"Request#queryParamToOrElse"}),", ",(0,a.jsx)(s.code,{children:"Request#queryParamsOrElse"}),", ",(0,a.jsx)(s.code,{children:"Request#queryParamsToOrElse"}),"."]})}),"\n",(0,a.jsxs)(s.p,{children:["Using the ",(0,a.jsx)(s.code,{children:"Request#queryParameters"})," method, we can access the query parameters of the request which returns a ",(0,a.jsx)(s.code,{children:"QueryParams"})," object."]}),"\n",(0,a.jsx)(s.h3,{id:"modifying-query-parameters",children:"Modifying Query Parameters"}),"\n",(0,a.jsxs)(s.p,{children:["When we are working with ZIO HTTP Client, we need to create a new ",(0,a.jsx)(s.code,{children:"Request"})," and may need to set/update/remove query parameters. In such cases, we have the following methods available: ",(0,a.jsx)(s.code,{children:"addQueryParam"}),", ",(0,a.jsx)(s.code,{children:"addQueryParams"}),", ",(0,a.jsx)(s.code,{children:"removeQueryParam"}),", ",(0,a.jsx)(s.code,{children:"removeQueryParams"}),", ",(0,a.jsx)(s.code,{children:"setQueryParams"}),", and ",(0,a.jsx)(s.code,{children:"updateQueryParams"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject QueryParamClientExample extends ZIOAppDefault {\n  def run =\n    Client.batched(\n      Request\n        .get("http://localhost:8080/search")\n        .addQueryParam("language", "scala")\n        .addQueryParam("q", "How to Write HTTP App")\n        .addQueryParams("tag", Chunk("zio", "http", "scala")),\n    ).provide(Client.default)\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The above example sends a GET request to ",(0,a.jsx)(s.code,{children:"http://localhost:8080/search?language=scala&q=How+to+Write+HTTP+App&tag=zio&tag=http&tag=scala"}),"."]}),"\n",(0,a.jsx)(s.h3,{id:"retrieving-urlpath",children:"Retrieving URL/Path"}),"\n",(0,a.jsxs)(s.p,{children:["To access the URL of the request, we can utilize the ",(0,a.jsx)(s.code,{children:"Request#url"})," method, which yields a ",(0,a.jsx)(s.code,{children:"URL"})," object. For updating the URL of the request, we can use the ",(0,a.jsx)(s.code,{children:"Request#updateURL"})," method, which takes a ",(0,a.jsx)(s.code,{children:"URL => URL"})," function as input. This function allows us to update the URL and return a new ",(0,a.jsx)(s.code,{children:"Request"})," object with the updated URL."]}),"\n",(0,a.jsxs)(s.p,{children:["If we want to access the path of the request, we can use the ",(0,a.jsx)(s.code,{children:"Request#path"})," method which returns a ",(0,a.jsx)(s.code,{children:"Path"})," object. Also, we can use the ",(0,a.jsx)(s.code,{children:"Request#path"})," method which takes a ",(0,a.jsx)(s.code,{children:"Path"})," and returns a new ",(0,a.jsx)(s.code,{children:"Request"})," with the updated path."]}),"\n",(0,a.jsx)(s.h3,{id:"retrieving-cookies-and-flashes",children:"Retrieving Cookies and Flashes"}),"\n",(0,a.jsx)(s.p,{children:"Cookies and Flashes"}),"\n",(0,a.jsxs)(s.p,{children:["To access all cookies in the request, we can use the ",(0,a.jsx)(s.code,{children:"Request#cookies"})," method which returns a ",(0,a.jsx)(s.code,{children:"Chunk[Cookie]"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'val cookies = request.cookies\n// cookies: Chunk[Cookie] = IndexedSeq(\n//   Request(name = "key1", content = "value1"),\n//   Request(name = "key2", content = "value2")\n// )\n'})}),"\n",(0,a.jsxs)(s.p,{children:["To access a single cookie, we can use the ",(0,a.jsx)(s.code,{children:"Request#cookie"})," method which takes the name of the cookie as input and returns an ",(0,a.jsx)(s.code,{children:"Option[Cookie]"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'val cookie = request.cookie("key1")\n// cookie: Option[Cookie] = Some(\n//   value = Request(name = "key1", content = "value1")\n// )\n'})}),"\n",(0,a.jsxs)(s.p,{children:["To encode errors in the ZIO effect when a cookie is not found, we can use the ",(0,a.jsx)(s.code,{children:"Request#cookieWithOrFail"})," method which takes three groups of parameters: name of the cookie, error message, and finally a function that takes a cookie and returns a ",(0,a.jsx)(s.code,{children:"ZIO"})," effect:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"trait Request {\n  def cookieWithOrFail[R, E, A](name: String)(missingCookieError: E)(f: Cookie => ZIO[R, E, A]): ZIO[R, E, A]\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Here is an example of using ",(0,a.jsx)(s.code,{children:"Request#cookieWithOrFail"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'case class CookieNotFound(cookie: String)\n\nval key = "key3"\nval effect: ZIO[Any, CookieNotFound, Cookie] = \n  request.cookieWithOrFail(key)(CookieNotFound(key))(c => ZIO.succeed(c))\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Or simply use the ",(0,a.jsx)(s.code,{children:"Request#cookieWithZIO"})," method which does the same but ",(0,a.jsx)(s.code,{children:"Throwable"})," is used as the error type:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'val effect: ZIO[Any, Throwable, Cookie] = \n  request.cookieWithZIO("key3")(c => ZIO.succeed(c))\n'})}),"\n",(0,a.jsxs)(s.p,{children:["To get a flash message of type ",(0,a.jsx)(s.code,{children:"A"})," with the given key, we can use the ",(0,a.jsx)(s.code,{children:"Request#flash"})," method which takes a ",(0,a.jsx)(s.code,{children:"Flash[A]"})," as input and returns an ",(0,a.jsx)(s.code,{children:"Option[A]"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'val flashValue = request.flash(Flash.get[Int]("key1"))\n'})}),"\n",(0,a.jsx)(s.h2,{id:"client-side-example",children:"Client-side Example"}),"\n",(0,a.jsxs)(s.p,{children:["In the below example, we are creating a ",(0,a.jsx)(s.code,{children:"Request"})," using the ",(0,a.jsx)(s.code,{children:"Request.get"})," method and then calling the ",(0,a.jsx)(s.code,{children:"Client.batched"})," method to send the request to the servers:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nobject ClientExample extends ZIOAppDefault {\n  def run = Client\n    .batched(Request.get("http://localhost:8080/users/2"))\n    .flatMap(_.body.asString)\n    .debug("Response Body: ")\n    .provide(Client.default)\n\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);