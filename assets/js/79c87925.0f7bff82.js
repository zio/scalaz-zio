"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59929],{77612:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"zio-http/guides/testing-http-apps","title":"Testing HTTP Applications","description":"Testing HTTP applications is a critical part of the development process. Utilizing the ZIO Test we can write first-class tests for our HTTP applications.","source":"@site/docs/zio-http/guides/testing-http-apps.md","sourceDirName":"zio-http/guides","slug":"/zio-http/guides/testing-http-apps","permalink":"/zio-http/guides/testing-http-apps","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/guides/testing-http-apps.md","tags":[],"version":"current","frontMatter":{"id":"testing-http-apps","title":"Testing HTTP Applications"},"sidebar":"ecosystem-sidebar","previous":{"title":"Integration with ZIO Config","permalink":"/zio-http/guides/integration-with-zio-config"},"next":{"title":"Examples","permalink":"/zio-http/examples/"}}');var i=s(74848),o=s(28453);const r={id:"testing-http-apps",title:"Testing HTTP Applications"},l=void 0,d={},c=[{value:"ZIO Test",id:"zio-test",level:2},{value:"ZIO HTTP Testkit",id:"zio-http-testkit",level:2},{value:"TestClient",id:"testclient",level:2},{value:"TestServer",id:"testserver",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Testing HTTP applications is a critical part of the development process. Utilizing the ZIO Test we can write first-class tests for our HTTP applications."}),"\n",(0,i.jsx)(t.h2,{id:"zio-test",children:"ZIO Test"}),"\n",(0,i.jsxs)(t.p,{children:["We have comprehensive documentation on ",(0,i.jsx)(t.a,{href:"https://zio.dev/reference/test/",children:"ZIO Test"})," which is worth reading to understand how to write tests using ZIO effects."]}),"\n",(0,i.jsxs)(t.p,{children:["It is easy to test ZIO HTTP applications because we can think of ",(0,i.jsx)(t.code,{children:"Routes"})," as a function of ",(0,i.jsx)(t.code,{children:"Request => ZIO[R, Response, Response]"}),". By provide a ",(0,i.jsx)(t.code,{children:"Request"})," to ",(0,i.jsx)(t.code,{children:"Routes#runZIO"})," will output a ",(0,i.jsx)(t.code,{children:"Response"}),". Without starting a server:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio.test._\nimport zio.test.Assertion.equalTo\nimport zio.http._\n\nobject ExampleSpec extends ZIOSpecDefault {\n\n  def spec = suite("http")(\n    test("should be ok") {\n      val app = Handler.ok.toRoutes\n      val req = Request.get(URL(Path.root))\n      assertZIO(app.runZIO(req))(equalTo(Response.ok))\n    }\n  )\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"zio-http-testkit",children:"ZIO HTTP Testkit"}),"\n",(0,i.jsxs)(t.p,{children:["ZIO HTTP provides the ",(0,i.jsx)(t.code,{children:"zio-http-testkit"})," package that includes a ",(0,i.jsx)(t.code,{children:"TestClient"})," and a ",(0,i.jsx)(t.code,{children:"TestServer"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-test"         % "2.1.9"  % Test\nlibraryDependencies += "dev.zio" %% "zio-test-sbt"     % "2.1.9"  % Test\nlibraryDependencies += "dev.zio" %% "zio-http-testkit" % "3.0.1" % Test\ntestFrameworks += new TestFramework("zio.test.sbt.ZTestFramework")\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, based on the requirement we can use any of the following test utilities:"}),"\n",(0,i.jsx)(t.h2,{id:"testclient",children:"TestClient"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"TestClient"})," allows us to write tests for our HTTP applications by defining the behavior of the client:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestClient.addRequestResponse"})," - Adds an 1-1 mapping from a ",(0,i.jsx)(t.code,{children:"Request"})," to a ",(0,i.jsx)(t.code,{children:"Response"})," to the ",(0,i.jsx)(t.code,{children:"TestClient"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestClient.addRoute"})," and ",(0,i.jsx)(t.code,{children:"addRoutes"})," - Add one or more ",(0,i.jsx)(t.code,{children:"Route"})," or a single ",(0,i.jsx)(t.code,{children:"Routes"})," instance to the ",(0,i.jsx)(t.code,{children:"TestClient"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestClient.installSocketApp"})," - Installs a ",(0,i.jsx)(t.code,{children:"WebSocketApp"})," to the ",(0,i.jsx)(t.code,{children:"TestClient"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["After defining the behavior of the test client, we can use the ",(0,i.jsx)(t.code,{children:"TestClient.layer"})," to provide the ",(0,i.jsx)(t.code,{children:"TestClient"})," and ",(0,i.jsx)(t.code,{children:"Client"})," to the test cases:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.test.{test, _}\n\nobject TestUsingTestClient extends ZIOSpecDefault {\n  def spec = \n    test("hello world route and fallback") {\n      for {\n        client           <- ZIO.service[Client]\n        _                <- TestClient.addRoutes {\n          Routes(\n            Method.GET / trailing          -> handler { Response.text("fallback") },\n            Method.GET / "hello" / "world" -> handler { Response.text("Hey there!") },\n          )\n        }\n        helloResponse    <- client.batched(Request.get(URL.root / "hello" / "world"))\n        helloBody        <- helloResponse.body.asString\n        fallbackResponse <- client.batched(Request.get(URL.root / "any"))\n        fallbackBody     <- fallbackResponse.body.asString\n      } yield assertTrue(helloBody == "Hey there!", fallbackBody == "fallback")\n    }.provide(TestClient.layer)\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"testserver",children:"TestServer"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"TestServer"})," allows us to write tests for our HTTP applications by defining the behavior of the server:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestServer.addRequestResponse"})," - Adds an 1-1 mapping from a ",(0,i.jsx)(t.code,{children:"Request"})," to a ",(0,i.jsx)(t.code,{children:"Response"})," to the ",(0,i.jsx)(t.code,{children:"TestServer"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestServer.addRoute"})," and ",(0,i.jsx)(t.code,{children:"TestServer.addRoutes"})," - Add one or more ",(0,i.jsx)(t.code,{children:"Route"})," or a single ",(0,i.jsx)(t.code,{children:"Routes"})," instance to the ",(0,i.jsx)(t.code,{children:"TestServer"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["After defining the behavior of the test server, we can use the ",(0,i.jsx)(t.code,{children:"TestServer.layer"})," to provide the ",(0,i.jsx)(t.code,{children:"TestServer"})," to any test cases that require ",(0,i.jsx)(t.code,{children:"Server"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.server.NettyDriver\nimport zio.test._\n\nobject TestServerExampleSpec extends ZIOSpecDefault {\n\n  def spec = suite("test http app") {\n    test("test hello and fallback routes") {\n      for {\n        client <- ZIO.service[Client]\n        port   <- ZIO.serviceWithZIO[Server](_.port)\n        testRequest = Request\n          .get(url = URL.root.port(port))\n          .addHeaders(Headers(Header.Accept(MediaType.text.`plain`)))\n        _                <- TestServer.addRoutes {\n          Routes(\n            Method.GET / trailing          -> handler {\n              Response.text("fallback")\n            },\n            Method.GET / "hello" / "world" -> handler {\n              Response.text("Hey there!")\n            },\n          )\n        }\n        helloResponse    <- client.batched(Request.get(testRequest.url / "hello" / "world"))\n        helloBody        <- helloResponse.body.asString\n        fallbackResponse <- client.batched(Request.get(testRequest.url / "any"))\n        fallbackBody     <- fallbackResponse.body.asString\n      } yield assertTrue(helloBody == "Hey there!", fallbackBody == "fallback")\n    }.provideSome[Client with Driver](TestServer.layer)\n  }.provide(\n    ZLayer.succeed(Server.Config.default.onAnyOpenPort),\n    Client.default,\n    NettyDriver.customized,\n    ZLayer.succeed(NettyConfig.defaultWithFastShutdown),\n  )\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(96540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);