"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[40752],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(96540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},63858:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/contextual/zenvironment","title":"ZEnvironment","description":"A ZEnvironment[R] is a built-in type-level map for the ZIO data type which is responsible for maintaining the environment of a ZIO effect. The ZIO data type uses this map to maintain all the environmental services and their implementations.","source":"@site/docs/reference/contextual/zenvironment.md","sourceDirName":"reference/contextual","slug":"/reference/contextual/zenvironment","permalink":"/reference/contextual/zenvironment","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/contextual/zenvironment.md","tags":[],"version":"current","frontMatter":{"id":"zenvironment","title":"ZEnvironment"},"sidebar":"reference-sidebar","previous":{"title":"Introduction","permalink":"/reference/contextual/"},"next":{"title":"ZIO Environment Use-cases","permalink":"/reference/contextual/zio-environment-use-cases"}}');var a=i(74848),o=i(28453);const r={id:"zenvironment",title:"ZEnvironment"},s=void 0,c={},l=[{value:"Creation",id:"creation",level:2},{value:"Operations",id:"operations",level:2},{value:"Providing Multiple Instance of the Same Interface",id:"providing-multiple-instance-of-the-same-interface",level:2},{value:"Multiple Config Example",id:"multiple-config-example",level:3},{value:"Multiple Database Example",id:"multiple-database-example",level:3}];function p(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"ZEnvironment[R]"})," is a built-in type-level map for the ",(0,a.jsx)(n.code,{children:"ZIO"})," data type which is responsible for maintaining the environment of a ",(0,a.jsx)(n.code,{children:"ZIO"})," effect. The ",(0,a.jsx)(n.code,{children:"ZIO"})," data type uses this map to maintain all the environmental services and their implementations."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, assume we have written a ",(0,a.jsx)(n.code,{children:"ZEnvironment"})," containing all built-in services as below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nval environment: ZEnvironment[Console & Clock & Random & System] =\n  ZEnvironment[Console, Clock, Random, System](\n    Console.ConsoleLive,\n    Clock.ClockLive,\n    Random.RandomLive,\n    System.SystemLive\n  )\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This map contains all built-in services and their corresponding implementations. If we evaluate the ",(0,a.jsx)(n.code,{children:"ZEnvironment#toString"})," method, we can see the underlying type-level map something like this."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"ZEnvironment(\n  Map(\n    Console -> (zio.Console$ConsoleLive$@76a3e297, 0),\n    Clock   -> (zio.Clock$ClockLive$@4d3167f4, 1), \n    Random  -> (RandomScala(scala.util.Random$@4eb7f003), 2), \n    System  -> (zio.System$SystemLive$@eafc191, 3)\n  )\n)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["From a ZIO environment point of view, we can think of ",(0,a.jsx)(n.code,{children:"ZIO"})," as the following function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"type ZIO[R, E, A] = ZEnvironment[R] => Either[E, A]\nor \ntype ZIO[R, E, A] = ZEnvironment[R] => IO[E, A]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For example, the ",(0,a.jsx)(n.code,{children:"ZIO[Foo & Bar, Throwable, String]"})," can be thought of as a function from ",(0,a.jsx)(n.code,{children:"ZEnvironment[Foo & Bar]"})," to ",(0,a.jsx)(n.code,{children:"Either[Throwable, String]"}),":"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ZEnvironment"})," is useful for manually constructing and combining the ZIO environment. So, in most cases, we do not require working directly with this data type. So you can skip reading this page if you are not an advanced user."]})}),"\n",(0,a.jsxs)(n.p,{children:["We can eliminate the environment of ",(0,a.jsx)(n.code,{children:"ZIO[R, E, A]"})," by providing ",(0,a.jsx)(n.code,{children:"ZEnvironment[R]"})," to that effect."]}),"\n",(0,a.jsxs)(n.p,{children:["Also, we can access the ",(0,a.jsx)(n.strong,{children:"whole"})," environment using ",(0,a.jsx)(n.code,{children:"ZIO.environment"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._ \nimport java.io.IOException\n\ncase class AppConfig(poolSize: Int)\n\nval myApp: ZIO[AppConfig, IOException, Unit] =\n  ZIO.environment[AppConfig].flatMap { env =>\n    val config  = env.get[AppConfig]\n    Console.printLine(s"Application started with config: $config")\n  }\n\nval eliminated: IO[IOException, Unit] =\n  myApp.provideEnvironment(\n    ZEnvironment(AppConfig(poolSize = 10))\n  )\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In most cases, we do not require using ",(0,a.jsx)(n.code,{children:"ZIO.environment"})," to access the whole environment or the ",(0,a.jsx)(n.code,{children:"ZIO#provideEnvironment"})," to provide effect dependencies. Therefore, most of the time, we use ",(0,a.jsx)(n.code,{children:"ZIO.service*"})," and other ",(0,a.jsx)(n.code,{children:"ZIO#provide*"})," methods to access a specific service from the environment or provide services to a ZIO effect."]})}),"\n",(0,a.jsx)(n.h2,{id:"creation",children:"Creation"}),"\n",(0,a.jsx)(n.p,{children:"To create an empty ZIO environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nval empty: ZEnvironment[Any] = ZEnvironment.empty\n"})}),"\n",(0,a.jsx)(n.p,{children:"To create a ZIO environment from a simple value:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\nval config: ZEnvironment[AppConfig] = ZEnvironment(AppConfig("localhost", 8080))\n'})}),"\n",(0,a.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,a.jsxs)(n.p,{children:["To ",(0,a.jsx)(n.strong,{children:"combine"})," two or multiple environment we can use ",(0,a.jsx)(n.code,{children:"union"})," or ",(0,a.jsx)(n.code,{children:"++"})," operator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nval app: ZEnvironment[AppConfig] =\n  ZEnvironment.empty ++ ZEnvironment(AppConfig("localhost", 8080))\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To ",(0,a.jsx)(n.strong,{children:"add"})," a service to an environment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nval app: ZEnvironment[AppConfig] =\n  ZEnvironment.empty.add(AppConfig("localhost", 8080))\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To retrieve a service from the environment, we use ",(0,a.jsx)(n.code,{children:"get"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nval app: ZEnvironment[AppConfig] =\n  ZEnvironment.empty.add(AppConfig("localhost", 8080))\n\nval appConfig: AppConfig = app.get[AppConfig]\n'})}),"\n",(0,a.jsx)(n.h2,{id:"providing-multiple-instance-of-the-same-interface",children:"Providing Multiple Instance of the Same Interface"}),"\n",(0,a.jsxs)(n.p,{children:["We can express an effect's dependency on multiple services of the type ",(0,a.jsx)(n.code,{children:"A"})," which are keyed by type ",(0,a.jsx)(n.code,{children:"K"})," with ",(0,a.jsx)(n.code,{children:"Map[K, A]"}),". For example, the ",(0,a.jsx)(n.code,{children:"ZIO[Map[String, Database], Throwable, Unit]"})," is an effect that depends on multiple ",(0,a.jsx)(n.code,{children:"Database"})," versions."]}),"\n",(0,a.jsxs)(n.p,{children:["To access the specified service corresponding to a specific key, we can use the ",(0,a.jsx)(n.code,{children:"ZIO.serviceAt[Service](key)"})," constructor. For example, to access a ",(0,a.jsx)(n.code,{children:"Database"}),' service which is specified by the "inmemory" key, we can write:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val database: URIO[Map[String, Database], Option[Database]] =\n  ZIO.serviceAt[Database]("inmemory")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["A service can be updated at the specified key using the ",(0,a.jsx)(n.code,{children:"ZIO#updateServiceAt"})," operator."]}),"\n",(0,a.jsx)(n.h3,{id:"multiple-config-example",children:"Multiple Config Example"}),"\n",(0,a.jsxs)(n.p,{children:["Let's see how we can create a layer comprising multiple instances of ",(0,a.jsx)(n.code,{children:"AppConfig"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ncase class AppConfig(host: String, port: Int)\n\nobject AppConfig {\n  val layer: ULayer[Map[String, AppConfig]] =\n    ZLayer.succeedEnvironment(\n      ZEnvironment(\n        Map(\n          "prod" -> AppConfig("production.myapp", 80),\n          "dev" -> AppConfig("development.myapp", 8080)\n        )\n      )\n    )\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And here is the application which uses different ",(0,a.jsx)(n.code,{children:"AppConfig"})," from the ZIO environment based on the value of the ",(0,a.jsx)(n.code,{children:"APP_ENV"})," environment variable:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject MultipleConfigExample extends ZIOAppDefault {\n\n  val myApp: ZIO[Map[String, AppConfig], String, Unit] = for {\n    env <- System.env("APP_ENV")\n      .flatMap(x => ZIO.fromOption(x))\n      .orElseFail("The environment variable APP_ENV cannot be found.")\n    config <- ZIO.serviceAt[AppConfig](env)\n      .flatMap(x => ZIO.fromOption(x))\n      .orElseFail(s"The $env config cannot be found in the ZIO environment")\n    _ <- ZIO.logInfo(s"Application started with: $config")\n  } yield ()\n\n  def run =\n    myApp.provide(AppConfig.layer)\n\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"multiple-database-example",children:"Multiple Database Example"}),"\n",(0,a.jsxs)(n.p,{children:["Here is an example of providing multiple instances of the ",(0,a.jsx)(n.code,{children:"Database"})," service to the ZIO environment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nimport java.nio.charset.StandardCharsets\n\ntrait Database {\n  def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit]\n}\n\nobject Database {\n  val layer: ULayer[Map[String, Database]] = {\n    ZLayer.succeedEnvironment(\n      ZEnvironment(\n        Map(\n          "persistent" -> PersistentDatabase.apply(),\n          "inmemory" -> InmemoryDatabase.apply()\n        )\n      )\n    )\n  }\n}\n\ncase class InmemoryDatabase() extends Database {\n  override def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit] =\n    ZIO.unit <* ZIO.logInfo(s"new $key added to the inmemory database")\n}\n\ncase class PersistentDatabase() extends Database {\n  override def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit] =\n    ZIO.unit <* ZIO.logInfo(s"new $key added to the persistent database")\n}\n\nobject MultipleDatabaseExample extends ZIOAppDefault {\n  val myApp = for {\n    inmemory <- ZIO.serviceAt[Database]("inmemory")\n      .flatMap(x => ZIO.fromOption[Database](x))\n      .orElseFail("failed to find an in-memory database in the ZIO environment")\n    persistent <- ZIO.serviceAt[Database]("persistent")\n      .flatMap(x => ZIO.fromOption[Database](x))\n      .orElseFail("failed to find an persistent database in the ZIO environment")\n    _ <- inmemory.add("key1", "value1".getBytes(StandardCharsets.UTF_8))\n    _ <- persistent.add("key2", "value2".getBytes(StandardCharsets.UTF_8))\n  } yield ()\n\n  def run = myApp.provideLayer(Database.layer)\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);