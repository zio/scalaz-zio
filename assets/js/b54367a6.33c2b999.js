"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[34871],{28453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>i});var n=t(96540);const s={},a=n.createContext(s);function c(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(a.Provider,{value:r},e.children)}},71897:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference/stream/transducer","title":"Transducer","description":"Transducer[E, A, B] is a type alias for ZTransducer[Any, E, A, B]. It is a stream transducer that doesn\'t require any services, so except the R type-parameter, all other things are the same.","source":"@site/versioned_docs/version-1.0.18/reference/stream/transducer.md","sourceDirName":"reference/stream","slug":"/reference/stream/transducer","permalink":"/1.0.18/reference/stream/transducer","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/stream/transducer.md","tags":[],"version":"1.0.18","frontMatter":{"id":"transducer","title":"Transducer"},"sidebar":"overview_sidebar","previous":{"title":"ZTransducer","permalink":"/1.0.18/reference/stream/ztransducer"},"next":{"title":"ZSink","permalink":"/1.0.18/reference/stream/zsink"}}');var s=t(74848),a=t(28453);const c={id:"transducer",title:"Transducer"},i=void 0,o={},d=[];function u(e){const r={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Transducer[E, A, B]"})," is a type alias for ",(0,s.jsx)(r.code,{children:"ZTransducer[Any, E, A, B]"}),". It is a stream transducer that doesn't require any services, so except the ",(0,s.jsx)(r.code,{children:"R"})," type-parameter, all other things are the same."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-scala",children:"type Transducer[+E, -A, +B] = ZTransducer[Any, E, A, B]\n"})})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);