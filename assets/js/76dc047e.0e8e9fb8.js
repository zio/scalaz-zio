"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[12727],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(96540);const i={},o=a.createContext(i);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},29877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"zio-http/examples/authentication","title":"Authentication Example","description":"Authentication Server Example","source":"@site/docs/zio-http/examples/authentication.md","sourceDirName":"zio-http/examples","slug":"/zio-http/examples/authentication","permalink":"/zio-http/examples/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/authentication.md","tags":[],"version":"current","frontMatter":{"id":"authentication","title":"Authentication Example","sidebar_label":"Authentication"},"sidebar":"ecosystem-sidebar","previous":{"title":"Middleware CORS Handling","permalink":"/zio-http/examples/middleware-cors-handling"},"next":{"title":"Graceful Shutdown","permalink":"/zio-http/examples/graceful-shutdown"}}');var i=n(74848),o=n(28453);const r={id:"authentication",title:"Authentication Example",sidebar_label:"Authentication"},s=void 0,l={},c=[{value:"Authentication Server Example",id:"authentication-server-example",level:2},{value:"Authentication Client Example",id:"authentication-client-example",level:2},{value:"Middleware Basic Authentication Example",id:"middleware-basic-authentication-example",level:2}];function u(e){const t={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"authentication-server-example",children:"Authentication Server Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationServer.scala" ',children:'package example\n\nimport java.time.Clock\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\n\nimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}\n\n/**\n * This is an example to demonstrate bearer Authentication middleware. The\n * Server has 2 routes. The first one is for login, Upon a successful login, it\n * will return a jwt token for accessing protected routes. The second route is a\n * protected route that is accessible only if the request has a valid jwt token.\n * AuthenticationClient example can be used to makes requests to this server.\n */\nobject AuthenticationServer extends ZIOAppDefault {\n  implicit val clock: Clock = Clock.systemUTC\n\n  // Secret Authentication key\n  val SECRET_KEY = "secretKey"\n\n  def jwtEncode(username: String, key: String): String =\n    Jwt.encode(JwtClaim(subject = Some(username)).issuedNow.expiresIn(300), key, JwtAlgorithm.HS512)\n\n  def jwtDecode(token: String, key: String): Try[JwtClaim] =\n    Jwt.decode(token, key, Seq(JwtAlgorithm.HS512))\n\n  val bearerAuthWithContext: HandlerAspect[Any, String] =\n    HandlerAspect.interceptIncomingHandler(Handler.fromFunctionZIO[Request] { request =>\n      request.header(Header.Authorization) match {\n        case Some(Header.Authorization.Bearer(token)) =>\n          ZIO\n            .fromTry(jwtDecode(token.value.asString, SECRET_KEY))\n            .orElseFail(Response.badRequest("Invalid or expired token!"))\n            .flatMap(claim => ZIO.fromOption(claim.subject).orElseFail(Response.badRequest("Missing subject claim!")))\n            .map(u => (request, u))\n\n        case _ => ZIO.fail(Response.unauthorized.addHeaders(Headers(Header.WWWAuthenticate.Bearer(realm = "Access"))))\n      }\n    })\n\n  def routes: Routes[Any, Response] =\n    Routes(\n      // A route that is accessible only via a jwt token\n      Method.GET / "profile" / "me" -> handler { (_: Request) =>\n        ZIO.serviceWith[String](name => Response.text(s"Welcome $name!"))\n      } @@ bearerAuthWithContext,\n\n      // A login route that is successful only if the password is the reverse of the username\n      Method.GET / "login" ->\n        handler { (request: Request) =>\n          val form = request.body.asMultipartForm.orElseFail(Response.badRequest)\n          for {\n            username <- form\n              .map(_.get("username"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing username field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing username value!")))\n            password <- form\n              .map(_.get("password"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing password field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing password value!")))\n          } yield\n            if (password.reverse.hashCode == username.hashCode)\n              Response.text(jwtEncode(username, SECRET_KEY))\n            else\n              Response.unauthorized("Invalid username or password.")\n        },\n    ) @@ Middleware.debug\n\n  override val run = Server.serve(routes).provide(Server.default)\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"authentication-client-example",children:"Authentication Client Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationClient.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http._\n\nobject AuthenticationClient extends ZIOAppDefault {\n\n  /**\n   * This example is trying to access a protected route in AuthenticationServer\n   * by first making a login request to obtain a jwt token and use it to access\n   * a protected route. Run AuthenticationServer before running this example.\n   */\n  val url = "http://localhost:8080"\n\n  val loginUrl = URL.decode(s"${url}/login").toOption.get\n  val greetUrl = URL.decode(s"${url}/profile/me").toOption.get\n\n  val program = for {\n    client   <- ZIO.service[Client]\n    // Making a login request to obtain the jwt token. In this example the password should be the reverse string of username.\n    token    <- client\n      .batched(\n        Request\n          .get(loginUrl)\n          .withBody(\n            Body.fromMultipartForm(\n              Form(\n                FormField.simpleField("username", "John"),\n                FormField.simpleField("password", "nhoJ"),\n              ),\n              Boundary("boundary123"),\n            ),\n          ),\n      )\n      .flatMap(_.body.asString)\n    // Once the jwt token is procured, adding it as a Bearer token in Authorization header while accessing a protected route.\n    response <- client.batched(Request.get(greetUrl).addHeader(Header.Authorization.Bearer(token)))\n    body     <- response.body.asString\n    _        <- Console.printLine(body)\n  } yield ()\n\n  override val run = program.provide(Client.default)\n\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"middleware-basic-authentication-example",children:"Middleware Basic Authentication Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/BasicAuth.scala" ',children:'package example\n\nimport zio._\n\nimport zio.http.Middleware.basicAuth\nimport zio.http._\nimport zio.http.codec.PathCodec.string\n\nobject BasicAuth extends ZIOAppDefault {\n\n  // Http app that requires basic auth\n  val user: Routes[Any, Response] = Routes(\n    Method.GET / "user" / string("name") / "greet" ->\n      handler { (name: String, _: Request) =>\n        Response.text(s"Welcome to the ZIO party! ${name}")\n      },\n  )\n\n  // Add basic auth middleware\n  val routes: Routes[Any, Response] = user @@ basicAuth("admin", "admin")\n\n  val run = Server.serve(routes).provide(Server.default)\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);