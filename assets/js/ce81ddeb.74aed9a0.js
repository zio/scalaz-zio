"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[72575],{39895:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"zio-dynamodb/reference/low-level-api/attribute-value","title":"AttributeValue","description":"The sealed trait AttributeValue has a one to one correspondence with the concept of an attribute value in the AWS DDB API. It has implementations for all the types that are supported by DynamoDB","source":"@site/docs/zio-dynamodb/reference/low-level-api/attribute-value.md","sourceDirName":"zio-dynamodb/reference/low-level-api","slug":"/zio-dynamodb/reference/low-level-api/attribute-value","permalink":"/zio-dynamodb/reference/low-level-api/attribute-value","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/low-level-api/attribute-value.md","tags":[],"version":"current","frontMatter":{"id":"attribute-value","title":"AttributeValue"},"sidebar":"ecosystem-sidebar","previous":{"title":"Low Level API","permalink":"/zio-dynamodb/reference/low-level-api/"},"next":{"title":"$ and parse functions","permalink":"/zio-dynamodb/reference/low-level-api/dollar-function"}}');var a=r(74848),o=r(28453);const i={id:"attribute-value",title:"AttributeValue"},l="AttrMap",s={},c=[];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The sealed trait ",(0,a.jsx)(t.code,{children:"AttributeValue"})," has a one to one correspondence with the concept of an ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html",children:"attribute value in the AWS DDB API"}),". It has implementations for all the types that are supported by DynamoDB"]}),"\n",(0,a.jsxs)(t.p,{children:["Internally there are the type classes ",(0,a.jsx)(t.code,{children:"ToAttributeValue"})," and ",(0,a.jsx)(t.code,{children:"FromAttribute"})," to convert between Scala types and ",(0,a.jsx)(t.code,{children:"AttributeValue"})," and vice versa\nwhenever these conversions are required. Some example constructors are show below:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'val s = AttributeValue.String("hello")\nval bool = AttributeValue.Boolean(true)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["However, even when working with the Low Level API you would not use these constructors directly, instead you would use the ",(0,a.jsx)(t.code,{children:"AttrMap"})," class (or more likely one of it's type aliases) which is a convenience container for working with ",(0,a.jsx)(t.code,{children:"AttributeValue"})," instances (see next section)."]}),"\n",(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"attrmap",children:"AttrMap"})}),"\n",(0,a.jsxs)(t.p,{children:["An ",(0,a.jsx)(t.code,{children:"AttrMap"})," is a convenience container for working an ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html",children:"DDB Item"})," and ",(0,a.jsx)(t.em,{children:"cuts down on boilerplate code when working with the Low Level API"}),". Conceptually it is a map of field name to AttributeValue ",(0,a.jsx)(t.code,{children:"Map[String, AttributeValue]"}),".\nHowever rather than requiring you to create an ",(0,a.jsx)(t.code,{children:"AttributeValue"})," instance manually for each field, you can work with literal Scala types and type classes will handle the conversion to ",(0,a.jsx)(t.code,{children:"AttributeValue"})," for you. There are also the the ",(0,a.jsx)(t.code,{children:"PrimaryKey"})," and ",(0,a.jsx)(t.code,{children:"Item"})," type aliases for ",(0,a.jsx)(t.code,{children:"AttrMap"})," for readability as these structures follow the same pattern."]}),"\n",(0,a.jsx)(t.p,{children:"Some examples are shown below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'val attrMap = AttrMap("id" -> "1", "age" -> 30) \nval item = Item("id" -> "1", "age" -> 30) // uses Item type alias\nval pk = PrimaryKey("id" -> "1", "count" -> 30) // uses PrimaryKey type alias \n// AttrMaps can also be nested \nval item = Item("id" -> "1", "age" -> 30, "address" -> Item("city" -> "London", "postcode" -> "SW1A 1AA")) \n'})}),"\n",(0,a.jsxs)(t.p,{children:["The example below demonstrate the reduction in boilerplate when compared to working with ",(0,a.jsx)(t.code,{children:"AttributeValue"})," directly:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'val attrMap1 = AttrMap("id" -> "1", "age" -> 30) \nval attrMap2 = Map("id" -> AttributeValue.String("1"), "age" -> AttributeValue.Number(30))\n'})}),"\n",(0,a.jsxs)(t.p,{children:["There are also some convenience methods on the ",(0,a.jsx)(t.code,{children:"AttrMap"})," class for accessing fields:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:"\n  // Field accessors\n\n  def get[A](field: String)(implicit ev: FromAttributeValue[A]): Either[ItemError, A] = ???\n\n  def getOptional[A](field: String)(implicit ev: FromAttributeValue[A]): Either[Nothing, Option[A]] = ???\n\n  def getItem[A](field: String)(f: AttrMap => Either[ItemError, A]): Either[ItemError, A] = ???\n\n  // methods for accessing fields that are Item's themselves\n\n  def getOptionalItem[A](\n    field: String\n  )(f: AttrMap => Either[ItemError, A]): Either[ItemError, Option[A]] = ???\n\n  def getIterableItem[A](\n    field: String\n  )(f: AttrMap => Either[ItemError, A]): Either[ItemError, Iterable[A]] = ???\n\n  def getOptionalIterableItem[A](\n    field: String\n  )(f: AttrMap => Either[ItemError, A]): Either[ItemError, Option[Iterable[A]]] = ???\n"})}),"\n",(0,a.jsx)(t.p,{children:"An example of using AttrMap access methods is shown below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-scala",children:'val attrMap                                = AttrMap("f1" -> AttrMap("f2" -> "a", "f3" -> "b"))\nval either: Either[ItemError, Option[Foo]] = for {\n  maybeFoo <- attrMap.getOptionalItem("f1") { m =>\n           for {\n             s <- m.get[String]("f2")\n             o <- m.getOptional[String]("f3")\n           } yield Foo(s, o)\n         }\n  } yield maybeFoo\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var n=r(96540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);