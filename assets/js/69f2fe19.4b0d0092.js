"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[56637],{174:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"zio-cli/cli-config","title":"Cli Configuration","description":"It is possible to tweak the behavior of our CliApp specifying a custom CliConfig in the parameter cliConfig of method CliApp.make. By default, CliApp.make uses CliConfig.default. CliConfig specifies how a CliApp","source":"@site/docs/zio-cli/cli-config.md","sourceDirName":"zio-cli","slug":"/zio-cli/cli-config","permalink":"/zio-cli/cli-config","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/cli-config.md","tags":[],"version":"current","frontMatter":{"id":"cli-config","title":"Cli Configuration"},"sidebar":"ecosystem-sidebar","previous":{"title":"Built-in commands","permalink":"/zio-cli/built-in-commands"},"next":{"title":"OAuth2","permalink":"/zio-cli/auth"}}');var t=i(74848),s=i(28453);const c={id:"cli-config",title:"Cli Configuration"},l=void 0,r={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Case sensitivity",id:"case-sensitivity",level:3},{value:"Autocorrection",id:"autocorrection",level:3},{value:"Command processing",id:"command-processing",level:2},{value:"Help appearance",id:"help-appearance",level:2},{value:"Default configuration",id:"default-configuration",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["It is possible to tweak the behavior of our ",(0,t.jsx)(n.code,{children:"CliApp"})," specifying a custom ",(0,t.jsx)(n.code,{children:"CliConfig"})," in the parameter ",(0,t.jsx)(n.code,{children:"cliConfig"})," of method ",(0,t.jsx)(n.code,{children:"CliApp.make"}),". By default, ",(0,t.jsx)(n.code,{children:"CliApp.make"})," uses ",(0,t.jsx)(n.code,{children:"CliConfig.default"}),". ",(0,t.jsx)(n.code,{children:"CliConfig"})," specifies how a ",(0,t.jsx)(n.code,{children:"CliApp"}),"\ndetermines the valid commands from the ",(0,t.jsx)(n.code,{children:"command: Command[Model]"})," parameter."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["You can construct directly a ",(0,t.jsx)(n.code,{children:"CliConfig"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"final case class CliConfig(\n  caseSensitive: Boolean,\n  autoCorrectLimit: Int,\n  finalCheckBuiltIn: Boolean = true,\n  showAllNames: Boolean = true,\n  showTypes: Boolean = true\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"CliConfig"})," allows to control case sensitivity, autocorrection behaviour, command processing and\nhelp appearance."]}),"\n",(0,t.jsx)(n.h3,{id:"case-sensitivity",children:"Case sensitivity"}),"\n",(0,t.jsxs)(n.p,{children:["It is controlled by field ",(0,t.jsx)(n.code,{children:"caseSensitive"}),". If it is ",(0,t.jsx)(n.code,{children:"true"}),", then a ",(0,t.jsx)(n.code,{children:"CliApp"})," will determine as distinct uppercase and lowercase versions of a letter in a command. On the other hand, ",(0,t.jsx)(n.code,{children:"caseSensitive = false"})," implies that the ",(0,t.jsx)(n.code,{children:"CliApp"})," will treat uppercase and lowercase letters as the same. In the Git example, we would have:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"caseSensitive = true"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git clone  \nGIT cloNE\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The first will be detected as the ",(0,t.jsx)(n.code,{children:"git clone"})," command while the second will trigger an error."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"caseSensitive = false"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'git clone   // Detected by CLI as "git clone" command\nGIT cloNE   // Detected by CLI as "git clone" command\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Both commands will be detected as the ",(0,t.jsx)(n.code,{children:"git clone"})," command."]}),"\n",(0,t.jsx)(n.h3,{id:"autocorrection",children:"Autocorrection"}),"\n",(0,t.jsxs)(n.p,{children:["It is controlled by the field ",(0,t.jsx)(n.code,{children:"autoCorrectLimit"}),". It is the number of mistakes that can be corrected when parsing the name of an option introduced by a user. If the CLI detects that the user has written an incorrect name for the option and the number of mistakes is less, it will suggest the correct option. If ",(0,t.jsx)(n.code,{children:"autoCorrectLimit=2"})," and the user inputs\n",(0,t.jsx)(n.code,{children:"git status --bran nameOfBranch"})," instead of ",(0,t.jsx)(n.code,{children:"git status --branch nameOfBranch"}),", the output produced by the CLI app will be"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'The flag "--bran" is not recognized. Did you mean --branch?\n'})}),"\n",(0,t.jsxs)(n.p,{children:["On the other hand, if the user writes ",(0,t.jsx)(n.code,{children:"git status --bra nameOfBranch"}),", the CLI app will not be able to detect the 3 mistakes and will produce"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Expected to find --branch option.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"command-processing",children:"Command processing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"finalCheckBuiltIn"})," controls whether after an invalid command is entered by the user, there is a final check searching for a flag like ",(0,t.jsx)(n.code,{children:"--help"}),", ",(0,t.jsx)(n.code,{children:"-h"})," or ",(0,t.jsx)(n.code,{children:"--wizard"}),'. In this case, the corresponding Help or Wizard Mode of the parent command is triggered. Note that this can only trigger the parent command predefined option because the entered command is not valid, so it is an "emergency" check.']}),"\n",(0,t.jsx)(n.h2,{id:"help-appearance",children:"Help appearance"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"showAllNames"})," controls whether all the names of an option are shown in the usage synopsis of a command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"command (-o, --option text)      # showAllNames = true\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"showTypes"})," controls whether the type of the option is shown in the usage synopsis of a command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"command (-o, --option text)      # showAllNames = true,  showTypes = true\ncommand --option text            # showAllNames = false, showTypes = true\ncommand (-o, --option )          # showAllNames = true,  showTypes = false\ncommand --option                 # showAllNames = false, showTypes = false\n"})}),"\n",(0,t.jsx)(n.h2,{id:"default-configuration",children:"Default configuration"}),"\n",(0,t.jsx)(n.p,{children:"The default configuration is given by"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"object CliConfig {\n  val default: CliConfig = CliConfig(caseSensitive = false, autoCorrectLimit = 2)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This means that a ",(0,t.jsx)(n.code,{children:"CliApp"})," that does not specify any ",(0,t.jsx)(n.code,{children:"CliConfig"})," and uses ",(0,t.jsx)(n.code,{children:"CliConfig.default"})," will:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ignore if the letters of a command are written in uppercase or lowercase,"}),"\n",(0,t.jsxs)(n.li,{children:["correct automatically up to two mistakes when writing the name of an option in a command of ",(0,t.jsx)(n.code,{children:"CliApp"}),","]}),"\n",(0,t.jsx)(n.li,{children:"trigger Help or Wizard Mode if the corresponding option is found after an invalid command was entered and"}),"\n",(0,t.jsx)(n.li,{children:"show full usage synopsis of commands."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var o=i(96540);const t={},s=o.createContext(t);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);