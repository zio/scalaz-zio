"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[81467],{71513:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reference/di/overriding-dependency-graph","title":"Overriding Dependency Graph","description":"We can create a ZIO application by providing a local or a global environment, or a combination:","source":"@site/docs/reference/di/overriding-dependency-graph.md","sourceDirName":"reference/di","slug":"/reference/di/overriding-dependency-graph","permalink":"/reference/di/overriding-dependency-graph","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/di/overriding-dependency-graph.md","tags":[],"version":"current","frontMatter":{"id":"overriding-dependency-graph","title":"Overriding Dependency Graph"},"sidebar":"reference-sidebar","previous":{"title":"Dependency Memoization","permalink":"/reference/di/dependency-memoization"},"next":{"title":"Examples","permalink":"/reference/di/examples"}}');var o=r(74848),t=r(28453);const a={id:"overriding-dependency-graph",title:"Overriding Dependency Graph"},l=void 0,c={},d=[{value:"Global Environment",id:"global-environment",level:2},{value:"Local Environment",id:"local-environment",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"We can create a ZIO application by providing a local or a global environment, or a combination:"}),"\n",(0,o.jsx)(n.h2,{id:"global-environment",children:"Global Environment"}),"\n",(0,o.jsx)(n.p,{children:"It is usual when writing ZIO applications to provide layers at the end of the world. Then we provide layers to the whole ZIO application all at once. This pattern uses a single global environment for all ZIO applications:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val myApp: ZIO[ServiceA & ServiceB & ServiceC & ServiceD, Throwable, Unit] = ???\n    \n  def run = myApp.provide(a, b, c, d)\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"local-environment",children:"Local Environment"}),"\n",(0,o.jsx)(n.p,{children:"Occasionally, we may need to provide different environments for different parts of our application, or it may be necessary to provide a single global environment for the entire application except for some inner layers."}),"\n",(0,o.jsx)(n.p,{children:"Providing a layer locally is analogous to overriding a method in an object-oriented paradigm. So we can think of that as overriding the global environment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def myApp: ZIO[A & B & C, Throwable, Unit] = {\n    def innerApp1: ZIO[A & B & C, Throwable, Unit] = ???\n    def innerApp2: ZIO[A & C,     Throwable, Unit] = ???\n\n    innerApp1.provideSomeLayer[A & B](localC) *> innerApp2\n  }\n\n  def run = myApp.provide(globalA, globalB, globalC)\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Test's ",(0,o.jsx)(n.a,{href:"/reference/test/services/live",children:"Live service"})," uses this pattern to provide real environment to a single part of an effect."]})]})}function s(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(96540);const o={},t=i.createContext(o);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);