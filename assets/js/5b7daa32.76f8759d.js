"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[55374],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(96540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},49455:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/test/services/console","title":"TestConsole","description":"TestConsole allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:","source":"@site/docs/reference/test/services/console.md","sourceDirName":"reference/test/services","slug":"/reference/test/services/console","permalink":"/reference/test/services/console","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/services/console.md","tags":[],"version":"current","frontMatter":{"id":"console","title":"TestConsole"},"sidebar":"reference-sidebar","previous":{"title":"Introduction","permalink":"/reference/test/services/"},"next":{"title":"TestClock","permalink":"/reference/test/services/clock"}}');var o=n(74848),r=n(28453);const i={id:"console",title:"TestConsole"},c=void 0,l={},a=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"TestConsole"})," allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\nimport zio.test.Assertion._\n\nval consoleSuite = suite("ConsoleTest")(\n  test("One can test output of console") {\n    for {\n      _              <- TestConsole.feedLines("Jimmy", "37")\n      _              <- Console.printLine("What is your name?")\n      name           <- Console.readLine\n      _              <- Console.printLine("What is your age?")\n      age            <- Console.readLine.map(_.toInt)\n      questionVector <- TestConsole.output\n      q1             = questionVector(0)\n      q2             = questionVector(1)\n    } yield {\n      assertTrue(name == "Jimmy") &&\n        assertTrue(age == 37) &&\n        assertTrue(q1 == "What is your name?\\n") &&\n        assertTrue(q2 == "What is your age?\\n")\n    }\n  }\n)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The above code simulates an application that will ask for the name and age of the user. To test it we prefill buffers with answers with the call to ",(0,o.jsx)(t.code,{children:"TestConsole.feedLines"})," method. Calls to ",(0,o.jsx)(t.code,{children:"Console.readLine"})," will get the value from the buffers instead of interacting with the users keyboard."]}),"\n",(0,o.jsxs)(t.p,{children:["Also, all output that our program produces by calling ",(0,o.jsx)(t.code,{children:"Console.printLine"})," (and other printing methods) is being gathered and can be accessed with a call to ",(0,o.jsx)(t.code,{children:"TestConsole.output"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"TestConsole"})," provides a testable interface for programs interacting with the console by modeling input and output as reading from and writing to input and output buffers maintained by ",(0,o.jsx)(t.code,{children:"TestConsole"})," and backed by a ",(0,o.jsx)(t.code,{children:"Ref"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["All calls to ",(0,o.jsx)(t.code,{children:"print"})," and ",(0,o.jsx)(t.code,{children:"printLine"})," using the ",(0,o.jsx)(t.code,{children:"TestConsole"})," will write the string to the output buffer and all calls to ",(0,o.jsx)(t.code,{children:"readLine"})," will take a string from the input buffer."]}),"\n",(0,o.jsxs)(t.p,{children:["To facilitate debugging, by default output will also be rendered to standard output. We can enable or disable this for a scope using ",(0,o.jsx)(t.code,{children:"debug"}),", ",(0,o.jsx)(t.code,{children:"silent"}),", or the corresponding test aspects."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"TestConsole"})," has several methods to access and manipulate the content of these buffers including:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"feedLines"})})," to feed strings to the input  buffer that will then be returned by calls to ",(0,o.jsx)(t.code,{children:"readLine"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"output"})})," to get the content of the output buffer from calls to ",(0,o.jsx)(t.code,{children:"print"})," and ",(0,o.jsx)(t.code,{children:"printLine"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"clearInput"})})," and ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"clearOutput"})})," to clear the respective buffers."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Together, these functions make it easy to test programs interacting with the console."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);