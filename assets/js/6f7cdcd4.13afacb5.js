"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[34218],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}},98524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/stream/zstream/index","title":"Introduction to ZStream","description":"A ZStream[R, E, O] is a description of a program that, when evaluated, may emit zero or more values of type O, may fail with errors of type E, and uses an environment of type R.","source":"@site/docs/reference/stream/zstream/index.md","sourceDirName":"reference/stream/zstream","slug":"/reference/stream/zstream/","permalink":"/reference/stream/zstream/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to ZStream"},"sidebar":"reference-sidebar","previous":{"title":"Chunk","permalink":"/reference/stream/chunk"},"next":{"title":"Type Aliases","permalink":"/reference/stream/zstream/type-aliases"}}');var i=n(74848),s=n(28453);const a={id:"index",title:"Introduction to ZStream"},o=void 0,c={},l=[];function d(e){const t={code:"code",em:"em",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"ZStream[R, E, O]"})," is a description of a program that, when evaluated, may emit zero or more values of type ",(0,i.jsx)(t.code,{children:"O"}),", may fail with errors of type ",(0,i.jsx)(t.code,{children:"E"}),", and uses an environment of type ",(0,i.jsx)(t.code,{children:"R"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["One way to think of ",(0,i.jsx)(t.code,{children:"ZStream"})," is as a ",(0,i.jsx)(t.code,{children:"ZIO"})," program that could emit multiple values. As we know, a ",(0,i.jsx)(t.code,{children:"ZIO[R, E, A]"})," data type, is a functional effect which is a description of a program that needs an environment of type ",(0,i.jsx)(t.code,{children:"R"}),", it may end with an error of type ",(0,i.jsx)(t.code,{children:"E"}),", and in case of success, it returns a value of type ",(0,i.jsx)(t.code,{children:"A"}),". The important note about ",(0,i.jsx)(t.code,{children:"ZIO"})," effects is that in the case of success they always end with exactly one value. There is no optionality here, no multiple infinite values, we always get exact value:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'val failedEffect: ZIO[Any, String, Nothing]       = ZIO.fail("fail!")\nval oneIntValue : ZIO[Any, Nothing, Int]          = ZIO.succeed(3)\nval oneListValue: ZIO[Any, Nothing, List[Int]]    = ZIO.succeed(List(1, 2, 3))\nval oneOption   : ZIO[Any, Nothing , Option[Int]] = ZIO.succeed(None)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["A functional stream is pretty similar, it is a description of a program that requires an environment of type ",(0,i.jsx)(t.code,{children:"R"})," and it may signal with errors of type ",(0,i.jsx)(t.code,{children:"E"})," and it yields ",(0,i.jsx)(t.code,{children:"O"}),", but the difference is that it will yield zero or more values."]}),"\n",(0,i.jsxs)(t.p,{children:["So a ",(0,i.jsx)(t.code,{children:"ZStream"})," represents one of the following cases in terms of its elements:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"An Empty Stream"})," \u2014 It might end up empty; which represent an empty stream, e.g. ",(0,i.jsx)(t.code,{children:"ZStream.empty"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"One Element Stream"})," \u2014 It can represent a stream with just one value, e.g. ",(0,i.jsx)(t.code,{children:"ZStream.succeed(3)"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Finite Element Stream"})," \u2014 It can represent a stream of finite values, e.g. ",(0,i.jsx)(t.code,{children:"ZStream.range(1, 10)"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Infinite Element Stream"})," \u2014 It can even represent a stream that ",(0,i.jsx)(t.em,{children:"never ends"})," as an infinite stream, e.g. ",(0,i.jsx)(t.code,{children:"ZStream.iterate(1)(_ + 1)"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"import zio.stream.ZStream\nval emptyStream         : ZStream[Any, Nothing, Nothing]   = ZStream.empty\nval oneIntValueStream   : ZStream[Any, Nothing, Int]       = ZStream.succeed(4)\nval oneListValueStream  : ZStream[Any, Nothing, List[Int]] = ZStream.succeed(List(1, 2, 3))\nval finiteIntStream     : ZStream[Any, Nothing, Int]       = ZStream.range(1, 10)\nval infiniteIntStream   : ZStream[Any, Nothing, Int]       = ZStream.iterate(1)(_ + 1)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Another example of a stream is when we're pulling a Kafka topic or reading from a socket. There is no inherent definition of an end there. Stream elements arrive at some point, or even they might never arrive at any point."}),"\n",(0,i.jsxs)(t.p,{children:["Based on type parameters of ",(0,i.jsx)(t.code,{children:"ZStream"}),", there are 4 types of streams:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZStream[Any, Nothing, O]"})," \u2014 A stream that emits ",(0,i.jsx)(t.code,{children:"O"})," values and cannot fail."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZStream[Any, Throwable, O]"})," \u2014 A stream that emits ",(0,i.jsx)(t.code,{children:"O"})," values and can fail with ",(0,i.jsx)(t.code,{children:"Throwable"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZStream[Any, Nothing, Nothing]"})," \u2014 A stream that emits no elements."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZStream[R, E, O]"})," \u2014 A stream that requires access to the ",(0,i.jsx)(t.code,{children:"R"})," service, can fail with error of type ",(0,i.jsx)(t.code,{children:"E"})," and emits ",(0,i.jsx)(t.code,{children:"O"})," values."]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);