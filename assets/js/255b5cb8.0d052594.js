"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[1095],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var a=r(96540);const i={},o=a.createContext(i);function t(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(o.Provider,{value:n},e.children)}},37431:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"zio-http/reference/body/form","title":"Form Data","description":"The Form represents a collection of FormFields that can be a multipart or URL-encoded form:","source":"@site/docs/zio-http/reference/body/form.md","sourceDirName":"zio-http/reference/body","slug":"/zio-http/reference/body/form","permalink":"/zio-http/reference/body/form","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/body/form.md","tags":[],"version":"current","frontMatter":{"id":"form","title":"Form Data"},"sidebar":"ecosystem-sidebar","previous":{"title":"Body","permalink":"/zio-http/reference/body/"},"next":{"title":"BinaryCodecs","permalink":"/zio-http/reference/body/binary_codecs"}}');var i=r(74848),o=r(28453);const t={id:"form",title:"Form Data"},s=void 0,d={},l=[{value:"Form Fields",id:"form-fields",level:2},{value:"Simple FormField",id:"simple-formfield",level:3},{value:"Text FormField",id:"text-formfield",level:3},{value:"Binary FormField",id:"binary-formfield",level:3},{value:"Creating a Form",id:"creating-a-form",level:2},{value:"Creating an Empty Form",id:"creating-an-empty-form",level:3},{value:"Creating a Form from Form Fields",id:"creating-a-form-from-form-fields",level:3},{value:"Creating a Form from Key-Value Pairs",id:"creating-a-form-from-key-value-pairs",level:3},{value:"Decoding Raw Multipart Bytes into a Form",id:"decoding-raw-multipart-bytes-into-a-form",level:3},{value:"Creating a Form from Query Parameters",id:"creating-a-form-from-query-parameters",level:3},{value:"Creating a Form from URL-Encoded Data",id:"creating-a-form-from-url-encoded-data",level:3},{value:"Operations",id:"operations",level:2},{value:"Appending Fields to a Form",id:"appending-fields-to-a-form",level:3},{value:"Accessing Fields in a Form",id:"accessing-fields-in-a-form",level:3},{value:"Encoding Forms",id:"encoding-forms",level:3},{value:"Multipart Encoding",id:"multipart-encoding",level:4},{value:"URL Encoding",id:"url-encoding",level:4},{value:"Converting Form to Query Parameters",id:"converting-form-to-query-parameters",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Form"})," represents a collection of ",(0,i.jsx)(n.code,{children:"FormFields"})," that can be a multipart or URL-encoded form:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Form(formData: Chunk[FormField])\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Form"})," is commonly used in request bodies for handling data from HTML forms and file uploads, although it can also be utilized in response bodies."]}),"\n",(0,i.jsx)(n.h2,{id:"form-fields",children:"Form Fields"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"FormField"})," is a field within a ",(0,i.jsx)(n.code,{children:"Form"})," and consists of a name, content type, type-specific content, and an optional filename."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"sealed trait FormField {\n  def name: String\n  def contentType: MediaType\n  def filename: Option[String]\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There are four types of ",(0,i.jsx)(n.code,{children:"FormField"}),": Simple FormField, Text FormField, Binary FormField, and StreamingBinary FormField."]}),"\n",(0,i.jsx)(n.h3,{id:"simple-formfield",children:"Simple FormField"}),"\n",(0,i.jsxs)(n.p,{children:["Simple form fields are represented by the ",(0,i.jsx)(n.code,{children:"Simple"})," case class. They consist of a simple key-value pair containing a name and a value (String). Unlike Binary and Text, they do not contain additional metadata such as content type or filename:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Simple(name: String, value: String) extends FormField {\n  override val contentType: MediaType   = MediaType.text.plain\n  override val filename: Option[String] = None\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create a simple form field, we can use ",(0,i.jsx)(n.code,{children:"FormField.simpleField"})," constructor:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval simpleFormField = FormField.simpleField("name", "value")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Instances of ",(0,i.jsx)(n.code,{children:"FormField.Simple"})," are commonly used for transmitting simple textual data where additional metadata is not required, such as form fields in HTML forms."]}),"\n",(0,i.jsx)(n.h3,{id:"text-formfield",children:"Text FormField"}),"\n",(0,i.jsxs)(n.p,{children:["Text form fields are represented by the ",(0,i.jsx)(n.code,{children:"Text"})," case class. They contain textual data (String) along with metadata such as the content type and optionally the filename:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Text(\n  name: String,\n  value: String,\n  contentType: MediaType,\n  filename: Option[String] = None,\n) extends FormField\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create a text form field, we can use ",(0,i.jsx)(n.code,{children:"FormField.textField"})," constructor:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval textFormField1 = FormField.textField("name", "value")\n\nval textFormField2 = FormField.textField("name", "value", MediaType.text.plain)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Instances of ",(0,i.jsx)(n.code,{children:"FormField.Text"})," are used for transmitting simple textual data and textual files, such as text files, HTML files, and so on."]}),"\n",(0,i.jsx)(n.h3,{id:"binary-formfield",children:"Binary FormField"}),"\n",(0,i.jsxs)(n.p,{children:["Binary form fields are represented by the ",(0,i.jsx)(n.code,{children:"FormField.Binary"})," case class. They contain binary data (",(0,i.jsx)(n.code,{children:"Chunk[Byte]"}),"), along with metadata such as the content type (",(0,i.jsx)(n.code,{children:"MediaType"}),") and optionally the ",(0,i.jsx)(n.code,{children:"Content-Transfer-Encoding"})," header field and filename:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Binary(\n  name: String,\n  data: Chunk[Byte],\n  contentType: MediaType,\n  transferEncoding: Option[ContentTransferEncoding] = None,\n  filename: Option[String] = None,\n) extends FormField\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create a binary form field, we can use ",(0,i.jsx)(n.code,{children:"FormField.binaryField"})," constructor:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.http.Header._\n\nval image = Chunk.fromArray(???)\n\nval binaryFormField = FormField.binaryField(\n  name = "profile pic",\n  data = image,\n  mediaType = MediaType.image.jpeg,\n  transferEncoding = Some(ContentTransferEncoding.Binary),\n  filename = Some("profile.jpg")\n)\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The data is not encoded in any way relative to the provided ",(0,i.jsx)(n.code,{children:"transferEncoding"}),". It is the responsibility of the user to encode the ",(0,i.jsx)(n.code,{children:"data"})," accordingly."]})}),"\n",(0,i.jsx)(n.p,{children:"This form field is suitable for transmitting files or other binary data through HTTP requests."}),"\n",(0,i.jsxs)(n.p,{children:["The data is typically encoded in a way that can be transmitted as text (e.g., Base64 encoding) and decoded on the receiving end. The transfer encoding can be one of the following: ",(0,i.jsx)(n.code,{children:"SevenBit"}),", ",(0,i.jsx)(n.code,{children:"EightBit"}),", ",(0,i.jsx)(n.code,{children:"Binary"}),", ",(0,i.jsx)(n.code,{children:"QuotedPrintable"}),", ",(0,i.jsx)(n.code,{children:"Base64"}),", and ",(0,i.jsx)(n.code,{children:"XToken"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-form",children:"Creating a Form"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Form"}),"'s companion object offers several convenient methods for constructing form data, whether from individual form fields, key-value pairs, multipart bytes, query parameters, or URL-encoded data. We'll cover each of these methods and provide examples to illustrate their usage."]}),"\n",(0,i.jsx)(n.h3,{id:"creating-an-empty-form",children:"Creating an Empty Form"}),"\n",(0,i.jsx)(n.p,{children:"We can create an empty form using the empty method:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.http._\n\nval emptyForm = Form.empty\n"})}),"\n",(0,i.jsx)(n.p,{children:"This creates an empty form with no fields."}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-form-from-form-fields",children:"Creating a Form from Form Fields"}),"\n",(0,i.jsxs)(n.p,{children:["We can create a form by providing individual form fields using the ",(0,i.jsx)(n.code,{children:"Form.apply"})," method. This method takes one or more FormField objects:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval form = Form(\n  FormField.Simple("name", "John"),\n  FormField.Simple("age", "42"),\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-form-from-key-value-pairs",children:"Creating a Form from Key-Value Pairs"}),"\n",(0,i.jsxs)(n.p,{children:["We can create a form from key-value pairs using the ",(0,i.jsx)(n.code,{children:"Form.fromStrings"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval formData = Form.fromStrings(\n  "username" -> "johndoe",\n  "password" -> "secret",\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"decoding-raw-multipart-bytes-into-a-form",children:"Decoding Raw Multipart Bytes into a Form"}),"\n",(0,i.jsxs)(n.p,{children:["We can create a form from multipart bytes using the ",(0,i.jsx)(n.code,{children:"Form.fromMultipartBytes"})," method. This is useful when handling multipart form data received in HTTP requests."]}),"\n",(0,i.jsx)(n.p,{children:"Assume we have received the following multipart data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval multipartBytes =\n  s"""|--boundary123\\r\n      |Content-Disposition: form-data; name="field1"\\r\n      |\\r\n      |value1\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="field2"\\r\n      |\\r\n      |value2\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="file1"; filename="filename1.txt"\\r\n      |Content-Type: text/plain\\r\n      |\\r\n      |Contents of filename1.txt\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="file2"; filename="filename2.txt"\\r\n      |Content-Type: text/plain\\r\n      |\\r\n      |Contents of filename2.txt\\r\n      |--boundary123--\\r\\n""".stripMargin.getBytes(Charsets.Utf8)\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can decode it with the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.http._\n\nval charset = Charsets.Utf8\n\nval formTask: Task[Form] =\n  Form.fromMultipartBytes(Chunk.fromArray(multipartBytes), charset, Some(Boundary("boundary123")))\n\nval formData: Task[Chunk[FormField]] = formTask.map(_.formData)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-form-from-query-parameters",children:"Creating a Form from Query Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["We can create a form from query parameters using the ",(0,i.jsx)(n.code,{children:"Form.fromQueryParams"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval queryParams: QueryParams = QueryParams(\n    "name" -> "John",   \n    "age" -> "42"       \n  )\n\nval form = Form.fromQueryParams(queryParams)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-form-from-url-encoded-data",children:"Creating a Form from URL-Encoded Data"}),"\n",(0,i.jsxs)(n.p,{children:["We can create a form from URL-encoded data using the ",(0,i.jsx)(n.code,{children:"Form.fromURLEncoded"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval encodedData: String = "username=johndoe&password=secret" \n// encodedData: String = "username=johndoe&password=secret"\n\nval formResult: Either[FormDecodingError, Form] =\n  Form.fromURLEncoded(encodedData, Charsets.Utf8)\n// formResult: Either[FormDecodingError, Form] = Right(\n//   value = Form(\n//     formData = IndexedSeq(\n//       Simple(name = "username", value = "johndoe"),\n//       Simple(name = "password", value = "secret")\n//     )\n//   )\n// )\n'})}),"\n",(0,i.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,i.jsx)(n.h3,{id:"appending-fields-to-a-form",children:"Appending Fields to a Form"}),"\n",(0,i.jsxs)(n.p,{children:["We can append fields to an existing form using the ",(0,i.jsx)(n.code,{children:"+"})," or ",(0,i.jsx)(n.code,{children:"append"})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval form =\n  Form(\n    FormField.simpleField("username", "johndoe"),\n    FormField.simpleField("password", "secretpassword"),\n  ) + FormField.simpleField("age", "42")\n// form: Form = Form(\n//   formData = IndexedSeq(\n//     Simple(name = "username", value = "johndoe"),\n//     Simple(name = "password", value = "secretpassword"),\n//     Simple(name = "age", value = "42")\n//   )\n// )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"accessing-fields-in-a-form",children:"Accessing Fields in a Form"}),"\n",(0,i.jsxs)(n.p,{children:["We can access fields in a form using the ",(0,i.jsx)(n.code,{children:"get"})," method, which returns an option containing the first field with the specified name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'form.get("username")\n// res8: Option[FormField] = Some(\n//   value = Simple(name = "username", value = "johndoe")\n// )\n'})}),"\n",(0,i.jsx)(n.p,{children:"This method allows us to retrieve a specific field from the form by its name."}),"\n",(0,i.jsx)(n.h3,{id:"encoding-forms",children:"Encoding Forms"}),"\n",(0,i.jsx)(n.p,{children:"We can encode forms using multipart encoding or URL encoding."}),"\n",(0,i.jsx)(n.h4,{id:"multipart-encoding",children:"Multipart Encoding"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Form#multipartBytes"})," method takes the boundary and encodes the form using multipart encoding and returns the multipart byte stream:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\nimport zio.stream._\n\nval form: Form = ???\nval multipartStream: ZStream[Any, Nothing, Byte] = \n    form.multipartBytes(Boundary("boundary123"))\n'})}),"\n",(0,i.jsx)(n.h4,{id:"url-encoding",children:"URL Encoding"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Form#urlEncoded"})," method encodes the form using URL encoding and returns the encoded string:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nform.urlEncoded\n// res10: String = "username=johndoe&password=secretpassword&age=42"\n\nform.urlEncoded(Charsets.Utf8)\n// res11: String = "username=johndoe&password=secretpassword&age=42"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"converting-form-to-query-parameters",children:"Converting Form to Query Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"toQueryParams"})," method in the Form object allows us to convert a form into query parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio.http._\n\nval queryParams: QueryParams = form.toQueryParams\n// queryParams: QueryParams = JavaLinkedHashMapQueryParams(\n//   underlying = {username=[johndoe], password=[secretpassword], age=[42]}\n// )\n\nqueryParams.encode\n// res12: String = "?username=johndoe&password=secretpassword&age=42"\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);