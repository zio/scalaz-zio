"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[18768],{51463:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-dynamodb/reference/hi-level-api/crud-operations/get","title":"get","description":"The get operation is used to retrieve an item from a table. The KeyConditionExpr.PrimaryKeyExpr can be created using the ProjectionExpression\'s in the companion object for model class. It returns an Either[ItemError, From] where ItemError is a sealed trait that that has ValueNotFound and DecodingError instances.","source":"@site/docs/zio-dynamodb/reference/hi-level-api/crud-operations/get.md","sourceDirName":"zio-dynamodb/reference/hi-level-api/crud-operations","slug":"/zio-dynamodb/reference/hi-level-api/crud-operations/get","permalink":"/zio-dynamodb/reference/hi-level-api/crud-operations/get","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/hi-level-api/crud-operations/get.md","tags":[],"version":"current","frontMatter":{"id":"get","title":"get"},"sidebar":"ecosystem-sidebar","previous":{"title":"put","permalink":"/zio-dynamodb/reference/hi-level-api/crud-operations/put"},"next":{"title":"update","permalink":"/zio-dynamodb/reference/hi-level-api/crud-operations/update"}}');var t=n(74848),i=n(28453);const s={id:"get",title:"get"},a=void 0,c={},d=[{value:"Working with <code>get</code> return values",id:"working-with-get-return-values",level:3},{value:"<code>get</code> query operations",id:"get-query-operations",level:3}];function l(e){const r={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:"  def get[From: Schema](tableName: String)(\n    primaryKeyExpr: KeyConditionExpr.PrimaryKeyExpr[From]\n  ): DynamoDBQuery[From, Either[ItemError, From]] = ???\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"get"})," operation is used to retrieve an item from a table. The ",(0,t.jsx)(r.code,{children:"KeyConditionExpr.PrimaryKeyExpr"})," can be created using the ",(0,t.jsx)(r.code,{children:"ProjectionExpression"}),"'s in the companion object for model class. It returns an ",(0,t.jsx)(r.code,{children:"Either[ItemError, From]"})," where ",(0,t.jsx)(r.code,{children:"ItemError"})," is a sealed trait that that has ",(0,t.jsx)(r.code,{children:"ValueNotFound"})," and ",(0,t.jsx)(r.code,{children:"DecodingError"})," instances."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'for {\n  errorOrPerson <- DynamoDBQuery.get("person")(Person.id.primaryKey === "1").execute\n} yield errorOrPerson\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"working-with-get-return-values",children:["Working with ",(0,t.jsx)(r.code,{children:"get"})," return values"]}),"\n",(0,t.jsxs)(r.p,{children:["Sometimes working with a ",(0,t.jsx)(r.code,{children:"Either[ItemError, From]"})," can be a little unwieldy so there are two approaches we can take."]}),"\n",(0,t.jsxs)(r.p,{children:["The first approach is to use the ZIO ",(0,t.jsx)(r.code,{children:"absolve"})," method to push all ItemErrors into the ZIO error channel"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'import zio.dynamodb.syntax._\nfor {\n  person <- DynamoDBQuery.get("person")(Person.id.primaryKey === "1").execute.absolve\n} yield person\n'})}),"\n",(0,t.jsxs)(r.p,{children:["However sometimes we wish to treat ",(0,t.jsx)(r.code,{children:"NotFound"})," as a success case and for this the ",(0,t.jsx)(r.code,{children:"maybeFound"})," extension method can be imported to push the ",(0,t.jsx)(r.code,{children:"DecodingError"})," into the ZIO error channel and handle ",(0,t.jsx)(r.code,{children:"NotFound"})," as a successful operation by using an ",(0,t.jsx)(r.code,{children:"Option"})," type."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'import zio.dynamodb.syntax._\nfor {\n  maybePerson <- DynamoDBQuery.get("person")(Person.id.primaryKey === "1").execute.maybeFound\n} yield maybePerson\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"get-query-operations",children:[(0,t.jsx)(r.code,{children:"get"})," query operations"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:"<GET_QUERY>\n  .consistency(<ConsistencyMode>)\n  .where(<ConditionExpression>)\n"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var o=n(96540);const t={},i=o.createContext(t);function s(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);