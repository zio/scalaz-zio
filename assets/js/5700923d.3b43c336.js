"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[62599],{6665:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"zio-dynamodb/index","title":"Introduction to ZIO DynamoDB","description":"Simple, type-safe, and efficient access to DynamoDB","source":"@site/docs/zio-dynamodb/index.md","sourceDirName":"zio-dynamodb","slug":"/zio-dynamodb/","permalink":"/zio-dynamodb/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to ZIO DynamoDB","sidebar_title":"ZIO DynamoDB"},"sidebar":"ecosystem-sidebar","previous":{"title":"Other Supported Monads","permalink":"/zio-direct/other-supported-monads"},"next":{"title":"Architecture","permalink":"/zio-dynamodb/concepts/architecture"}}');var i=n(74848),a=n(28453);const t={id:"index",title:"Introduction to ZIO DynamoDB",sidebar_title:"ZIO DynamoDB"},r=void 0,d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Cats Effect Interop",id:"cats-effect-interop",level:3},{value:"Read/write DynamoDB JSON",id:"readwrite-dynamodb-json",level:3},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function c(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.p,{children:"Simple, type-safe, and efficient access to DynamoDB"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,i.jsx)(o.img,{src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"})})," ",(0,i.jsx)(o.img,{src:"https://github.com/zio/zio-dynamodb/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,i.jsx)(o.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-dynamodb_2.13/",children:(0,i.jsx)(o.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-dynamodb_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,i.jsx)(o.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-dynamodb_2.13/",children:(0,i.jsx)(o.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-dynamodb_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,i.jsx)(o.a,{href:"https://javadoc.io/doc/dev.zio/zio-dynamodb-docs_2.13",children:(0,i.jsx)(o.img,{src:"https://javadoc.io/badge2/dev.zio/zio-dynamodb-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,i.jsx)(o.a,{href:"https://github.com/zio/zio-dynamodb",children:(0,i.jsx)(o.img,{src:"https://img.shields.io/github/stars/zio/zio-dynamodb?style=social",alt:"ZIO DynamoDB"})})]}),"\n",(0,i.jsx)(o.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(o.p,{children:"ZIO DynamoDB is a library that is used for type-safe, efficient, and boilerplate free access to AWS's DynamoDB service. It provides a type-safe API for many query types and the number of type-safe APIs is expanding. ZIO DynamoDB will automatically batch queries and execute un-batchable queries in parallel."}),"\n",(0,i.jsxs)(o.p,{children:["Under the hood we use the excellent ",(0,i.jsx)(o.a,{href:"https://zio.dev/zio-aws",children:"ZIO AWS"})," library for type-safe DynamoDB access, and the awesome ",(0,i.jsx)(o.a,{href:"https://zio.dev/zio-schema",children:"ZIO Schema"})," library for schema derived codecs (see here for documentation on how to ",(0,i.jsx)(o.a,{href:"/zio-dynamodb/guides/codec-customization",children:"customise these through annotations"}),")."]}),"\n",(0,i.jsxs)(o.p,{children:["For an overview of the High Level API please see the ",(0,i.jsx)(o.a,{href:"/zio-dynamodb/guides/cheat-sheet",children:"ZIO DynamoDB cheat sheet"}),"."]}),"\n",(0,i.jsx)(o.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(o.p,{children:["To use ZIO DynamoDB, we need to add the following lines to our ",(0,i.jsx)(o.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-dynamodb" % "1.0.0-RC18"\n)\n'})}),"\n",(0,i.jsx)(o.h3,{id:"cats-effect-interop",children:"Cats Effect Interop"}),"\n",(0,i.jsxs)(o.p,{children:["To use the new Cats Effect 3 interop module, we need to also add the following line to our ",(0,i.jsx)(o.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-dynamodb-ce" % "1.0.0-RC18"\n)\n'})}),"\n",(0,i.jsxs)(o.p,{children:["For CE interop examples please see ",(0,i.jsx)(o.a,{href:"https://github.com/zio/zio-dynamodb/blob/series/2.x/examples/src/main/scala/zio/dynamodb/examples/dynamodblocal/interop/CeInteropExample.scala",children:"examples sbt module"}),"."]}),"\n",(0,i.jsx)(o.h3,{id:"readwrite-dynamodb-json",children:"Read/write DynamoDB JSON"}),"\n",(0,i.jsxs)(o.p,{children:["AWS tools like the CLI and Console read/write a special JSON representation of dynamoDB items. The new experimental optional ",(0,i.jsx)(o.code,{children:"zio-dynamodb-json"})," module provides a way to read/write this form of JSON when working with both the High Level and Low Level API. To use this module, we need to also add the following line to our ",(0,i.jsx)(o.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-dynamodb-json" % "1.0.0-RC18"\n)\n'})}),"\n",(0,i.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(o.p,{children:["For examples please see ",(0,i.jsx)(o.a,{href:"https://github.com/zio/zio-dynamodb/tree/series/2.x/examples/src/main/scala/zio/dynamodb/examples",children:"examples sbt module"}),". Below is ",(0,i.jsx)(o.code,{children:"Main.scala"})," from that module:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-scala",children:'import zio.aws.core.config\nimport zio.aws.{ dynamodb, netty }\nimport zio.dynamodb.DynamoDBQuery.{ get, put }\nimport zio.dynamodb.{ DynamoDBExecutor }\nimport zio.schema.{ DeriveSchema, Schema }\nimport zio.ZIOAppDefault\nimport zio.dynamodb.ProjectionExpression\n\nobject Main extends ZIOAppDefault {\n\n  final case class Person(id: Int, firstName: String)\n  object Person {\n    implicit lazy val schema: Schema.CaseClass2[Int, String, Person] = DeriveSchema.gen[Person]\n\n    val (id, firstName) = ProjectionExpression.accessors[Person]\n  }\n  val examplePerson = Person(1, "avi")\n\n  private val program = for {\n    _      <- put("personTable", examplePerson).execute\n    person <- get("personTable")(Person.id.partitionKey === 1).execute\n    _      <- zio.Console.printLine(s"hello $person")\n  } yield ()\n\n  override def run =\n    program.provide(\n      netty.NettyHttpClient.default,\n      config.AwsConfig.default, // uses real AWS dynamodb\n      dynamodb.DynamoDb.live,\n      DynamoDBExecutor.live\n    )\n}\n'})}),"\n",(0,i.jsxs)(o.p,{children:["For examples on how to use the DynamoDBLocal in memory database please see the ",(0,i.jsx)(o.a,{href:"https://github.com/zio/zio-dynamodb/blob/series/2.x/dynamodb/src/it/scala/zio/dynamodb/TypeSafeApiCrudSpec.scala",children:"integration tests"}),"\nand ",(0,i.jsx)(o.a,{href:"https://github.com/zio/zio-dynamodb/blob/series/2.x/examples/src/main/scala/zio/dynamodb/examples/dynamodblocal/DynamoDBLocalMain.scala",children:"DynamoDBLocalMain"})," .\nNote before you run these you must first run the DynamoDBLocal docker container using the provided docker-compose file:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"docker compose -f docker/docker-compose.yml up -d\n"})}),"\n",(0,i.jsx)(o.p,{children:"Don't forget to shut down the container after you have finished"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"docker compose -f docker/docker-compose.yml down\n"})}),"\n",(0,i.jsx)(o.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://www.youtube.com/watch?v=f68-69eA8Vc&t=33s",children:"Introducing ZIO DynamoDB by Avinder Bahra & Adam Johnson"})," - DynamoDB powers many cloud-scale applications, with its robust horizontal scalability and uptime. Yet, interacting with the Java SDK is error-prone and tedious. In this presentation, Avinder Bahra presents ZIO DynamoDB, a new library by Avi and Adam Johnson designed to make interacting with DynamoDB easy, type-safe, testable, and productive."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://www.youtube.com/watch?v=Qte4WUfHQ3g&t=10s",children:"Introducing The ZIO DynamoDB Type-Safe API by Avinder Bahra"})," - Last year, Adam Johnson and Avinder released ZIO DynamoDB, a new Scala library that significantly reduces boilerplate when compared to working directly with AWS client libraries. However, there was still work to be done to improve type safety. In this talk, Avinder introduces a new type-safe API that can prevent many errors at compile time while remaining user-friendly."]}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>r});var s=n(96540);const i={},a=s.createContext(i);function t(e){const o=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:o},e.children)}}}]);