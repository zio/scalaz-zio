"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[40113],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var c=o(96540);const a={},r=c.createContext(a);function i(e){const n=c.useContext(r);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),c.createElement(r.Provider,{value:n},e.children)}},44140:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>t});const c=JSON.parse('{"id":"zio-schema/derivations/codecs/avro","title":"Apache Avro Codecs","description":"Introduction","source":"@site/docs/zio-schema/derivations/codecs/avro.md","sourceDirName":"zio-schema/derivations/codecs","slug":"/zio-schema/derivations/codecs/avro","permalink":"/zio-schema/derivations/codecs/avro","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/avro.md","tags":[],"version":"current","frontMatter":{"id":"avro","title":"Apache Avro Codecs","sidebar_label":"Apache Avro"},"sidebar":"ecosystem-sidebar","previous":{"title":"Codecs","permalink":"/zio-schema/derivations/codecs/"},"next":{"title":"Apache Thrift","permalink":"/zio-schema/derivations/codecs/thrift"}}');var a=o(74848),r=o(28453);const i={id:"avro",title:"Apache Avro Codecs",sidebar_label:"Apache Avro"},s=void 0,d={},t=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Codecs",id:"codecs",level:2},{value:"AvroSchemaCodec",id:"avroschemacodec",level:3},{value:"AvroCodec",id:"avrocodec",level:3},{value:"Annotations",id:"annotations",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"Apache Avro is a popular data serialization format used in distributed systems, particularly in the Apache Hadoop ecosystem. In this article, we will explore how to work with Apache Avro codecs in Scala using the ZIO Schema. Avro codecs allow us to easily serialize and deserialize data in Avro's binary and JSON formats."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["To use the Avro codecs, we need to add the following dependency to our ",(0,a.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema-avro" % "1.6.2"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"codecs",children:"Codecs"}),"\n",(0,a.jsx)(n.p,{children:"It has two codecs:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["An ",(0,a.jsx)(n.strong,{children:"AvroSchemaCodec"})," to serialize a ",(0,a.jsx)(n.code,{children:"Schema[A]"})," to Avro JSON schema and deserialize an Avro JSON schema to a ",(0,a.jsx)(n.code,{children:"Schema.GenericRecord"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["An ",(0,a.jsx)(n.strong,{children:"AvroCodec"})," to serialize/deserialize the Avro binary serialization format."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"avroschemacodec",children:"AvroSchemaCodec"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"AvroSchemaCodec"})," provides methods to encode a ",(0,a.jsx)(n.code,{children:"Schema[_]"})," to Avro JSON schema and decode an Avro JSON schema to a ",(0,a.jsx)(n.code,{children:"Schema[_]"})," (",(0,a.jsx)(n.a,{href:"/zio-schema/operations/dynamic-data-representation",children:(0,a.jsx)(n.code,{children:"Schema.GenericRecord"})}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"trait AvroSchemaCodec {\n  def encode(schema: Schema[_]): scala.util.Either[String, String]\n  def decode(bytes: Chunk[Byte]): scala.util.Either[String, Schema[_]]\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"encode"})," method takes a ",(0,a.jsx)(n.code,{children:"Schema[_]"})," and returns an ",(0,a.jsx)(n.code,{children:"Either[String, String]"})," where the ",(0,a.jsx)(n.code,{children:"Right"})," side contains the Avro schema in JSON\u200c format."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"decode"})," method takes a ",(0,a.jsx)(n.code,{children:"Chunk[Byte]"})," which contains the Avro JSON Schema in binary format and returns an ",(0,a.jsx)(n.code,{children:"Either[String, Schema[_]]"})," where the ",(0,a.jsx)(n.code,{children:"Right"})," side contains the ZIO Schema in ",(0,a.jsx)(n.code,{children:"GenericRecord"})," format."]}),"\n",(0,a.jsx)(n.p,{children:"Here is an example of how to use it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema.Schema\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.AvroSchemaCodec\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen\n}\n\nobject Main extends ZIOAppDefault {\n  def run =\n    for {\n      _          <- ZIO.debug("AvroSchemaCodec Example:")\n      avroSchema <- ZIO.fromEither(AvroSchemaCodec.encode(Person.schema))\n      _ <- ZIO.debug(s"The person schema in Avro Schema JSON format: $avroSchema")\n      avroSchemaBinary = Chunk.fromArray(avroSchema.getBytes)\n      zioSchema <- ZIO.fromEither(AvroSchemaCodec.decode(avroSchemaBinary))\n      _ <- ZIO.debug(s"The person schema in ZIO Schema GenericRecord format: $zioSchema")\n    } yield ()\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'AvroSchemaCodec Example:\nThe person schema in Avro Schema JSON format: {"type":"record","name":"Person","fields":[{"name":"name","type":"string"},{"name":"age","type":"int"}]}\nThe person schema in ZIO Schema GenericRecord format: GenericRecord(Nominal(Chunk(),Chunk(),Person),Field(name,Primitive(string,Chunk())) :*: Field(age,Primitive(int,Chunk())) :*: Empty,Chunk(name(Person)))\n'})}),"\n",(0,a.jsxs)(n.p,{children:["As we can see, we converted the ",(0,a.jsx)(n.code,{children:"Schema[Person]"})," to Avro schema JSON format, and then we converted it back to the ZIO Schema ",(0,a.jsx)(n.code,{children:"GenericRecord"})," format."]}),"\n",(0,a.jsx)(n.h3,{id:"avrocodec",children:"AvroCodec"}),"\n",(0,a.jsxs)(n.p,{children:["We can create a ",(0,a.jsx)(n.code,{children:"BinaryCodec[A]"})," for any type ",(0,a.jsx)(n.code,{children:"A"})," that has a ",(0,a.jsx)(n.code,{children:"Schema[A]"})," instance using ",(0,a.jsx)(n.code,{children:"AvroCodec.schemaBasedBinaryCodec"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"object AvroCodec {\n  implicit def schemaBasedBinaryCodec[A](implicit schema: Schema[A]): BinaryCodec[A] = ???\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now, let's write an example and see how it works:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema.Schema\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.{AvroCodec, BinaryCodec}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen\n  implicit val binaryCodec: BinaryCodec[Person] =\n    AvroCodec.schemaBasedBinaryCodec[Person]\n}\n\nobject Main extends ZIOAppDefault {\n  def run =\n    for {\n      _ <- ZIO.debug("AvroCodec Example:")\n      encodedPerson = Person.binaryCodec.encode(Person("John", 42))\n      _ <- ZIO.debug(s"encoded person object: ${toHex(encodedPerson)}")\n      decodedPerson <- ZIO.fromEither(\n        Person.binaryCodec.decode(encodedPerson)\n      )\n      _ <- ZIO.debug(s"decoded person object: $decodedPerson")\n    } yield ()\n\n  def toHex(bytes: Chunk[Byte]): String =\n    bytes.map("%02x".format(_)).mkString(" ")\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"AvroCodec Example:\nencoded person object: 08 4a 6f 68 6e 54\ndecoded person object: Person(John,42)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"annotations",children:"Annotations"}),"\n",(0,a.jsxs)(n.p,{children:["The Apache Avro specification supports some attributes for describing the data which are not part of the default ZIO Schema. To support these extra metadata, we can use annotations defined in the ",(0,a.jsx)(n.code,{children:"zio.schema.codec.AvroAnnotations"})," object."]}),"\n",(0,a.jsx)(n.p,{children:"There tons of annotations that we can use. Let's introduce some of them:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.name(name: String)"}),": To change the name of a field or a record."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.namespace(namespace: String)"}),": To add the namespace for a field or a record."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.doc(doc: String)"}),": To add documentation to a field or a record."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.aliases(aliases: Set[String])"}),": To add aliases to a field or a record."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.avroEnum"}),": To treat a sealed trait as an Avro enum."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.scale(scale: Int = 24)"})," and ",(0,a.jsx)(n.code,{children:"@AvroAnnotations.precision(precision: Int = 48)"}),": To describe the scale and precision of a decimal field."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.decimal(decimalType: DecimalType)"}),": Used to annotate a ",(0,a.jsx)(n.code,{children:"BigInteger"})," or ",(0,a.jsx)(n.code,{children:"BigDecimal"})," type to indicate the logical type encoding (avro bytes or avro fixed)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.bytes(bytesType: BytesType)"}),": Used to annotate a Byte type to indicate the avro type encoding (avro bytes or avro fixed)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.formatToString"}),": Used to annotate fields of type ",(0,a.jsx)(n.code,{children:"LocalDate"}),", ",(0,a.jsx)(n.code,{children:"LocalTime"}),", ",(0,a.jsx)(n.code,{children:"LocalDateTime"})," or ",(0,a.jsx)(n.code,{children:"Instant"})," in order to render them as a string using the given formatter instead of rendering them as avro logical types."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.timeprecision(timeprecisionType: TimePrecisionType)"}),": Used to indicate the precision (millisecond precision or microsecond precision) of avro logical types ",(0,a.jsx)(n.code,{children:"Time"}),", ",(0,a.jsx)(n.code,{children:"Timestamp"})," and ",(0,a.jsx)(n.code,{children:"Local timestamp"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.error"}),": Used to annotate a record in order to render it as a avro error record"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@AvroAnnotations.fieldOrder(fieldOrderType: FieldOrderType)"}),": Used to indicate the avro field order of a record"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For example, to change the name of a field in the Avro schema, we can use the ",(0,a.jsx)(n.code,{children:"AvroAnnotations.name"})," annotation:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio.schema.Schema\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.AvroAnnotations\n\n@AvroAnnotations.name("User")\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now, if we generate the Avro schema for the ",(0,a.jsx)(n.code,{children:"Person"})," class, we will see that the name of the record is ",(0,a.jsx)(n.code,{children:"User"})," instead of ",(0,a.jsx)(n.code,{children:"Person"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema.Schema\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.AvroSchemaCodec\n\nobject Main extends ZIOAppDefault {\n  def run =\n    for {\n      _          <- ZIO.debug("AvroSchemaCodec Example with annotations:")\n      avroSchema <- ZIO.fromEither(AvroSchemaCodec.encode(Person.schema))\n      _ <- ZIO.debug(s"The person schema in Avro Schema JSON format: $avroSchema")\n    } yield ()\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'The person schema in Avro Schema JSON format: {"type":"record","name":"User","fields":[{"name":"name","type":"string"},{"name":"age","type":{"type":"bytes","logicalType":"decimal","precision":48,"scale":24}}]}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);