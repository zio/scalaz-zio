"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[14786],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}},70969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"zio-http/concepts/endpoint","title":"Endpoint API","description":"The Endpoint API is a declarative DSL for defining HTTP endpoints. It is a way to define a type safe API for your application.","source":"@site/docs/zio-http/concepts/endpoint.md","sourceDirName":"zio-http/concepts","slug":"/zio-http/concepts/endpoint","permalink":"/zio-http/concepts/endpoint","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/concepts/endpoint.md","tags":[],"version":"current","frontMatter":{},"sidebar":"ecosystem-sidebar","previous":{"title":"Middleware","permalink":"/zio-http/concepts/middleware"},"next":{"title":"Reference","permalink":"/zio-http/reference/"}}');var i=n(74848),a=n(28453);const r={},s="Endpoint API",p={},c=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"endpoint-api",children:"Endpoint API"})}),"\n",(0,i.jsx)(t.p,{children:"The Endpoint API is a declarative DSL for defining HTTP endpoints. It is a way to define a type safe API for your application.\nIt comes with batteries included and supports out of the box JSON, protobuf, plain text and binary data serialization and deserialization. It also supports automatic validation via ZIO Schema, and automatic OpenAPI documentation generation.\nEndpoints can be used to implement not only servers but also clients."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.http._\nimport zio.http.codec.PathCodec.path\nimport zio.http.codec._\nimport zio.http.endpoint._\nimport zio.schema._\nimport zio.schema.annotation._\nimport zio.http.endpoint.openapi._\nimport zio.http.template.Dom\nimport zio.schema.validation.Validation\n\nfinal case class UserParams(city: String, @validate(Validation.greaterThan(17)) age: Int)\n\nobject UserParams {\n  implicit val schema: Schema[UserParams] = DeriveSchema.gen[UserParams]\n}\n\nval endpoint =\n  // typed path parameter "user"\n  Endpoint(Method.GET / "hello" / string("user"))\n    // reads the two query parameters city and age from the request and validates the age\n    .query(HttpCodec.queryAll[UserParams])\n    // support for HTML templates included\n    .out[Dom]\n\n/* SERVER */\n\n// Generates OpenAPI documentation for the endpoint\nval openApi = OpenAPIGen.fromEndpoints("User API", "1.0.0", endpoint)\n\n// Routes for the endpoint and the Swagger UI\nval routes =\n  endpoint.implement { case (user, params) =>\n    ZIO.succeed(Dom.text(s"Hello $user, you are ${params.age} years old and live in ${params.city}"))\n  }.toRoutes ++ SwaggerUI.routes("intern" / "apidoc", openApi)\n\n/* CLIENT */\n\nval locator = EndpointLocator.fromURL(url"http://localhost:8080")\n\ndef endpointExecutor(client: Client) = EndpointExecutor(client, locator)\n\nval clientApp: ZIO[Scope with Client, Nothing, Dom] = for {\n  client <- ZIO.service[Client]\n  dom   <- endpointExecutor(client)(endpoint("John", UserParams("New York", 25)))\n} yield dom\n'})}),"\n",(0,i.jsxs)(t.p,{children:["For more details on the Endpoint API, see the ",(0,i.jsx)(t.a,{href:"/zio-http/reference/endpoint",children:"documentation"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);