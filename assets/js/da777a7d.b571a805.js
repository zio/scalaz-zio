"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[98793],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var s=r(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},80923:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-kafka/migrating-to-zio-kafka-3","title":"Migrating to zio-kafka 3","description":"Zio-kafka 3.0.0 removes everything that was deprecated in the zio-kafka 2.x series. In particular, this includes","source":"@site/docs/zio-kafka/migrating-to-zio-kafka-3.md","sourceDirName":"zio-kafka","slug":"/zio-kafka/migrating-to-zio-kafka-3","permalink":"/zio-kafka/migrating-to-zio-kafka-3","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/migrating-to-zio-kafka-3.md","tags":[],"version":"current","frontMatter":{"id":"migrating-to-zio-kafka-3","title":"Migrating to zio-kafka 3"},"sidebar":"ecosystem-sidebar","previous":{"title":"Writing Tests with the `zio-kafka-testkit` library","permalink":"/zio-kafka/writing-tests"},"next":{"title":"ZIO Lambda","permalink":"/zio-lambda/"}}');var i=r(74848),o=r(28453);const a={id:"migrating-to-zio-kafka-3",title:"Migrating to zio-kafka 3"},t="Renamed methods",d={},c=[{value:"Use the ZIO Service pattern",id:"use-the-zio-service-pattern",level:2},{value:"YOLO, use <code>ZIO.service</code> everywhere",id:"yolo-use-zioservice-everywhere",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Zio-kafka 3.0.0 removes everything that was deprecated in the zio-kafka 2.x series. In particular, this includes\naccessor methods. To prepare for zio-kafka 3.0, ",(0,i.jsx)(n.em,{children:"you should always first migrate to zio-kafka 2.11.0"})," and solve all\ndeprecation issues, using this page as a guide."]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"renamed-methods",children:"Renamed methods"})}),"\n",(0,i.jsx)(n.p,{children:"Some methods have just been renamed. Read the deprecation message and try the new method name. If it compiles, you're\ndone. Otherwise, read on."}),"\n",(0,i.jsx)(n.h1,{id:"consumer-producer-and-transactionalproducer-accessor-methods",children:"Consumer, Producer and TransactionalProducer accessor methods"}),"\n",(0,i.jsxs)(n.p,{children:["Accessor methods are little helper methods that look up a service from the environment, and then forward your call to\nthat service. Accessor methods have not been recommended for some time and are now deprecated. The\n",(0,i.jsx)(n.a,{href:"https://zio.dev/reference/service-pattern/",children:"ZIO service pattern"})," provides a much cleaner approach for accessing\nservices."]}),"\n",(0,i.jsx)(n.p,{children:"All accessor methods provided by zio-kafka are deprecated in zio-kafka 2.11 and will be removed in zio-kafka 3.0. If\nyou use these accessor methods follow one of these approaches:"}),"\n",(0,i.jsx)(n.h2,{id:"use-the-zio-service-pattern",children:"Use the ZIO Service pattern"}),"\n",(0,i.jsxs)(n.p,{children:["This is the best option. For established codebases it may be a lot of work to get here. If you are already follow\nthis pattern, using it for zio-kafka services as well will be easy. See ",(0,i.jsx)(n.a,{href:"https://zio.dev/reference/service-pattern/",children:"ZIO service pattern"})," for more information."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example with a ",(0,i.jsx)(n.code,{children:"Consumer"}),", but it works the same with ",(0,i.jsx)(n.code,{children:"Producer"})," and ",(0,i.jsx)(n.code,{children:"TransactionalProducer"}),". We get the\n",(0,i.jsx)(n.code,{children:"Consumer"})," from the environment in the layer with the ",(0,i.jsx)(n.code,{children:"ZIO.service"})," method, and then inject it into the service class.\nThe service now uses the consumer directly: with ",(0,i.jsx)(n.code,{children:"consumer"})," instead of ",(0,i.jsx)(n.code,{children:"Consumer"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.kafka.consumer.Consumer\n\ntrait Service {\n    def someMethod: ZIO[Any, Throwable, String]\n}\n\nobject Service {\n  \n  def layer: ZLayer[Consumer, Throwable, Service] = ZLayer {\n      for {\n        consumer <- ZIO.service[Consumer]\n      } yield ServiceLive(consumer)\n  }\n  \n}\n\ncase class ServiceLive(consumer: Consumer) extends Service {\n\n  override def someMethod: ZIO[Any, Throwable, String] = {\n    // use `consumer`, not `Consumer`:\n    consumer.plainStream(/*...*/).runHead\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Constructing a ",(0,i.jsx)(n.code,{children:"Consumer"})," layer is described in ",(0,i.jsx)(n.a,{href:"/zio-kafka/creating-a-consumer",children:"creating a consumer"}),". Constructing a\n",(0,i.jsx)(n.code,{children:"Producer"})," or ",(0,i.jsx)(n.code,{children:"TransactionalProducer"})," layer works in a similar way."]}),"\n",(0,i.jsxs)(n.h2,{id:"yolo-use-zioservice-everywhere",children:["YOLO, use ",(0,i.jsx)(n.code,{children:"ZIO.service"})," everywhere"]}),"\n",(0,i.jsxs)(n.p,{children:["The other option is to replace all accessor methods of ",(0,i.jsx)(n.code,{children:"Consumer"}),", ",(0,i.jsx)(n.code,{children:"Producer"})," and ",(0,i.jsx)(n.code,{children:"TransactionalProducer"})," as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Consumer.method(...)"})," => ",(0,i.jsx)(n.code,{children:"ZIO.serviceWithZIO[Consumer](_.method(...))"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Producer.method(...)"})," => ",(0,i.jsx)(n.code,{children:"ZIO.serviceWithZIO[Producer](_.method(...))"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TransactionalProducer.method(...)"})," => ",(0,i.jsx)(n.code,{children:"ZIO.serviceWithZIO[TransactionalProducer](_.method(...))"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Or, alternatively, use ",(0,i.jsx)(n.code,{children:"ZIO.service"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example: ",(0,i.jsx)(n.code,{children:"Consumer.method(...)"})," is transformed to:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"for {\n  consumer <- ZIO.service[Consumer]\n  _        <- consumer.method(...)\n} yield () \n"})}),"\n",(0,i.jsx)(n.h1,{id:"zio-test-kit",children:"Zio-test-kit"}),"\n",(0,i.jsxs)(n.p,{children:["Zio-kafka provides a ",(0,i.jsx)(n.code,{children:"zio-kafka-testkit"})," library to help you test your code using zio-kafka. Several methods in the\n",(0,i.jsx)(n.code,{children:"KafkaTestUtils"})," class have been replaced:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"produce*"})," and ",(0,i.jsx)(n.code,{children:"scheduledProduce*"})," methods, which get a producer from the environment, have been deprecated.\nEach of these methods now has a variant with an explicit producer parameter."]}),"\n",(0,i.jsxs)(n.li,{children:["All methods that produce a layer (e.g. ",(0,i.jsx)(n.code,{children:"consumer"}),", ",(0,i.jsx)(n.code,{children:"producer"}),") have ",(0,i.jsx)(n.em,{children:"not"})," been deprecated, but they have been given a\nmore convenient alternative: ",(0,i.jsx)(n.code,{children:"makeConsumer"}),", ",(0,i.jsx)(n.code,{children:"makeProducer"}),", etc."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"withAdmin"}),", ",(0,i.jsx)(n.code,{children:"withSaslAdmin"}),", ",(0,i.jsx)(n.code,{children:"withSslAdmin"})," methods are deprecated and are replaced by ",(0,i.jsx)(n.code,{children:"makeAdminClient"}),",\n",(0,i.jsx)(n.code,{children:"makeSaslAdminClient"})," and ",(0,i.jsx)(n.code,{children:"makeSslAdminClient"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is a typical example and the new version:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'// Old\noverride def spec: Spec[TestEnvironment, Any] =\n  suite("old example suite")(\n    test("uses a producer") {\n      for {\n        _ <- KafkaTestUtils.produceOne("topic", "key", "message")\n      } yield assertCompletes\n    }\n  )\n    .provideSome[Kafka](KafkaTestUtils.producer)\n    .provideShared(Kafka.embedded)\n\n// New\n// Added `Scope`:\noverride def spec: Spec[TestEnvironment & Scope, Any] =\n  suite("new example suite")(\n    test("uses a producer") {\n      for {\n        // Make a producer explicitly (instead of via a layer):\n        producer <- KafkaTestUtils.makeProducer\n        // Notice explicit producer parameter:\n        _ <- KafkaTestUtils.produceOne(producer, "topic", "key", "message")\n      } yield assertCompletes\n    }\n    // Producer layer removed.\n    .provideSomeShared[Scope](Kafka.embedded)\n    // Using `provideSomeShared[Scope]` instead of `provideShared`\n  )\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"KafkaTestUtils.makeProducer"})," and the other ",(0,i.jsx)(n.code,{children:"make*"})," methods require a ",(0,i.jsx)(n.code,{children:"Scope"})," in the environment. This scope is\nnormally provided by the test framework (notice how ",(0,i.jsx)(n.code,{children:"Scope"})," was added to the type parameter of ",(0,i.jsx)(n.code,{children:"Spec"}),"). If needed, a\nsmaller scope can be given with the ",(0,i.jsx)(n.code,{children:"ZIO.scoped"})," method. See also ",(0,i.jsx)(n.a,{href:"/zio-kafka/writing-tests",children:"writing tests"})," for details on how\nto provide more layers."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of how to rewrite code that uses one of the deprecated ",(0,i.jsx)(n.code,{children:"with*Admin"})," methods:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"// Old\nKafkaTestUtils.withAdmin { adminClient =>\n  adminClient.method() // Use the admin client...\n}\n\n// New\nfor {\n  adminClient <- KafkaTestUtils.makeAdminClient\n  _           <- adminClient.method() // Use the admin client...\n} yield ()\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"restartstreamonrebalancing-mode",children:[(0,i.jsx)(n.code,{children:"restartStreamOnRebalancing"})," mode"]}),"\n",(0,i.jsxs)(n.p,{children:["This mode will no longer be available in zio-kafka 3. Contact us on ",(0,i.jsx)(n.a,{href:"https://discord.com/channels/629491597070827530/629497941719121960",children:"Discord"})," for alternatives."]}),"\n",(0,i.jsx)(n.h1,{id:"other-changes",children:"Other changes?"}),"\n",(0,i.jsxs)(n.p,{children:["If you find a change that is not documented here then please let us know via a\n",(0,i.jsx)(n.a,{href:"https://github.com/zio/zio-kafka/issues/new",children:"new issue"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);