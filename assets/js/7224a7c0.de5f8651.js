"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[48059],{89675:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"zio-schema/examples/combining-different-encoders","title":"Combining Different Encoders","description":"Let\'s take a look at a round-trip converting an object to JSON and back, then converting it to a protobuf and back. This is a simple example, but it shows how to combine different encoders to achieve a round-trip.","source":"@site/docs/zio-schema/examples/combining-different-encoders.md","sourceDirName":"zio-schema/examples","slug":"/zio-schema/examples/combining-different-encoders","permalink":"/zio-schema/examples/combining-different-encoders","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/examples/combining-different-encoders.md","tags":[],"version":"current","frontMatter":{"id":"combining-different-encoders","title":"Combining Different Encoders"},"sidebar":"ecosystem-sidebar","previous":{"title":"Mapping DTO to Domain Object","permalink":"/zio-schema/examples/mapping-dto-to-domain-object"},"next":{"title":"ZIO Streams Compress","permalink":"/zio-streams-compress/"}}');var r=o(74848),s=o(28453);const i={id:"combining-different-encoders",title:"Combining Different Encoders"},c=void 0,a={},d=[];function p(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Let's take a look at a round-trip converting an object to JSON and back, then converting it to a protobuf and back. This is a simple example, but it shows how to combine different encoders to achieve a round-trip."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'object CombiningExample extends zio.App {\n  import zio.schema.codec.JsonCodec\n  import zio.schema.codec.ProtobufCodec\n  import ManualConstruction._\n  import zio.stream.ZStream\n\n  override def run(args: List[String]): UIO[ExitCode] = for {\n    _ <- ZIO.unit\n    _ <- ZIO.debug("combining roundtrip")\n    person = Person("Michelle", 32)\n\n    personToJson = JsonCodec.encoder[Person](schemaPerson)\n    jsonToPerson = JsonCodec.decoder[Person](schemaPerson)\n\n    personToProto = ProtobufCodec.encoder[Person](schemaPerson)\n    protoToPerson = ProtobufCodec.decoder[Person](schemaPerson)\n\n    newPerson <- ZStream(person)\n      .tap(v => ZIO.debug("input object is: " + v))\n      .transduce(personToJson)\n      .transduce(jsonToPerson)\n      .tap(v => ZIO.debug("object after json roundtrip: " + v))\n      .transduce(personToProto)\n      .transduce(protoToPerson)\n      .tap(v => ZIO.debug("person after protobuf roundtrip: " + v))\n      .runHead\n      .some\n      .catchAll(error => ZIO.debug(error))\n    _ <- ZIO.debug("is old person the new person? " + (person == newPerson).toString)\n    _ <- ZIO.debug("old person: " + person)\n    _ <- ZIO.debug("new person: " + newPerson)\n  } yield ExitCode.success\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var t=o(96540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);