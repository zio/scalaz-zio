"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20328],{28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>t});var i=o(96540);const g={},r=i.createContext(g);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(g):e.components||g:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},46681:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"zio-logging/jul-bridge","title":"java.util.logging bridge","description":"It is possible to use zio-logging for included java.util.logging Loggers (do not confuse with java.platform.logging),","source":"@site/docs/zio-logging/jul-bridge.md","sourceDirName":"zio-logging","slug":"/zio-logging/jul-bridge","permalink":"/zio-logging/jul-bridge","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/jul-bridge.md","tags":[],"version":"current","frontMatter":{"id":"jul-bridge","title":"java.util.logging bridge"},"sidebar":"ecosystem-sidebar","previous":{"title":"Java Platform/System Logger","permalink":"/zio-logging/jpl"},"next":{"title":"SLF4J v2","permalink":"/zio-logging/slf4j2"}}');var g=o(74848),r=o(28453);const l={id:"jul-bridge",title:"java.util.logging bridge"},t=void 0,a={},s=[{value:"Examples",id:"examples",level:2},{value:"JUL bridge with JSON console logger",id:"jul-bridge-with-json-console-logger",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(n.p,{children:["It is possible to use ",(0,g.jsx)(n.code,{children:"zio-logging"})," for included ",(0,g.jsx)(n.code,{children:"java.util.logging"})," Loggers (do not confuse with ",(0,g.jsx)(n.code,{children:"java.platform.logging"}),"),\nusually third-party non-ZIO libraries (most notable: OpenTelemetry used by ZIO-telemetry). To do so, import the ",(0,g.jsx)(n.code,{children:"zio-logging-jul-bridge"})," module"]}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-logging-jul-bridge" % "2.4.0"\n'})}),"\n",(0,g.jsxs)(n.p,{children:["and use one of the ",(0,g.jsx)(n.code,{children:"JULBridge"})," layers when setting up logging"]}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:"import zio.logging.jul.bridge.JULBridge\n\nprogram.provideCustom(JULBridge.init())\n"})}),"\n",(0,g.jsxs)(n.p,{children:[(0,g.jsx)(n.code,{children:"JULBridge"})," layers:"]}),"\n",(0,g.jsxs)(n.ul,{children:["\n",(0,g.jsxs)(n.li,{children:[(0,g.jsx)(n.code,{children:"JULBridge.init(configPath: NonEmptyChunk[String] = logFilterConfigPath)"})," - setup with ",(0,g.jsx)(n.code,{children:"LogFilter"})," from ",(0,g.jsx)(n.a,{href:"/zio-logging/log-filter#configuration",children:"filter configuration"}),", default configuration path: ",(0,g.jsx)(n.code,{children:"logger.filter"}),", default ",(0,g.jsx)(n.code,{children:"LogLevel"})," is ",(0,g.jsx)(n.code,{children:"INFO"})]}),"\n",(0,g.jsxs)(n.li,{children:[(0,g.jsx)(n.code,{children:"JULBridge.init(filter: LogFilter[Any])"})," - setup with given ",(0,g.jsx)(n.code,{children:"LogFilter"})]}),"\n",(0,g.jsxs)(n.li,{children:[(0,g.jsx)(n.code,{children:"JULBridge.initialize"})," - setup without filtering"]}),"\n"]}),"\n",(0,g.jsxs)(n.p,{children:["Need for log filtering in JUL bridge: filtering in JUL is made on higher level than ",(0,g.jsx)(n.code,{children:"jul-bridge"})," (on ",(0,g.jsx)(n.code,{children:"Logger"})," level and not ",(0,g.jsx)(n.code,{children:"Handler"})," level - which ",(0,g.jsx)(n.code,{children:"JULBridge"})," is). Due to that the whole\nfiltering in JUL is disabled and is implemented in JULBridge. This may cause degraded performance and much more logs when using other Handlers."]}),"\n",(0,g.jsx)("br",{}),"\n",(0,g.jsxs)(n.p,{children:["JUL logger name is stored in log annotation with key ",(0,g.jsx)(n.code,{children:"logger_name"})," (",(0,g.jsx)(n.code,{children:"zio.logging.loggerNameAnnotationKey"}),"), following log format"]}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:"import zio.logging.jul.bridge.JULBridge\nimport zio.logging.LoggerNameExtractor\n\nval loggerName = LoggerNameExtractor.loggerNameAnnotationOrTrace\nval loggerNameFormat = loggerName.toLogFormat()\n"})}),"\n",(0,g.jsx)(n.p,{children:"may be used to get logger name from log annotation or ZIO Trace."}),"\n",(0,g.jsx)(n.p,{children:"This logger name extractor is used by default in log filter, which applying log filtering by defined logger name and level:"}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:'val logFilterConfig = LogFilter.LogLevelByNameConfig(\n  LogLevel.Info,\n  "zio.logging.jul  " -> LogLevel.Debug,\n  "JUL-LOGGER"        -> LogLevel.Warning\n)\n\nval logFilter: LogFilter[String] = logFilterConfig.toFilter\n'})}),"\n",(0,g.jsx)("br",{}),"\n",(0,g.jsx)(n.p,{children:"JUL bridge with custom logger can be setup:"}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:"import zio.logging.jul.bridge.JULBridge\nimport zio.logging.consoleJsonLogger\n\nval logger = Runtime.removeDefaultLoggers >>> consoleJsonLogger() >+> JULBridge.init()\n"})}),"\n",(0,g.jsx)("br",{}),"\n",(0,g.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,g.jsxs)(n.p,{children:["You can find the source code ",(0,g.jsx)(n.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,g.jsx)(n.h3,{id:"jul-bridge-with-json-console-logger",children:"JUL bridge with JSON console logger"}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-scala",children:'package zio.logging.example\n\nimport zio.logging.jul.bridge.JULBridge\nimport zio.logging.{ConsoleLoggerConfig, LogAnnotation, LogFilter, LogFormat, LoggerNameExtractor, consoleJsonLogger}\nimport zio.{ExitCode, LogLevel, Runtime, Scope, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer}\n\nimport java.util.UUID\n\nobject JULBridgeExampleApp extends ZIOAppDefault {\n\n  private val julLogger = java.util.logging.Logger.getLogger("JUL-LOGGER")\n\n  private val logFilterConfig = LogFilter.LogLevelByNameConfig(\n    LogLevel.Info,\n    "zio.logging.slf4j" -> LogLevel.Debug,\n    "SLF4J-LOGGER"      -> LogLevel.Warning\n  )\n\n  private val logFormat = LogFormat.label(\n    "name",\n    LoggerNameExtractor.loggerNameAnnotationOrTrace.toLogFormat()\n  ) + LogFormat.logAnnotation(LogAnnotation.UserId) + LogFormat.logAnnotation(\n    LogAnnotation.TraceId\n  ) + LogFormat.default\n\n  private val loggerConfig = ConsoleLoggerConfig(logFormat, logFilterConfig)\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleJsonLogger(loggerConfig) >+> JULBridge.init(loggerConfig.toFilter)\n\n  private val uuids = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _ <- ZIO.logInfo("Start")\n      _ <- ZIO.foreachPar(uuids) { u =>\n        ZIO.succeed(julLogger.info("Test INFO!")) *> ZIO.succeed(\n          julLogger.warning("Test WARNING!")\n        ) @@ LogAnnotation.UserId(\n          u.toString\n        )\n      } @@ LogAnnotation.TraceId(UUID.randomUUID())\n      _ <- ZIO.logDebug("Done")\n    } yield ExitCode.success\n\n}\n'})}),"\n",(0,g.jsx)(n.p,{children:"Expected console output:"}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{children:'{"name":"zio.logging.example.JULbridgeExampleApp","timestamp":"2024-05-26T13:50:20.6832831+02:0","level":"INFO","thread":"zio-fiber-1143120685","message":"Start"}\n{"name":"JUL-LOGGER","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7112909+02:0","level":"INFO","thread":"zio-fiber-1683803358","message":"Test INFO!"}\n{"name":"JUL-LOGGER","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7112909+02:0","level":"INFO","thread":"zio-fiber-71852457","message":"Test INFO!"}\n{"name":"JUL-LOGGER","user_id":"85f762cc-e62c-4576-9f14-6a3ad0918d99","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7142882+02:0","level":"WARN","thread":"zio-fiber-1911711828","message":"Test WARNING!"}\n{"name":"JUL-LOGGER","user_id":"47850c02-bb60-4b6a-9c0f-0aa095066d10","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7142882+02:0","level":"WARN","thread":"zio-fiber-1801412106","message":"Test WARNING!"}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,g.jsx)(n,{...e,children:(0,g.jsx)(d,{...e})}):d(e)}}}]);