"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49683],{93763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"zio-cli/bash-and-zsh-completion","title":"Bash and Zsh Completion","description":"Overview","source":"@site/docs/zio-cli/bash-and-zsh-completion.md","sourceDirName":"zio-cli","slug":"/zio-cli/bash-and-zsh-completion","permalink":"/zio-cli/bash-and-zsh-completion","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/bash-and-zsh-completion.md","tags":[],"version":"current","frontMatter":{"id":"bash-and-zsh-completion","title":"Bash and Zsh Completion"},"sidebar":"ecosystem-sidebar","previous":{"title":"OAuth2","permalink":"/zio-cli/auth"},"next":{"title":"SBT Plugin","permalink":"/zio-cli/sbt-plugin"}}');var s=t(74848),o=t(28453);const l={id:"bash-and-zsh-completion",title:"Bash and Zsh Completion"},a=void 0,r={},c=[{value:"Overview",id:"overview",level:2},{value:"Generating a completion shell script",id:"generating-a-completion-shell-script",level:2},{value:"How Bash and Zsh Completions are Generated",id:"how-bash-and-zsh-completions-are-generated",level:2},{value:"Further Reading",id:"further-reading",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ZIO CLI"})," supports a mechanism for performing tab completion of command line\noptions and arguments in bash and zsh. The approach that ",(0,s.jsx)(n.strong,{children:"ZIO CLI"})," uses to\ncommunicate with the shell tooling for performing tab completion is heavily\ninspired by the excellent Haskell\n",(0,s.jsx)(n.a,{href:"https://github.com/pcapriotti/optparse-applicative#bash-zsh-and-fish-completions",children:"optparse-applicative"}),"\nlibrary. Every ",(0,s.jsx)(n.code,{children:"CliApp"})," is extended with a few hidden built-in options for\nproviding tab completions to shell environments."]}),"\n",(0,s.jsxs)(n.p,{children:["In what follows, pretend that your CLI application (called ",(0,s.jsx)(n.code,{children:"my-cli-app"}),") has been\ninstalled into a stable location in your path (such as the ",(0,s.jsx)(n.code,{children:"~/.local/bin"}),"\ndirectory favored by the ",(0,s.jsx)(n.strong,{children:"ZIO CLI"})," installer script)."]}),"\n",(0,s.jsx)(n.h2,{id:"generating-a-completion-shell-script",children:"Generating a completion shell script"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--shell-completion-script"})," and ",(0,s.jsx)(n.code,{children:"--shell-type"})," built-in options produce a\nshell script that enables tab completion. In the example below, we generate a\ncompletion script (called ",(0,s.jsx)(n.code,{children:"completion-script.sh"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"my-cli-app                                       \\\n    --shell-completion-script `which my-cli-app` \\\n    --shell-type bash > completion-script.sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"After generating the script, you can quickly enable tab completion via:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"source completion-script.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Unfortunately, the tab completion will only be enabled within the current shell\nsession. Normally, the output of ",(0,s.jsx)(n.code,{children:"--shell-completion-script"})," should be shipped\nwith the program and copied to the appropriate directory (e.g.,\n",(0,s.jsx)(n.code,{children:"/etc/bash_completion.d/"}),") during program installation."]}),"\n",(0,s.jsx)(n.h2,{id:"how-bash-and-zsh-completions-are-generated",children:"How Bash and Zsh Completions are Generated"}),"\n",(0,s.jsxs)(n.p,{children:["The shell completion scripts register an event handler that fires whenever\n",(0,s.jsx)(n.code,{children:"my-cli-app"})," is the first term at the terminal prompt and the tab key is\npressed. This event handler sends information about the terminal contents and\ncursor position back to ",(0,s.jsx)(n.code,{children:"my-cli-app"})," using another built-in option called\n",(0,s.jsx)(n.code,{children:"--shell-completion-index"})," and some special environment variables\n(",(0,s.jsx)(n.code,{children:"COMP_WORD_0"}),", ",(0,s.jsx)(n.code,{children:"COMP_WORD_1"}),", ...)."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"my-cli-app"})," receives these values, it runs a completion algorithm and\nprints the completion terms to the console (one line per completion term). The\nconsole output feeds back into the shell machinery, which renders the completion\nresults in the terminal."]}),"\n",(0,s.jsx)(n.p,{children:"For example, when the user types the following in the terminal"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ my-cli-app foo bar baz\n"})}),"\n",(0,s.jsxs)(n.p,{children:['and then moves the cursor over "foo" and hits the tab key, ',(0,s.jsx)(n.code,{children:"my-cli-app"})," is called\nas follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"COMP_WORD_0=my-cli-app     \\\nCOMP_WORD_1=foo            \\\nCOMP_WORD_2=bar            \\\nCOMP_WORD_3=baz            \\\nmy-cli-app                 \\\n--shell-completion-index 1 \\\n--shell-type bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COMP_WORD_"})," prefix of these environment variables is directly inspired by\nthe ",(0,s.jsx)(n.code,{children:"COMP_WORD"})," array-valued Bash variable that is part of its\n",(0,s.jsx)(n.a,{href:"https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html",children:"programmable completion system"}),".\nUnfortunately, array-valued variables cannot be used as environment variables,\nso our approach instead uses one variable per term in the array."]}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/pcapriotti/optparse-applicative#bash-zsh-and-fish-completions",children:"optparse-applicative documentation"}),"\nis an excellent resource that may help to clarify the implementation above."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);