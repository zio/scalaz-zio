"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2193],{19496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/error-management/operations/flattening-optional-error-types","title":"Flattening Optional Error Types","description":"If we have an optional error of type E in the error channel, we can flatten it to the E type using the ZIO#flattenErrorOption operator:","source":"@site/docs/reference/error-management/operations/flattening-optional-error-types.md","sourceDirName":"reference/error-management/operations","slug":"/reference/error-management/operations/flattening-optional-error-types","permalink":"/reference/error-management/operations/flattening-optional-error-types","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/flattening-optional-error-types.md","tags":[],"version":"current","frontMatter":{"id":"flattening-optional-error-types","title":"Flattening Optional Error Types"},"sidebar":"reference-sidebar","previous":{"title":"Error Refinement","permalink":"/reference/error-management/operations/error-refinement"},"next":{"title":"Merging the Error Channel into the Success Channel","permalink":"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel"}}');var o=t(74848),i=t(28453);const a={id:"flattening-optional-error-types",title:"Flattening Optional Error Types"},s=void 0,p={},c=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["If we have an optional error of type ",(0,o.jsx)(n.code,{children:"E"})," in the error channel, we can flatten it to the ",(0,o.jsx)(n.code,{children:"E"})," type using the ",(0,o.jsx)(n.code,{children:"ZIO#flattenErrorOption"})," operator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio._\n\ndef parseInt(input: String): ZIO[Any, Option[String], Int] =\n  if (input.isEmpty)\n    ZIO.fail(Some("empty input"))\n  else\n    try {\n      ZIO.succeed(input.toInt)\n    } catch {\n      case _: NumberFormatException => ZIO.fail(None)\n    }\n\ndef flattenedParseInt(input: String): ZIO[Any, String, Int] =\n  parseInt(input).flattenErrorOption("non-numeric input")\n\nval r1: ZIO[Any, String, Int] = flattenedParseInt("zero")\nval r2: ZIO[Any, String, Int] = flattenedParseInt("")\nval r3: ZIO[Any, String, Int] = flattenedParseInt("123")\n'})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);