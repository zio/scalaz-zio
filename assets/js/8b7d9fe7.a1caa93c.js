"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[56925],{18871:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"zio-dynamodb/reference/zio-dynamodb-json","title":"ZIO DynamoDB JSON Module","description":"zio-dynamodb-json is a new experimental optional module designed for debugging and troubleshooting purposes.","source":"@site/docs/zio-dynamodb/reference/zio-dynamodb-json.md","sourceDirName":"zio-dynamodb/reference","slug":"/zio-dynamodb/reference/zio-dynamodb-json","permalink":"/zio-dynamodb/reference/zio-dynamodb-json","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/reference/zio-dynamodb-json.md","tags":[],"version":"current","frontMatter":{"id":"zio-dynamodb-json","title":"ZIO DynamoDB JSON Module"},"sidebar":"ecosystem-sidebar","previous":{"title":"Auto batching and parallelisation","permalink":"/zio-dynamodb/reference/auto-batching-and-parallelisation"},"next":{"title":"ZIO FTP","permalink":"/zio-ftp/"}}');var t=s(74848),i=s(28453);const r={id:"zio-dynamodb-json",title:"ZIO DynamoDB JSON Module"},a=void 0,d={},l=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"Visualizing the DB representation of a case class during model development",id:"visualizing-the-db-representation-of-a-case-class-during-model-development",level:2},{value:"Grabbing JSON from the AWS console and decoding it to a case class",id:"grabbing-json-from-the-aws-console-and-decoding-it-to-a-case-class",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"zio-dynamodb-json"})})," is a new experimental optional module designed for debugging and troubleshooting purposes.\nIt renders a representation of the native DynamoDB types and data in a standard JSON format used in AWS console views"]}),"\n",(0,t.jsx)(n.p,{children:"It uses the same codecs as the regular library and provides an accurate representation of how the data that would be stored in DynamoDB.\nIt works at the level of the AttributeValue type and so works with both the low level and high level APIs.\nNote ATM it does not support the Binary and Binary Set types."}),"\n",(0,t.jsx)(n.p,{children:"Internally the module uses ZIO JSON and in particular it uses the AST which is not used by ZIO Json itself for efficiency reasons,\nhence the recommendations is not to use the module in production code."}),"\n",(0,t.jsx)(n.p,{children:"Some example use cases include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"visualizing the Attribute Value representation of a case class during model development"}),"\n",(0,t.jsx)(n.li,{children:"can be used in unit tests to verify that DB mapping is as expected"}),"\n",(0,t.jsx)(n.li,{children:"production troubleshooting - grabbing DDB JSON from the AWS console in production and decoding it to a case class for debugging"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["In your ",(0,t.jsx)(n.code,{children:"build.sbt"})," file add the following line:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-dynamodb-json" % "1.0.0-RC18"\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Add the following import to your code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import zio.dynamodb.json._\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"toJsonString"})})," // extension method"]}),(0,t.jsx)(n.td,{children:"Converts a case class to a JSON string"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"toJsonStringPretty"})})," // extension method"]}),(0,t.jsx)(n.td,{children:"Converts a case class to a pretty printed JSON string"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"def parse[A: Schema](jsonString: String): Either[DynamoDBError.ItemError, A]"})})}),(0,t.jsxs)(n.td,{children:["takes a JSON string and returns an Either of an error or an ",(0,t.jsx)(n.code,{children:"A"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"def parseItem(json: String): Either[DynamoDBError.ItemError, AttrMap]"})})}),(0,t.jsxs)(n.td,{children:["takes a JSON string and returns an Either of an error or an ",(0,t.jsx)(n.code,{children:"Item"})]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"visualizing-the-db-representation-of-a-case-class-during-model-development",children:"Visualizing the DB representation of a case class during model development"}),"\n",(0,t.jsxs)(n.p,{children:["This can be accomplished by using either the ",(0,t.jsx)(n.code,{children:"toJsonString"})," or ",(0,t.jsx)(n.code,{children:"toJsonStringPretty"})," extension methods on a case class instance - eg:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'final case class Person(\n  email: String,\n  hobbies: Map[String, List[String]],\n  friends: Set[String],\n  registrationDate: Instant\n)\nobject Person {\n  implicit val schema: Schema.CaseClass4[String, Map[String, List[String]], Set[String], Instant, Person] =\n    DeriveSchema.gen[Person]\n}\nval person = Person("email", Map("sports" -> List("cricket", "football")), Set("John", "Tarlochan"), Instant.now)\nprintln(person.toJsonStringPretty[Person])\n'})}),"\n",(0,t.jsx)(n.p,{children:"Console output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "registrationDate" : {\n    "S" : "2024-12-05T06:44:49.011916Z"\n  },\n  "friends" : {\n    "SS" : [\n      "John",\n      "Tarlochan"\n    ]\n  },\n  "hobbies" : {\n    "sports" : {\n      "L" : [\n        {\n          "S" : "cricket"\n        },\n        {\n          "S" : "football"\n        }\n      ]\n    }\n  },\n  "email" : {\n    "S" : "email"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For a basic introduction to data modelling ",(0,t.jsx)(n.a,{href:"reference/hi-level-api/creating-models/index.md",children:"Creating Models"})," section."]}),"\n",(0,t.jsxs)(n.p,{children:["For details on how to customise data mappings please see the ",(0,t.jsx)(n.a,{href:"guides/codec-customization.md",children:"Codec Customisation"})," section."]}),"\n",(0,t.jsx)(n.h2,{id:"grabbing-json-from-the-aws-console-and-decoding-it-to-a-case-class",children:"Grabbing JSON from the AWS console and decoding it to a case class"}),"\n",(0,t.jsx)(n.p,{children:"This can be useful in a production troubleshooting scenario where you have a JSON representation of a DynamoDB item\nfrom the AWS console, and you want to decode it to a case class for local testing/debugging purposes."}),"\n",(0,t.jsx)(n.p,{children:"eg:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val json             =\n    """{\n        "registrationDate" : {\n          "S" : "2024-12-05T06:44:49.011916Z"\n        },\n        "friends" : {\n          "SS" : [\n          "John",\n          "Tarlochan"\n          ]\n        },\n        "hobbies" : {\n          "sports" : {\n          "L" : [\n        {\n          "S" : "cricket"\n        },\n        {\n          "S" : "football"\n        }\n          ]\n        }\n        },\n        "email" : {\n          "S" : "email"\n        }\n      }"""\n  val errorOrPerson = parse[Person](json) // ZIO DynamoDB Json parse method used here\n  println(\n    errorOrPerson\n  ) // Right(Person("email", Map("sports" -> List("cricket", "football")), Set("John", "Tarlochan"), 2024-12-05T06:44:49.011916Z))\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(96540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);