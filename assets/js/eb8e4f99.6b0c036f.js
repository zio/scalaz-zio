"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[53643],{25837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"zio-flow/testing","title":"Testing","description":"ZIO Flow has some tools and practices helping the testing flows, remotes, and backend implementations.","source":"@site/docs/zio-flow/testing.md","sourceDirName":"zio-flow","slug":"/zio-flow/testing","permalink":"/zio-flow/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-flow/testing.md","tags":[],"version":"current","frontMatter":{"id":"testing","title":"Testing"},"sidebar":"ecosystem-sidebar","previous":{"title":"Backends","permalink":"/zio-flow/backends"},"next":{"title":"Examples","permalink":"/zio-flow/examples"}}');var o=t(74848),s=t(28453);const a={id:"testing",title:"Testing"},r="Testing",c={},l=[{value:"Testing remotes",id:"testing-remotes",level:2},{value:"Testing flows",id:"testing-flows",level:2},{value:"Mocking operations",id:"mocking-operations",level:3},{value:"Matching a specific HTTP operation",id:"matching-a-specific-http-operation",level:4},{value:"Testing serialization",id:"testing-serialization",level:2},{value:"Testing backends",id:"testing-backends",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"testing",children:"Testing"})}),"\n",(0,o.jsx)(n.p,{children:"ZIO Flow has some tools and practices helping the testing flows, remotes, and backend implementations."}),"\n",(0,o.jsx)(n.h2,{id:"testing-remotes",children:"Testing remotes"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"remote#debugging",children:"debugging section on the Remote page"})," shows how you can annotate your remote functions with debug\nlogs, which is useful for understanding how a more complex remote function works."]}),"\n",(0,o.jsxs)(n.p,{children:["But what about ",(0,o.jsx)(n.em,{children:"evaluating"})," a remote expression in a standalone ZIO test case?"]}),"\n",(0,o.jsxs)(n.p,{children:["First make sure the ",(0,o.jsx)(n.code,{children:"zio-flow-runtime"})," library is added as a dependency, as we no longer just ",(0,o.jsx)(n.em,{children:"define"})," remotes but want\nto evaluate them as well:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-flow-runtime" % "1.0.0-RC4"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then we can write a ZIO test suite that uses a ",(0,o.jsx)(n.code,{children:"Remote"}),"s ",(0,o.jsx)(n.code,{children:".eval[T]"})," or ",(0,o.jsx)(n.code,{children:".evalDynamic"})," method to evaluate the remote."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.{durationInt, ZLayer}\nimport zio.test._\nimport zio.flow._\nimport zio.flow.runtime._\nimport zio.flow.runtime.internal._\n\nobject RemoteSpec extends ZIOSpecDefault {\n  override def spec =\n    suite("Remote test example")(\n      test("A remote number evaluates to the expected value") {         \n        for {\n            result <- Remote(1234).eval[Int]\n        } yield assertTrue(result == 1234)                 \n      }\n    ).provide(ZLayer(InMemoryRemoteContext.make), LocalContext.inMemory)\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For evaluating a remote we need a ",(0,o.jsx)(n.code,{children:"RemoteContext"})," and a ",(0,o.jsx)(n.code,{children:"LocalContext"})," provided. Normally these are provided by the\npersistent executor, but for our tests we can use the above demonstrated two layers."]}),"\n",(0,o.jsx)(n.h2,{id:"testing-flows",children:"Testing flows"}),"\n",(0,o.jsxs)(n.p,{children:["For executing ",(0,o.jsx)(n.code,{children:"ZFlow"})," programs in test suites we need to initialize a real ",(0,o.jsx)(n.code,{children:"PersistentExecutor"})," as described on\nthe ",(0,o.jsx)(n.a,{href:"execution",children:"execution page"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The recommended dependencies to provide to it are the in-memory implementations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.flow.runtime._\n\nIndexedStore.inMemory\nDurableLog.layer\nKeyValueStore.inMemory\nConfiguration.inMemory\n"})}),"\n",(0,o.jsx)(n.h3,{id:"mocking-operations",children:"Mocking operations"}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow provides a special ",(0,o.jsx)(n.code,{children:"OperationExecutor"})," implementation to be used in tests, called ",(0,o.jsx)(n.code,{children:"MockedOperationExecutor"}),".\nThis implementation is defined in the ",(0,o.jsx)(n.code,{children:"zio-flow-test"})," module:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-flow-test" % "1.0.0-RC4"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A separate ",(0,o.jsx)(n.em,{children:"mocked operation executor"})," has to be created for each test case using the ",(0,o.jsx)(n.code,{children:"MockedOperationExecutor.make"}),"\nfunction. This takes a ",(0,o.jsx)(n.code,{children:"MockedOperation"})," as an input, which describes all the expected ",(0,o.jsx)(n.em,{children:"operations"})," the ZIO Flow program\nwill make. The created ",(0,o.jsx)(n.code,{children:"OperationExecutor"})," can be provided to the ",(0,o.jsx)(n.code,{children:"PersistentExecutor"})," then before running the tested\nflow."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"MockedOperation"})," lives in the ",(0,o.jsx)(n.code,{children:"zio.flow.mock"})," package and supports the following cases."]}),"\n",(0,o.jsx)(n.h4,{id:"matching-a-specific-http-operation",children:"Matching a specific HTTP operation"}),"\n",(0,o.jsx)(n.p,{children:"Take the following example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.flow.mock._\nimport zio.test.Assertion._\n\nval mock1 = MockedOperation.Http(\n  urlMatcher = equalTo("http://activity1"),\n  methodMatcher = equalTo("GET"),\n  inputMatcher = equalTo(1),\n  result = () => 100,\n  duration = 2.seconds\n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A mocked operation is matched by a couple of ZIO Test assertions (",(0,o.jsx)(n.code,{children:"equalTo"})," in this case). If it matches the operation\nperformed by an activity, it will return the provided result, and it will ",(0,o.jsx)(n.em,{children:"sleep"})," for given duration to simulate the\nexecution time of a remote operation."]}),"\n",(0,o.jsxs)(n.p,{children:["There are ",(0,o.jsx)(n.em,{children:"combinators"})," defined on ",(0,o.jsx)(n.code,{children:"MockedOperation"})," that allows defining more than one possible operations to be\nmatched."]}),"\n",(0,o.jsxs)(n.p,{children:["If you expect an operation to be called more than once, this can be specified by using the ",(0,o.jsx)(n.code,{children:".repeated"})," modifier:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val mock2 = mock1.repeated(atMost = 10)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If two different mocked operations can be expected and you don't know their order in advance, use the ",(0,o.jsx)(n.code,{children:"orElse"})," or ",(0,o.jsx)(n.code,{children:"|"}),"\ncombinator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val mock3 = MockedOperation.Http(\n  urlMatcher = equalTo("http://activity2"),\n  methodMatcher = equalTo("GET"),\n  inputMatcher = anything,\n  result = () => 0,\n  duration = 1.seconds\n)\n\nval mock4 = mock2 | mock3\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And finally you may want to define that you expect one particular operation to be called ",(0,o.jsx)(n.em,{children:"after"})," another one. For this\nyou can use the ",(0,o.jsx)(n.code,{children:"andThen"})," or ",(0,o.jsx)(n.code,{children:"++"})," combinators:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val mock5 = mock1 ++ mock3\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing-serialization",children:"Testing serialization"}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsxs)(n.a,{href:"/zio-flow/activities#write-your-own",children:["creating ",(0,o.jsx)(n.em,{children:"activity libraries"})]})," we may want to ensure that the data models used in\nthe activities can be serialized to JSON and read back to get the same value, or similarly that they can be encoded in\nform-url payload and get the expected encoded string."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"zio-flow-test"})," module provides two helper assertions to implement these tests. Add the following dependency to use\nthem:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-flow-test" % "1.0.0-RC4"\n'})}),"\n",(0,o.jsx)(n.p,{children:"and then import the assertions for your tests:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import zio.flow.test.{assertFormUrlEncoded, assertJsonSerializable}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing-backends",children:"Testing backends"}),"\n",(0,o.jsxs)(n.p,{children:["There are reusable tests for ",(0,o.jsx)(n.em,{children:"key-value store"})," and ",(0,o.jsx)(n.em,{children:"indexed store"})," implementations. To use them, add the following\ndependency:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-flow-runtime-test" % "1.0.0-RC4"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"KeyValueStoreTests"})," class to create a ZIO Test suite for your implementation. For example the built-in\nDynamoDb implementation's test is defined like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'override def spec: Spec[TestEnvironment, Any] =\n  KeyValueStoreTests[DynamoDb](\n    "DynamoDbKeyValueStoreSpec",\n    initializeDb = createKeyValueStoreTable(tableName)\n  ).tests.provideSomeLayerShared[TestEnvironment](dynamoDbKeyValueStore)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["and for testing the ",(0,o.jsx)(n.em,{children:"indexed store"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'override def spec: Spec[TestEnvironment with Scope, Any] =\n  IndexedStoreTests[DynamoDb](\n    "DynamoDbIndexedStore",\n    initializeDb = createIndexedStoreTable(DynamoDbIndexedStore.tableName)\n  ).tests.provideSomeLayerShared[TestEnvironment](dynamoDbIndexedStore)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In case you don't need any initialization effect for your database, just pass ",(0,o.jsx)(n.code,{children:"ZIO.unit"})," to the ",(0,o.jsx)(n.code,{children:"initializeDb"}),"\nparameter."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);