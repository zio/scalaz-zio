"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[85039],{54805:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>a,frontMatter:()=>l,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"zio-aws/http","title":"HTTP","description":"By default the AWS Java SDK uses netty under the hood to make the HTTP client calls. zio-aws defines the http client","source":"@site/docs/zio-aws/http.md","sourceDirName":"zio-aws","slug":"/zio-aws/http","permalink":"/zio-aws/http","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-aws/http.md","tags":[],"version":"current","frontMatter":{"id":"http","title":"HTTP"},"sidebar":"ecosystem-sidebar","previous":{"title":"Configuration","permalink":"/zio-aws/configuration"},"next":{"title":"Aspects","permalink":"/zio-aws/aspects"}}');var s=i(74848),d=i(28453);const l={id:"http",title:"HTTP"},r="HTTP implementations",o={},h=[{value:"Netty",id:"netty",level:2},{value:"Configuration Details",id:"configuration-details",level:2},{value:"Field Descriptions",id:"field-descriptions",level:3},{value:"channelOptions",id:"channeloptions",level:3},{value:"proxy",id:"proxy",level:3},{value:"http2",id:"http2",level:3},{value:"Akka HTTP",id:"akka-http",level:2},{value:"http4s",id:"http4s",level:2},{value:"Configuration Details",id:"configuration-details-1",level:2},{value:"Field Descriptions",id:"field-descriptions-1",level:3},{value:"channelOptions",id:"channeloptions-1",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"http-implementations",children:"HTTP implementations"})}),"\n",(0,s.jsxs)(t.p,{children:["By default the AWS Java SDK uses ",(0,s.jsx)(t.em,{children:"netty"})," under the hood to make the HTTP client calls. ",(0,s.jsx)(t.code,{children:"zio-aws"})," defines the http client\nas a ",(0,s.jsx)(t.em,{children:"layer"})," (",(0,s.jsx)(t.code,{children:"HttpClient"}),") that has to be provided to the ",(0,s.jsx)(t.em,{children:"AWS configuration layer"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Currently the following implementations can be used:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"zio-aws-netty"})," contains the default netty implementation packed as a layer"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"zio-aws-akka-http"})," is based on Matthias L\xfcneberg's ",(0,s.jsx)(t.a,{href:"https://github.com/matsluni/aws-spi-akka-http",children:"aws-spi-akka-http library"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"zio-aws-http4s"})," is an implementation on top of ",(0,s.jsx)(t.em,{children:"http4s"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"netty",children:"Netty"}),"\n",(0,s.jsxs)(t.p,{children:["The default HTTP implementation in the AWS Java SDK is ",(0,s.jsx)(t.em,{children:"Netty"}),". To use it with the default settings, use the ",(0,s.jsx)(t.code,{children:"netty.default"}),"\nlayer to provide the ",(0,s.jsx)(t.code,{children:"HttpClient"})," for the ",(0,s.jsx)(t.code,{children:"AwsConfig"})," layer. It is also possible to customize the ",(0,s.jsx)(t.code,{children:"NettyNioAsyncHttpClient"}),"\ndirectly by manipulation it's ",(0,s.jsx)(t.code,{children:"Builder"}),", by using the ",(0,s.jsx)(t.code,{children:"netty.customized(customization)"})," layer."]}),"\n",(0,s.jsx)(t.p,{children:"The recommended way for configuration is to use the zio-config support:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"def configured(\n      tlsKeyManagersProvider: Option[TlsKeyManagersProvider] = None,\n      tlsTrustManagersProvider: Option[TlsTrustManagersProvider] = None\n  ): ZLayer[ZConfig[NettyClientConfig], Throwable, HttpClient]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Everything except the TLS key and trust managers are described by the zio-config provided ",(0,s.jsx)(t.code,{children:"NettyClientConfig"})," data structure.\nSee the following table for all the options:"]}),"\n",(0,s.jsx)(t.h2,{id:"configuration-details",children:"Configuration Details"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"fielddescriptions",children:"all-of"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]})})]}),"\n",(0,s.jsx)(t.h3,{id:"field-descriptions",children:"Field Descriptions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxConcurrency"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 50, Maximum number of allowed concurrent requests"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxPendingConnectionAcquires"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 10000, The maximum number of pending acquires allowed"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"readTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT30S, The amount of time to wait for a read on a socket"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"writeTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT30S, The amount of time to wait for a write on a socket"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"connectionTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT2S, The amount of time to wait when initially establishing a connection before giving up"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"connectionAcquisitionTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT10S, The amount of time to wait when acquiring a connection from the pool before giving up"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"connectionTimeToLive"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT0S, The maximum amount of time that a connection should be allowed to remain open, regardless of usage frequency"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"connectionMaxIdleTime"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT5S, Maximum amount of time that a connection should be allowed to remain open while idle"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"useIdleConnectionReaper"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, default value: true, If true, the idle connections in the pool should be closed"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"protocol"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, default value: Dual, HTTP/1.1 or HTTP/2 or Dual"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"channeloptions",children:"channelOptions"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"channeloptions",children:"all-of"})}),(0,s.jsx)(t.td,{children:"default value: NettyChannelOptions(Vector()), Custom Netty channel options"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"sslProvider"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, optional value, The SSL provider to be used"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"proxy",children:"proxy"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"proxy",children:"all-of"})}),(0,s.jsx)(t.td,{children:"optional value, Proxy configuration"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"http2",children:"http2"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"http2",children:"all-of"})}),(0,s.jsx)(t.td,{children:"optional value, HTTP/2 specific options"}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"channeloptions",children:"channelOptions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_BROADCAST"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Allow transmission of broadcast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_KEEPALIVE"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Keep connection alive"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_SNDBUF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The size of the socket send buffer"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_RCVBUF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The size of the socket receive buffer"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_REUSEADDR"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Re-use address"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_LINGER"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, Linger on close if data is present"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_TOS"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The ToS octet in the IP header"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_IF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, optional value, The network interface's name for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_TTL"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The time-to-live for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_LOOP"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Loopback for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"TCP_NODELAY"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Disable the Nagle algorithm"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CONNECT_TIMEOUT_MILLIS"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, optional value, Connect timeout"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"WRITE_SPIN_COUNT"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, Write spin count"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ALLOW_HALF_CLOSURE"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Allow half closure"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"AUTO_READ"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Auto read"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"AUTO_CLOSE"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Auto close"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SINGLE_EVENTEXECUTOR_PER_GROUP"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Single event executor per group"}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"proxy",children:"proxy"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"scheme"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, default value: Http, The proxy scheme"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"host"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, Hostname of the proxy"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"port"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, Port of the proxy"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"nonProxyHosts"}),(0,s.jsx)(t.td,{children:"list"}),(0,s.jsx)(t.td,{children:"value of type string, default value: Set(), Hosts that should not be proxied"}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"http2",children:"http2"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxStreams"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type long, Max number of concurrent streams per connection"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"initialWindowSize"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, Initial window size of a stream"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"healthCheckPingPeriod"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: PT5S, The period that the Netty client will send PING frames to the remote endpoint"}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"akka-http",children:"Akka HTTP"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"Akka HTTP implementation"})," can be chosen by using the ",(0,s.jsx)(t.code,{children:"akkahttp.client()"})," layer for providing ",(0,s.jsx)(t.code,{children:"HttpClient"})," to ",(0,s.jsx)(t.code,{children:"AwsConfig"}),".\nThis implementation uses the ",(0,s.jsx)(t.a,{href:"https://doc.akka.io/docs/akka-http/current/configuration.html",children:"standard akka-http settings"})," from the application's ",(0,s.jsx)(t.em,{children:"Lightbend config"}),",\nit is not described with zio-config descriptors."]}),"\n",(0,s.jsx)(t.h2,{id:"http4s",children:"http4s"}),"\n",(0,s.jsxs)(t.p,{children:["Another alternative is the ",(0,s.jsx)(t.em,{children:"http4s client"}),". To use the default settings, provide the ",(0,s.jsx)(t.code,{children:"http4s.default"})," layer to ",(0,s.jsx)(t.code,{children:"AwsConfig"}),". Customization by manipulating the builder\nis also possible by ",(0,s.jsx)(t.code,{children:"http4s.customized(customization)"}),". And similarly to the ",(0,s.jsx)(t.em,{children:"Netty"})," client, configuration is also possible via zio-config:"]}),"\n",(0,s.jsx)(t.h2,{id:"configuration-details-1",children:"Configuration Details"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"fielddescriptions",children:"all-of"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]})})]}),"\n",(0,s.jsx)(t.h3,{id:"field-descriptions-1",children:"Field Descriptions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"responseHeaderTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: Duration.Inf, Timeout for receiving the header part of the response"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"idleTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: 1 minute, Timeout for client connection staying idle"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"requestTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: 45 seconds, Timeout for the whole request"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"connectTimeout"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type duration, default value: 10 seconds, Timeout for connecting to the server"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"userAgent"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, default value: User-Agent(http4s-blaze/3.0.2,List()), User-Agent header sent by the client"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxTotalConnections"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 10, Maximum number of parallel connections"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxWaitQueueLimit"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 256, Maximum number of requests in queue"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"checkEndpointIdentification"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, default value: true, Check https identity"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxResponseLineSize"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 4096, Maximum line length of headers in response"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxHeaderLength"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 40960, Maximum total length of the response headers"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"maxChunkSize"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 2147483647, Maximum chunk size"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"chunkBufferMaxSize"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 1048576, Maximum size of the chunk buffer"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"parserMode"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, default value: Strict, Parser mode, strict or lenient"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"bufferSize"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, default value: 8192, Buffer size"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"channeloptions",children:"channelOptions"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"channeloptions",children:"all-of"})}),(0,s.jsx)(t.td,{children:"default value: ChannelOptions(Vector(OptionValue(TCP_NODELAY,true))), Collection of socket options"}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"channeloptions-1",children:"channelOptions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"FieldName"}),(0,s.jsx)(t.th,{children:"Format"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Sources"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_BROADCAST"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Allow transmission of broadcast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_KEEPALIVE"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Keep connection alive"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_SNDBUF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The size of the socket send buffer"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_RCVBUF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The size of the socket receive buffer"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_REUSEADDR"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Re-use address"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SO_LINGER"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, Linger on close if data is present"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_TOS"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The ToS octet in the IP header"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_IF"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type string, optional value, The network interface's name for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_TTL"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type int, optional value, The time-to-live for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"IP_MULTICAST_LOOP"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Loopback for IP multicast datagrams"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"TCP_NODELAY"}),(0,s.jsx)(t.td,{children:"primitive"}),(0,s.jsx)(t.td,{children:"value of type boolean, optional value, Disable the Nagle algorithm"}),(0,s.jsx)(t.td,{})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>r});var n=i(96540);const s={},d=n.createContext(s);function l(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);