"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[45564],{436:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"reference/test/spec","title":"Spec","description":"Constructors","source":"@site/docs/reference/test/spec.md","sourceDirName":"reference/test","slug":"/reference/test/spec","permalink":"/reference/test/spec","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/spec.md","tags":[],"version":"current","frontMatter":{"id":"spec","title":"Spec"},"sidebar":"reference-sidebar","previous":{"title":"Sharing Layers Between Multiple Files","permalink":"/reference/test/sharing-layers-between-multiple-files"},"next":{"title":"Introduction","permalink":"/reference/test/services/"}}');var i=t(74848),r=t(28453);const o={id:"spec",title:"Spec"},c=void 0,a={},l=[{value:"Constructors",id:"constructors",level:2},{value:"Dependencies on Other Services",id:"dependencies-on-other-services",level:2},{value:"Using Standard Test Services",id:"using-standard-test-services",level:2},{value:"Providing Layers",id:"providing-layers",level:2},{value:"Sharing Layers Between Multiple Specs",id:"sharing-layers-between-multiple-specs",level:2},{value:"Operations",id:"operations",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(s.h2,{id:"dependencies-on-other-services",children:"Dependencies on Other Services"}),"\n",(0,i.jsxs)(s.p,{children:["Just like the ",(0,i.jsx)(s.code,{children:"ZIO"})," data type, the ",(0,i.jsx)(s.code,{children:"Spec"})," requires an environment of type ",(0,i.jsx)(s.code,{children:"R"}),". When we write tests, we might need to access a service through the environment. It can be a combination of the standard services such a ",(0,i.jsx)(s.code,{children:"Clock"}),", ",(0,i.jsx)(s.code,{children:"Console"}),", ",(0,i.jsx)(s.code,{children:"Random"})," and ",(0,i.jsx)(s.code,{children:"System"})," or test services like ",(0,i.jsx)(s.code,{children:"TestClock"}),", ",(0,i.jsx)(s.code,{children:"TestConsole"}),", ",(0,i.jsx)(s.code,{children:"TestRandom"}),", and ",(0,i.jsx)(s.code,{children:"TestSystem"}),", or any user-defined services."]}),"\n",(0,i.jsx)(s.h2,{id:"using-standard-test-services",children:"Using Standard Test Services"}),"\n",(0,i.jsxs)(s.p,{children:["All standard test services are located at the ",(0,i.jsx)(s.code,{children:"zio.test"})," package. They are test implementation of standard ZIO services. The use of these test services enables us to test functionality that depends on printing to or reading from a console, randomness, timings, and, also the system properties."]}),"\n",(0,i.jsxs)(s.p,{children:["Let's see how we can test the ",(0,i.jsx)(s.code,{children:"sayHello"})," function, which uses the ",(0,i.jsx)(s.code,{children:"Console"})," service:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\nimport zio.test.Assertion._\n\nimport java.io.IOException\n\ndef sayHello: ZIO[Any, IOException, Unit] =\n  Console.printLine("Hello, World!")\n\nsuite("HelloWorldSpec")(\n  test("sayHello correctly displays output") {\n    for {\n      _      <- sayHello\n      output <- TestConsole.output\n    } yield assertTrue(output == Vector("Hello, World!\\n"))\n  }\n)\n'})}),"\n",(0,i.jsxs)(s.p,{children:["There is a separate section in the documentation pages that covers ",(0,i.jsx)(s.a,{href:"/reference/test/services/",children:"all built-in test services"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"providing-layers",children:"Providing Layers"}),"\n",(0,i.jsxs)(s.p,{children:["By using ",(0,i.jsx)(s.code,{children:"Spec#provideXYZLayer"}),", a test or suite of tests can be provided with any dependencies in a similar way to how a ZIO data type can."]}),"\n",(0,i.jsx)(s.h2,{id:"sharing-layers-between-multiple-specs",children:"Sharing Layers Between Multiple Specs"}),"\n",(0,i.jsx)(s.p,{children:"ZIO Test has the ability to share layers between multiple specs. This is useful when we want to have some common services available for all tests. We have two ways to do this:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Using ",(0,i.jsx)(s.code,{children:"Spec#provideXYZShared"})," methods, which is useful to share layers between multiple specs that are residing in the same file."]}),"\n",(0,i.jsxs)(s.li,{children:["Using the ",(0,i.jsx)(s.code,{children:"bootstrap"})," layer, which is useful to share layers between multiple specs that are residing in different files."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"operations",children:"Operations"}),"\n",(0,i.jsxs)(s.p,{children:["In ZIO Test, specs are just values like other data types in ZIO. So we can filter, map or manipulate these data types. In this section, we are going to learn some of the most important operations on the ",(0,i.jsx)(s.code,{children:"Spec"})," data type:"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>c});var n=t(96540);const i={},r=n.createContext(i);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);