"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83388],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(96540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},30213:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/services/console","title":"Console","description":"Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.","source":"@site/versioned_docs/version-1.0.18/reference/services/console.md","sourceDirName":"reference/services","slug":"/reference/services/console","permalink":"/1.0.18/reference/services/console","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/services/console.md","tags":[],"version":"1.0.18","frontMatter":{"id":"console","title":"Console"},"sidebar":"overview_sidebar","previous":{"title":"Introduction","permalink":"/1.0.18/reference/services/"},"next":{"title":"Clock","permalink":"/1.0.18/reference/services/clock"}}');var o=r(74848),s=r(28453);const i={id:"console",title:"Console"},c=void 0,d={},l=[];function a(e){const n={code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console."}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Function"}),(0,o.jsx)(n.th,{children:"Input Type"}),(0,o.jsx)(n.th,{children:"Output Type"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"putStr"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"line: => String"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"URIO[Console, Unit]"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"putStrErr"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"line: => String"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"URIO[Console, Unit]"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"putStrLn"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"line: => String"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"URIO[Console, Unit]"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"putStrLnErr"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"line: => String"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"URIO[Console, Unit]"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"getStrLn"})}),(0,o.jsx)(n.td,{}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ZIO[Console, IOException, String]"})})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"All functions of console service are effectful, this means they are just descriptions of reading/writing from/to the console."}),"\n",(0,o.jsx)(n.p,{children:"As ZIO data type support monadic operations, we can compose these functions with for-comprehension which helps us to write our program pretty much like an imperative program:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import java.io.IOException\n\nimport zio.ZIO\nimport zio.console._\n\nobject MyHelloApp extends zio.App {\n  val program: ZIO[Console, IOException, Unit] = for {\n    _ <- putStrLn("Hello, what is you name?")\n    name <- getStrLn\n    _ <- putStrLn(s"Hello $name, welcome to ZIO!")\n  } yield ()\n\n  override def run(args: List[String]) = program.exitCode\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note again, every line of our ",(0,o.jsx)(n.code,{children:"program"})," are descriptions, not statements. As we can see the type of our ",(0,o.jsx)(n.code,{children:"program"})," is ",(0,o.jsx)(n.code,{children:"ZIO[Console, IOException, Unit]"}),", it means to run ",(0,o.jsx)(n.code,{children:"program"})," we need the ",(0,o.jsx)(n.code,{children:"Console"})," service as an environment, it may fail due to failure of ",(0,o.jsx)(n.code,{children:"getStrLn"})," and it will produce ",(0,o.jsx)(n.code,{children:"Unit"})," value."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);