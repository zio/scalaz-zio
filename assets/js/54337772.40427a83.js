"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[52783],{53319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"reference/services/clock","title":"Clock","description":"Clock service contains some functionality related to time and scheduling.","source":"@site/versioned_docs/version-1.0.18/reference/services/clock.md","sourceDirName":"reference/services","slug":"/reference/services/clock","permalink":"/1.0.18/reference/services/clock","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/services/clock.md","tags":[],"version":"1.0.18","frontMatter":{"id":"clock","title":"Clock"},"sidebar":"overview_sidebar","previous":{"title":"Console","permalink":"/1.0.18/reference/services/console"},"next":{"title":"Random","permalink":"/1.0.18/reference/services/random"}}');var r=t(74848),i=t(28453);const s={id:"clock",title:"Clock"},o=void 0,l={},a=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Clock service contains some functionality related to time and scheduling."}),"\n",(0,r.jsxs)(n.p,{children:["To get the current time in a specific time unit, the ",(0,r.jsx)(n.code,{children:"currentTime"})," function takes a unit as ",(0,r.jsx)(n.code,{children:"TimeUnit"})," and returns ",(0,r.jsx)(n.code,{children:"UIO[Long]"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"val inMiliseconds: URIO[Clock, Long] = currentTime(TimeUnit.MILLISECONDS)\nval inDays: URIO[Clock, Long] = currentTime(TimeUnit.DAYS)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To get current data time in the current timezone the ",(0,r.jsx)(n.code,{children:"currentDateTime"})," function returns a ZIO effect containing ",(0,r.jsx)(n.code,{children:"OffsetDateTime"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Also, the Clock service has a very useful functionality for sleeping and creating a delay between jobs. The ",(0,r.jsx)(n.code,{children:"sleep"})," takes a ",(0,r.jsx)(n.code,{children:"Duration"})," and sleep for the specified duration. It is analogous to ",(0,r.jsx)(n.code,{children:"java.lang.Thread.sleep"})," function, but it doesn't block any underlying thread. It's completely non-blocking."]}),"\n",(0,r.jsxs)(n.p,{children:["In following example we are going to print the current time periodically by placing a one second",(0,r.jsx)(n.code,{children:"sleep"})," between each print call:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"def printTimeForever: ZIO[Console with Clock, Throwable, Nothing] =\n  currentDateTime.flatMap(time => putStrLn(time.toString)) *>\n    sleep(1.seconds) *> printTimeForever\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For scheduling purposes like retry and repeats, ZIO has a great data type called ",(0,r.jsx)(n.a,{href:"/1.0.18/reference/misc/schedule",children:"Schedule"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var c=t(96540);const r={},i=c.createContext(r);function s(e){const n=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),c.createElement(i.Provider,{value:n},e.children)}}}]);