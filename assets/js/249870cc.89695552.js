"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[84817],{59677:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"zio-prelude/resources","title":"ZIO Prelude Resources","description":"- Refactoring Functional Type Classes - slides by John De Goes and Adam Fraser,","source":"@site/docs/zio-prelude/resources.md","sourceDirName":"zio-prelude","slug":"/zio-prelude/resources","permalink":"/zio-prelude/resources","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-prelude/resources.md","tags":[],"version":"current","frontMatter":{"id":"resources","title":"ZIO Prelude Resources","sidebar_label":"Resources"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZPure","permalink":"/zio-prelude/zpure/"},"next":{"title":"ZIO Process","permalink":"/zio-process/"}}');var a=t(74848),r=t(28453);const o={id:"resources",title:"ZIO Prelude Resources",sidebar_label:"Resources"},i=void 0,l={},c=[];function u(e){const s={a:"a",li:"li",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.slideshare.net/jdegoes/refactoring-functional-type-classes",children:"Refactoring Functional Type Classes"})," - slides by John De Goes and Adam Fraser,"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://youtu.be/OwmHgL9F_9Q",children:"SF Scala: Reimagining Functional Type Classes"})," - a talk by John A. De Goes and Adam Fraser"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://youtu.be/OzoMofqsPg8",children:"Exploring ZIO Prelude The game-changer for type classes in Scala"})," - talk by Jorge V\xe1squez"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://justinhj.github.io/2020/08/02/whats-ap-with-zio-prelude.html",children:"What's Ap with ZIO Prelude?"})," - an article by justinhj"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=OwmHgL9F_9Q",children:"SF Scala: Reimagining Functional Type Classes"})," John A. De Goes and Adam Fraser (August 2020) \u2014 In this presentation, John A. De Goes and Adam Fraser introduce a new Scala library with a completely different factoring of functional type classes\u2014one which throws literally everything away and starts from a clean slate. In this new factoring, type classes leverage Scala\u2019s strengths, including variance and modularity. Pieces fit together cleanly and uniformly, and in a way that satisfies existing use cases, but enables new ones never before possible. Finally, type classes are named, organized, and described in a way that makes teaching them easier, without compromising on algebraic principles."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=Sinde_P7nmY",children:"The Terror-Free Guide To Introducing Functional Scala At Work"})," by Jorge Vasquez (December 2020) \u2014 Too often, our applications are dominated by boilerplate that's not fun to write or test, and that makes our business logic complicated. In object-oriented programming, classes and interfaces help us with abstraction to reduce boilerplate. But, in functional programming, we use type classes. Historically, type classes in functional programming have been very complex and confusing, partially because they import ideas from Haskell that don't make sense in Scala, and partially because of their esoteric origins in category theory. In this presentation, Jorge V\xe1squez presents a new library called ZIO Prelude, which offers a distinctly Scala take on Functional Abstractions, and you will learn how you can eliminate common types of boilerplate by using it. Come see how you can improve your happiness and productivity with a new take on what it means to do functional programming in Scala!"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.slideshare.net/jv2301/the-terrorfree-guide-to-introducing-functional-scala-at-work",children:"The Terror-Free Guide to Introducing Functional Scala at Work"})," - slides by Jorge V\xe1squez,"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=69ngoqVXKPI",children:"ZIO WORLD - ZIO Prelude"})," by Jorge Vasquez (March 2020) \u2014 In this talk, Jorge Vasques discusses his work bringing refined newtypes to ZIO Prelude, which are working natively on Scala 3 with a beautiful syntax and DSL."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=M3HmROwOoRU",children:"Zymposium - ZIO Prelude"})," by Adam Fraser and Kit Langton (May 2021) \u2014 We'll see how ZIO Prelude gives us the tools for solving some common problems in day-to-day development. We'll also see how ZIO Prelude provides a set of abstractions we can use for inspiration when implementing our own data types but never forces us to use these abstractions."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"https://www.youtube.com/watch?v=97Yc0Ub9aZ8",children:"Zymposium - Prelude Redux (Type-classes without Type-classes)"})," by Adam and Kit Langton (May 2021) \u2014 We will see how thinking in terms of producers and consumers of values can give us powerful insights into the structure of our programs and how we can use these to develop composable operators for own data types, regardless of whether or not we choose to depend on a library like ZIO Prelude."]}),"\n"]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(96540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);