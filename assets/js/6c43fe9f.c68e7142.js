"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[61343],{6583:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"zio-schema/operations/the-default-value","title":"Getting The Default Value","description":"ZIO Schema provides a method called defaultValue that returns the default value of the underlying type described by the schema. This method returns a scala.util.Either[String, A] value, where A is the type described by the schema. If the schema does not have a default value, the method returns a Left value containing an error message. Otherwise, it returns a Right value containing the default value:","source":"@site/docs/zio-schema/operations/the-default-value.md","sourceDirName":"zio-schema/operations","slug":"/zio-schema/operations/the-default-value","permalink":"/zio-schema/operations/the-default-value","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/operations/the-default-value.md","tags":[],"version":"current","frontMatter":{"id":"the-default-value","title":"Getting The Default Value","sidebar_label":"The Default Value"},"sidebar":"ecosystem-sidebar","previous":{"title":"Operations","permalink":"/zio-schema/operations/"},"next":{"title":"Transforming Schemas","permalink":"/zio-schema/operations/transforming-schemas"}}');var n=a(74848),r=a(28453);const i={id:"the-default-value",title:"Getting The Default Value",sidebar_label:"The Default Value"},o=void 0,l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["ZIO Schema provides a method called ",(0,n.jsx)(t.code,{children:"defaultValue"})," that returns the default value of the underlying type described by the schema. This method returns a ",(0,n.jsx)(t.code,{children:"scala.util.Either[String, A]"})," value, where ",(0,n.jsx)(t.code,{children:"A"})," is the type described by the schema. If the schema does not have a default value, the method returns a ",(0,n.jsx)(t.code,{children:"Left"})," value containing an error message. Otherwise, it returns a ",(0,n.jsx)(t.code,{children:"Right"})," value containing the default value:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-scala",children:"sealed trait Schema[A] {\n  def defaultValue: scala.util.Either[String, A]\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["ZIO Schema have out of the box default values for all standard types, such as ",(0,n.jsx)(t.code,{children:"String"}),", ",(0,n.jsx)(t.code,{children:"Int"}),", ",(0,n.jsx)(t.code,{children:"Boolean"}),", ..., ",(0,n.jsx)(t.code,{children:"LocalDateTime"})," and ",(0,n.jsx)(t.code,{children:"UUID"}),". For example, the default value of a schema for ",(0,n.jsx)(t.code,{children:"String"})," is the empty string, and the default value of a schema for ",(0,n.jsx)(t.code,{children:"Int"})," is ",(0,n.jsx)(t.code,{children:"0"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var s=a(96540);const n={},r=s.createContext(n);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);