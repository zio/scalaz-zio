"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[56544],{19027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ecosystem/community/distage","title":"Distage","description":"Distage is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala.","source":"@site/docs/ecosystem/community/distage.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/distage","permalink":"/ecosystem/community/distage","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/distage.md","tags":[],"version":"current","frontMatter":{"id":"distage","title":"Distage"},"sidebar":"ecosystem-sidebar","previous":{"title":"Caliban","permalink":"/ecosystem/community/caliban"},"next":{"title":"Fhir-indexer","permalink":"/ecosystem/community/fhir-indexer"}}');var o=t(74848),a=t(28453);const s={id:"distage",title:"Distage"},r=void 0,d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://izumi.7mind.io/distage/",children:"Distage"})," is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala."]}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["By using ",(0,o.jsx)(n.em,{children:"Distage"})," we can auto-wire all components of our application."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"We don't need to manually link components together"}),"\n",(0,o.jsx)(n.li,{children:"We don't need to manually specify the order of allocation and allocation of dependencies. This will be derived automatically from the dependency order."}),"\n",(0,o.jsx)(n.li,{children:"We can override any component within the dependency graph."}),"\n",(0,o.jsx)(n.li,{children:"It helps us to create different configurations of our components for different use cases."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,o.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.7mind.izumi" %% "distage-core" % "1.0.8"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In this example we create a ",(0,o.jsx)(n.code,{children:"RandomApp"})," comprising two ",(0,o.jsx)(n.code,{children:"Random"})," and ",(0,o.jsx)(n.code,{children:"Logger"})," services. By using ",(0,o.jsx)(n.code,{children:"ModuleDef"})," we ",(0,o.jsx)(n.em,{children:"bind"})," services to their implementations:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import distage.{Activation, Injector, ModuleDef, Roots}\nimport izumi.distage.model.Locator\nimport izumi.distage.model.definition.Lifecycle\nimport zio.{ExitCode, Task, UIO, URIO, ZIO}\n\nimport java.time.LocalDateTime\n\ntrait Random {\n  def nextInteger: UIO[Int]\n}\n\nfinal class ScalaRandom extends Random {\n  override def nextInteger: UIO[Int] =\n    ZIO.effectTotal(scala.util.Random.nextInt())\n}\n\ntrait Logger {\n  def log(name: String): Task[Unit]\n}\n\nfinal class ConsoleLogger extends Logger {\n  override def log(line: String): Task[Unit] = {\n    val timeStamp = LocalDateTime.now()\n    ZIO.effect(println(s"$timeStamp: $line"))\n  }\n}\n\nfinal class RandomApp(random: Random, logger: Logger) {\n  def run: Task[Unit] = for {\n    random <- random.nextInteger\n    _ <- logger.log(s"random number generated: $random")\n  } yield ()\n}\n\nobject DistageExample extends zio.App {\n  def RandomAppModule: ModuleDef = new ModuleDef {\n    make[Random].from[ScalaRandom]\n    make[Logger].from[ConsoleLogger]\n    make[RandomApp] // `.from` is not required for concrete classes\n  }\n  \n  val resource: Lifecycle[Task, Locator] = Injector[Task]().produce(\n    plan = Injector[Task]().plan(\n      bindings = RandomAppModule,\n      activation = Activation.empty,\n      roots = Roots.target[RandomApp]\n    )\n  )\n\n  val myApp: Task[Unit] = resource.use(locator => locator.get[RandomApp].run)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);