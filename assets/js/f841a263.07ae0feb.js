"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[4376],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},45238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"reference/sync/countdownlatch","title":"CountdownLatch","description":"A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers","source":"@site/versioned_docs/version-1.0.18/reference/sync/countdownlatch.md","sourceDirName":"reference/sync","slug":"/reference/sync/countdownlatch","permalink":"/1.0.18/reference/sync/countdownlatch","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/sync/countdownlatch.md","tags":[],"version":"1.0.18","frontMatter":{"id":"countdownlatch","title":"CountdownLatch"}}');var i=t(74848),r=t(28453);const s={id:"countdownlatch",title:"CountdownLatch"},c=void 0,a={},d=[{value:"Operations",id:"operations",level:2},{value:"Creation",id:"creation",level:3},{value:"Use",id:"use",level:3},{value:"Example Usage",id:"example-usage",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers\ncompletes."}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"CountDownLatch"})," is initialized with a given count. The ",(0,i.jsx)(n.code,{children:"await"})," method block until the current count reaches zero due\nto invocations of the ",(0,i.jsx)(n.code,{children:"countDown"})," method, after which all waiting fibers are released and any subsequent invocations\nof ",(0,i.jsx)(n.code,{children:"await"})," return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that\nresets the count, consider using a [[CyclicBarrier]]."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"CountDownLatch"})," is a versatile synchronization tool and can be used for a number of purposes. A ",(0,i.jsx)(n.code,{children:"CountDownLatch"}),"\ninitialized with a count of one serves as a simple on/off latch, or gate: all fibers invoking ",(0,i.jsx)(n.code,{children:"await"})," wait at the gate\nuntil it is opened by a fiber invoking ",(0,i.jsx)(n.code,{children:"countDown"}),". A ",(0,i.jsx)(n.code,{children:"CountDownLatch"}),"initialized to N can be used to make one fiber\nwait until N fibers have completed some action, or some action has been completed N times."]}),"\n",(0,i.jsxs)(n.p,{children:["A useful property of a ",(0,i.jsx)(n.code,{children:"CountDownLatch"})," is that it doesn't require that fibers calling ",(0,i.jsx)(n.code,{children:"countDown"})," wait for the count to\nreach zero before proceeding, it simply prevents any fiber from proceeding past an ",(0,i.jsx)(n.code,{children:"await"}),"until all fibers could pass."]}),"\n",(0,i.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,i.jsx)(n.h3,{id:"creation",children:"Creation"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make(n: Int): IO[Option[Nothing], CountdownLatch]"})}),(0,i.jsxs)(n.td,{children:["Makes a new ",(0,i.jsx)(n.code,{children:"CountdownLatch"}),"."]})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"use",children:"Use"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Definition"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"await: UIO[Unit]"})}),(0,i.jsx)(n.td,{children:"Causes the current fiber to wait until the latch has counted down to zero."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"countDown: UIO[Unit]"})}),(0,i.jsx)(n.td,{children:"Decrements the count of the latch, releasing all waiting fibers if the count reaches zero."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"count: UIO[Int]"})}),(0,i.jsx)(n.td,{children:"Returns the current count."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.concurrent.CountdownLatch\n\nfor {\n  latch  <- CountdownLatch.make(100)\n  count  <- Ref.make(0)\n  ps     <- ZIO.collectAll(List.fill(10)(Promise.make[Nothing, Unit]))\n  _      <- ZIO.forkAll(ps.map(p => latch.await *> count.update(_ + 1) *> p.succeed(())))\n  _      <- latch.countDown.repeat(Schedule.recurs(99))\n  _      <- ZIO.foreach_(ps)(_.await)\n  result <- count.get\n} yield assert(result == 10)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);