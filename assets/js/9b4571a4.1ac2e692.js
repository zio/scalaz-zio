"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[95448],{13198:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/files/example_causal_profile-6a3eabcc31a4105c0dc877acc95a0520.png"},27002:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zio-profiling/index","title":"Introduction to ZIO Profiling","description":"ZIO Profiling is a collection of different profilers for better understanding the runtime behavior of ZIO programs.","source":"@site/docs/zio-profiling/index.md","sourceDirName":"zio-profiling","slug":"/zio-profiling/","permalink":"/zio-profiling/","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-profiling/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Introduction to ZIO Profiling","sidebar_label":"ZIO Profiling"},"sidebar":"ecosystem-sidebar","previous":{"title":"Other","permalink":"/zio-process/other"},"next":{"title":"Resources","permalink":"/zio-profiling/resources"}}');var t=n(74848),o=n(28453);const s={id:"index",title:"Introduction to ZIO Profiling",sidebar_label:"ZIO Profiling"},a=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Profiling an application and displaying a flamegraph",id:"profiling-an-application-and-displaying-a-flamegraph",level:2},{value:"Causal Profiling",id:"causal-profiling",level:2},{value:"Compiler Plugin",id:"compiler-plugin",level:2},{value:"Jmh Support",id:"jmh-support",level:2}];function p(e){const i={a:"a",code:"code",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"ZIO Profiling is a collection of different profilers for better understanding the runtime behavior of ZIO programs."}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://github.com/zio/zio/wiki/Project-Stages",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/badge/Project%20Stage-Concept-orange.svg",alt:"Concept"})})," ",(0,t.jsx)(i.img,{src:"https://github.com/zio/zio-profiling/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,t.jsx)(i.a,{href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-profiling_2.13/",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-profiling_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"})})," ",(0,t.jsx)(i.a,{href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-profiling_2.13/",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-profiling_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"})})," ",(0,t.jsx)(i.a,{href:"https://javadoc.io/doc/dev.zio/zio-profiling-docs_2.13",children:(0,t.jsx)(i.img,{src:"https://javadoc.io/badge2/dev.zio/zio-profiling-docs_2.13/javadoc.svg",alt:"javadoc"})})," ",(0,t.jsx)(i.a,{href:"https://github.com/zio/zio-profiling",children:(0,t.jsx)(i.img,{src:"https://img.shields.io/github/stars/zio/zio-profiling?style=social",alt:"ZIO Profiling"})})]}),"\n",(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(i.p,{children:"Normal cpu profilers cannot really be used to profile code using an effect system. Profilers operating on a thread level will only see that threads are spending time in the evaluation loop of the effect system, producing profiles that are not useful for application developers."}),"\n",(0,t.jsx)(i.p,{children:"Instead, profiling a program written using an effect system requires a profiler that is aware of the effect system and can report where the effects were constructed / which user code the effect system is spending time on. ZIO profiling aims to be that library for the ZIO effect system."}),"\n",(0,t.jsx)(i.p,{children:"The library focuses exclusively on cpu profiling. For heap profiling please consider using other tools such as async-profiler or VisualVM."}),"\n",(0,t.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(i.p,{children:"ZIO Profiling requires you to add both the main library and optionally the compiler plugin to your build.sbt:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-profiling" % "0.3.2"\nlibraryDependencies += compilerPlugin("dev.zio" %% "zio-profiling-tagging-plugin" % "0.3.2")\n'})}),"\n",(0,t.jsx)(i.h2,{id:"profiling-an-application-and-displaying-a-flamegraph",children:"Profiling an application and displaying a flamegraph"}),"\n",(0,t.jsx)(i.p,{children:"For this example we are going to use the sampling profiler to measure the cpu time used by parts of a zio program.\nAll needed definitions can be imported using:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:"import zio.profiling.sampling._\n"})}),"\n",(0,t.jsx)(i.p,{children:"The program we want to instrument simulates performing a short and then a long computation concurrently:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:"val fast = ZIO.succeed(Thread.sleep(400))\n\nval slow = ZIO.succeed(Thread.sleep(600))\n\nval program = fast <&> slow\n"})}),"\n",(0,t.jsxs)(i.p,{children:["In order to profile the program, we wrap it with the ",(0,t.jsx)(i.code,{children:"profile"})," method of the sampling profiler. Once the effect has completed\nthis will yield the profiling result. We can either manipulate the result in Scala or render it in a number of standard\nformats. In this case we are going to write it out in a format supported by ",(0,t.jsx)(i.a,{href:"https://github.com/brendangregg/FlameGraph",children:"https://github.com/brendangregg/FlameGraph"}),", so we\ncan visualize it as a flamegraph."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'SamplingProfiler\n  .profile(program)\n  .flatMap(_.stackCollapseToFile("profile.folded"))\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The resulting file can be converted to a svg using the flamegraph.pl script (",(0,t.jsx)(i.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(50933).A+"",children:"example"}),"):"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"flamegraph.pl ./examples/profile.folded > profile.svg\n"})}),"\n",(0,t.jsx)(i.h2,{id:"causal-profiling",children:"Causal Profiling"}),"\n",(0,t.jsxs)(i.p,{children:["ZIO Profiling includes experimental support for causal profiling inspired by ",(0,t.jsx)(i.a,{href:"https://github.com/plasma-umass/coz",children:"coz"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"Usage is similar to the sampling profiler, but instead of displaying the time spent running the program it will give recommendations\nwhich parts of the program to focus on during performance tuning for biggest effect. It achieves this by iteratively artificially speeding\nup parts of the program (by slowing down all parts running concurrently) and measuring the effect on overall runtime."}),"\n",(0,t.jsx)(i.p,{children:"Check out the paper linked in the coz repository for more details about the idea."}),"\n",(0,t.jsx)(i.p,{children:"We can bring the causal profiler into scope with the following import:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:"import zio.profiling.causal._\n"})}),"\n",(0,t.jsx)(i.p,{children:"This time we are using a slightly more complicated example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'val fast = ZIO.succeed(Thread.sleep(40))\n\nval slow1 = ZIO.succeed(Thread.sleep(20))\n\nval slow2 = ZIO.succeed(Thread.sleep(60))\n\nval slow = slow1 <&> slow2\n\nval program = (fast <&> slow) *>\n  CausalProfiler.progressPoint("iteration done")\n\nCausalProfiler(iterations = 100)\n  .profile(program.forever)\n  .flatMap(_.renderToFile("profile.coz"))\n'})}),"\n",(0,t.jsxs)(i.p,{children:["We also need to weave the ",(0,t.jsx)(i.code,{children:"progressPoint"})," effect into our program. It will be used by the causal profiler to measure progress\nof the overall program."]}),"\n",(0,t.jsxs)(i.p,{children:["Finally, we can run the program using the causal profiler (notice the use of ",(0,t.jsx)(i.code,{children:"program.forever"})," -- the profiler will automatically interrupt the program, until then it has to keep running)\nand save the result to a file."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'CausalProfiler(iterations = 100)\n  .profile(prog.forever)\n  .flatMap(_.renderToFile("profile.coz"))\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The file can be viewed using the ",(0,t.jsx)(i.a,{href:"https://plasma-umass.org/coz/",children:"Coz Visualizer"})," (",(0,t.jsx)(i.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(13198).A+"",children:"example"}),").\nAs you can see, the profiler correctly tells you that you can get up to a 33% speedup by optimizing the ",(0,t.jsx)(i.code,{children:"slow2"})," effect,\nbut it's impossible to get a speedup any other way."]}),"\n",(0,t.jsx)(i.h2,{id:"compiler-plugin",children:"Compiler Plugin"}),"\n",(0,t.jsx)(i.p,{children:"In order to produce actionable output, a profiler not only needs to know which line of code is currently running, but also how that location was reached."}),"\n",(0,t.jsx)(i.p,{children:"Most profilers rely on the function call hierarchy to determine this information, but the call stack is not really useful for programs using functional effect systems. The reason for this is that the normal function calls are only used to build up the program as a datastructure -- not execute it."}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.p,{children:"It's possible to restore the proper callstack while the effects are actually getting executed (this is the approach taken by the zio.Trace machinery), but that is not the approach taken by ZIO Profiling."}),"\n",(0,t.jsxs)(i.p,{children:["Instead, zio-profiling tracks the current 'callstack' of your program using FiberRefs. For this approach to work every effect should be manually annotated using ",(0,t.jsx)(i.code,{children:"zio.profiling.CostCenter.withChildCostCenter"}),", which will result in a hierarchy of effect tags at runtime."]}),"\n",(0,t.jsxs)(i.p,{children:["As this requires modification of large parts of user programs and is bad UX, zio-profiling ships with a compiler plugin (zio-profiling-tagging-plugin) that automates this. Every ",(0,t.jsx)(i.code,{children:"def"})," or ",(0,t.jsx)(i.code,{children:"val"})," that returns a zio effect will be rewritten to be properly tagged. Consider this example for the rewrite that happens:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'val testEffect = ZIO.unit\n\n// gets rewritten to\n\nval testEffect = CostCenter.withChildCostCenter("foo.Foo.testEffect(Foo.scala:12)")(ZIO.unit)\n'})}),"\n",(0,t.jsxs)(i.p,{children:["To enable the compiler plugin, add the following to the sbt module ",(0,t.jsx)(i.strong,{children:"containing the code you want to profile"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'compilerPlugin("dev.zio" %% "zio-profiling-tagging-plugin" % "0.3.2")\n\n'})}),"\n",(0,t.jsx)(i.h2,{id:"jmh-support",children:"Jmh Support"}),"\n",(0,t.jsx)(i.p,{children:"ZIO Profiling offers an integration with the Java Microbenchmark Harness (JMH). In order to profile a jmh benchmark, first ensure that the sources are properly tagged using the tagging plugin. Next, add a dependency to the jmh module to your benchmarking module:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-profiling-jmh" % "0.3.2"\n'})}),"\n",(0,t.jsxs)(i.p,{children:["In your actual benchmarks, ensure that you are running ZIO effects using the methods in ",(0,t.jsx)(i.code,{children:"zio.profiling.jmh.BenchmarkUtils"}),". A possible benchmark might look like this"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-scala",children:'package zio.redis.benchmarks.lists\n\nimport org.openjdk.jmh.annotations._\nimport zio.profiling.jmh.BenchmarkUtils\nimport zio.redis._\nimport zio.redis.benchmarks._\nimport zio.{Scope => _, _}\n\nimport java.util.concurrent.TimeUnit\n\n@State(Scope.Thread)\n@BenchmarkMode(Array(Mode.Throughput))\n@OutputTimeUnit(TimeUnit.SECONDS)\n@Measurement(iterations = 15)\n@Warmup(iterations = 15)\n@Fork(2)\nclass BlMoveBenchmarks extends BenchmarkRuntime {\n\n  @Param(Array("500"))\n  var count: Int = _\n\n  private var items: List[String] = _\n\n  private val key = "test-list"\n\n  private def execute(query: ZIO[Redis, RedisError, Unit]): Unit =\n    BenchmarkUtils.unsafeRun(query.provideLayer(BenchmarkRuntime.Layer))\n\n  @Setup(Level.Trial)\n  def setup(): Unit = {\n    items = (0 to count).toList.map(_.toString)\n    execute(ZIO.serviceWithZIO[Redis](_.rPush(key, items.head, items.tail: _*).unit))\n  }\n\n  @TearDown(Level.Trial)\n  def tearDown(): Unit =\n    execute(ZIO.serviceWithZIO[Redis](_.del(key).unit))\n\n  @Benchmark\n  def zio(): Unit = execute(\n    ZIO.foreachDiscard(items)(_ =>\n      ZIO.serviceWithZIO[Redis](_.blMove(key, key, Side.Left, Side.Right, 1.second).returning[String])\n    )\n  )\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"Once the benchmark is set up properly, you can specify the profiler from the jmh command line. Using sbt-jmh, it might look like this:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"Jmh/run -i 3 -wi 3 -f1 -t1 -prof zio.profiling.jmh.JmhZioProfiler zio.redis.benchmarks.lists.BlMoveBenchmarks.zio\n"})}),"\n",(0,t.jsx)(i.p,{children:"The profiler output will be written to a file in the directory the JVM has been invoked from."})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var r=n(96540);const t={},o=r.createContext(t);function s(e){const i=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:i},e.children)}},50933:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/files/example_sampling_profile-4d4524da9bfbbdf983eac2f2fc075225.svg"}}]);