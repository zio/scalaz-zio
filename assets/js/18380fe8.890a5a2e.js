"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[84244],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var i=t(96540);const r={},a=i.createContext(r);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(a.Provider,{value:e},n.children)}},75035:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"reference/stream/zsink/operations","title":"Sink Operations","description":"Having created the sink, we can transform it with provided operations.","source":"@site/docs/reference/stream/zsink/operations.md","sourceDirName":"reference/stream/zsink","slug":"/reference/stream/zsink/operations","permalink":"/reference/stream/zsink/operations","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zsink/operations.md","tags":[],"version":"current","frontMatter":{"id":"operations","title":"Sink Operations"},"sidebar":"reference-sidebar","previous":{"title":"Creating Sinks","permalink":"/reference/stream/zsink/creating-sinks"},"next":{"title":"Parallel Operators","permalink":"/reference/stream/zsink/parallel-operators"}}');var r=t(74848),a=t(28453);const s={id:"operations",title:"Sink Operations"},o=void 0,c={},l=[{value:"contramap",id:"contramap",level:2},{value:"dimap",id:"dimap",level:2},{value:"Filtering",id:"filtering",level:2}];function m(n){const e={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"Having created the sink, we can transform it with provided operations."}),"\n",(0,r.jsx)(e.h2,{id:"contramap",children:"contramap"}),"\n",(0,r.jsxs)(e.p,{children:["Contramap is a simple combinator to change the domain of an existing function. While ",(0,r.jsx)(e.em,{children:"map"})," changes the co-domain of a function, the ",(0,r.jsx)(e.em,{children:"contramap"})," changes the domain of a function. So the ",(0,r.jsx)(e.em,{children:"contramap"})," takes a function and maps over its input."]}),"\n",(0,r.jsxs)(e.p,{children:["This is useful when we have a fixed output, and our existing function cannot consume those outputs. So we can use ",(0,r.jsx)(e.em,{children:"contramap"})," to create a new function that can consume that fixed output. Assume we have a ",(0,r.jsx)(e.code,{children:"ZSink.sum"})," that sums incoming numeric values, but we have a ",(0,r.jsx)(e.code,{children:"ZStream"})," of ",(0,r.jsx)(e.code,{children:"String"})," values. We can convert the ",(0,r.jsx)(e.code,{children:"ZSink.sum"})," to a sink that can consume ",(0,r.jsx)(e.code,{children:"String"})," values;"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\n\nval numericSum: ZSink[Any, Nothing, Int, Nothing, Int]    = \n  ZSink.sum[Int]\nval stringSum : ZSink[Any, Nothing, String, Nothing, Int] = \n  numericSum.contramap((x: String) => x.toInt)\n\nval sum: ZIO[Any, Nothing, Int] =\n  ZStream("1", "2", "3", "4", "5").run(stringSum)\n// Output: 15\n'})}),"\n",(0,r.jsx)(e.h2,{id:"dimap",children:"dimap"}),"\n",(0,r.jsxs)(e.p,{children:["A ",(0,r.jsx)(e.code,{children:"dimap"})," is an extended ",(0,r.jsx)(e.code,{children:"contramap"})," that additionally transforms sink's output:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-scala",children:'import zio._\nimport zio.stream._\n\n// Convert its input to integers, do the computation and then convert them back to a string\nval sumSink: ZSink[Any, Nothing, String, Nothing, String] =\n  numericSum.dimap[String, String](_.toInt, _.toString)\n  \nval sum: ZIO[Any, Nothing, String] =\n  ZStream("1", "2", "3", "4", "5").run(sumSink)\n// Output: 15\n'})}),"\n",(0,r.jsx)(e.h2,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsxs)(e.p,{children:["Sinks have ",(0,r.jsx)(e.code,{children:"ZSink#filterInput"})," for filtering incoming elements:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-scala",children:"import zio._\nimport zio.stream._\n\nZStream(1, -2, 0, 1, 3, -3, 4, 2, 0, 1, -3, 1, 1, 6)\n  .transduce(\n    ZSink\n      .collectAllN[Int](3)\n      .filterInput[Int](_ > 0)\n  )\n// Output: Chunk(Chunk(1,1,3),Chunk(4,2,1),Chunk(1,1,6),Chunk())\n"})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}}}]);