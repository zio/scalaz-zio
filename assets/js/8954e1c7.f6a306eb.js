"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[40265],{42320:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"zio-cache/lookup","title":"Lookup","description":"A Lookup is a lookup function that, given a key of type Key, knows how to compute a value of type Value, requiring an environment of type Environment and potentially failing with an error of type Error.","source":"@site/docs/zio-cache/lookup.md","sourceDirName":"zio-cache","slug":"/zio-cache/lookup","permalink":"/zio-cache/lookup","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-cache/lookup.md","tags":[],"version":"current","frontMatter":{"id":"lookup","title":"Lookup"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Cache","permalink":"/zio-cache/"},"next":{"title":"Cache","permalink":"/zio-cache/cache"}}');var r=o(74848),c=o(28453);const i={id:"lookup",title:"Lookup"},a=void 0,s={},l=[];function u(e){const n={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Lookup"})," is a lookup function that, given a key of type ",(0,r.jsx)(n.code,{children:"Key"}),", knows how to compute a value of type ",(0,r.jsx)(n.code,{children:"Value"}),", requiring an environment of type ",(0,r.jsx)(n.code,{children:"Environment"})," and potentially failing with an error of type ",(0,r.jsx)(n.code,{children:"Error"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import zio._\n\ntrait Lookup[-Key, -Environment, +Error, +Value] {\n  def lookup(key: Key): ZIO[Environment, Error, Value]\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can think of a key as essentially an effectual function to compute a value. And in fact you can construct a ",(0,r.jsx)(n.code,{children:"Lookup"})," from any effectual function using the ",(0,r.jsx)(n.code,{children:"apply"})," method on ",(0,r.jsx)(n.code,{children:"Lookup"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"object Lookup {\n\n  def apply[Key, Environment, Error, Value](\n    f: Key => ZIO[Environment, Error, Value]\n  ): Lookup[Key, Environment, Error, Value] =\n    ???\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since the lookup function can return a ",(0,r.jsx)(n.code,{children:"ZIO"})," effect it can either return its result synchronously or asynchronously. It can also use an environment and potentially fail with an error."]}),"\n",(0,r.jsx)(n.p,{children:"In short, if you can describe it with a ZIO effect you can use it as the lookup function for a cache."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(96540);const r={},c=t.createContext(r);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);