"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59994],{9026:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"zio-dynamodb/concepts/high-level-api","title":"High Level API","description":"The high level API relies on two mechanisms to provide type safety and reduce boilerplate code:","source":"@site/docs/zio-dynamodb/concepts/high-level-api.md","sourceDirName":"zio-dynamodb/concepts","slug":"/zio-dynamodb/concepts/high-level-api","permalink":"/zio-dynamodb/concepts/high-level-api","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/concepts/high-level-api.md","tags":[],"version":"current","frontMatter":{"id":"high-level-api","title":"High Level API"},"sidebar":"ecosystem-sidebar","previous":{"title":"Architecture","permalink":"/zio-dynamodb/concepts/architecture"},"next":{"title":"Low Level API","permalink":"/zio-dynamodb/concepts/low-level-api"}}');var i=s(74848),r=s(28453);const a={id:"high-level-api",title:"High Level API"},t=void 0,c={},d=[{value:"ZIO Schema derivation",id:"zio-schema-derivation",level:2},{value:"Projection Expression generation",id:"projection-expression-generation",level:2},{value:"Using a <code>ProjectionExpression</code> as a springboard to creating further expressions",id:"using-a-projectionexpression-as-a-springboard-to-creating-further-expressions",level:2},{value:"<code>DynamoDBQuery</code> CRUD methods",id:"dynamodbquery-crud-methods",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The high level API relies on two mechanisms to provide type safety and reduce boilerplate code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Automatic ZIO Schema derivation for case classes"}),"\n",(0,i.jsxs)(n.li,{children:["Semi automatic generation of ",(0,i.jsx)(n.code,{children:"ProjectionExpression"}),"'s for case classes and sealed traits"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"zio-schema-derivation",children:"ZIO Schema derivation"}),"\n",(0,i.jsxs)(n.p,{children:["The High Level API methods rely on a ZIO Schema for a particular type being in implicit scope. This is achieved using the ",(0,i.jsx)(n.code,{children:"DeriveSchema.gen"})," macro. Internally codecs are automatically generated for the case classes based on the meta data provided by the ",(0,i.jsx)(n.code,{children:"Schema"}),"'s."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Person(id: String, name: String)\nobject Person {\n  implicit val schema: Schema.CaseClass2[String, String, Person] = DeriveSchema.gen[Person]\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"projection-expression-generation",children:"Projection Expression generation"}),"\n",(0,i.jsxs)(n.p,{children:["The automated generation of ",(0,i.jsx)(n.code,{children:"ProjectionExpression"}),"'s is achieved using the ",(0,i.jsx)(n.code,{children:"ProjectionExpression.accessors"})," method. For classes this method generates a ",(0,i.jsx)(n.code,{children:"ProjectionExpression"})," for each field. For sealed traits it generates a ",(0,i.jsx)(n.code,{children:"ProjectionExpression"})," for each child."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"final case class Person(id: String, name: String)\nobject Person {\n  implicit val schema // ...\n\n  val (id, name) = ProjectionExpression.accessors[Person]\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"using-a-projectionexpression-as-a-springboard-to-creating-further-expressions",children:["Using a ",(0,i.jsx)(n.code,{children:"ProjectionExpression"})," as a springboard to creating further expressions"]}),"\n",(0,i.jsxs)(n.p,{children:["In the above example ",(0,i.jsx)(n.code,{children:"Person.id"})," and ",(0,i.jsx)(n.code,{children:"Person.name"})," are ",(0,i.jsx)(n.code,{children:"ProjectionExpression"}),"s automatically generated by the ",(0,i.jsx)(n.code,{children:"ProjectionExpression.accessors"})," method.\nThey are used as a springboard for creating further type safe APIs eg"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'Person.id === "1"'})," creates a ",(0,i.jsx)(n.code,{children:"ConditionExpression"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'Person.name.set("Smith")'})," creates an ",(0,i.jsx)(n.code,{children:"UpdateExpression"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'Person.id.partitionKey === "1"'})," creates a primary key expression"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"dynamodbquery-crud-methods",children:[(0,i.jsx)(n.code,{children:"DynamoDBQuery"})," CRUD methods"]}),"\n",(0,i.jsxs)(n.p,{children:["There are also type safe query creation methods in the ",(0,i.jsx)(n.code,{children:"DynamoDBQuery"})," companion object such as ",(0,i.jsx)(n.code,{children:"get"}),", ",(0,i.jsx)(n.code,{children:"put"}),", ",(0,i.jsx)(n.code,{children:"update"}),", ",(0,i.jsx)(n.code,{children:"deleteFrom"}),", ",(0,i.jsx)(n.code,{children:"queryAll"})," and all these take expressions as arguments. So taking our example further we can see how all these APIs can be used together to create a type safe CRUD queries:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'final case class Person(id: String, name: String)\nobject Person {\n  implicit val schema: Schema.CaseClass2[String, String, Person] = DeriveSchema.gen[Person]\n  val (id, name) = ProjectionExpression.accessors[Person]\n}\n\nval table = "person-table"\nval person = Person("1", "John")\nfor {\n  _ <- DynamoDBQuery.put(table, person).where(!Person.id.exists).execute\n  found <- DynamoDBQuery.get(table)(Person.id.partitionKey === "1").execute.absolve\n  _ <- DynamoDBQuery.update(table)(Person.id.partitionKey === "1")(\n    Person.name.set("Smith")\n  ).execute\n  _ <- ZIO.debug(found == person) // true\n} yield ()\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var o=s(96540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);