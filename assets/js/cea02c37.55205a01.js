"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[56415],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>c});var r=o(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},54383:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/resource/zkeyedpool","title":"ZKeyedPool","description":"The ZKeyedPool[+Err, -Key, Item] is a pool of items of type Item that are associated with a key of type Key. An attempt to get an item from a pool may fail with an error of type Err.","source":"@site/docs/reference/resource/zkeyedpool.md","sourceDirName":"reference/resource","slug":"/reference/resource/zkeyedpool","permalink":"/reference/resource/zkeyedpool","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/resource/zkeyedpool.md","tags":[],"version":"current","frontMatter":{"id":"zkeyedpool","title":"ZKeyedPool"},"sidebar":"reference-sidebar","previous":{"title":"ZPool","permalink":"/reference/resource/zpool"},"next":{"title":"ScopedRef","permalink":"/reference/resource/scopedref"}}');var i=o(74848),t=o(28453);const a={id:"zkeyedpool",title:"ZKeyedPool"},c=void 0,s={},d=[{value:"Fixed-size Pools",id:"fixed-size-pools",level:3},{value:"Dynamic-size Pools",id:"dynamic-size-pools",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ZKeyedPool[+Err, -Key, Item]"})," is a pool of items of type ",(0,i.jsx)(n.code,{children:"Item"})," that are associated with a key of type ",(0,i.jsx)(n.code,{children:"Key"}),". An attempt to get an item from a pool may fail with an error of type ",(0,i.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The interface is similar to ",(0,i.jsx)(n.a,{href:"/reference/resource/zpool",children:(0,i.jsx)(n.code,{children:"ZPool"})}),", but it allows associating items with keys:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait ZKeyedPool[+Err, -Key, Item] {\n  def get(key: Key): ZIO[Scope, Err, Item]\n  def invalidate(item: Item): UIO[Unit]\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The two fundamental operators on a ",(0,i.jsx)(n.code,{children:"ZPool"})," is ",(0,i.jsx)(n.code,{children:"get"})," and ",(0,i.jsx)(n.code,{children:"invalidate"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"get"})," operator retrieves an item associated with the given key from the pool in a scoped effect."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"invalidate"})," operator invalidates the specified item. This will cause the pool to eventually reallocate the item."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["There  couple of ways to create a ",(0,i.jsx)(n.code,{children:"ZKeyedPool"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Generally there are two ways to create a ",(0,i.jsx)(n.code,{children:"ZKeyedPool"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Fixed-size Pools"}),"\n",(0,i.jsx)(n.li,{children:"Dynamic-size Pools"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"fixed-size-pools",children:"Fixed-size Pools"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"We can create a pool that has a fixed number of items for each key:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object ZKeyedPool {\n  def make[Key, Env: EnvironmentTag, Err, Item](\n       get: Key => ZIO[Env, Err, Item],\n       size: => Int\n    ): ZIO[Env with Scope, Nothing, ZKeyedPool[Err, Key, Item]] = ???\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For example The ",(0,i.jsx)(n.code,{children:"ZKeyedPool.make(key => resource(key), 3)"})," creates a pool of resources where each key has a pool of size 3:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject ZKeyedPoolExample extends ZIOAppDefault {\n  def resource(key: String): ZIO[Scope, Nothing, String] = ZIO.acquireRelease(\n    ZIO.random\n      .flatMap(_.nextUUID.map(_.toString))\n      .flatMap(uuid => ZIO.debug(s"Acquiring the resource with the $key key and the $uuid id").as(uuid))\n  )(uuid => ZIO.debug(s"Releasing the resource with the $key key and the $uuid id!"))\n\n  def run =\n    for {\n      pool <- ZKeyedPool.make(resource, 3)\n      _    <- pool.get("foo")\n      item <- pool.get("bar")\n      _    <- ZIO.debug(s"Item: $item")\n    } yield ()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here is an example output of the above code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Acquiring the resource with the foo key and the 82ee3cab-7f4c-47f1-b3e6-0cd49035925d id!\nAcquiring the resource with the foo key and the f9cd881f-fa2e-421c-a6ae-c8d16f6b4500 id!\nAcquiring the resource with the foo key and the 09a8f4c9-24ee-411c-b1d0-958479266cb0 id!\nAcquiring the resource with the bar key and the 4d6f9c95-8d72-4560-bc20-0965b547cfb7 id!\nAcquiring the resource with the bar key and the 44bf6641-bb0f-4088-989b-95fb442d93ab id!\nAcquiring the resource with the bar key and the fc2780a7-1717-4027-b201-65441168bfce id!\nItem: 4d6f9c95-8d72-4560-bc20-0965b547cfb7\nReleasing the resource with the bar key and the fc2780a7-1717-4027-b201-65441168bfce id!\nReleasing the resource with the bar key and the 44bf6641-bb0f-4088-989b-95fb442d93ab id!\nReleasing the resource with the bar key and the 4d6f9c95-8d72-4560-bc20-0965b547cfb7 id!\nReleasing the resource with the foo key and the 09a8f4c9-24ee-411c-b1d0-958479266cb0 id!\nReleasing the resource with the foo key and the f9cd881f-fa2e-421c-a6ae-c8d16f6b4500 id!\nReleasing the resource with the foo key and the 82ee3cab-7f4c-47f1-b3e6-0cd49035925d id!\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"We can create a pool that has a fixed number of items but with different pool size for each key:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object ZKeyedPool {\n  def make[Key, Env: EnvironmentTag, Err, Item](\n    get: Key => ZIO[Env, Err, Item],\n    size: Key => Int\n  ): ZIO[Env with Scope, Nothing, ZKeyedPool[Err, Key, Item]] = ???\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'In the following example, we have created a pool of resources where based on the key, the pool size for that key is different, the pool size for keys starting with "foo" is 2, and for keys starting with "bar" is 3, and for all other keys, the pool size is 1:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'for {\n  pool <- ZKeyedPool.make(resource, (key: String) => key match {\n    case k if k.startsWith("foo") => 2\n    case k if k.startsWith("bar") => 3\n    case _                        => 1\n  })\n  _    <- pool.get("foo1")\n  item <- pool.get("bar1")\n  _    <- ZIO.debug(s"Item: $item")\n} yield ()\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here is an example output of the above code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Acquiring the resource with foo1 key and 052778eb-31c2-4eac-806b-46651813b457 id\nAcquiring the resource with foo1 key and bd39dbe4-8f43-4376-a209-5af8ca118af2 id\nAcquiring the resource with bar1 key and ecfc80da-c8b2-4726-813c-259748a98c3e id\nAcquiring the resource with bar1 key and 0ddfd051-7bf8-4596-a7b9-4011ceeb0976 id\nAcquiring the resource with bar1 key and 67239ac8-5def-45ac-962f-b05fb82bf0c3 id\nItem: ecfc80da-c8b2-4726-813c-259748a98c3e\nReleasing the resource with bar1 key and 67239ac8-5def-45ac-962f-b05fb82bf0c3 id!\nReleasing the resource with bar1 key and 0ddfd051-7bf8-4596-a7b9-4011ceeb0976 id!\nReleasing the resource with bar1 key and ecfc80da-c8b2-4726-813c-259748a98c3e id!\nReleasing the resource with foo1 key and bd39dbe4-8f43-4376-a209-5af8ca118af2 id!\nReleasing the resource with foo1 key and 052778eb-31c2-4eac-806b-46651813b457 id!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-size-pools",children:"Dynamic-size Pools"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"We can create a pool with the specified minimum and maximum sized and time to live before a pool whose excess items are not being used will be shrunk down to the minimum size:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"object ZKeyedPool {\n  def make[Key, Env: EnvironmentTag, Err, Item](\n    get: Key => ZIO[Env, Err, Item],\n    range: Key => Range,\n    timeToLive: Duration\n  ): ZIO[Env with Scope, Nothing, ZKeyedPool[Err, Key, Item]] = ???\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Similarly, we can create a pool of resources where the minimum and maximum size of the pool is different for each key. Also, the time to live for each key can be different:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"  def make[Key, Env: EnvironmentTag, Err, Item](\n    get: Key => ZIO[Env, Err, Item],\n    range: Key => Range,\n    timeToLive: Key => Duration\n  ): ZIO[Env with Scope, Nothing, ZKeyedPool[Err, Key, Item]] = ???\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);