"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49571],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(96540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},46060:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"overview/overview_handling_resources","title":"Handling Resources","description":"This section looks at some of the common ways to safely handle resources using ZIO.","source":"@site/versioned_docs/version-1.0.18/overview/handling_resources.md","sourceDirName":"overview","slug":"/overview/overview_handling_resources","permalink":"/1.0.18/overview/overview_handling_resources","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/overview/handling_resources.md","tags":[],"version":"1.0.18","frontMatter":{"id":"overview_handling_resources","title":"Handling Resources"},"sidebar":"overview_sidebar","previous":{"title":"Handling Errors","permalink":"/1.0.18/overview/overview_handling_errors"},"next":{"title":"Basic Concurrency","permalink":"/1.0.18/overview/overview_basic_concurrency"}}');var s=i(74848),t=i(28453);const a={id:"overview_handling_resources",title:"Handling Resources"},o=void 0,c={},l=[{value:"Finalizing",id:"finalizing",level:2},{value:"Bracket",id:"bracket",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This section looks at some of the common ways to safely handle resources using ZIO."}),"\n",(0,s.jsx)(n.p,{children:"ZIO's resource management features work across synchronous, asynchronous, concurrent, and other effect types, and provide strong guarantees even in the presence of failure, interruption, or defects in the application."}),"\n",(0,s.jsx)(n.h2,{id:"finalizing",children:"Finalizing"}),"\n",(0,s.jsxs)(n.p,{children:["ZIO provides similar functionality to ",(0,s.jsx)(n.code,{children:"try"})," / ",(0,s.jsx)(n.code,{children:"finally"})," with the ",(0,s.jsx)(n.code,{children:"ZIO#ensuring"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.code,{children:"try"})," / ",(0,s.jsx)(n.code,{children:"finally"}),", the ",(0,s.jsx)(n.code,{children:"ensuring"})," operation guarantees that if an effect begins executing and then terminates (for whatever reason), then the finalizer will begin executing."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'val finalizer = \n  UIO.effectTotal(println("Finalizing!"))\n// finalizer: UIO[Unit] = zio.ZIO$EffectTotal@65ccae4c\n\nval finalized: IO[String, Unit] = \n  IO.fail("Failed!").ensuring(finalizer)\n// finalized: IO[String, Unit] = zio.ZIO$CheckInterrupt@5071b0bd\n'})}),"\n",(0,s.jsx)(n.p,{children:"The finalizer is not allowed to fail, which means that it must handle any errors internally."}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.code,{children:"try"})," / ",(0,s.jsx)(n.code,{children:"finally"}),", finalizers can be nested, and the failure of any inner finalizer will not affect outer finalizers. Nested finalizers will be executed in reverse order, and linearly (not in parallel)."]}),"\n",(0,s.jsxs)(n.p,{children:["Unlike ",(0,s.jsx)(n.code,{children:"try"})," / ",(0,s.jsx)(n.code,{children:"finally"}),", ",(0,s.jsx)(n.code,{children:"ensuring"})," works across all types of effects, including asynchronous and concurrent effects."]}),"\n",(0,s.jsx)(n.h2,{id:"bracket",children:"Bracket"}),"\n",(0,s.jsxs)(n.p,{children:["A common use for ",(0,s.jsx)(n.code,{children:"try"})," / ",(0,s.jsx)(n.code,{children:"finally"})," is safely acquiring and releasing resources, such as new socket connections or opened files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:"val handle = openFile(name)\n\ntry {\n  processFile(handle)\n} finally closeFile(handle)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ZIO encapsulates this common pattern with ",(0,s.jsx)(n.code,{children:"ZIO#bracket"}),", which allows you to specify an ",(0,s.jsx)(n.em,{children:"acquire"})," effect, which acquires a resource; a ",(0,s.jsx)(n.em,{children:"release"})," effect, which releases it; and a ",(0,s.jsx)(n.em,{children:"use"})," effect, which uses the resource."]}),"\n",(0,s.jsx)(n.p,{children:"The release effect is guaranteed to be executed by the runtime system, even in the presence of errors or interruption."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'val groupedFileData: IO[IOException, Unit] = \n  openFile("data.json").bracket(closeFile(_)) { file =>\n    for {\n      data    <- decodeData(file)\n      grouped <- groupData(data)\n    } yield grouped\n  }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.code,{children:"ensuring"}),", brackets have compositional semantics, so if one bracket is nested inside another bracket, and the outer bracket acquires a resource, then the outer bracket's release will always be called, even if, for example, the inner bracket's release fails."]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["If you are comfortable with resource handling, then the next step is to learn about ",(0,s.jsx)(n.a,{href:"/1.0.18/overview/overview_basic_concurrency",children:"basic concurrency"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);