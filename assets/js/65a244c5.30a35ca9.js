"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[48497],{58015:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"zio-config/integrations","title":"Integrations","description":"Integration with other libraries","source":"@site/docs/zio-config/integrations.md","sourceDirName":"zio-config","slug":"/zio-config/integrations","permalink":"/zio-config/integrations","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/integrations.md","tags":[],"version":"current","frontMatter":{"id":"integrations","title":"Integrations"},"sidebar":"ecosystem-sidebar","previous":{"title":"Dive Into ZIO Config","permalink":"/zio-config/dive-into-zio-config"},"next":{"title":"Automatic Derivation of Config","permalink":"/zio-config/automatic-derivation-of-config"}}');var o=i(74848),a=i(28453);const r={id:"integrations",title:"Integrations"},s=void 0,c={},d=[{value:"Integration with other libraries",id:"integration-with-other-libraries",level:2},{value:"Enumeratum",id:"enumeratum",level:4},{value:"Scalaz/Cats",id:"scalazcats",level:4}];function l(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"integration-with-other-libraries",children:"Integration with other libraries"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"zio-config"})," is also integrated with ",(0,o.jsx)(n.code,{children:"enumeratum"}),", ",(0,o.jsx)(n.code,{children:"cats"}),", ",(0,o.jsx)(n.code,{children:"scalaz"}),", ",(0,o.jsx)(n.code,{children:"aws-sdk"}),", ",(0,o.jsx)(n.code,{children:"zio-aws"}),", ",(0,o.jsx)(n.code,{children:"refined"})," etc.\nNote that only a few of them is documented here. ",(0,o.jsx)(n.code,{children:"refined"})," is already discussed under ",(0,o.jsx)(n.code,{children:"automatic-validations"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"enumeratum",children:"Enumeratum"}),"\n",(0,o.jsxs)(n.p,{children:["Many applications rely on this beautiful library ",(0,o.jsx)(n.a,{href:"https://github.com/lloydmeta/enumeratum",children:"https://github.com/lloydmeta/enumeratum"}),".\nZio-config can directly load it from enumeratum's ",(0,o.jsx)(n.code,{children:"enum"})," without relying on auto-derivation (and rely on Enumeratum's macro indirectly witha additional features)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'\n sealed trait Greeting extends EnumEntry\n\n  object Greeting extends Enum[Greeting] {\n\n    val values = findValues\n\n    case object Hello extends Greeting\n    case object GoodBye extends Greeting\n    case object Hi extends Greeting\n    case object Bye extends Greeting\n\n  }\n\n\n  // Load using zio-config\n  import zio.config.enumeratum._\n\n  val mapProvider =\n    ConfigProvider.fromMap(Map(\n      "greeting" -> "Hello"\n    ))\n\n  val config =\n    `enum`(Greeting).nested("greeting")\n\n  val pgm: IO[Error, Greeting] =\n    mapProvider.load(config)\n    \n  // Returns Hello  \n    \n\n'})}),"\n",(0,o.jsx)(n.h4,{id:"scalazcats",children:"Scalaz/Cats"}),"\n",(0,o.jsxs)(n.p,{children:["Highly polymorphic code end up relying on\ntypeclasses, and zio-config provides instances for ",(0,o.jsx)(n.code,{children:"Config"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This is a simple example to showcase the capability."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'\n  import _root_.scalaz._, Scalaz._\n  import zio.config.scalaz.instances._\n\n // Across the application, there can be various effect types, but there is only one addition!\n def add[F[_]: Applicative, A: Monoid](primary: F[A], secondary: F[A]): F[A] =\n    primary.<*>(Applicative[F].map(secondary)(secondary => (primary: A) => primary.mappend(secondary)))\n    \n // Now even `Config` can take part in this addition given the values of config parameters should be Monoid,\n // instead of using native `zip` and separately implementing addition for various types\n val configResult = add(Config.int("marks1"), Config.int("marks2")))\n \n ConfigProvider.fromMap(Map("marks1" -> "10", "marks2" -> "20")).load(configResult) // returns 30\n \n\n'})}),"\n",(0,o.jsx)(n.p,{children:"In addition to it, it can also load cats/scalaz specific datatypes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'\n  import zio.config.scalaz._\n  import _root_.scalaz.Maybe\n\n  \n  val config: Config[Maybe[Int]] = maybe(Config.int("age"))\n  \n'})}),"\n",(0,o.jsxs)(n.p,{children:["Have a look at modules of zio-config to know about other integrations such as ",(0,o.jsx)(n.code,{children:"aws"}),", ",(0,o.jsx)(n.code,{children:"zio-aws"})," etc"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(96540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);