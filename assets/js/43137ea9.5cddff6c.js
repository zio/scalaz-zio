"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[28282],{94193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"reference/test/aspects/non-deterministic-test-data","title":"Non-deterministic Test Data","description":"The random process of the TestRandom is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers.","source":"@site/docs/reference/test/aspects/non-deterministic-test-data.md","sourceDirName":"reference/test/aspects","slug":"/reference/test/aspects/non-deterministic-test-data","permalink":"/reference/test/aspects/non-deterministic-test-data","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/non-deterministic-test-data.md","tags":[],"version":"current","frontMatter":{"id":"non-deterministic-test-data","title":"Non-deterministic Test Data"},"sidebar":"reference-sidebar","previous":{"title":"Ignoring Tests","permalink":"/reference/test/aspects/ignoring-tests"},"next":{"title":"Passing Failed Tests","permalink":"/reference/test/aspects/passing-failed-tests"}}');var i=n(74848),r=n(28453);const a={id:"non-deterministic-test-data",title:"Non-deterministic Test Data"},o=void 0,c={},d=[];function p(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The random process of the ",(0,i.jsx)(t.code,{children:"TestRandom"})," is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers."]}),"\n",(0,i.jsxs)(t.p,{children:["By default, the initial seed of the ",(0,i.jsx)(t.code,{children:"TestRandom"})," is fixed. So repeating a generator more and more results in the same sequence:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\ntest("pseudo-random number generator with fixed initial seed") {\n  check(Gen.int(0, 100)) { n =>\n    ZIO.attempt(n).debug.map(_ => assertTrue(true))\n  }\n} @@\n  samples(5) @@\n  after(Console.printLine("----").orDie) @@\n  repeat(Schedule.recurs(1))\n'})}),"\n",(0,i.jsx)(t.p,{children:"Regardless of how many times we repeat this test, the output would be the same:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"99\n51\n81\n48\n51\n----\n99\n51\n81\n48\n51\n----\n+ pseudo-random numbers with fixed initial seed - repeated: 2\nRan 1 test in 522 ms: 1 succeeded, 0 ignored, 0 failed\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"nondeterministic"})," test aspect, will change the seed of the pseudo-random generator before each test repetition:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import zio._\nimport zio.test.{ test, _ }\nimport zio.test.TestAspect._\n\ntest("pseudo-random number generator with random initial seed on each repetition") {\n  check(Gen.int(0, 100)) { n =>\n    ZIO.attempt(n).debug.map(_ => assertTrue(true))\n  }\n} @@\n  nondeterministic @@\n  samples(5) @@\n  after(Console.printLine("----").orDie) @@\n  repeat(Schedule.recurs(1))\n'})}),"\n",(0,i.jsx)(t.p,{children:"Here is a sample output, which we have different sequences of numbers on each run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"73\n9\n17\n33\n10\n----\n42\n85\n38\n2\n73\n----\n+ pseudo-random number generator with random initial seed on each repetition - repeated: 2\nRan 1 test in 733 ms: 1 succeeded, 0 ignored, 0 failed\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);