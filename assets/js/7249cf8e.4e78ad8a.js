"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[8323],{19366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ecosystem/community/tranzactio","title":"TranzactIO","description":"TranzactIO is a ZIO wrapper for some Scala database access libraries, currently for Doobie and Anorm.","source":"@site/docs/ecosystem/community/tranzactio.md","sourceDirName":"ecosystem/community","slug":"/ecosystem/community/tranzactio","permalink":"/ecosystem/community/tranzactio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/tranzactio.md","tags":[],"version":"current","frontMatter":{"id":"tranzactio","title":"TranzactIO"},"sidebar":"ecosystem-sidebar","previous":{"title":"Tofu ZIO 2 Logging","permalink":"/ecosystem/community/tofu-zio2-logging"},"next":{"title":"ZIO AMQP","permalink":"/ecosystem/community/zio-amqp"}}');var a=t(74848),i=t(28453);const r={id:"tranzactio",title:"TranzactIO"},s=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/gaelrenoux/tranzactio",children:"TranzactIO"})," is a ZIO wrapper for some Scala database access libraries, currently for ",(0,a.jsx)(n.a,{href:"https://github.com/tpolecat/doobie",children:"Doobie"})," and ",(0,a.jsx)(n.a,{href:"https://github.com/playframework/anorm",children:"Anorm"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["Using functional effect database access libraries like ",(0,a.jsx)(n.em,{children:"Doobie"})," enforces us to use their specialized monads like ",(0,a.jsx)(n.code,{children:"ConnectionIO"})," for ",(0,a.jsx)(n.em,{children:"Doobie"}),". The goal of ",(0,a.jsx)(n.em,{children:"TranzactIO"})," is to provide seamless integration with these libraries to help us to stay in the ",(0,a.jsx)(n.code,{children:"ZIO"})," world."]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["In order to use this library, we need to add the following line in our ",(0,a.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.gaelrenoux" %% "tranzactio" % "2.1.0"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In addition, we need to declare the database access library we are using. For example, for the next example we need to add following dependencies for ",(0,a.jsx)(n.em,{children:"Doobie"})," integration:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "org.tpolecat" %% "doobie-core" % "0.13.4"\nlibraryDependencies += "org.tpolecat" %% "doobie-h2"   % "0.13.4"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Let's try an example of simple ",(0,a.jsx)(n.em,{children:"Doobie"})," program:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import doobie.implicits._\nimport io.github.gaelrenoux.tranzactio.doobie\nimport io.github.gaelrenoux.tranzactio.doobie.{Connection, Database, TranzactIO, tzio}\nimport org.h2.jdbcx.JdbcDataSource\nimport zio.blocking.Blocking\nimport zio.clock.Clock\nimport zio.console.{Console, putStrLn}\nimport zio.{ExitCode, Has, URIO, ZIO, ZLayer, blocking}\n\nimport javax.sql.DataSource\n\nobject TranzactIOExample extends zio.App {\n\n  val query: ZIO[Connection with Console, Throwable, Unit] = for {\n    _ <- PersonQuery.setup\n    _ <- PersonQuery.insert(Person("William", "Stewart"))\n    _ <- PersonQuery.insert(Person("Michelle", "Streeter"))\n    _ <- PersonQuery.insert(Person("Johnathon", "Martinez"))\n    users <- PersonQuery.list\n    _ <- putStrLn(users.toString)\n  } yield ()\n\n  val myApp: ZIO[zio.ZEnv, Throwable, Unit] =\n    Database.transactionOrWidenR(query).provideCustom(services.database)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n\ncase class Person(firstName: String, lastName: String)\n\nobject PersonQuery {\n  def list: TranzactIO[List[Person]] = tzio {\n    sql"""SELECT first_name, last_name FROM person""".query[Person].to[List]\n  }\n\n  def setup: TranzactIO[Unit] = tzio {\n    sql"""\n        CREATE TABLE person (\n          first_name VARCHAR NOT NULL,\n          last_name VARCHAR NOT NULL\n        )\n        """.update.run.map(_ => ())\n  }\n\n  def insert(p: Person): TranzactIO[Unit] = tzio {\n    sql"""INSERT INTO person (first_name, last_name) VALUES (${p.firstName}, ${p.lastName})""".update.run\n      .map(_ => ())\n  }\n}\n\nobject services {\n  val datasource: ZLayer[Blocking, Throwable, Has[DataSource]] =\n    ZLayer.fromEffect(\n      blocking.effectBlocking {\n        val ds = new JdbcDataSource\n        ds.setURL(s"jdbc:h2:mem:mydb;DB_CLOSE_DELAY=10")\n        ds.setUser("sa")\n        ds.setPassword("sa")\n        ds\n      }\n    )\n\n  val database: ZLayer[Any, Throwable, doobie.Database.Database] =\n    (Blocking.live >>> datasource ++ Blocking.live ++ Clock.live) >>> Database.fromDatasource\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);