"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[78936],{53445:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"zio-schema/derivations/optics-derivation","title":"Optics Derivation","description":"Optics are a way of accessing and manipulating data in a functional way. They can be used to get, set, and update values in data structures, as well as to traverse and explore data.","source":"@site/docs/zio-schema/derivations/optics-derivation.md","sourceDirName":"zio-schema/derivations","slug":"/zio-schema/derivations/optics-derivation","permalink":"/zio-schema/derivations/optics-derivation","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/optics-derivation.md","tags":[],"version":"current","frontMatter":{"id":"optics-derivation","title":"Optics Derivation"},"sidebar":"ecosystem-sidebar","previous":{"title":"Ordering Derivation","permalink":"/zio-schema/derivations/ordering-derivation"},"next":{"title":"ZIO Test Gen Derivation","permalink":"/zio-schema/derivations/zio-test-gen-derivation"}}');var i=s(74848),t=s(28453);const r={id:"optics-derivation",title:"Optics Derivation"},c=void 0,o={},d=[{value:"Manual Derivation of Optics",id:"manual-derivation-of-optics",level:2},{value:"Automatic Derivation of Optics",id:"automatic-derivation-of-optics",level:2},{value:"Installation",id:"installation",level:3},{value:"Examples",id:"examples",level:3},{value:"Lens",id:"lens",level:4},{value:"Prism",id:"prism",level:4},{value:"Traversal",id:"traversal",level:4}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Optics are a way of accessing and manipulating data in a functional way. They can be used to get, set, and update values in data structures, as well as to traverse and explore data."}),"\n",(0,i.jsx)(n.h2,{id:"manual-derivation-of-optics",children:"Manual Derivation of Optics"}),"\n",(0,i.jsxs)(n.p,{children:["Before we dive into auto-derivation of optics and how we can derive optics from a ZIO Schema, let's take a look at the pure optics and how we can create them manually using ",(0,i.jsx)(n.a,{href:"https://zio.dev/zio-optics",children:"ZIO Optics"})," library."]}),"\n",(0,i.jsxs)(n.p,{children:["First, we should add ",(0,i.jsx)(n.code,{children:"zio-optics"})," to our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-optics" % "<version>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now let's define a simple data type called ",(0,i.jsx)(n.code,{children:"User"})," and create two optics for its ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"age"})," fields:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio.optics._\n\ncase class User(name: String, age: Int)\n\nval nameLens = Lens[User, String](\n  user => Right(user.name),\n  name => user => Right(user.copy(name = name))\n)\n\nval ageLens = Lens[User, Int](\n  user => Right(user.age),\n  age => user => Right(user.copy(age = age))\n)\n\nval ageAndNameLens = nameLens.zip(ageLens)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can use these optics to get, set, and update values in the ",(0,i.jsx)(n.code,{children:"Person"})," data structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\n\nobject Main extends ZIOAppDefault {\n  def run =\n    for {\n      _ <- ZIO.debug("Pure Optics")\n      user = User("John", 34)\n\n      updatedUser1 <- ZIO.fromEither(nameLens.setOptic("Jane")(user))\n      _ <- ZIO.debug(s"Name of user updated: $updatedUser1")\n\n      updatedUser2 <- ZIO.fromEither(ageLens.setOptic(32)(user))\n      _ <- ZIO.debug(s"Age of user updated: $updatedUser2")\n\n      updatedUser3 <- ZIO.fromEither(\n        ageAndNameLens.set(("Jane", 32))(User("John", 34))\n      )\n      _ <- ZIO.debug(s"Name and age of the user updated: $updatedUser3")\n    } yield ()\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"automatic-derivation-of-optics",children:"Automatic Derivation of Optics"}),"\n",(0,i.jsxs)(n.p,{children:["ZIO Schema has a module called ",(0,i.jsx)(n.code,{children:"zio-schema-optics"})," which provides functionalities to derive various optics from a ZIO Schema."]}),"\n",(0,i.jsxs)(n.p,{children:["By having a ",(0,i.jsx)(n.code,{children:"Schema[A]"}),", we can derive optics automatically from a schema. This means that we don't have to write the optics manually, but instead, we can use the ",(0,i.jsx)(n.code,{children:"Schema#makeAccessors"})," method which will derive the optics for us:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait Schema[A] {\n  def makeAccessors(b: AccessorBuilder): Accessors[b.Lens, b.Prism, b.Traversal]\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It takes an ",(0,i.jsx)(n.code,{children:"AccessorBuilder"})," which is an interface of the creation of optics:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"trait AccessorBuilder {\n  type Lens[F, S, A]\n  type Prism[F, S, A]\n  type Traversal[S, A]\n\n  def makeLens[F, S, A](\n    product: Schema.Record[S],\n    term: Schema.Field[S, A]\n  ): Lens[F, S, A]\n\n  def makePrism[F, S, A](\n    sum: Schema.Enum[S],\n    term: Schema.Case[S, A]\n  ): Prism[F, S, A]\n\n  def makeTraversal[S, A](\n    collection: Schema.Collection[S, A],\n    element: Schema[A]\n  ): Traversal[S, A]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"It has three methods for creating three types of optics:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lens"})," is an optic used to get and update values in a product type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prism"})," is an optic used to get and update values in a sum type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Traversal"})," is an optic used to get and update values in a collection type."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's take a look at how we can derive optics using ZIO Schema Optics."}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["To be able to derive optics from a ZIO Schema, we need to add the following line to our ",(0,i.jsx)(n.code,{children:"build.sbt"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "dev.zio" %% "zio-schema-optics" % 1.5.0\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This package contains a ",(0,i.jsx)(n.code,{children:"ZioOpticsBuilder"})," which is an implementation of the ",(0,i.jsx)(n.code,{children:"AccessorBuilder"})," interface based on ZIO Optics library."]}),"\n",(0,i.jsx)(n.p,{children:"Now we are ready to try any of the following examples:"}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h4,{id:"lens",children:"Lens"}),"\n",(0,i.jsxs)(n.p,{children:["Now we can derive the schema for our ",(0,i.jsx)(n.code,{children:"User"})," data type in its companion object, and then derive optics using ",(0,i.jsx)(n.code,{children:"Schema#makeAccessors"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import zio._\nimport zio.schema.DeriveSchema\nimport zio.schema.Schema.CaseClass2\nimport zio.schema.optics.ZioOpticsBuilder\n\ncase class User(name: String, age: Int)\n\nobject User {\n  implicit val schema: CaseClass2[String, Int, User] =\n    DeriveSchema.gen[User].asInstanceOf[CaseClass2[String, Int, User]]\n\n  val (nameLens, ageLens) = schema.makeAccessors(ZioOpticsBuilder)\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Based on the type of the schema, the ",(0,i.jsx)(n.code,{children:"makeAccessors"})," method will derive the proper optics for us."]}),"\n",(0,i.jsxs)(n.p,{children:["Now we can use these optics to update values in the ",(0,i.jsx)(n.code,{children:"User"})," data structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'object MainApp extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Auto-derivation of Optics")\n    user = User("John", 42)\n\n    updatedUser1 = User.nameLens.set("Jane")(user)\n    _ <- ZIO.debug(s"Name of user updated: $updatedUser1")\n\n    updatedUser2 = User.ageLens.set(32)(user)\n    _ <- ZIO.debug(s"Age of user updated: $updatedUser2")\n\n    nameAndAgeLens = User.nameLens.zip(User.ageLens)\n    updatedUser3   = nameAndAgeLens.set(("Jane", 32))(user)\n    _ <- ZIO.debug(s"Name and age of the user updated: $updatedUser3")\n  } yield ()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"Auto-derivation of Lens Optics:\nName of user updated: Right(User(Jane,42))\nAge of user updated: Right(User(John,32))\nName and age of the user updated: Right(User(Jane,32))\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prism",children:"Prism"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.schema.Schema._\n\nsealed trait Shape {\n  def area: Double\n}\n\ncase class Circle(radius: Double) extends Shape {\n  val area: Double = Math.PI * radius * radius\n}\n\ncase class Rectangle(width: Double, height: Double) extends Shape {\n  val area: Double = width * height\n}\n\nobject Shape {\n  implicit val schema: Enum2[Circle, Rectangle, Shape] =\n    DeriveSchema.gen[Shape].asInstanceOf[Enum2[Circle, Rectangle, Shape]]\n\n  val (circlePrism, rectanglePrism) =\n    schema.makeAccessors(ZioOpticsBuilder)\n}\n\nobject MainApp extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Auto-derivation of Prism Optics")\n    shape = Circle(1.2)\n    _ <- ZIO.debug(s"Original shape: $shape")\n    updatedShape <- ZIO.fromEither(\n      Shape.rectanglePrism.setOptic(Rectangle(2.0, 3.0))(shape)\n    )\n    _ <- ZIO.debug(s"Updated shape: $updatedShape")\n  } yield ()\n\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"Auto-derivation of Prism Optics:\nOriginal shape: Circle(1.2)\nUpdated shape: Rectangle(2.0,3.0)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"traversal",children:"Traversal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import zio._\nimport zio.optics._\nimport zio.schema.Schema._\nimport zio.schema._\n\nobject IntList {\n  implicit val listschema: Schema.Sequence[List[Int], Int, String] =\n    Sequence[List[Int], Int, String](\n      elementSchema = Schema[Int],\n      fromChunk = _.toList,\n      toChunk = i => Chunk.fromIterable(i),\n      annotations = Chunk.empty,\n      identity = "List"\n    )\n\n  val traversal: ZTraversal[List[Int], List[Int], Int, Int] =\n    listschema.makeAccessors(ZioOpticsBuilder)\n}\n\nobject MainApp extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Auto-derivation of Traversal Optic:")\n    list = List(1, 2, 3, 4, 5)\n    _           <- ZIO.debug(s"Original list: $list")\n    updatedList <- ZIO.fromEither(IntList.traversal.set(Chunk(1, 5, 7))(list))\n    _           <- ZIO.debug(s"Updated list: $updatedList")\n  } yield ()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"Auto-derivation of Traversal Optic:\nOriginal list: List(1, 2, 3, 4, 5)\nUpdated list: List(1, 5, 7, 4, 5)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var a=s(96540);const i={},t=a.createContext(i);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);