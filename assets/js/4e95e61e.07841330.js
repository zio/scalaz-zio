"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71791],{99990:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"reference/test/aspects/environment-specific-tests","title":"Environment-specific Tests","description":"OS-specific Tests","source":"@site/docs/reference/test/aspects/environment-specific-tests.md","sourceDirName":"reference/test/aspects","slug":"/reference/test/aspects/environment-specific-tests","permalink":"/reference/test/aspects/environment-specific-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/environment-specific-tests.md","tags":[],"version":"current","frontMatter":{"id":"environment-specific-tests","title":"Environment-specific Tests"},"sidebar":"reference-sidebar","previous":{"title":"Debugging and Diagnostics","permalink":"/reference/test/aspects/debugging-and-diagnostics"},"next":{"title":"Execution Strategy","permalink":"/reference/test/aspects/execution-strategy"}}');var c=t(74848),i=t(28453);const o={id:"environment-specific-tests",title:"Environment-specific Tests"},r=void 0,a={},p=[{value:"OS-specific Tests",id:"os-specific-tests",level:2},{value:"Platform-specific Tests",id:"platform-specific-tests",level:2},{value:"Version-specific Tests",id:"version-specific-tests",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.h2,{id:"os-specific-tests",children:"OS-specific Tests"}),"\n",(0,c.jsxs)(s.p,{children:["To run a test on a specific operating system, we can use one of the ",(0,c.jsx)(s.code,{children:"unix"}),", ",(0,c.jsx)(s.code,{children:"mac"})," or ",(0,c.jsx)(s.code,{children:"windows"})," test aspects or a combination of them. Additionally, we can use the ",(0,c.jsx)(s.code,{children:"os"})," test aspect directly:"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\n\nsuite("os")(\n  test("unix test") {\n    ZIO.attempt("running on unix/linux os")\n      .debug\n      .map(_ => assertTrue(true))\n  } @@ TestAspect.unix,\n  test("macos test") {\n    ZIO.attempt("running on macos")\n      .debug\n      .map(_ => assertTrue(true))\n  } @@ TestAspect.os(_.isMac)\n)\n'})}),"\n",(0,c.jsx)(s.h2,{id:"platform-specific-tests",children:"Platform-specific Tests"}),"\n",(0,c.jsx)(s.p,{children:"Sometimes we have platform-specific tests. Instead of creating separate sources for each platform to test those tests, we can use a proper aspect to run those tests on a specific platform."}),"\n",(0,c.jsxs)(s.p,{children:["To run a test on a specific platform, we can use one of the ",(0,c.jsx)(s.code,{children:"jvm"}),", ",(0,c.jsx)(s.code,{children:"js"}),", or ",(0,c.jsx)(s.code,{children:"native"})," test aspects or a combination of them. If we want to run our test only on one of these platforms, we can use one of the ",(0,c.jsx)(s.code,{children:"jvmOnly"}),", ",(0,c.jsx)(s.code,{children:"jsOnly"}),", or ",(0,c.jsx)(s.code,{children:"nativeOnly"})," test aspects. To exclude one of these platforms, we can use the ",(0,c.jsx)(s.code,{children:"exceptJs"}),", ",(0,c.jsx)(s.code,{children:"exceptJVM"}),", or ",(0,c.jsx)(s.code,{children:"exceptNative"})," test aspects:"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-scala",children:'import zio._\nimport zio.test.{test, _}\n\ntest("Java virtual machine name can be accessed") {\n  for {\n    vm <- live(System.property("java.vm.name"))\n  } yield\n    assertTrue(vm.get.contains("VM"))\n} @@ TestAspect.jvmOnly\n'})}),"\n",(0,c.jsx)(s.h2,{id:"version-specific-tests",children:"Version-specific Tests"}),"\n",(0,c.jsxs)(s.p,{children:["Various test aspects can be used to run tests for specific versions of Scala, including ",(0,c.jsx)(s.code,{children:"scala2"}),", ",(0,c.jsx)(s.code,{children:"scala212"}),", ",(0,c.jsx)(s.code,{children:"scala213"}),", and ",(0,c.jsx)(s.code,{children:"dotty"}),". As in the previous section, these test aspects have corresponding ",(0,c.jsx)(s.code,{children:"*only"})," and ",(0,c.jsx)(s.code,{children:"except*"})," versions."]})]})}function l(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>r});var n=t(96540);const c={},i=n.createContext(c);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);