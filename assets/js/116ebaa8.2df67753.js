"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[14734],{80003:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"zio-flow/zflow","title":"Defining flows","description":"Overview","source":"@site/docs/zio-flow/zflow.md","sourceDirName":"zio-flow","slug":"/zio-flow/zflow","permalink":"/zio-flow/zflow","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-flow/zflow.md","tags":[],"version":"current","frontMatter":{"id":"zflow","title":"Defining flows"},"sidebar":"ecosystem-sidebar","previous":{"title":"ZIO Flow","permalink":"/zio-flow/"},"next":{"title":"Remote","permalink":"/zio-flow/remote"}}');var o=l(74848),a=l(28453);const s={id:"zflow",title:"Defining flows"},t="Defining flows",r={},c=[{value:"Overview",id:"overview",level:2},{value:"Flow control",id:"flow-control",level:2},{value:"Logging",id:"logging",level:2},{value:"Variables",id:"variables",level:2},{value:"Iteration and recursion",id:"iteration-and-recursion",level:2},{value:"Fibers",id:"fibers",level:2},{value:"The external world",id:"the-external-world",level:2},{value:"Input",id:"input",level:3},{value:"Time",id:"time",level:3},{value:"Random",id:"random",level:3},{value:"Activities",id:"activities",level:3},{value:"Scheduling",id:"scheduling",level:2},{value:"Transactions",id:"transactions",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"defining-flows",children:"Defining flows"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow is based on defining executable workflows as values of the type ",(0,o.jsx)(n.code,{children:"ZFlow[R, E, A]"}),". This type is similar\nto ",(0,o.jsx)(n.code,{children:"ZIO[R, E, A]"})," in\nthat it represents a program as a value that can fail with the type ",(0,o.jsx)(n.code,{children:"E"})," or succeed with the type ",(0,o.jsx)(n.code,{children:"A"}),". The most important\ndifference is\nthat a ",(0,o.jsx)(n.code,{children:"ZFlow"})," value is ",(0,o.jsx)(n.em,{children:"serializable"}),", which means that it can be sent over the network for a remote ",(0,o.jsx)(n.em,{children:"executor"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["When working with ",(0,o.jsx)(n.code,{children:"ZFlow"})," programs, another core concept of ZIO Flow is ",(0,o.jsx)(n.em,{children:"remote values"}),".\nThere ",(0,o.jsx)(n.a,{href:"/zio-flow/remote",children:"is a separate section"})," about working\nwith remote values and remote functions. In this section we will focus on how to define flows and we can assume that\nremote values and functions\nwork similarly to regular Scala values and functions."]}),"\n",(0,o.jsx)(n.h2,{id:"flow-control",children:"Flow control"}),"\n",(0,o.jsxs)(n.p,{children:["The basic building blocks of defining a ",(0,o.jsx)(n.code,{children:"ZFlow"})," workflow are similar to ",(0,o.jsx)(n.code,{children:"ZIO"}),". We can use ",(0,o.jsx)(n.code,{children:"succeed"})," or ",(0,o.jsx)(n.code,{children:"fail"})," to create\na flow that finishes\nwith a result immediately:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import zio.{ZNothing, durationInt}\nimport zio.flow._\n\nval flow1 = ZFlow.succeed(100)\n// flow1: ZFlow[Any, ZNothing, Int] = Return(\n//   value = Literal(value = Primitive(value = 100, standardType = int))\n// )\nval flow2 = ZFlow.fail("Failed")\n// flow2: ZFlow[Any, String, ZNothing] = Fail(\n//   error = Literal(value = Primitive(value = "Failed", standardType = string))\n// )\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note that the above code does not run anything; it just defines workflows as serializable values of the type ",(0,o.jsx)(n.code,{children:"ZFlow"}),"\nthat can be later sent\nto an executor. In the future code examples we will not show the evaluated ",(0,o.jsx)(n.code,{children:"ZFlow"})," values as they can be very verbose."]}),"\n",(0,o.jsxs)(n.p,{children:["The usual ",(0,o.jsx)(n.code,{children:"map"}),", ",(0,o.jsx)(n.code,{children:"flatMap"}),", ",(0,o.jsx)(n.code,{children:"as"}),", and variants of ",(0,o.jsx)(n.code,{children:"zip"})," are all available on ",(0,o.jsx)(n.code,{children:"ZFlow"})," so we can use ",(0,o.jsx)(n.em,{children:"for comprehensions"}),"\nto define them:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow3 = \n    for {\n        a <- ZFlow.succeed(100)\n        b <- ZFlow.succeed(200)\n    } yield a + b\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To handle failures we have ",(0,o.jsx)(n.code,{children:"catchAll"}),", ",(0,o.jsx)(n.code,{children:"orElse"}),", ",(0,o.jsx)(n.code,{children:"foldFlow"})," and ",(0,o.jsx)(n.code,{children:"ensuring"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow4 = ZFlow.fail("Failed").ensuring(ZFlow.log("Flow 4 finished"))\nval flow5 = ZFlow.fail("Failed").orElse(ZFlow.succeed(1))\nval flow6 =\n  ZFlow\n    .fail("Failed")\n    .catchAll { (failure: Remote[String]) => \n      ZFlow.log(rs"Failed with $failure") *> ZFlow.succeed(1) \n    }\n'})}),"\n",(0,o.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,o.jsx)(n.p,{children:"The simplest way to interact with the outside world from a ZIO Flow program is to log a message:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow7 = ZFlow.log("Hello world")\n'})}),"\n",(0,o.jsx)(n.p,{children:"The logged message goes to the log output of the executor tagged by the running flow's identifier."}),"\n",(0,o.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,o.jsxs)(n.p,{children:["Persistent variables are named mutable slots belonging to a specific flow. They can be used to communicate between\ndifferent,\npossibly parallel steps of a flow, and to expose some observable flow state for debugging purposes. They are similar to\nthe ",(0,o.jsx)(n.code,{children:"Ref"})," data type in ",(0,o.jsx)(n.code,{children:"ZIO"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow8 = \n  for {\n    var1   <- ZFlow.newVar("var1", 100)\n    _      <- var1.update(_ + 1)\n    result <- var1.get\n  } yield result\n'})}),"\n",(0,o.jsx)(n.h2,{id:"iteration-and-recursion",children:"Iteration and recursion"}),"\n",(0,o.jsx)(n.p,{children:"There are multiple ways to repeat the execution of a flow."}),"\n",(0,o.jsxs)(n.p,{children:["The simplest one is ",(0,o.jsx)(n.code,{children:"replicate"})," that repeats the flow a given number of times:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow9 = ZFlow.log("hello").replicate(10)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A more complex way is using ",(0,o.jsx)(n.code,{children:"iterate"})," which allows you to define a ",(0,o.jsx)(n.em,{children:"step function"})," and a ",(0,o.jsx)(n.em,{children:"condition"}),"\nand repeats the flow until the condition becomes true. The initial value is the flow's result itself:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow10 = ZFlow.log("hello").as(1).iterate((x: Remote[Int]) => x + 1)(_ === 10) \n'})}),"\n",(0,o.jsxs)(n.p,{children:["The result of the flow will be the final value of the iterated variable, in this case ",(0,o.jsx)(n.code,{children:"10"}),". Note the use of the triple\nequal operator (",(0,o.jsx)(n.code,{children:"==="}),") instead of the usual double (",(0,o.jsx)(n.code,{children:"=="}),"). This is a limitation of the ",(0,o.jsx)(n.em,{children:"remote types"}),",\ncovered ",(0,o.jsx)(n.a,{href:"remote",children:"in the next section"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Another two operators on flows are ",(0,o.jsx)(n.code,{children:"recurseSimple"})," and ",(0,o.jsx)(n.code,{children:"recurse"}),". Why can't we just write recursive Scala functions as\nusual?\nLet's take the following example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"def recursiveFlow1(n: Remote[Int]): ZFlow[Any, Nothing, Int] =\n  ZFlow.ifThenElse(n === 10)(\n    ifTrue = ZFlow.succeed(10),\n    ifFalse = recursiveFlow1(n + 1).map(_ + 1)\n  )\nval flow11Bad = recursiveFlow1(0)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note that we cannot use Scala ",(0,o.jsx)(n.code,{children:"if () {} else {}"})," expressions because they are not serializable. The ",(0,o.jsx)(n.code,{children:"ifThenElse"})," method\ndefined on ",(0,o.jsx)(n.code,{children:"Remote[Boolean]"}),"\nis an alternative of that, explained ",(0,o.jsx)(n.a,{href:"remote",children:"in the next section"}),".\nEven though the above code compiles, it is not serializable! ZIO Flow has no way to detect that the call\nto ",(0,o.jsx)(n.code,{children:"recursiveFlow1"})," is a recursion point\nand it would end up in a stack overflow."]}),"\n",(0,o.jsxs)(n.p,{children:["The same example can be safely implemented by using the ",(0,o.jsx)(n.code,{children:"recurseSimple"})," operator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow11Good = \n  ZFlow.recurseSimple[Any, ZNothing, Int](0) { case (value, rec) =>\n    ZFlow.ifThenElse(value === 10)(\n      ifTrue = ZFlow.succeed(value),\n      ifFalse = rec(value + 1)\n    )\n  }\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"recurse"})," is a slightly more complicated variant that allows the recursion body to have a different result type than the\ninitial value.\nThis usually requires specifying some type parameters by hand, so in simple cases ",(0,o.jsx)(n.code,{children:"recurseSimple"})," leads to cleaner code."]}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow also has ",(0,o.jsx)(n.code,{children:"foreach"})," and ",(0,o.jsx)(n.code,{children:"foreachPar"})," to execute a flow for each element of a list:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow12 = ZFlow.foreach(List(1, 2, 3)) { x => ZFlow.log(rs"${x.toString}") }\nval flow13 = ZFlow.foreachPar(List(1, 2, 3)) { x => ZFlow.log(rs"${x.toString}") }\n'})}),"\n",(0,o.jsx)(n.h2,{id:"fibers",children:"Fibers"}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow programs can fork ",(0,o.jsx)(n.em,{children:"fibers"})," for parallel execution, similar to how ",(0,o.jsx)(n.code,{children:"ZIO"})," programs does it. The ",(0,o.jsx)(n.code,{children:"fork"})," operator\nreturns\na value of ",(0,o.jsx)(n.code,{children:"ExecutingFlow[E, A]"})," which can be used to await or interrupt the execution of the child fiber."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow14 =\n  for {\n    fiber1 <- ZFlow.sleep(5.minutes).fork\n    fiber2 <- ZFlow.sleep(1.hour).fork\n    _      <- fiber2.interrupt\n    _      <- fiber2.await\n  } yield ()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It is often useful to ",(0,o.jsx)(n.em,{children:"timeout"})," after a given duration, for example when waiting for a fiber to finish. This can be done\nusing the ",(0,o.jsx)(n.code,{children:"timeout"})," operator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow15 = ZFlow.sleep(1.hour).timeout(10.seconds)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"the-external-world",children:"The external world"}),"\n",(0,o.jsx)(n.p,{children:"There are other ways for ZIO Flow programs to communicate with the external world than just logging messages. The main\ncategories are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Getting an input for the execution of the flow"}),"\n",(0,o.jsx)(n.li,{children:"Accessing some built-in services such as time and random generator"}),"\n",(0,o.jsx)(n.li,{children:"Accessing external services"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"input",children:"Input"}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow programs has a third type parameter, ",(0,o.jsx)(n.code,{children:"R"}),", which was not used in the above examples. This represents the ",(0,o.jsx)(n.em,{children:"input"}),"\nof the flow. When sending\na flow to an executor, if the R type is not ",(0,o.jsx)(n.code,{children:"Any"}),", you also have to provide an input value of type ",(0,o.jsx)(n.code,{children:"R"})," as a ",(0,o.jsx)(n.em,{children:"parameter\nof the execution"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To access this value from the flow, we can use the ",(0,o.jsx)(n.code,{children:"input"})," operator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow16 = ZFlow.input[Int]\n// flow16: ZFlow[Int, ZNothing, Int] = Input()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note that the result type is now ",(0,o.jsx)(n.code,{children:"ZFlow[Int, ZNothing, Int]"}),". The flow will ",(0,o.jsx)(n.em,{children:"read the input"}),", and use it as its result."]}),"\n",(0,o.jsxs)(n.p,{children:["When composing flows, you may want to eliminate the input requirement of a sub-flow. This can be done using\nthe ",(0,o.jsx)(n.code,{children:"provide"})," operator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow17 = ZFlow.input[Int].provide(100)\n// flow17: ZFlow[Any, ZNothing, Int] = Provide(\n//   value = Literal(value = Primitive(value = 100, standardType = int)),\n//   flow = Input()\n// )\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The result type is now ",(0,o.jsx)(n.code,{children:"ZFlow[Any, ZNothing, Int]"}),". This flow has no input requirement, and will always return ",(0,o.jsx)(n.code,{children:"100"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"time",children:"Time"}),"\n",(0,o.jsx)(n.p,{children:"Getting the current time is an important operation for ZIO Flow workflows because it allows time based schedules,\ngenerating timestamps or expiration times, etc."}),"\n",(0,o.jsxs)(n.p,{children:["To get the current time as a remote value of ",(0,o.jsx)(n.code,{children:"Instant"}),", use:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow18 = ZFlow.now\n"})}),"\n",(0,o.jsx)(n.h3,{id:"random",children:"Random"}),"\n",(0,o.jsxs)(n.p,{children:["The flow may need to generate random values like random numbers, UUIDs etc. The ",(0,o.jsx)(n.code,{children:"ZFlow"})," type has two random related\noperators:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow19 = ZFlow.random.map(double => rs"Random double: ${double.toString}")\nval flow20 = ZFlow.randomUUID.map(uuid => rs"Random UUID: ${uuid.toString}")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["There are higher level random functions exposed on ",(0,o.jsx)(n.code,{children:"zio.flow.Random"}),", reflecting the ZIO ",(0,o.jsx)(n.code,{children:"Random"})," service's\nfunctionalities:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow21 = Random.nextIntBetween(10, 100)\nval flow22 = Random.nextString(16)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"activities",children:"Activities"}),"\n",(0,o.jsxs)(n.p,{children:["The primary way to communicate with the external world is by using ",(0,o.jsx)(n.em,{children:"activities"}),". An activity is defined by the\ntype ",(0,o.jsx)(n.code,{children:"Activity"})," and\nit is a description of how to call an external service and how it should behave when it is used in ",(0,o.jsx)(n.em,{children:"transactions"}),".\nThe ",(0,o.jsx)(n.a,{href:"/zio-flow/activities",children:"activities"}),"\nsection explains in detail how to define and use activities."]}),"\n",(0,o.jsx)(n.h2,{id:"scheduling",children:"Scheduling"}),"\n",(0,o.jsx)(n.p,{children:"We have seen that ZIO Flow programs can access the current time, and ways to repeat the execution of a part of the flow.\nOften we want to\neither delay the execution of something or repeat it at a given interval."}),"\n",(0,o.jsxs)(n.p,{children:["The two most simple operators are ",(0,o.jsx)(n.code,{children:"sleep"})," and ",(0,o.jsx)(n.code,{children:"waitTill"}),". Sleep will delay the execution of the flow for a given\nduration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val flow23 = ZFlow.sleep(10.seconds)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"waitTill"})," operator will delay the execution of the flow until a given instant:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow24 = ZFlow.waitTill(Instant.parse("2022-12-12T10:00:00Z"))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow also defines a data type for describing more complex schedules. This type is ",(0,o.jsx)(n.code,{children:"ZFlowSchedule"})," and it can be used\nas a parameter to\nthe ",(0,o.jsx)(n.code,{children:"schedule"})," and ",(0,o.jsx)(n.code,{children:"repeat"})," opeators on ",(0,o.jsx)(n.code,{children:"ZFlow"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"schedule"})," will execute the flow once, according to the given schedule"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"repeat"})," will execute the flow immeditely and then repeat it according to the given schedule"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The following example logs a message every second:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow25 = ZFlow.log("hello").repeat(ZFlowSchedule.fixed(1.second))\n'})}),"\n",(0,o.jsx)(n.p,{children:"Other than fixed there are some other schedule contructors for defining hourly, daily or monthly schedules:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow26 = ZFlow.log("hello").repeat(ZFlowSchedule.everyHourAt(11, 0))\nval flow27 = ZFlow.log("hello").repeat(ZFlowSchedule.everyDayAt(15, 30, 0))\nval flow28 = ZFlow.log("hello").repeat(ZFlowSchedule.everyMonthAt(1, 12, 0, 0))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["It is possible to define more complex schedules by using the ",(0,o.jsx)(n.code,{children:"or"})," (or ",(0,o.jsx)(n.code,{children:"|"}),") operator. The following example will log a\nmessage every hour twice:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow29 = ZFlow.log("hello").repeat(\n  ZFlowSchedule.everyHourAt(11, 0) | ZFlowSchedule.everyHourAt(44, 30) \n)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To limit the number of repetions of a schedule, use ",(0,o.jsx)(n.code,{children:"maxCount"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow30 = ZFlow.log("hello").repeat(\n  ZFlowSchedule.fixed(1.second).maxCount(10)\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"transactions",children:"Transactions"}),"\n",(0,o.jsxs)(n.p,{children:["ZIO Flow programs can modify variables and perform ",(0,o.jsx)(n.em,{children:"activities"})," in a ",(0,o.jsx)(n.em,{children:"transactional way"}),". When transactions are used in\na single fiber, it guarantees that in case of failure all the undoable activities performed within the transactions are\nrolled back."]}),"\n",(0,o.jsxs)(n.p,{children:["To learn more about how activities can be rolled back ",(0,o.jsx)(n.a,{href:"activities",children:"check the activities page"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["When using transactions in parallel running ZFlow fibers, the transactions are also tracking the usage of remote variables.\nIf two transactional fibers are modifying the same variable, one of them will ",(0,o.jsx)(n.em,{children:"retry"})," to make sure the whole transaction remains\nconsistent."]}),"\n",(0,o.jsx)(n.p,{children:"The following simple example shows how the traditional problem of parallel modification of a mutable variable can be solved using ZIO Flow transactions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow31 =\n  for {\n    var1 <- ZFlow.newVar[Int]("var1", 10)\n    now  <- ZFlow.now\n    fib1 <- ZFlow.transaction { _ =>\n      for {\n        v1 <- var1.get\n        _ <- var1.set(v1 + 1)\n      } yield ()\n    }.fork\n    fib2 <- ZFlow.transaction { _ =>\n      for {\n        v1 <- var1.get\n        _ <- var1.set(v1 + 1)\n      } yield ()\n    }.fork\n    _  <- fib1.await\n    _  <- fib2.await\n    result <- var1.get\n  } yield result\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This will always return ",(0,o.jsx)(n.code,{children:"12"})," because in case of conflict one of the transactions will be retried."]}),"\n",(0,o.jsxs)(n.p,{children:["It is also possible to ",(0,o.jsx)(n.em,{children:"conditionally retry"})," a transaction. By passing a remote boolean expression, the transaction will\nevaluate the condition and in case it is ",(0,o.jsx)(n.code,{children:"false"})," it will undo everything the transaction did and retry it. It also ",(0,o.jsx)(n.em,{children:"suspends"}),"\nthe execution of the retried transactions until any of the variables used in the transaction up to the evaluation of the condition\nchanges. This way it avoids repeated evaluation and failure of the flow."]}),"\n",(0,o.jsx)(n.p,{children:"The following example will retry the transaction two times:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'val flow32 =\n  for {\n    variable <- ZFlow.newVar("var", 0)\n    fiber <- ZFlow.transaction { tx =>\n               for {\n                 value <- variable.get\n                 _     <- ZFlow.log("Transaction executed")\n                 _     <- tx.retryUntil(value === 2)\n               } yield value\n             }.fork\n    _      <- ZFlow.sleep(1.second)\n    _      <- variable.set(1)\n    _      <- ZFlow.sleep(1.second)\n    _      <- variable.set(2)\n    _      <- ZFlow.log("Waiting for the transaction fiber to stop")\n    result <- fiber.await\n  } yield result\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>t});var i=l(96540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);