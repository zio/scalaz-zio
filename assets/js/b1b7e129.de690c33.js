"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[15420],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var o=r(96540);const i={},n=o.createContext(i);function s(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(n.Provider,{value:t},e.children)}},72589:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"reference/core/zio/rio","title":"RIO","description":"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.","source":"@site/docs/reference/core/zio/rio.md","sourceDirName":"reference/core/zio","slug":"/reference/core/zio/rio","permalink":"/reference/core/zio/rio","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/reference/core/zio/rio.md","tags":[],"version":"current","frontMatter":{"id":"rio","title":"RIO"},"sidebar":"reference-sidebar","previous":{"title":"Task","permalink":"/reference/core/zio/task"},"next":{"title":"IO","permalink":"/reference/core/zio/io"}}');var i=r(74848),n=r(28453);const s={id:"rio",title:"RIO"},a=void 0,c={},d=[];function l(e){const t={admonition:"admonition",code:"code",em:"em",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"RIO[R, A]"})," is a type alias for ",(0,i.jsx)(t.code,{children:"ZIO[R, Throwable, A]"}),", which represents an effect that requires an ",(0,i.jsx)(t.code,{children:"R"}),", and may fail with a ",(0,i.jsx)(t.code,{children:"Throwable"})," value, or succeed with an ",(0,i.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["In Scala, the ",(0,i.jsx)(t.em,{children:"type alias"})," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design."]})}),"\n",(0,i.jsxs)(t.p,{children:["Let's see how ",(0,i.jsx)(t.code,{children:"RIO"})," is defined:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:"type RIO[-R, +A]  = ZIO[R, Throwable, A]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["So ",(0,i.jsx)(t.code,{children:"RIO"})," is equal to a ",(0,i.jsx)(t.code,{children:"ZIO"})," that requires ",(0,i.jsx)(t.code,{children:"R"}),", and whose error channel is ",(0,i.jsx)(t.code,{children:"Throwable"}),". It succeeds with ",(0,i.jsx)(t.code,{children:"A"}),"."]}),"\n",(0,i.jsxs)(t.admonition,{type:"note",children:[(0,i.jsx)(t.mdxAdmonitionTitle,{children:(0,i.jsx)(t.em,{children:"Principle of Least Power"})}),(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ZIO"})," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On the other hand, the type aliases are a way of specializing the ",(0,i.jsx)(t.code,{children:"ZIO"})," type for less powerful workflows."]}),(0,i.jsx)(t.p,{children:"Often, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the appropriate specialized type alias."}),(0,i.jsxs)(t.p,{children:["So there is no need to convert type aliases to the ",(0,i.jsx)(t.code,{children:"ZIO"})," data type, and whenever the ",(0,i.jsx)(t.code,{children:"ZIO"})," data type is required, we can use the most precise type alias to fit our workflow requirement."]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);