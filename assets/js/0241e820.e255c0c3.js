"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[68261],{87279:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>g,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"zio-telemetry/opentelemetry-zio-logging","title":"OpenTelemetry ZIO Logging","description":"zio-opentelemetry logging facilities are implemented around OpenTelemetry Logging.","source":"@site/docs/zio-telemetry/opentelemetry-zio-logging.md","sourceDirName":"zio-telemetry","slug":"/zio-telemetry/opentelemetry-zio-logging","permalink":"/zio-telemetry/opentelemetry-zio-logging","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentelemetry-zio-logging.md","tags":[],"version":"current","frontMatter":{"id":"opentelemetry-zio-logging","title":"OpenTelemetry ZIO Logging"},"sidebar":"ecosystem-sidebar","previous":{"title":"OpenTelemetry","permalink":"/zio-telemetry/opentelemetry"},"next":{"title":"OpenTelemetry Example","permalink":"/zio-telemetry/opentelemetry-example"}}');var t=n(74848),i=n(28453);const l={id:"opentelemetry-zio-logging",title:"OpenTelemetry ZIO Logging"},s=void 0,g={},a=[{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"Log formats",id:"log-formats",level:3}];function d(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"zio-opentelemetry"})," logging facilities are implemented around OpenTelemetry Logging."]}),"\n",(0,t.jsxs)(o.p,{children:["In order to use ",(0,t.jsx)(o.code,{children:"zio-opentelemetry"})," feature with ",(0,t.jsx)(o.code,{children:"zio-logging"})," you should use ",(0,t.jsx)(o.code,{children:"zio-opentelemetry-zio-logging"})," module."]}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"OpenTelemetry ZIO Logging"})," contains utilities for combining ZIO Opentelemetry with ZIO Logging"]}),"\n",(0,t.jsx)(o.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'"dev.zio" %% "zio-opentelemetry-zio-logging" % "<version>"\n'})}),"\n",(0,t.jsx)(o.h2,{id:"features",children:"Features"}),"\n",(0,t.jsx)(o.h3,{id:"log-formats",children:"Log formats"}),"\n",(0,t.jsxs)(o.p,{children:["This library implements ",(0,t.jsx)(o.a,{href:"https://zio.dev/zio-logging/formatting-log-records",children:"Log Format"})," for span information (",(0,t.jsx)(o.code,{children:"spanId"})," and ",(0,t.jsx)(o.code,{children:"traceId"}),").\nTo use them you need a ",(0,t.jsx)(o.code,{children:"LogFormats"})," service in the environment. For this, use the ",(0,t.jsx)(o.code,{children:"ZioLogging.logFormats"})," layer which in turn required a suitable ",(0,t.jsx)(o.code,{children:"ContextStorage"})," implementation."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'//> using scala "3.4.2"\n//> using dep dev.zio::zio:2.1.7\n//> using dep dev.zio::zio-opentelemetry:3.0.0-RC24\n//> using dep dev.zio::zio-opentelemetry-zio-logging:3.0.0-RC24\n//> using dep io.opentelemetry:opentelemetry-sdk:1.40.0\n//> using dep io.opentelemetry:opentelemetry-sdk-trace:1.40.0\n//> using dep io.opentelemetry:opentelemetry-exporter-logging-otlp:1.40.0\n//> using dep io.opentelemetry.semconv:opentelemetry-semconv:1.22.0-alpha\n\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingSpanExporter\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingLogRecordExporter\nimport io.opentelemetry.api.common.Attributes\nimport io.opentelemetry.sdk.trace.SdkTracerProvider\nimport io.opentelemetry.sdk.trace.`export`.SimpleSpanProcessor\nimport io.opentelemetry.sdk.logs.SdkLoggerProvider\nimport io.opentelemetry.sdk.logs.`export`.SimpleLogRecordProcessor\nimport io.opentelemetry.sdk.resources.Resource\nimport io.opentelemetry.semconv.ResourceAttributes\nimport io.opentelemetry.sdk.OpenTelemetrySdk\nimport io.opentelemetry.api\nimport zio.*\nimport zio.logging.console\nimport zio.logging.LogFormat._\nimport zio.telemetry.opentelemetry.tracing.Tracing\nimport zio.telemetry.opentelemetry.OpenTelemetry\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio.telemetry.opentelemetry.zio.logging.LogFormats\nimport zio.telemetry.opentelemetry.zio.logging.ZioLogging\n\nobject ZioLoggingApp extends ZIOAppDefault {\n\n  val instrumentationScopeName = "dev.zio.LoggingApp"\n  val resourceName             = "logging-app"\n\n  // Prints to stdout in OTLP Json format\n  val stdoutLoggerProvider: RIO[Scope, SdkLoggerProvider] =\n    for {\n      logRecordExporter  <- ZIO.fromAutoCloseable(ZIO.succeed(OtlpJsonLoggingLogRecordExporter.create()))\n      logRecordProcessor <- ZIO.fromAutoCloseable(ZIO.succeed(SimpleLogRecordProcessor.create(logRecordExporter)))\n      loggerProvider     <-\n        ZIO.fromAutoCloseable(\n          ZIO.succeed(\n            SdkLoggerProvider\n              .builder()\n              .setResource(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, resourceName)))\n              .addLogRecordProcessor(logRecordProcessor)\n              .build()\n          )\n        )\n    } yield loggerProvider\n\n  // Prints to stdout in OTLP Json format\n  val stdoutTracerProvider: RIO[Scope, SdkTracerProvider] =\n    for {\n      spanExporter   <- ZIO.fromAutoCloseable(ZIO.succeed(OtlpJsonLoggingSpanExporter.create()))\n      spanProcessor  <- ZIO.fromAutoCloseable(ZIO.succeed(SimpleSpanProcessor.create(spanExporter)))\n      tracerProvider <-\n        ZIO.fromAutoCloseable(\n          ZIO.succeed(\n            SdkTracerProvider\n              .builder()\n              .setResource(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, resourceName)))\n              .addSpanProcessor(spanProcessor)\n              .build()\n          )\n        )\n    } yield tracerProvider\n\n  val otelSdkLayer: TaskLayer[api.OpenTelemetry] =\n    OpenTelemetry.custom(\n      for {\n        tracerProvider <- stdoutTracerProvider\n        loggerProvider <- stdoutLoggerProvider\n        sdk            <- ZIO.fromAutoCloseable(\n                            ZIO.succeed(\n                              OpenTelemetrySdk\n                                .builder()\n                                .setTracerProvider(tracerProvider)\n                                .setLoggerProvider(loggerProvider)\n                                .build()\n                            )\n                          )\n      } yield sdk\n    )\n\n  // Setup zio-logging with spanId and traceId labels\n  val loggingLayer: URLayer[LogFormats, Unit] = ZLayer {\n    for {\n      logFormats     <- ZIO.service[LogFormats]\n      format          =\n        timestamp.fixed(32) |-|\n          level |-|\n          label("message", quoted(line)) |-|\n          logFormats.spanIdLabel |-|\n          logFormats.traceIdLabel\n      myConsoleLogger = console(format.highlight)\n    } yield Runtime.removeDefaultLoggers >>> myConsoleLogger\n  }.flatten\n\n  override def run =\n    ZIO\n      .serviceWithZIO[Tracing] { tracing =>\n        val logic = for {\n          // Read user input\n          message <- Console.readLine\n          // Print span and trace ids along with message\n          _       <- ZIO.logInfo(s"User message: $message")\n        } yield ()\n\n        // All log messages produced by `logic` will be correlated with a "root_span" automatically\n        logic @@ tracing.aspects.root("root_span")\n      }\n      .provide(\n        otelSdkLayer,\n        OpenTelemetry.logging(instrumentationScopeName),\n        OpenTelemetry.tracing(instrumentationScopeName),\n        OpenTelemetry.contextZIO,\n        ZioLogging.logFormats,\n        loggingLayer\n      )\n\n}\n'})})]})}function c(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>s});var r=n(96540);const t={},i=r.createContext(t);function l(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);