"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[93985],{64916:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"zio-logging/reconfigurable-logger","title":"Reconfigurable Logger","description":"ReconfigurableLogger is adding support for updating logger configuration in application runtime.","source":"@site/docs/zio-logging/reconfigurable-logger.md","sourceDirName":"zio-logging","slug":"/zio-logging/reconfigurable-logger","permalink":"/zio-logging/reconfigurable-logger","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/reconfigurable-logger.md","tags":[],"version":"current","frontMatter":{"id":"reconfigurable-logger","title":"Reconfigurable Logger"},"sidebar":"ecosystem-sidebar","previous":{"title":"File Logger","permalink":"/zio-logging/file-logger"},"next":{"title":"Java Platform/System Logger","permalink":"/zio-logging/jpl"}}');var r=n(74848),g=n(28453);const a={id:"reconfigurable-logger",title:"Reconfigurable Logger"},l=void 0,c={},t=[{value:"Examples",id:"examples",level:2},{value:"Console Logger With Re-configuration From Configuration File In Runtime",id:"console-logger-with-re-configuration-from-configuration-file-in-runtime",level:3},{value:"Console Logger With Configuration By Http APIs",id:"console-logger-with-configuration-by-http-apis",level:3}];function d(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,g.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"ReconfigurableLogger"})," is adding support for updating logger configuration in application runtime."]}),"\n",(0,r.jsxs)(o.p,{children:["logger layer with configuration from ",(0,r.jsx)(o.code,{children:"ConfigProvider"})," (example with ",(0,r.jsx)(o.a,{href:"/zio-logging/console-logger",children:"Console Logger)"}),"):"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-scala",children:"import zio.logging.{ consoleLogger, ConsoleLoggerConfig, ReconfigurableLogger }\nimport zio._\n\nval configProvider: ConfigProvider = ???\n\nval logger = Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> ReconfigurableLogger\n        .make[Any, Nothing, String, Any, ConsoleLoggerConfig](\n          ConsoleLoggerConfig.load().orDie, // loading current configuration\n          (config, _) => makeConsoleLogger(config), // make logger from loaded configuration\n          Schedule.fixed(5.second) // default is 10 seconds \n        )\n        .installUnscoped[Any]\n"})}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"ReconfigurableLogger"}),", based on given ",(0,r.jsx)(o.code,{children:"Schedule"})," and load configuration function, will recreate logger if configuration changed."]}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"NOTE:"})," consider if you need this feature in your application, as there may be some performance impacts (see ",(0,r.jsx)(o.a,{href:"https://github.com/zio/zio-logging/blob/master/benchmarks/src/main/scala/zio/logging/FilterBenchmarks.scala",children:"benchmarks"}),")."]}),"\n",(0,r.jsx)(o.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(o.p,{children:["You can find the source code ",(0,r.jsx)(o.a,{href:"https://github.com/zio/zio-logging/tree/master/examples",children:"here"})]}),"\n",(0,r.jsx)(o.h3,{id:"console-logger-with-re-configuration-from-configuration-file-in-runtime",children:"Console Logger With Re-configuration From Configuration File In Runtime"}),"\n",(0,r.jsx)(o.p,{children:"Example of application where logger configuration is updated at runtime when logger configuration file is changed."}),"\n",(0,r.jsx)(o.p,{children:"Configuration:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{children:'logger {\n  format = "%highlight{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %kv{trace_id} %kv{user_id} %cause}"\n  filter {\n    rootLevel = "INFO"\n    mappings {\n      "zio.logging.example" = "DEBUG"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(o.p,{children:"Application:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-scala",children:'package zio.logging.example\n\nimport com.typesafe.config.ConfigFactory\nimport zio.config.typesafe.TypesafeConfigProvider\nimport zio.logging.{ ConsoleLoggerConfig, LogAnnotation, ReconfigurableLogger, _ }\nimport zio.{ Config, ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject LoggerReconfigureApp extends ZIOAppDefault {\n\n  def configuredLogger(\n            loadConfig: => ZIO[Any, Config.Error, ConsoleLoggerConfig]\n    ): ZLayer[Any, Config.Error, Unit] =\n    ReconfigurableLogger\n            .make[Any, Config.Error, String, Any, ConsoleLoggerConfig](\n              loadConfig,\n              (config, _) => makeConsoleLogger(config),\n              Schedule.fixed(500.millis)\n            )\n            .installUnscoped\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> configuredLogger(\n      for {\n        config       <- ZIO.succeed(ConfigFactory.load("logger.conf"))\n        _            <- Console.printLine(config.getConfig("logger")).orDie\n        loggerConfig <- ConsoleLoggerConfig.load().withConfigProvider(TypesafeConfigProvider.fromTypesafeConfig(config))\n      } yield loggerConfig\n    )\n\n  def exec(): ZIO[Any, Nothing, Unit] =\n    for {\n      ok      <- Random.nextBoolean\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.logDebug("Start") @@ LogAnnotation.TraceId(traceId)\n      userIds <- ZIO.succeed(List.fill(2)(UUID.randomUUID().toString))\n      _       <- ZIO.foreachPar(userIds) { userId =>\n        {\n          ZIO.logDebug("Starting operation") *>\n                  ZIO.logInfo("OK operation").when(ok) *>\n                  ZIO.logError("Error operation").when(!ok) *>\n                  ZIO.logDebug("Stopping operation")\n        } @@ LogAnnotation.UserId(userId)\n      } @@ LogAnnotation.TraceId(traceId)\n      _       <- ZIO.logDebug("Done") @@ LogAnnotation.TraceId(traceId)\n    } yield ()\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _ <- exec().repeat(Schedule.fixed(500.millis))\n    } yield ExitCode.success\n\n}\n'})}),"\n",(0,r.jsxs)(o.p,{children:["When configuration for ",(0,r.jsx)(o.code,{children:"logger/filter/mappings/zio.logging.example"})," change from ",(0,r.jsx)(o.code,{children:"DEBUG"})," to ",(0,r.jsx)(o.code,{children:"WARN"}),":"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{children:'Config(SimpleConfigObject({"filter":{"mappings":{"zio.logging.example":"DEBUG"},"rootLevel":"INFO"},"format":"%highlight{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %kv{trace_id} %kv{user_id} %cause}"}))\n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-5] zio.logging.example.LoggerReconfigureApp:51 Start trace_id=87ead38c-8b42-43ea-9905-039d0263026d  \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-36] zio.logging.example.LoggerReconfigureApp:55 Starting operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=dfa05247-ec27-46f7-a4e0-bb86f2d501e9 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-37] zio.logging.example.LoggerReconfigureApp:55 Starting operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=19693c77-0896-4fae-a830-67d5fe370b05 \n2023-12-26T10:10:26+0100 ERROR   [zio-fiber-36] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=dfa05247-ec27-46f7-a4e0-bb86f2d501e9 \n2023-12-26T10:10:26+0100 ERROR   [zio-fiber-37] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=19693c77-0896-4fae-a830-67d5fe370b05 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-36] zio.logging.example.LoggerReconfigureApp:58 Stopping operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=dfa05247-ec27-46f7-a4e0-bb86f2d501e9 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-37] zio.logging.example.LoggerReconfigureApp:58 Stopping operation trace_id=87ead38c-8b42-43ea-9905-039d0263026d user_id=19693c77-0896-4fae-a830-67d5fe370b05 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-5] zio.logging.example.LoggerReconfigureApp:61 Done trace_id=87ead38c-8b42-43ea-9905-039d0263026d  \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-5] zio.logging.example.LoggerReconfigureApp:51 Start trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c  \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-39] zio.logging.example.LoggerReconfigureApp:55 Starting operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=a62a153f-6a91-491e-8c97-bab94186f0a2 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-38] zio.logging.example.LoggerReconfigureApp:55 Starting operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=8eeb6442-80a9-40e5-b97d-a12876702a65 \n2023-12-26T10:10:26+0100 ERROR   [zio-fiber-39] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=a62a153f-6a91-491e-8c97-bab94186f0a2 \n2023-12-26T10:10:26+0100 ERROR   [zio-fiber-38] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=8eeb6442-80a9-40e5-b97d-a12876702a65 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-39] zio.logging.example.LoggerReconfigureApp:58 Stopping operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=a62a153f-6a91-491e-8c97-bab94186f0a2 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-38] zio.logging.example.LoggerReconfigureApp:58 Stopping operation trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c user_id=8eeb6442-80a9-40e5-b97d-a12876702a65 \n2023-12-26T10:10:26+0100 DEBUG   [zio-fiber-5] zio.logging.example.LoggerReconfigureApp:61 Done trace_id=c6d4c770-8db1-4ea8-91eb-548c6a99a90c  \nConfig(SimpleConfigObject({"filter":{"mappings":{"zio.logging.example":"WARN"},"rootLevel":"INFO"},"format":"%highlight{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %kv{trace_id} %kv{user_id} %cause}"}))\n2023-12-26T10:10:27+0100 ERROR   [zio-fiber-40] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=e2d8bbb4-5ad0-4952-b035-03da7689ab56 user_id=0f6452da-3f7e-40ff-b8b4-6b4c731903fb \n2023-12-26T10:10:27+0100 ERROR   [zio-fiber-41] zio.logging.example.LoggerReconfigureApp:57 Error operation trace_id=e2d8bbb4-5ad0-4952-b035-03da7689ab56 user_id=c4a86b38-90d7-4bb6-9f49-73bc5701e1ef  \n'})}),"\n",(0,r.jsx)(o.h3,{id:"console-logger-with-configuration-by-http-apis",children:"Console Logger With Configuration By Http APIs"}),"\n",(0,r.jsx)(o.p,{children:"Example of application where logger configuration can be changed by Http APIs."}),"\n",(0,r.jsx)(o.p,{children:"Logger configurations APIs:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:"get logger configurations"}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:" curl -u \"admin:admin\" 'http://localhost:8080/example/logger'\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["get ",(0,r.jsx)(o.code,{children:"root"})," logger configuration"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:" curl -u \"admin:admin\" 'http://localhost:8080/example/logger/root'\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["set ",(0,r.jsx)(o.code,{children:"root"})," logger configuration"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:" curl -u \"admin:admin\" --location --request PUT 'http://localhost:8080/example/logger/root' --header 'Content-Type: application/json' --data-raw '\"WARN\"'\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["get ",(0,r.jsx)(o.code,{children:"zio.logging.example"})," logger configuration"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:" curl -u \"admin:admin\" --location --request PUT 'http://localhost:8080/example/logger/zio.logging.example' --header 'Content-Type: application/json' --data-raw '\"WARN\"'\n"})}),"\n",(0,r.jsx)(o.p,{children:"Configuration:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{children:'logger {\n  format = "%highlight{%timestamp{yyyy-MM-dd\'T\'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %kv{trace_id} %kv{user_id} %cause}"\n  filter {\n    rootLevel = "INFO"\n    mappings {\n      "zio.logging.example" = "DEBUG"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(o.p,{children:"Application:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-scala",children:'package zio.logging.example\n\nimport com.typesafe.config.ConfigFactory\nimport zio.config.typesafe.TypesafeConfigProvider\nimport zio.http._\nimport zio.logging.api.http.ApiHandlers\nimport zio.logging.{ ConfigurableLogger, ConsoleLoggerConfig, LogAnnotation, LoggerConfigurer, makeConsoleLogger }\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject ConfigurableLoggerApp extends ZIOAppDefault {\n\n  def configurableLogger() =\n    ConsoleLoggerConfig\n      .load()\n      .flatMap { config =>\n        makeConsoleLogger(config).map { logger =>\n          ConfigurableLogger.make(logger, config.filter)\n        }\n      }\n      .install\n\n  val configProvider: ConfigProvider = TypesafeConfigProvider.fromTypesafeConfig(ConfigFactory.load("logger.conf"))\n\n  override val bootstrap: ZLayer[Any, Config.Error, Unit] =\n    Runtime.removeDefaultLoggers >>> Runtime.setConfigProvider(configProvider) >>> configurableLogger()\n\n  def exec(): ZIO[Any, Nothing, Unit] =\n    for {\n      ok      <- Random.nextBoolean\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.logDebug("Start") @@ LogAnnotation.TraceId(traceId)\n      userIds <- ZIO.succeed(List.fill(2)(UUID.randomUUID().toString))\n      _       <- ZIO.foreachPar(userIds) { userId =>\n        {\n          ZIO.logDebug("Starting operation") *>\n            ZIO.logInfo("OK operation").when(ok) *>\n            ZIO.logError("Error operation").when(!ok) *>\n            ZIO.logDebug("Stopping operation")\n        } @@ LogAnnotation.UserId(userId)\n      } @@ LogAnnotation.TraceId(traceId)\n      _       <- ZIO.logDebug("Done") @@ LogAnnotation.TraceId(traceId)\n    } yield ()\n\n  val httpApp: Routes[LoggerConfigurer with Any, Nothing] =\n    ApiHandlers.routes("example" :: Nil) @@ Middleware.basicAuth("admin", "admin")\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _ <- Server.serve(httpApp).fork\n      _ <- exec().repeat(Schedule.fixed(500.millis))\n    } yield ExitCode.success).provide(LoggerConfigurer.layer ++ Server.default)\n\n}\n'})}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"NOTE:"})," ",(0,r.jsx)(o.code,{children:"ConfigurableLogger"})," and ",(0,r.jsx)(o.code,{children:"ApiHandlers"})," are currently implemented in examples,\nit will be considered in the future, if they will be moved to official ",(0,r.jsx)(o.code,{children:"zio-logging"})," implementation\n(once there will be official stable ",(0,r.jsx)(o.code,{children:"zio-http"})," release).\nIf you like to use them in your app, you can copy them."]}),"\n",(0,r.jsxs)(o.p,{children:["When configuration for ",(0,r.jsx)(o.code,{children:"logger/filter/mappings/zio.logging.example"})," change from ",(0,r.jsx)(o.code,{children:"DEBUG"})," to ",(0,r.jsx)(o.code,{children:"WARN"}),":"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"curl -u \"admin:admin\" --location --request PUT 'http://localhost:8080/example/logger/zio.logging.example' --header 'Content-Type: application/json' --data-raw '\"WARN\"'\n"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{children:"2023-12-26T10:49:27+0100 DEBUG   [zio-fiber-73] zio.logging.example.ConfigurableLoggerApp:62 Starting operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=5d35778f-78ff-48a8-aa6a-73114ec719b5 \n2023-12-26T10:49:27+0100 DEBUG   [zio-fiber-72] zio.logging.example.ConfigurableLoggerApp:62 Starting operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=9e17bd97-aa18-4b09-a423-9de28241a20b \n2023-12-26T10:49:27+0100 INFO    [zio-fiber-73] zio.logging.example.ConfigurableLoggerApp:63 OK operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=5d35778f-78ff-48a8-aa6a-73114ec719b5 \n2023-12-26T10:49:27+0100 INFO    [zio-fiber-72] zio.logging.example.ConfigurableLoggerApp:63 OK operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=9e17bd97-aa18-4b09-a423-9de28241a20b \n2023-12-26T10:49:27+0100 DEBUG   [zio-fiber-73] zio.logging.example.ConfigurableLoggerApp:65 Stopping operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=5d35778f-78ff-48a8-aa6a-73114ec719b5 \n2023-12-26T10:49:27+0100 DEBUG   [zio-fiber-72] zio.logging.example.ConfigurableLoggerApp:65 Stopping operation trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045 user_id=9e17bd97-aa18-4b09-a423-9de28241a20b \n2023-12-26T10:49:27+0100 DEBUG   [zio-fiber-4] zio.logging.example.ConfigurableLoggerApp:68 Done trace_id=dcf30228-dc00-4c1f-ab94-20c9f8116045  \n2023-12-26T10:49:28+0100 ERROR   [zio-fiber-77] zio.logging.example.ConfigurableLoggerApp:64 Error operation trace_id=7da8765e-2e27-42c6-8834-16d15d21c72c user_id=4395d188-5971-4839-a721-278d07a2881b \n2023-12-26T10:49:28+0100 ERROR   [zio-fiber-78] zio.logging.example.ConfigurableLoggerApp:64 Error operation trace_id=7da8765e-2e27-42c6-8834-16d15d21c72c user_id=27af6873-2f7b-4b9a-ad2b-6bd12479cace  \n"})})]})}function s(e={}){const{wrapper:o}={...(0,g.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>l});var i=n(96540);const r={},g=i.createContext(r);function a(e){const o=i.useContext(g);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(g.Provider,{value:o},e.children)}}}]);