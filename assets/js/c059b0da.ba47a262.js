"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[69675],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(96540);const d={},s=t.createContext(d);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},56257:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"reference/sync/concurrentmap","title":"ConcurrentMap","description":"A ConcurrentMap is a wrapper over java.util.concurrent.ConcurrentHashMap.","source":"@site/versioned_docs/version-1.0.18/reference/sync/concurrentmap.md","sourceDirName":"reference/sync","slug":"/reference/sync/concurrentmap","permalink":"/1.0.18/reference/sync/concurrentmap","draft":false,"unlisted":false,"editUrl":"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/sync/concurrentmap.md","tags":[],"version":"1.0.18","frontMatter":{"id":"concurrentmap","title":"ConcurrentMap"}}');var d=r(74848),s=r(28453);const i={id:"concurrentmap",title:"ConcurrentMap"},c=void 0,l={},o=[{value:"Operations",id:"operations",level:2},{value:"Creation",id:"creation",level:3},{value:"Use",id:"use",level:3},{value:"Example Usage",id:"example-usage",level:2}];function h(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.p,{children:["A ",(0,d.jsx)(n.code,{children:"ConcurrentMap"})," is a wrapper over ",(0,d.jsx)(n.code,{children:"java.util.concurrent.ConcurrentHashMap"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,d.jsx)(n.h3,{id:"creation",children:"Creation"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Method"}),(0,d.jsx)(n.th,{children:"Definition"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"empty[K, V]: UIO[ConcurrentMap[K, V]]"})}),(0,d.jsxs)(n.td,{children:["Makes an empty ",(0,d.jsx)(n.code,{children:"ConcurrentMap"})]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"fromIterable[K, V](pairs: Iterable[(K, V)]): UIO[ConcurrentMap[K, V]]"})}),(0,d.jsxs)(n.td,{children:["Makes a new ",(0,d.jsx)(n.code,{children:"ConcurrentMap"})," initialized with the provided collection of key-value pairs"]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"make[K, V](pairs: (K, V)*): UIO[ConcurrentMap[K, V]]"})}),(0,d.jsxs)(n.td,{children:["Makes a new ",(0,d.jsx)(n.code,{children:"ConcurrentMap"})," initialized with the provided key-value pairs"]})]})]})]}),"\n",(0,d.jsx)(n.h3,{id:"use",children:"Use"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Method"}),(0,d.jsx)(n.th,{children:"Definition"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"collectFirst[B](pf: PartialFunction[(K, V), B]): UIO[Option[B]]"})}),(0,d.jsx)(n.td,{children:"Finds the first element of a map for which the partial function is defined and applies the function to it."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"compute(key: K, remap: (K, V) => V): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Attempts to compute a mapping for the given key and its current mapped value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"def computeIfAbsent(key: K, map: K => V): UIO[V]"})}),(0,d.jsx)(n.td,{children:"Computes a value of a non-existing key."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"computeIfPresent(key: K, remap: (K, V) => V): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Attempts to compute a new mapping of an existing key."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"exists(p: (K, V) => Boolean): UIO[Boolean]"})}),(0,d.jsx)(n.td,{children:"Tests whether a given predicate holds true for at least one element in a map."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"fold[S](zero: S)(f: (S, (K, V)) => S): UIO[S]"})}),(0,d.jsx)(n.td,{children:"Folds the elements of a map using the given binary operator."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"forall(p: (K, V) => Boolean): UIO[Boolean]"})}),(0,d.jsx)(n.td,{children:"Tests whether a predicate is satisfied by all elements of a map."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"get(key: K): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Retrieves the value associated with the given key."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"put(key: K, value: V): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Adds a new key-value pair and optionally returns previously bound value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"putAll(keyValues: (K, V)*): UIO[Unit]"})}),(0,d.jsx)(n.td,{children:"Adds all new key-value pairs."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"putIfAbsent(key: K, value: V): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Adds a new key-value pair, unless the key is already bound to some other value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"remove(key: K): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Removes the entry for the given key, optionally returning value associated with it."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"remove(key: K, value: V): UIO[Boolean]"})}),(0,d.jsx)(n.td,{children:"Removes the entry for the given key if it is mapped to a given value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"removeIf(p: (K, V) => Boolean): UIO[Unit]"})}),(0,d.jsx)(n.td,{children:"Removes all elements which do not satisfy the given predicate."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"retainIf(p: (K, V) => Boolean): UIO[Unit]"})}),(0,d.jsx)(n.td,{children:"Removes all elements which do not satisfy the given predicate."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"replace(key: K, value: V): UIO[Option[V]]"})}),(0,d.jsx)(n.td,{children:"Replaces the entry for the given key only if it is mapped to some value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"replace(key: K, oldValue: V, newValue: V): UIO[Boolean]"})}),(0,d.jsx)(n.td,{children:"Replaces the entry for the given key only if it was previously mapped to a given value."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"toChunk: UIO[Chunk[(K, V)]]"})}),(0,d.jsx)(n.td,{children:"Collects all entries into a chunk."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"toList: UIO[List[(K, V)]]"})}),(0,d.jsx)(n.td,{children:"Collects all entries into a list."})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,d.jsx)(n.p,{children:"Given:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-scala",children:'import zio.concurrent.ConcurrentMap\nimport zio.{Chunk, UIO}\n\nfor {\n  emptyMap <- ConcurrentMap.empty[Int, String]\n  data     <- UIO(Chunk(1 -> "A", 2 -> "B", 3 -> "C"))\n  mapA     <- ConcurrentMap.fromIterable(data)\n  map100   <- ConcurrentMap.make(1 -> 100)\n  mapB     <- ConcurrentMap.make(("A", 1), ("B", 2), ("C", 3))\n} yield ()\n'})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Operation"}),(0,d.jsx)(n.th,{children:"Result"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'mapA.collectFirst { case (3, _) => "Three" }'})}),(0,d.jsx)(n.td,{children:'"Three"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'mapA.collectFirst { case (4, _) => "Four" }'})}),(0,d.jsx)(n.td,{children:"Empty"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"map100.compute(1, _+_).get(1)"})}),(0,d.jsx)(n.td,{children:"101"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'emptyMap.computeIfAbsent("abc", _.length).get("abc")'})}),(0,d.jsx)(n.td,{children:"3"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"map100.computeIfPresent(1, _+_).get(1)"})}),(0,d.jsx)(n.td,{children:"101"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.exists((k, _) => k % 2 == 0)"})}),(0,d.jsx)(n.td,{children:"true"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.exists((k, _) => k == 4)"})}),(0,d.jsx)(n.td,{children:"false"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapB.fold(0) { case (acc, (_, value)) => acc + value }"})}),(0,d.jsx)(n.td,{children:"6"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapB.forall((_, v) => v < 4)"})}),(0,d.jsx)(n.td,{children:"true"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"emptyMap.get(1)"})}),(0,d.jsx)(n.td,{children:"None"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'emptyMap.put(1, "b").get(1)'})}),(0,d.jsx)(n.td,{children:'"b"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'mapA.putIfAbsent(2, "b").get(2)'})}),(0,d.jsx)(n.td,{children:'"B"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'emptyMap.putAll((1, "A"), (2, "B"), (3, "C")).get(1)'})}),(0,d.jsx)(n.td,{children:'"A"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.remove(1).get(1)"})}),(0,d.jsx)(n.td,{children:"None"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'mapA.remove(1,"b").get(1)'})}),(0,d.jsx)(n.td,{children:'"A"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.removeIf((k, _) => k != 1).get(1)"})}),(0,d.jsx)(n.td,{children:'"A"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.removeIf((k, _) => k != 1).get(2)"})}),(0,d.jsx)(n.td,{children:"None"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.retainIf((k, _) => k == 1).get(1)"})}),(0,d.jsx)(n.td,{children:'"A"'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"mapA.retainIf((k, _) => k == 1).get(2)"})}),(0,d.jsx)(n.td,{children:"None"})]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}}}]);